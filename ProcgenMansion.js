// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = ["lime","_internal","backend","html5","HTML5Application"];
lime__$internal_backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g2 = 0;
			var _g11 = this.parent.__windows;
			while(_g2 < _g11.length) {
				var window1 = _g11[_g2];
				++_g2;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				break;
			case "blur":
				this.parent.__window.onFocusOut.dispatch();
				this.parent.__window.onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.__window.onFocusIn.dispatch();
				this.parent.__window.onActivate.dispatch();
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function(window) {
		if(window != null) {
			this.__windows.push(window);
			this.__windowByID.h[window.id] = window;
			var f = $bind(this,this.__onWindowClose);
			var a1 = window;
			var tmp = function() {
				f(a1);
			};
			window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = window;
				window.onActivate.add($bind(this,this.onWindowActivate));
				window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				window.onDropFile.add($bind(this,this.onWindowDropFile));
				window.onEnter.add($bind(this,this.onWindowEnter));
				window.onExpose.add($bind(this,this.onWindowExpose));
				window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				window.onKeyDown.add($bind(this,this.onKeyDown));
				window.onKeyUp.add($bind(this,this.onKeyUp));
				window.onLeave.add($bind(this,this.onWindowLeave));
				window.onMinimize.add($bind(this,this.onWindowMinimize));
				window.onMouseDown.add($bind(this,this.onMouseDown));
				window.onMouseMove.add($bind(this,this.onMouseMove));
				window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				window.onMouseUp.add($bind(this,this.onMouseUp));
				window.onMouseWheel.add($bind(this,this.onMouseWheel));
				window.onMove.add($bind(this,this.onWindowMove));
				window.onRender.add($bind(this,this.render));
				window.onResize.add($bind(this,this.onWindowResize));
				window.onRestore.add($bind(this,this.onWindowRestore));
				window.onTextEdit.add($bind(this,this.onTextEdit));
				window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch(window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function(window) {
		if(window != null && this.__windowByID.h.hasOwnProperty(window.id)) {
			if(this.__window == window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,window);
			this.__windowByID.remove(window.id);
			window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function(window) {
		if(this.__window == window) {
			this.onWindowClose();
		}
		this.__removeWindow(window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("ProcgenMansion",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	var _this = app.meta;
	if(__map_reserved["build"] != null) {
		_this.setReserved("build","1464");
	} else {
		_this.h["build"] = "1464";
	}
	var _this1 = app.meta;
	if(__map_reserved["company"] != null) {
		_this1.setReserved("company","Retronic Games");
	} else {
		_this1.h["company"] = "Retronic Games";
	}
	var _this2 = app.meta;
	if(__map_reserved["file"] != null) {
		_this2.setReserved("file","ProcgenMansion");
	} else {
		_this2.h["file"] = "ProcgenMansion";
	}
	var _this3 = app.meta;
	if(__map_reserved["name"] != null) {
		_this3.setReserved("name","Procgen Mansion");
	} else {
		_this3.h["name"] = "Procgen Mansion";
	}
	var _this4 = app.meta;
	if(__map_reserved["packageName"] != null) {
		_this4.setReserved("packageName","com.watabou.wintermansion");
	} else {
		_this4.h["packageName"] = "com.watabou.wintermansion";
	}
	var _this5 = app.meta;
	if(__map_reserved["version"] != null) {
		_this5.setReserved("version","2.0.0");
	} else {
		_this5.h["version"] = "2.0.0";
	}
	var attributes = { allowHighDPI : true, alwaysOnTop : false, borderless : false, element : null, frameRate : 120, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Procgen Mansion", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 4, background : 2236962, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : true};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var a1 = (js_Boot.__cast(app.__window , openfl_display_Window)).stage;
	var tmp = function() {
		ApplicationMain.start(a1);
	};
	preloader.onComplete.add(tmp);
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraries;
	while(_g2 < _g11.length) {
		var library = _g11[_g2];
		++_g2;
		app.__preloader.addLibrary(library);
	}
	var _g3 = 0;
	var _g12 = ManifestResources.preloadLibraryNames;
	while(_g3 < _g12.length) {
		var name = _g12[_g3];
		++_g3;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		var current = stage.getChildAt(0);
		if(current == null || !js_Boot.__instanceof(current,openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
			var _this2 = this.__iterators;
			var value = [iterator];
			if(__map_reserved[type] != null) {
				_this2.setReserved(type,value);
			} else {
				_this2.h[type] = value;
			}
		} else {
			var _this3 = this.__eventMap;
			var list1 = __map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type];
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var _this4 = this.__iterators;
			var iterators = __map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type];
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var _this = this.__eventMap;
		if(__map_reserved[type] != null) {
			return _this.existsReserved(type);
		} else {
			return _this.h.hasOwnProperty(type);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		var _this2 = this.__eventMap;
		if(!new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys()).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var _this1 = this.__iterators;
		var iterators = __map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderDOM: null
	,__renderGL: null
	,__renderGLMask: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.ofArray_away3d_core_base_Geometry = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_away3d_lights_LightBase = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_String = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_UInt = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_openfl_geom_Vector3D = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_Int = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.ofArray_Float = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	return this1.concat(a);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	return this1.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	return this1.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.push(x);
};
openfl__$Vector_Vector_$Impl_$.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	return this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this1 = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this1.b + mouseEvent.localY * _this1.d + _this1.ty;
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this2 = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this2.a + touchEvent.localY * _this2.c + _this2.tx;
			var _this3 = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this3.b + touchEvent.localY * _this3.d + _this3.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) {
					var j = _g1++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this1 = this.__renderTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			local.x = norm1 == 0 ? -_this1.tx : 1.0 / norm1 * (_this1.c * (_this1.ty - global.y) + _this1.d * (global.x - _this1.tx));
			var _this2 = this.__renderTransform;
			var norm2 = _this2.a * _this2.d - _this2.b * _this2.c;
			local.y = norm2 == 0 ? -_this2.ty : 1.0 / norm2 * (_this2.a * (global.y - _this2.ty) + _this2.b * (_this2.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable)) {
					var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
					if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						var context = renderer.context;
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap,false);
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = alpha;
						var scrollRect = bitmap.__scrollRect;
						renderer.setTransform(bitmap.__renderTransform,context);
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer.__popMaskObject(bitmap,false);
					}
				}
			} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable)) {
					var alpha1 = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha1 <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context1 = renderer.context;
							renderer.setTransform(this.__renderTransform,context1);
							var color = this.opaqueBackground;
							context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context1.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(!(!this.__renderable)) {
								var alpha2 = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha2 <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var bounds = graphics.__bounds;
										var width = graphics.__width;
										var height = graphics.__height;
										if(graphics.__canvas != null) {
											var context2 = renderer.context;
											var scrollRect1 = this.__scrollRect;
											if(width > 0 && height > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context2.globalAlpha = alpha2;
												renderer.setTransform(graphics.__worldTransform,context2);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context2.scale(reverseScale,reverseScale);
												}
												context2.drawImage(graphics.__canvas,0,0,width,height);
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderer);
	}
	,__renderEvent: function(renderer) {
		if(this.__customRenderEvent != null && this.__renderable) {
			this.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			this.__customRenderEvent.objectMatrix.copyFrom(this.__renderTransform);
			this.__customRenderEvent.objectColorTransform.__copyFrom(this.__worldColorTransform);
			this.__customRenderEvent.renderer = renderer;
			var _g = renderer.__type;
			switch(_g) {
			case "cairo":
				this.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				this.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(this.stage != null && this.__worldVisible) {
					this.__customRenderEvent.type = "renderDOM";
				} else {
					this.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(this.__worldShader);
				renderer1.__context3D.__flushGL();
				this.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(this.__worldBlendMode);
			renderer.__pushMaskObject(this);
			this.dispatchEvent(this.__customRenderEvent);
			renderer.__popMaskObject(this);
			if(renderer.__type == "opengl") {
				var renderer2 = renderer;
				renderer2.setViewport();
			}
		}
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else if(!(this.opaqueBackground == null && this.__graphics == null)) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,this.get_width(),this.get_height());
					renderer.__pushMaskRect(rect,this.__renderTransform);
					var color = this.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(this);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(this.__graphics != null) {
					openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__shouldCacheHardware: function(value) {
		if(value == true || this.__filters != null) {
			return true;
		}
		if(value == false || this.__graphics != null && !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(this.__graphics)) {
			return false;
		}
		return null;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
				} else {
					this.__worldColorTransform.__identity();
				}
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(this.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(this.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || renderer.__type != "opengl" && !this.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var updateTransform = needRender || !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(this.__cacheBitmapMatrix == null) {
				this.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = this.__cacheAsBitmapMatrix != null ? this.__cacheAsBitmapMatrix : this.__renderTransform;
			if(!needRender && (bitmapMatrix.a != this.__cacheBitmapMatrix.a || bitmapMatrix.b != this.__cacheBitmapMatrix.b || bitmapMatrix.c != this.__cacheBitmapMatrix.c || bitmapMatrix.d != this.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && this.__cacheBitmapData != null && this.__cacheBitmapData.image != null && this.__cacheBitmapData.image.version < this.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			this.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			this.__cacheBitmapMatrix.tx = 0;
			this.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				this.__getFilterBounds(rect,this.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				if(rect.x > 0) {
					offsetX = Math.ceil(rect.x);
				} else {
					offsetX = Math.floor(rect.x);
				}
				if(rect.y > 0) {
					offsetY = Math.ceil(rect.y);
				} else {
					offsetY = Math.floor(rect.y);
				}
				if(this.__cacheBitmapData != null) {
					if(filterWidth > this.__cacheBitmapData.width || filterHeight > this.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,this.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,this.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = this.__cacheBitmapData.width;
						bitmapHeight = this.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				this.__cacheBitmapBackground = this.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = this.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(this.__cacheBitmapData == null || bitmapWidth > this.__cacheBitmapData.width || bitmapHeight > this.__cacheBitmapData.height) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						this.__cacheBitmapRenderer = null;
					} else {
						this.__cacheBitmapData.__fillRect(this.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						this.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					this.__cacheBitmapData2 = null;
					this.__cacheBitmapData3 = null;
					this.__cacheBitmapRenderer = null;
					return true;
				}
			} else {
				this.__cacheBitmapData = this.__cacheBitmap.get_bitmapData();
				this.__cacheBitmapData2 = null;
				this.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				if(bitmapMatrix == this.__renderTransform) {
					this.__cacheBitmap.__renderTransform.identity();
					this.__cacheBitmap.__renderTransform.tx = this.__renderTransform.tx + offsetX;
					this.__cacheBitmap.__renderTransform.ty = this.__renderTransform.ty + offsetY;
				} else {
					this.__cacheBitmap.__renderTransform.copyFrom(this.__cacheBitmapMatrix);
					this.__cacheBitmap.__renderTransform.invert();
					this.__cacheBitmap.__renderTransform.concat(this.__renderTransform);
					this.__cacheBitmap.__renderTransform.tx += offsetX;
					this.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			this.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__worldShader = this.__worldShader;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				var renderType = renderer.__type;
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(null) == false) {
						renderType = "canvas";
					}
				}
				if(this.__cacheBitmapRenderer == null || renderType != this.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						this.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,this.__cacheBitmapData);
					} else {
						if(this.__cacheBitmapData.image == null) {
							var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
							this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__cacheBitmapData.image);
						this.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(this.__cacheBitmapData.image.buffer.__srcContext);
					}
					this.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					this.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapRenderer.__stage = this.stage;
				this.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				this.__cacheBitmapRenderer.__setBlendMode(10);
				this.__cacheBitmapRenderer.__worldAlpha = 1 / this.__worldAlpha;
				this.__cacheBitmapRenderer.__worldTransform.copyFrom(this.__renderTransform);
				this.__cacheBitmapRenderer.__worldTransform.invert();
				this.__cacheBitmapRenderer.__worldTransform.concat(this.__cacheBitmapMatrix);
				this.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				this.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				this.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				this.__cacheBitmapRenderer.__worldColorTransform.__invert();
				this.__isCacheBitmapRender = true;
				if(this.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = this.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					this.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(this.__cacheBitmapData);
					if(this.__cacheBitmapData.image != null) {
						this.__cacheBitmapData.__textureVersion = this.__cacheBitmapData.image.version + 1;
					}
					this.__cacheBitmapData.__drawGL(this,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g2 = 0;
						var _g11 = this.__filters;
						while(_g2 < _g11.length) {
							var filter1 = _g11[_g2];
							++_g2;
							if(filter1.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = this.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(this.__cacheBitmapData2 == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
							this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							if(this.__cacheBitmapData2.image != null) {
								this.__cacheBitmapData2.__textureVersion = this.__cacheBitmapData2.image.version + 1;
							}
						}
						this.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = this.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(this.__cacheBitmapData3 == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
								if(this.__cacheBitmapData3.image != null) {
									this.__cacheBitmapData3.__textureVersion = this.__cacheBitmapData3.image.version + 1;
								}
							}
							this.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = this.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g3 = 0;
						var _g12 = this.__filters;
						while(_g3 < _g12.length) {
							var filter2 = _g12[_g3];
							++_g3;
							if(filter2.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter2.__smooth);
							}
							var _g31 = 0;
							var _g21 = filter2.__numShaderPasses;
							while(_g31 < _g21) {
								var i = _g31++;
								shader = filter2.__initShader(childRenderer,i);
								childRenderer.__setBlendMode(filter2.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter2.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							if(filter2.__preserveObject) {
								childRenderer.__setBlendMode(10);
								childRenderer.__setRenderTarget(bitmap);
								childRenderer.__renderFilterPass(bitmap3,childRenderer.__defaultDisplayShader,filter2.__smooth,false);
							}
							filter2.__renderDirty = false;
						}
						this.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					this.__cacheBitmapData.__drawCanvas(this,this.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData1 = false;
						var needCopyOfOriginal1 = false;
						var _g4 = 0;
						var _g13 = this.__filters;
						while(_g4 < _g13.length) {
							var filter3 = _g13[_g4];
							++_g4;
							if(filter3.__needSecondBitmapData) {
								needSecondBitmapData1 = true;
							}
							if(filter3.__preserveObject) {
								needCopyOfOriginal1 = true;
							}
						}
						var bitmap1 = this.__cacheBitmapData;
						var bitmap21 = null;
						var bitmap31 = null;
						if(needSecondBitmapData1) {
							if(this.__cacheBitmapData2 == null || this.__cacheBitmapData2.image == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
								this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							}
							bitmap21 = this.__cacheBitmapData2;
						} else {
							bitmap21 = bitmap1;
						}
						if(needCopyOfOriginal1) {
							if(this.__cacheBitmapData3 == null || this.__cacheBitmapData3.image == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
							}
							bitmap31 = this.__cacheBitmapData3;
						}
						if(this.__tempPoint == null) {
							this.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = this.__tempPoint;
						var cacheBitmap1;
						var lastBitmap;
						var _g5 = 0;
						var _g14 = this.__filters;
						while(_g5 < _g14.length) {
							var filter4 = _g14[_g5];
							++_g5;
							if(filter4.__preserveObject) {
								bitmap31.copyPixels(bitmap1,bitmap1.rect,destPoint);
							}
							lastBitmap = filter4.__applyFilter(bitmap21,bitmap1,bitmap1.rect,destPoint);
							if(filter4.__preserveObject) {
								lastBitmap.draw(bitmap31,null,this.__objectTransform != null ? this.__objectTransform.get_colorTransform() : null);
							}
							filter4.__renderDirty = false;
							if(needSecondBitmapData1 && lastBitmap == bitmap21) {
								cacheBitmap1 = bitmap1;
								bitmap1 = bitmap21;
								bitmap21 = cacheBitmap1;
							}
						}
						if(this.__cacheBitmapData != bitmap1) {
							cacheBitmap1 = this.__cacheBitmapData;
							this.__cacheBitmapData = bitmap1;
							this.__cacheBitmapData2 = cacheBitmap1;
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
							this.__cacheBitmapRenderer = null;
						}
						this.__cacheBitmap.__imageVersion = this.__cacheBitmapData.__textureVersion;
					}
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!this.__cacheBitmapColorTransform.__isDefault(true)) {
						this.__cacheBitmapColorTransform.alphaMultiplier = 1;
						this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
					}
				}
				this.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(this.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				this.__cacheBitmap.__renderDOMClear(renderer);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapData2 = null;
			this.__cacheBitmapData3 = null;
			this.__cacheBitmapColorTransform = null;
			this.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		return updated;
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform1 = renderParent.__renderTransform;
			var target1 = this.__renderTransform;
			target1.a = local.a * parentTransform1.a + local.b * parentTransform1.c;
			target1.b = local.a * parentTransform1.b + local.b * parentTransform1.d;
			target1.c = local.c * parentTransform1.a + local.d * parentTransform1.c;
			target1.d = local.c * parentTransform1.b + local.d * parentTransform1.d;
			target1.tx = local.tx * parentTransform1.a + local.ty * parentTransform1.c + parentTransform1.tx;
			target1.ty = local.tx * parentTransform1.b + local.ty * parentTransform1.d + parentTransform1.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			this.__setTransformDirty();
			if(openfl_display_DisplayObject.__supportDOM) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		}
		return this.__scrollRect = value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.get_colorTransform().__equals(value.get_colorTransform(),true)) {
			this.__objectTransform.get_colorTransform().__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 1185, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw new js__$Boot_HaxeError(new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value));
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getFilterBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest1 = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest1 = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest1;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				child.__renderCanvas(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g3 = 0;
			var _g12 = this.__children;
			while(_g3 < _g12.length) {
				var child1 = _g12[_g3];
				++_g3;
				child1.__renderCanvas(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderCanvasMask: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
		var _g2 = 0;
		var _g11 = this.__children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			child.__renderCanvasMask(renderer);
		}
	}
	,__renderDOM: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child = _g11[_g2];
				++_g2;
				child.__renderDOM(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g3 = 0;
			var _g12 = this.__children;
			while(_g3 < _g12.length) {
				var child1 = _g12[_g3];
				++_g3;
				child1.__renderDOM(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderDOMClear: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		var _g2 = 0;
		var _g11 = this.__children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			child.__renderDOMClear(renderer);
		}
	}
	,__renderGL: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderer.__pushMaskObject(this);
			if(renderer.__stage != null) {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child = _g11[_g2];
					++_g2;
					child.__renderGL(renderer);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g3 = 0;
				var _g12 = this.__children;
				while(_g3 < _g12.length) {
					var child1 = _g12[_g3];
					++_g3;
					child1.__renderGL(renderer);
				}
			}
		}
		if(this.__children.length > 0) {
			renderer.__popMaskObject(this);
		}
	}
	,__renderGLMask: function(renderer) {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
		var _g2 = 0;
		var _g11 = this.__children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			child.__renderGLMask(renderer);
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		}
		value = openfl_display_InteractiveObject.prototype.__shouldCacheHardware.call(this,value);
		if(value == true) {
			return true;
		}
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				value = child.__shouldCacheHardware(value);
				if(value == true) {
					return true;
				}
			}
		}
		return value;
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
});
var com_watabou_coogee_Game = function(initScene) {
	com_watabou_coogee_Game.instance = this;
	openfl_display_Sprite.call(this);
	this.prepareStage();
	com_watabou_utils_Updater.useEnterFrame(this);
	com_watabou_coogee_Game.switchScene(initScene);
};
$hxClasses["com.watabou.coogee.Game"] = com_watabou_coogee_Game;
com_watabou_coogee_Game.__name__ = ["com","watabou","coogee","Game"];
com_watabou_coogee_Game.getStage = function() {
	return com_watabou_coogee_Game.instance.stage;
};
com_watabou_coogee_Game.switchScene = function(scClass) {
	com_watabou_coogee_Game.instance.switchSceneImp(scClass);
};
com_watabou_coogee_Game.quit = function() {
	openfl_system_System.exit(0);
};
com_watabou_coogee_Game.__super__ = openfl_display_Sprite;
com_watabou_coogee_Game.prototype = $extend(openfl_display_Sprite.prototype,{
	prepareStage: function() {
		var _gthis = this;
		this.stage.align = 6;
		this.stage.set_scaleMode(2);
		this.stage.addEventListener("resize",function(e) {
			_gthis.layout();
		});
		this.stage.application.onExit.add($bind(this,this.onExit));
		this.stage.application.__window.onActivate.add($bind(this,this.onResume));
		this.stage.application.__window.onDeactivate.add($bind(this,this.onPause));
	}
	,onExit: function(code) {
		com_watabou_utils_Updater.stop();
	}
	,onResume: function() {
	}
	,onPause: function() {
	}
	,layout: function() {
		if(com_watabou_coogee_Game.scene != null) {
			var w = this.stage.stageWidth;
			var h = this.stage.stageHeight;
			var scale = this.getScale(w,h);
			com_watabou_coogee_Game.scene.set_scaleX(com_watabou_coogee_Game.scene.set_scaleY(scale));
			com_watabou_coogee_Game.scene.setSize(w / scale,h / scale);
		}
	}
	,getScale: function(w,h) {
		return 1;
	}
	,switchSceneImp: function(scClass) {
		if(com_watabou_coogee_Game.scene != null) {
			com_watabou_coogee_Game.scene.deactivate();
			this.removeChild(com_watabou_coogee_Game.scene);
			com_watabou_coogee_Game.scene = null;
		}
		if(scClass != null) {
			com_watabou_coogee_Game.scene = Type.createInstance(scClass,[]);
			this.addChild(com_watabou_coogee_Game.scene);
			this.layout();
			com_watabou_coogee_Game.scene.activate();
		}
		this.stage.set_focus(this.stage);
	}
	,__class__: com_watabou_coogee_Game
});
var com_watabou_wintermansion_Main = function() {
	com_watabou_utils_Random.reset(-1);
	com_watabou_coogee_Game.call(this,com_watabou_wintermansion_scenes_ViewScene);
};
$hxClasses["com.watabou.wintermansion.Main"] = com_watabou_wintermansion_Main;
com_watabou_wintermansion_Main.__name__ = ["com","watabou","wintermansion","Main"];
com_watabou_wintermansion_Main.__super__ = com_watabou_coogee_Game;
com_watabou_wintermansion_Main.prototype = $extend(com_watabou_coogee_Game.prototype,{
	__class__: com_watabou_wintermansion_Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	com_watabou_wintermansion_Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = com_watabou_wintermansion_Main;
DocumentClass.prototype = $extend(com_watabou_wintermansion_Main.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = ManifestResources.rootPath;
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"aoy4:pathy21:Assets%2Fvignette.pngy4:sizei122186y4:typey5:IMAGEy2:idy8:vignettey7:preloadtgoR0y18:Assets%2Fsmoke.pngR2i19148R3R4R5y5:smokeR7tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var away3d_Away3D = function() { };
$hxClasses["away3d.Away3D"] = away3d_Away3D;
away3d_Away3D.__name__ = ["away3d","Away3D"];
var away3d_library_assets_NamedAssetBase = function(name) {
	if(name == null) {
		name = "null";
	}
	this._name = name;
	this._originalName = name;
	this.updateFullPath();
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["away3d.library.assets.NamedAssetBase"] = away3d_library_assets_NamedAssetBase;
away3d_library_assets_NamedAssetBase.__name__ = ["away3d","library","assets","NamedAssetBase"];
away3d_library_assets_NamedAssetBase.__super__ = openfl_events_EventDispatcher;
away3d_library_assets_NamedAssetBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_originalName: null
	,_namespace: null
	,_name: null
	,_id: null
	,_full_path: null
	,get_originalName: function() {
		return this._originalName;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(newID) {
		this._id = newID;
		return newID;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(val) {
		var prev = this._name;
		this._name = val;
		if(this._name == null) {
			this._name = "null";
		}
		this.updateFullPath();
		if(this.hasEventListener("assetRename")) {
			this.dispatchEvent(new away3d_events_Asset3DEvent("assetRename",js_Boot.__cast(this , away3d_library_assets_IAsset),prev));
		}
		return val;
	}
	,get_assetNamespace: function() {
		return this._namespace;
	}
	,get_assetFullPath: function() {
		return this._full_path;
	}
	,assetPathEquals: function(name,ns) {
		if(this._name == name) {
			if(ns != null) {
				return this._namespace == ns;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,resetAssetPath: function(name,ns,overrideOriginal) {
		if(overrideOriginal == null) {
			overrideOriginal = true;
		}
		this._name = name != null ? name : "null";
		this._namespace = ns != null ? ns : "default";
		if(overrideOriginal) {
			this._originalName = this._name;
		}
		this.updateFullPath();
	}
	,updateFullPath: function() {
		this._full_path = [this._namespace,this._name];
	}
	,__class__: away3d_library_assets_NamedAssetBase
});
var away3d_library_assets_IAsset = function() { };
$hxClasses["away3d.library.assets.IAsset"] = away3d_library_assets_IAsset;
away3d_library_assets_IAsset.__name__ = ["away3d","library","assets","IAsset"];
away3d_library_assets_IAsset.__interfaces__ = [openfl_events_IEventDispatcher];
away3d_library_assets_IAsset.prototype = {
	get_name: null
	,set_name: null
	,get_id: null
	,set_id: null
	,get_assetNamespace: null
	,get_assetType: null
	,get_assetFullPath: null
	,assetPathEquals: null
	,resetAssetPath: null
	,dispose: null
	,__class__: away3d_library_assets_IAsset
};
var away3d_animators_AnimationSetBase = function() {
	this._animationDictionary = new haxe_ds_StringMap();
	this._animationNames = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._animations = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.AnimationSetBase"] = away3d_animators_AnimationSetBase;
away3d_animators_AnimationSetBase.__name__ = ["away3d","animators","AnimationSetBase"];
away3d_animators_AnimationSetBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_animators_AnimationSetBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_animators_AnimationSetBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_usesCPU: null
	,_animations: null
	,_animationNames: null
	,_animationDictionary: null
	,findTempReg: function(exclude,excludeAnother) {
		var i = 0;
		var reg;
		while(true) {
			reg = "vt" + i;
			if(exclude.indexOf(reg,0) == -1 && excludeAnother != reg) {
				return reg;
			}
			++i;
		}
	}
	,get_usesCPU: function() {
		return this._usesCPU;
	}
	,resetGPUCompatibility: function() {
		this._usesCPU = false;
	}
	,cancelGPUCompatibility: function() {
		this._usesCPU = true;
	}
	,get_assetType: function() {
		return "animationSet";
	}
	,get_animations: function() {
		return this._animations;
	}
	,get_animationNames: function() {
		return this._animationNames;
	}
	,hasAnimation: function(name) {
		var _this = this._animationDictionary;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,getAnimation: function(name) {
		var _this = this._animationDictionary;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,addAnimation: function(node) {
		var this1 = this._animationDictionary;
		var key = node.get_name();
		var _this = this1;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError(new away3d_errors_AnimationSetError("root node name '" + node.get_name() + "' already exists in the set"));
		}
		var this2 = this._animationDictionary;
		var k = node.get_name();
		var _this1 = this2;
		if(__map_reserved[k] != null) {
			_this1.setReserved(k,node);
		} else {
			_this1.h[k] = node;
		}
		this._animations.push(node);
		this._animationNames.push(node.get_name());
	}
	,dispose: function() {
	}
	,__class__: away3d_animators_AnimationSetBase
});
var away3d_animators_AnimatorBase = function(animationSet) {
	this.updatePosition = true;
	this._animationStates = new haxe_ds_ObjectMap();
	this._absoluteTime = 0;
	this._owners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._playbackSpeed = 1;
	this._time = 0;
	this._autoUpdate = true;
	this._broadcaster = new openfl_display_Sprite();
	this._animationSet = animationSet;
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.AnimatorBase"] = away3d_animators_AnimatorBase;
away3d_animators_AnimatorBase.__name__ = ["away3d","animators","AnimatorBase"];
away3d_animators_AnimatorBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_animators_AnimatorBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_animators_AnimatorBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_broadcaster: null
	,_isPlaying: null
	,_autoUpdate: null
	,_startEvent: null
	,_stopEvent: null
	,_cycleEvent: null
	,_time: null
	,_playbackSpeed: null
	,_animationSet: null
	,_owners: null
	,_activeNode: null
	,_activeState: null
	,_activeAnimationName: null
	,_absoluteTime: null
	,_animationStates: null
	,updatePosition: null
	,getAnimationState: function(node) {
		var stateConstructor = node.get_stateConstructor();
		if(this._animationStates.h.__keys__[node.__id__] == null) {
			this._animationStates.set(node,stateConstructor(js_Boot.__cast(this , away3d_animators_IAnimator),node));
		}
		return this._animationStates.h[node.__id__];
	}
	,getAnimationStateByName: function(name) {
		return this.getAnimationState(this._animationSet.getAnimation(name));
	}
	,get_absoluteTime: function() {
		return this._absoluteTime;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,get_activeState: function() {
		return this._activeState;
	}
	,get_activeAnimation: function() {
		return this._animationSet.getAnimation(this._activeAnimationName);
	}
	,get_activeAnimationName: function() {
		return this._activeAnimationName;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(value) {
		if(this._autoUpdate == value) {
			return value;
		}
		this._autoUpdate = value;
		if(this._autoUpdate) {
			this.start();
		} else {
			this.stop();
		}
		return value;
	}
	,get_time: function() {
		return this._time;
	}
	,set_time: function(value) {
		if(this._time == value) {
			return value;
		}
		this.update(value);
		return value;
	}
	,phase: function(value) {
		this._activeState.phase(value);
	}
	,get_playbackSpeed: function() {
		return this._playbackSpeed;
	}
	,set_playbackSpeed: function(value) {
		this._playbackSpeed = value;
		return value;
	}
	,start: function() {
		if(this._isPlaying || !this._autoUpdate) {
			return;
		}
		this._time = this._absoluteTime = openfl_Lib.getTimer();
		this._isPlaying = true;
		if(!this._broadcaster.hasEventListener("enterFrame")) {
			this._broadcaster.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		}
		if(!this.hasEventListener("start")) {
			return;
		}
		if(this._startEvent == null) {
			this._startEvent = new away3d_events_AnimatorEvent("start",this);
		}
		this.dispatchEvent(this._startEvent);
	}
	,stop: function() {
		if(!this._isPlaying) {
			return;
		}
		this._isPlaying = false;
		if(this._broadcaster.hasEventListener("enterFrame")) {
			this._broadcaster.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		}
		if(!this.hasEventListener("stop")) {
			return;
		}
		if(this._stopEvent == null) {
			this._startEvent = this._stopEvent = new away3d_events_AnimatorEvent("stop",this);
		}
		this.dispatchEvent(this._stopEvent);
	}
	,update: function(time) {
		var dt = (time - this._time) * this.get_playbackSpeed() | 0;
		this.updateDeltaTime(dt);
		this._time = time;
	}
	,reset: function(name,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.getAnimationState(this._animationSet.getAnimation(name)).offset(offset + this._absoluteTime);
	}
	,addOwner: function(mesh) {
		this._owners.push(mesh);
	}
	,removeOwner: function(mesh) {
		this._owners.splice(this._owners.indexOf(mesh,0),1);
	}
	,updateDeltaTime: function(dt) {
		this._absoluteTime += dt;
		this._activeState.update(this._absoluteTime);
		if(this.updatePosition) {
			this.applyPositionDelta();
		}
	}
	,onEnterFrame: function(event) {
		this.update(openfl_Lib.getTimer());
	}
	,applyPositionDelta: function() {
		var delta = this._activeState.get_positionDelta();
		var dist = delta.get_length();
		var len;
		if(dist > 0) {
			len = this._owners.get_length();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this._owners.get(i).translateLocal(delta,dist);
			}
		}
	}
	,dispatchCycleEvent: function() {
		if(this.hasEventListener("cycle_complete")) {
			if(this._cycleEvent == null) {
				this._cycleEvent = new away3d_events_AnimatorEvent("cycle_complete",this);
			}
			this.dispatchEvent(this._cycleEvent);
		}
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return "animator";
	}
	,__class__: away3d_animators_AnimatorBase
});
var away3d_animators_IAnimationSet = function() { };
$hxClasses["away3d.animators.IAnimationSet"] = away3d_animators_IAnimationSet;
away3d_animators_IAnimationSet.__name__ = ["away3d","animators","IAnimationSet"];
away3d_animators_IAnimationSet.prototype = {
	get_usesCPU: null
	,hasAnimation: null
	,getAnimation: null
	,resetGPUCompatibility: null
	,cancelGPUCompatibility: null
	,getAGALVertexCode: null
	,getAGALFragmentCode: null
	,getAGALUVCode: null
	,doneAGALCode: null
	,activate: null
	,deactivate: null
	,__class__: away3d_animators_IAnimationSet
};
var away3d_animators_IAnimator = function() { };
$hxClasses["away3d.animators.IAnimator"] = away3d_animators_IAnimator;
away3d_animators_IAnimator.__name__ = ["away3d","animators","IAnimator"];
away3d_animators_IAnimator.prototype = {
	get_animationSet: null
	,setRenderState: null
	,testGPUCompatibility: null
	,addOwner: null
	,removeOwner: null
	,getAnimationState: null
	,getAnimationStateByName: null
	,clone: null
	,dispose: null
	,__class__: away3d_animators_IAnimator
};
var away3d_animators_ParticleAnimationSet = function(usesDuration,usesLooping,usesDelay) {
	if(usesDelay == null) {
		usesDelay = false;
	}
	if(usesLooping == null) {
		usesLooping = false;
	}
	if(usesDuration == null) {
		usesDuration = false;
	}
	this._totalLenOfOneVertex = 0;
	this._localStaticNodes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._localDynamicNodes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._particleNodes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._animationSubGeometries = new haxe_ds_ObjectMap();
	away3d_animators_AnimationSetBase.call(this);
	this.addAnimation(this._timeNode = new away3d_animators_nodes_ParticleTimeNode(usesDuration,usesLooping,usesDelay));
};
$hxClasses["away3d.animators.ParticleAnimationSet"] = away3d_animators_ParticleAnimationSet;
away3d_animators_ParticleAnimationSet.__name__ = ["away3d","animators","ParticleAnimationSet"];
away3d_animators_ParticleAnimationSet.__interfaces__ = [away3d_animators_IAnimationSet];
away3d_animators_ParticleAnimationSet.__super__ = away3d_animators_AnimationSetBase;
away3d_animators_ParticleAnimationSet.prototype = $extend(away3d_animators_AnimationSetBase.prototype,{
	_animationRegisterCache: null
	,_timeNode: null
	,_animationSubGeometries: null
	,_particleNodes: null
	,_localDynamicNodes: null
	,_localStaticNodes: null
	,_totalLenOfOneVertex: null
	,hasUVNode: null
	,needVelocity: null
	,hasBillboard: null
	,hasColorMulNode: null
	,hasColorAddNode: null
	,initParticleFunc: null
	,get_particleNodes: function() {
		return this._particleNodes;
	}
	,addAnimation: function(node) {
		var i;
		var n = js_Boot.__cast(node , away3d_animators_nodes_ParticleNodeBase);
		n.processAnimationSetting(this);
		if(n.get_mode() == 1) {
			n.dataOffset = this._totalLenOfOneVertex;
			this._totalLenOfOneVertex += n.get_dataLength();
			this._localStaticNodes.push(n);
		} else if(n.get_mode() == 2) {
			this._localDynamicNodes.push(n);
		}
		i = this._particleNodes.get_length() - 1;
		while(i >= 0) {
			if(this._particleNodes.get(i).get_priority() <= n.get_priority()) {
				break;
			}
			--i;
		}
		this._particleNodes.insertAt(i + 1,n);
		away3d_animators_AnimationSetBase.prototype.addAnimation.call(this,node);
	}
	,activate: function(stage3DProxy,pass) {
		this._animationRegisterCache = pass.animationRegisterCache;
	}
	,deactivate: function(stage3DProxy,pass) {
		if(this._animationRegisterCache != null) {
			var context = stage3DProxy.get_context3D();
			var offset = this._animationRegisterCache.get_vertexAttributesOffset();
			var used = this._animationRegisterCache.get_numUsedStreams();
			var _g1 = offset;
			var _g = used;
			while(_g1 < _g) {
				var i = _g1++;
				context.setVertexBufferAt(i,null);
			}
		}
	}
	,getAGALVertexCode: function(pass,sourceRegisters,targetRegisters,profile) {
		this._animationRegisterCache = pass.animationRegisterCache != null ? pass.animationRegisterCache : pass.animationRegisterCache = new away3d_animators_data_AnimationRegisterCache(profile);
		this._animationRegisterCache.set_vertexConstantOffset(pass.get_numUsedVertexConstants());
		this._animationRegisterCache.set_vertexAttributesOffset(pass.get_numUsedStreams());
		this._animationRegisterCache.set_varyingsOffset(pass.get_numUsedVaryings());
		this._animationRegisterCache.set_fragmentConstantOffset(pass.get_numUsedFragmentConstants());
		this._animationRegisterCache.hasUVNode = this.hasUVNode;
		this._animationRegisterCache.needVelocity = this.needVelocity;
		this._animationRegisterCache.hasBillboard = this.hasBillboard;
		this._animationRegisterCache.sourceRegisters = sourceRegisters;
		this._animationRegisterCache.targetRegisters = targetRegisters;
		this._animationRegisterCache.needFragmentAnimation = pass.get_needFragmentAnimation();
		this._animationRegisterCache.needUVAnimation = pass.get_needUVAnimation();
		this._animationRegisterCache.hasColorAddNode = this.hasColorAddNode;
		this._animationRegisterCache.hasColorMulNode = this.hasColorMulNode;
		this._animationRegisterCache.reset();
		var code = "";
		code += this._animationRegisterCache.getInitCode();
		var node;
		var _g = 0;
		var _g1 = this._particleNodes;
		while(_g < _g1.get_length()) {
			var node1 = _g1.get(_g);
			++_g;
			if(node1.get_priority() < away3d_animators_ParticleAnimationSet.POST_PRIORITY) {
				code += node1.getAGALVertexCode(pass,this._animationRegisterCache);
			}
		}
		code += this._animationRegisterCache.getCombinationCode();
		var _g2 = 0;
		var _g11 = this._particleNodes;
		while(_g2 < _g11.get_length()) {
			var node2 = _g11.get(_g2);
			++_g2;
			if(node2.get_priority() >= away3d_animators_ParticleAnimationSet.POST_PRIORITY && node2.get_priority() < away3d_animators_ParticleAnimationSet.COLOR_PRIORITY) {
				code += node2.getAGALVertexCode(pass,this._animationRegisterCache);
			}
		}
		code += this._animationRegisterCache.initColorRegisters();
		var _g3 = 0;
		var _g12 = this._particleNodes;
		while(_g3 < _g12.get_length()) {
			var node3 = _g12.get(_g3);
			++_g3;
			if(node3.get_priority() >= away3d_animators_ParticleAnimationSet.COLOR_PRIORITY) {
				code += node3.getAGALVertexCode(pass,this._animationRegisterCache);
			}
		}
		code += this._animationRegisterCache.getColorPassCode();
		return code;
	}
	,getAGALUVCode: function(pass,UVSource,UVTarget) {
		var code = "";
		if(this.hasUVNode) {
			this._animationRegisterCache.setUVSourceAndTarget(UVSource,UVTarget);
			code += "mov " + Std.string(this._animationRegisterCache.uvTarget) + ".xy," + this._animationRegisterCache.uvAttribute.toString() + "\n";
			var node;
			var _g = 0;
			var _g1 = this._particleNodes;
			while(_g < _g1.get_length()) {
				var node1 = _g1.get(_g);
				++_g;
				code += node1.getAGALUVCode(pass,this._animationRegisterCache);
			}
			code += "mov " + this._animationRegisterCache.uvVar.toString() + "," + Std.string(this._animationRegisterCache.uvTarget) + ".xy\n";
		} else {
			code += "mov " + UVTarget + "," + UVSource + "\n";
		}
		return code;
	}
	,getAGALFragmentCode: function(pass,shadedTarget,profile) {
		return this._animationRegisterCache.getColorCombinationCode(shadedTarget);
	}
	,doneAGALCode: function(pass) {
		this._animationRegisterCache.setDataLength();
		this._animationRegisterCache.setVertexConst(this._animationRegisterCache.vertexZeroConst.get_index(),0,1,2,0);
	}
	,get_usesCPU: function() {
		return false;
	}
	,cancelGPUCompatibility: function() {
	}
	,dispose: function() {
		var subGeometry;
		var subGeometry1 = this._animationSubGeometries.iterator();
		while(subGeometry1.hasNext()) {
			var subGeometry2 = subGeometry1.next();
			subGeometry2.dispose();
		}
		away3d_animators_AnimationSetBase.prototype.dispose.call(this);
	}
	,generateAnimationSubGeometries: function(mesh) {
		if(this.initParticleFunc == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("no initParticleFunc set"));
		}
		var geometry = js_Boot.__instanceof(mesh.get_geometry(),away3d_core_base_ParticleGeometry) ? mesh.get_geometry() : null;
		if(geometry == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Particle animation can only be performed on a ParticleGeometry object"));
		}
		var i;
		var j;
		var animationSubGeometry = null;
		var newAnimationSubGeometry = false;
		var subGeometry;
		var subMesh;
		var localNode;
		var _g1 = 0;
		var _g = mesh.get_subMeshes().get_length();
		while(_g1 < _g) {
			var i1 = _g1++;
			subMesh = mesh.get_subMeshes().get(i1);
			subGeometry = subMesh.get_subGeometry();
			if(mesh.get_shareAnimationGeometry()) {
				animationSubGeometry = this._animationSubGeometries.h[subGeometry.__id__];
				if(animationSubGeometry != null) {
					subMesh.animationSubGeometry = animationSubGeometry;
					continue;
				}
			}
			animationSubGeometry = subMesh.animationSubGeometry = new away3d_animators_data_AnimationSubGeometry();
			if(mesh.get_shareAnimationGeometry()) {
				this._animationSubGeometries.set(subGeometry,animationSubGeometry);
			}
			newAnimationSubGeometry = true;
			animationSubGeometry.createVertexData(subGeometry.get_numVertices(),this._totalLenOfOneVertex);
		}
		if(newAnimationSubGeometry == false) {
			return;
		}
		var particles = geometry.particles;
		var particlesLength = particles.get_length();
		var numParticles = geometry.numParticles;
		var particleProperties = new away3d_animators_data_ParticleProperties();
		var particle = null;
		var oneDataLen;
		var oneDataOffset;
		var counterForVertex;
		var counterForOneData;
		var oneData;
		var numVertices;
		var vertexData;
		var vertexLength;
		var startingOffset;
		var vertexOffset;
		particleProperties.total = numParticles;
		particleProperties.startTime = 0;
		particleProperties.duration = 1000;
		particleProperties.delay = 0.1;
		i = 0;
		j = 0;
		while(i < numParticles) {
			particleProperties.index = i;
			this.initParticleFunc(particleProperties);
			var _g2 = 0;
			var _g11 = this._localStaticNodes;
			while(_g2 < _g11.get_length()) {
				var localNode1 = _g11.get(_g2);
				++_g2;
				localNode1.generatePropertyOfOneParticle(particleProperties);
			}
			while(true) {
				var tmp;
				if(j < particlesLength) {
					particle = particles.get(j);
					tmp = particle.particleIndex == i;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				var _g3 = 0;
				var _g12 = mesh.get_subMeshes();
				while(_g3 < _g12.get_length()) {
					var subMesh1 = _g12.get(_g3);
					++_g3;
					if(subMesh1.get_subGeometry() == particle.subGeometry) {
						animationSubGeometry = subMesh1.animationSubGeometry;
						break;
					}
				}
				numVertices = particle.numVertices;
				vertexData = animationSubGeometry.get_vertexData();
				vertexLength = numVertices * this._totalLenOfOneVertex;
				startingOffset = animationSubGeometry.numProcessedVertices * this._totalLenOfOneVertex;
				var _g4 = 0;
				var _g13 = this._localStaticNodes;
				while(_g4 < _g13.get_length()) {
					var localNode2 = _g13.get(_g4);
					++_g4;
					oneData = localNode2.get_oneData();
					oneDataLen = localNode2.get_dataLength();
					oneDataOffset = startingOffset + localNode2.dataOffset;
					counterForVertex = 0;
					while(counterForVertex < vertexLength) {
						vertexOffset = oneDataOffset + counterForVertex;
						var _g31 = 0;
						var _g21 = oneDataLen;
						while(_g31 < _g21) {
							var counterForOneData1 = _g31++;
							vertexData.set(vertexOffset + counterForOneData1,oneData.get(counterForOneData1));
						}
						counterForVertex += this._totalLenOfOneVertex;
					}
				}
				if(this._localDynamicNodes.get_length() > 0) {
					animationSubGeometry.animationParticles.push(new away3d_animators_data_ParticleAnimationData(i,particleProperties.startTime,particleProperties.duration,particleProperties.delay,particle));
				}
				animationSubGeometry.numProcessedVertices += numVertices;
				++j;
			}
			++i;
		}
	}
	,__class__: away3d_animators_ParticleAnimationSet
});
var away3d_animators_ParticleAnimator = function(particleAnimationSet) {
	this._animatorSubGeometries = new haxe_ds_ObjectMap();
	this._totalLenOfOneVertex = 0;
	this._timeParticleStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._animatorParticleStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._animationParticleStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	away3d_animators_AnimatorBase.call(this,particleAnimationSet);
	this._particleAnimationSet = particleAnimationSet;
	var state;
	var node;
	var _g = 0;
	var _g1 = this._particleAnimationSet.get_particleNodes();
	while(_g < _g1.get_length()) {
		var node1 = _g1.get(_g);
		++_g;
		state = js_Boot.__cast(this.getAnimationState(node1) , away3d_animators_states_ParticleStateBase);
		if(node1.get_mode() == 2) {
			this._animatorParticleStates.push(state);
			node1.dataOffset = this._totalLenOfOneVertex;
			this._totalLenOfOneVertex += node1.get_dataLength();
		} else {
			this._animationParticleStates.push(state);
		}
		if(state.get_needUpdateTime()) {
			this._timeParticleStates.push(state);
		}
	}
};
$hxClasses["away3d.animators.ParticleAnimator"] = away3d_animators_ParticleAnimator;
away3d_animators_ParticleAnimator.__name__ = ["away3d","animators","ParticleAnimator"];
away3d_animators_ParticleAnimator.__interfaces__ = [away3d_animators_IAnimator];
away3d_animators_ParticleAnimator.__super__ = away3d_animators_AnimatorBase;
away3d_animators_ParticleAnimator.prototype = $extend(away3d_animators_AnimatorBase.prototype,{
	_particleAnimationSet: null
	,_animationParticleStates: null
	,_animatorParticleStates: null
	,_timeParticleStates: null
	,_totalLenOfOneVertex: null
	,_animatorSubGeometries: null
	,clone: function() {
		return new away3d_animators_ParticleAnimator(this._particleAnimationSet);
	}
	,setRenderState: function(stage3DProxy,renderable,vertexConstantOffset,vertexStreamOffset,camera) {
		var animationRegisterCache = this._particleAnimationSet._animationRegisterCache;
		var subMesh = js_Boot.__instanceof(renderable,away3d_core_base_SubMesh) ? renderable : null;
		var state;
		if(subMesh == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Must be subMesh"));
		}
		if(subMesh.animationSubGeometry == null) {
			this._particleAnimationSet.generateAnimationSubGeometries(subMesh.get_parentMesh());
		}
		var animationSubGeometry = subMesh.animationSubGeometry;
		var _g = 0;
		var _g1 = this._animationParticleStates;
		while(_g < _g1.get_length()) {
			var state1 = _g1.get(_g);
			++_g;
			state1.setRenderState(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera);
		}
		if(subMesh.animatorSubGeometry == null && this._animatorParticleStates.get_length() > 0) {
			this.generateAnimatorSubGeometry(subMesh);
		}
		var animatorSubGeometry = subMesh.animatorSubGeometry;
		var _g2 = 0;
		var _g11 = this._animatorParticleStates;
		while(_g2 < _g11.get_length()) {
			var state2 = _g11.get(_g2);
			++_g2;
			state2.setRenderState(stage3DProxy,renderable,animatorSubGeometry,animationRegisterCache,camera);
		}
		stage3DProxy.get_context3D().setProgramConstantsFromVector(1,animationRegisterCache.get_vertexConstantOffset(),animationRegisterCache.vertexConstantData,animationRegisterCache.get_numVertexConstant());
		if(animationRegisterCache.get_numFragmentConstant() > 0) {
			stage3DProxy.get_context3D().setProgramConstantsFromVector(0,animationRegisterCache.get_fragmentConstantOffset(),animationRegisterCache.fragmentConstantData,animationRegisterCache.get_numFragmentConstant());
		}
	}
	,testGPUCompatibility: function(pass) {
	}
	,start: function() {
		away3d_animators_AnimatorBase.prototype.start.call(this);
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.get_length()) {
			var state = _g1.get(_g);
			++_g;
			state.offset(this._absoluteTime);
		}
	}
	,updateDeltaTime: function(dt) {
		this._absoluteTime += dt;
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.get_length()) {
			var state = _g1.get(_g);
			++_g;
			state.update(this._absoluteTime);
		}
	}
	,resetTime: function(offset) {
		if(offset == null) {
			offset = 0;
		}
		var _g = 0;
		var _g1 = this._timeParticleStates;
		while(_g < _g1.get_length()) {
			var state = _g1.get(_g);
			++_g;
			state.offset(this._absoluteTime + offset);
		}
		this.update(this.get_time());
	}
	,dispose: function() {
		var subGeometry;
		var subGeometry1 = this._animatorSubGeometries.iterator();
		while(subGeometry1.hasNext()) {
			var subGeometry2 = subGeometry1.next();
			subGeometry2.dispose();
		}
	}
	,generateAnimatorSubGeometry: function(subMesh) {
		var subGeometry = subMesh.get_subGeometry();
		var this1 = this._animatorSubGeometries;
		var v = new away3d_animators_data_AnimationSubGeometry();
		this1.set(subGeometry,v);
		var animatorSubGeometry = subMesh.animatorSubGeometry = v;
		animatorSubGeometry.createVertexData(subGeometry.get_numVertices(),this._totalLenOfOneVertex);
		animatorSubGeometry.animationParticles = subMesh.animationSubGeometry.animationParticles;
	}
	,__class__: away3d_animators_ParticleAnimator
});
var away3d_materials_compilation_ShaderRegisterCache = function(profile) {
	this._profile = profile;
};
$hxClasses["away3d.materials.compilation.ShaderRegisterCache"] = away3d_materials_compilation_ShaderRegisterCache;
away3d_materials_compilation_ShaderRegisterCache.__name__ = ["away3d","materials","compilation","ShaderRegisterCache"];
away3d_materials_compilation_ShaderRegisterCache.prototype = {
	_fragmentTempCache: null
	,_vertexTempCache: null
	,_varyingCache: null
	,_fragmentConstantsCache: null
	,_vertexConstantsCache: null
	,_textureCache: null
	,_vertexAttributesCache: null
	,_vertexConstantOffset: null
	,_vertexAttributesOffset: null
	,_varyingsOffset: null
	,_fragmentConstantOffset: null
	,_fragmentOutputRegister: null
	,_vertexOutputRegister: null
	,_numUsedVertexConstants: null
	,_numUsedFragmentConstants: null
	,_numUsedStreams: null
	,_numUsedTextures: null
	,_numUsedVaryings: null
	,_profile: null
	,reset: function() {
		this._fragmentTempCache = new away3d_materials_compilation_RegisterPool("ft",8,false);
		this._vertexTempCache = new away3d_materials_compilation_RegisterPool("vt",8,false);
		this._varyingCache = new away3d_materials_compilation_RegisterPool("v",8);
		this._textureCache = new away3d_materials_compilation_RegisterPool("fs",8);
		this._vertexAttributesCache = new away3d_materials_compilation_RegisterPool("va",8);
		this._fragmentConstantsCache = new away3d_materials_compilation_RegisterPool("fc",28);
		this._vertexConstantsCache = new away3d_materials_compilation_RegisterPool("vc",128);
		this._fragmentOutputRegister = new away3d_materials_compilation_ShaderRegisterElement("oc",-1);
		this._vertexOutputRegister = new away3d_materials_compilation_ShaderRegisterElement("op",-1);
		this._numUsedVertexConstants = 0;
		this._numUsedStreams = 0;
		this._numUsedTextures = 0;
		this._numUsedVaryings = 0;
		this._numUsedFragmentConstants = 0;
		var _g1 = 0;
		var _g = this._vertexAttributesOffset;
		while(_g1 < _g) {
			var i = _g1++;
			this.getFreeVertexAttribute();
		}
		var _g11 = 0;
		var _g2 = this._vertexConstantOffset;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.getFreeVertexConstant();
		}
		var _g12 = 0;
		var _g3 = this._varyingsOffset;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.getFreeVarying();
		}
		var _g13 = 0;
		var _g4 = this._fragmentConstantOffset;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.getFreeFragmentConstant();
		}
	}
	,dispose: function() {
		this._fragmentTempCache.dispose();
		this._vertexTempCache.dispose();
		this._varyingCache.dispose();
		this._fragmentConstantsCache.dispose();
		this._vertexAttributesCache.dispose();
		this._fragmentTempCache = null;
		this._vertexTempCache = null;
		this._varyingCache = null;
		this._fragmentConstantsCache = null;
		this._vertexAttributesCache = null;
		this._fragmentOutputRegister = null;
		this._vertexOutputRegister = null;
	}
	,addFragmentTempUsages: function(register,usageCount) {
		this._fragmentTempCache.addUsage(register,usageCount);
	}
	,removeFragmentTempUsage: function(register) {
		this._fragmentTempCache.removeUsage(register);
	}
	,addVertexTempUsages: function(register,usageCount) {
		this._vertexTempCache.addUsage(register,usageCount);
	}
	,removeVertexTempUsage: function(register) {
		this._vertexTempCache.removeUsage(register);
	}
	,getFreeFragmentVectorTemp: function() {
		return this._fragmentTempCache.requestFreeVectorReg();
	}
	,getFreeFragmentSingleTemp: function() {
		return this._fragmentTempCache.requestFreeRegComponent();
	}
	,getFreeVarying: function() {
		var result = this._varyingCache.requestFreeVectorReg();
		++this._numUsedVaryings;
		return result;
	}
	,getFreeFragmentConstant: function() {
		var result = this._fragmentConstantsCache.requestFreeVectorReg();
		++this._numUsedFragmentConstants;
		return result;
	}
	,getFreeVertexConstant: function() {
		var result = this._vertexConstantsCache.requestFreeVectorReg();
		++this._numUsedVertexConstants;
		return result;
	}
	,getFreeVertexVectorTemp: function() {
		return this._vertexTempCache.requestFreeVectorReg();
	}
	,getFreeVertexSingleTemp: function() {
		return this._vertexTempCache.requestFreeRegComponent();
	}
	,getFreeVertexAttribute: function() {
		var result = this._vertexAttributesCache.requestFreeVectorReg();
		++this._numUsedStreams;
		return result;
	}
	,getFreeTextureReg: function() {
		var result = this._textureCache.requestFreeVectorReg();
		++this._numUsedTextures;
		return result;
	}
	,get_vertexConstantOffset: function() {
		return this._vertexConstantOffset;
	}
	,set_vertexConstantOffset: function(vertexConstantOffset) {
		this._vertexConstantOffset = vertexConstantOffset;
		return vertexConstantOffset;
	}
	,get_vertexAttributesOffset: function() {
		return this._vertexAttributesOffset;
	}
	,set_vertexAttributesOffset: function(value) {
		this._vertexAttributesOffset = value;
		return value;
	}
	,get_varyingsOffset: function() {
		return this._varyingsOffset;
	}
	,set_varyingsOffset: function(value) {
		this._varyingsOffset = value;
		return value;
	}
	,get_fragmentConstantOffset: function() {
		return this._fragmentConstantOffset;
	}
	,set_fragmentConstantOffset: function(value) {
		this._fragmentConstantOffset = value;
		return value;
	}
	,get_fragmentOutputRegister: function() {
		return this._fragmentOutputRegister;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedTextures: function() {
		return this._numUsedTextures;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,__class__: away3d_materials_compilation_ShaderRegisterCache
};
var away3d_animators_data_AnimationRegisterCache = function(profile) {
	this.fragmentConstantData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.vertexConstantData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.indexDictionary = new haxe_ds_ObjectMap();
	away3d_materials_compilation_ShaderRegisterCache.call(this,profile);
};
$hxClasses["away3d.animators.data.AnimationRegisterCache"] = away3d_animators_data_AnimationRegisterCache;
away3d_animators_data_AnimationRegisterCache.__name__ = ["away3d","animators","data","AnimationRegisterCache"];
away3d_animators_data_AnimationRegisterCache.__super__ = away3d_materials_compilation_ShaderRegisterCache;
away3d_animators_data_AnimationRegisterCache.prototype = $extend(away3d_materials_compilation_ShaderRegisterCache.prototype,{
	positionAttribute: null
	,uvAttribute: null
	,positionTarget: null
	,scaleAndRotateTarget: null
	,velocityTarget: null
	,vertexTime: null
	,vertexLife: null
	,vertexZeroConst: null
	,vertexOneConst: null
	,vertexTwoConst: null
	,uvTarget: null
	,colorAddTarget: null
	,colorMulTarget: null
	,colorAddVary: null
	,colorMulVary: null
	,uvVar: null
	,rotationRegisters: null
	,needFragmentAnimation: null
	,needUVAnimation: null
	,sourceRegisters: null
	,targetRegisters: null
	,indexDictionary: null
	,hasUVNode: null
	,needVelocity: null
	,hasBillboard: null
	,hasColorMulNode: null
	,hasColorAddNode: null
	,reset: function() {
		away3d_materials_compilation_ShaderRegisterCache.prototype.reset.call(this);
		this.rotationRegisters = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.positionAttribute = this.getRegisterFromString(this.sourceRegisters.get(0));
		this.scaleAndRotateTarget = this.getRegisterFromString(this.targetRegisters.get(0));
		this.addVertexTempUsages(this.scaleAndRotateTarget,1);
		var _g1 = 1;
		var _g = this.targetRegisters.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this.rotationRegisters.push(this.getRegisterFromString(this.targetRegisters.get(i)));
			this.addVertexTempUsages(this.rotationRegisters.get(i - 1),1);
		}
		this.scaleAndRotateTarget = new away3d_materials_compilation_ShaderRegisterElement(this.scaleAndRotateTarget.get_regName(),this.scaleAndRotateTarget.get_index());
		this.vertexZeroConst = this.getFreeVertexConstant();
		this.vertexZeroConst = new away3d_materials_compilation_ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),0);
		this.vertexOneConst = new away3d_materials_compilation_ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),1);
		this.vertexTwoConst = new away3d_materials_compilation_ShaderRegisterElement(this.vertexZeroConst.get_regName(),this.vertexZeroConst.get_index(),2);
		this.positionTarget = this.getFreeVertexVectorTemp();
		this.addVertexTempUsages(this.positionTarget,1);
		this.positionTarget = new away3d_materials_compilation_ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
		if(this.needVelocity) {
			this.velocityTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.velocityTarget,1);
			this.velocityTarget = new away3d_materials_compilation_ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index());
			this.vertexTime = new away3d_materials_compilation_ShaderRegisterElement(this.velocityTarget.get_regName(),this.velocityTarget.get_index(),3);
			this.vertexLife = new away3d_materials_compilation_ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index(),3);
		} else {
			var tempTime = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(tempTime,1);
			this.vertexTime = new away3d_materials_compilation_ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),0);
			this.vertexLife = new away3d_materials_compilation_ShaderRegisterElement(tempTime.get_regName(),tempTime.get_index(),1);
		}
	}
	,setUVSourceAndTarget: function(UVAttribute,UVVaring) {
		this.uvVar = this.getRegisterFromString(UVVaring);
		this.uvAttribute = this.getRegisterFromString(UVAttribute);
		this.uvTarget = new away3d_materials_compilation_ShaderRegisterElement(this.positionTarget.get_regName(),this.positionTarget.get_index());
	}
	,setRegisterIndex: function(node,parameterIndex,registerIndex) {
		var t = this.indexDictionary.h.__keys__[node.__id__] != null ? this.indexDictionary.h[node.__id__] : openfl__$Vector_Vector_$Impl_$.toIntVector(null,8,true);
		t.set(parameterIndex,registerIndex);
		this.indexDictionary.set(node,t);
	}
	,getRegisterIndex: function(node,parameterIndex) {
		return this.indexDictionary.h[node.__id__].get(parameterIndex);
	}
	,getInitCode: function() {
		var len = this.sourceRegisters.get_length();
		var code = "";
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			code += "mov " + this.targetRegisters.get(i) + "," + this.sourceRegisters.get(i) + "\n";
		}
		code += "mov " + Std.string(this.positionTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		if(this.needVelocity) {
			code += "mov " + Std.string(this.velocityTarget) + ".xyz," + this.vertexZeroConst.toString() + "\n";
		}
		return code;
	}
	,getCombinationCode: function() {
		return "add " + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.scaleAndRotateTarget) + ".xyz," + Std.string(this.positionTarget) + ".xyz\n";
	}
	,initColorRegisters: function() {
		var code = "";
		if(this.hasColorMulNode) {
			this.colorMulTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorMulTarget,1);
			this.colorMulVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorMulTarget) + "," + Std.string(this.vertexOneConst) + "\n";
		}
		if(this.hasColorAddNode) {
			this.colorAddTarget = this.getFreeVertexVectorTemp();
			this.addVertexTempUsages(this.colorAddTarget,1);
			this.colorAddVary = this.getFreeVarying();
			code += "mov " + Std.string(this.colorAddTarget) + "," + Std.string(this.vertexZeroConst) + "\n";
		}
		return code;
	}
	,getColorPassCode: function() {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			if(this.hasColorMulNode) {
				code += "mov " + Std.string(this.colorMulVary) + "," + Std.string(this.colorMulTarget) + "\n";
			}
			if(this.hasColorAddNode) {
				code += "mov " + Std.string(this.colorAddVary) + "," + Std.string(this.colorAddTarget) + "\n";
			}
		}
		return code;
	}
	,getColorCombinationCode: function(shadedTarget) {
		var code = "";
		if(this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
			var colorTarget = this.getRegisterFromString(shadedTarget);
			this.addFragmentTempUsages(colorTarget,1);
			if(this.hasColorMulNode) {
				code += "mul " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorMulVary) + "\n";
			}
			if(this.hasColorAddNode) {
				code += "add " + Std.string(colorTarget) + "," + Std.string(colorTarget) + "," + Std.string(this.colorAddVary) + "\n";
			}
		}
		return code;
	}
	,getRegisterFromString: function(code) {
		var ereg = new EReg("([a-z]+)([\\d]+)","");
		ereg.match(code);
		return new away3d_materials_compilation_ShaderRegisterElement(ereg.matched(1),Std.parseInt(ereg.matched(2)));
	}
	,vertexConstantData: null
	,fragmentConstantData: null
	,_numVertexConstant: null
	,_numFragmentConstant: null
	,get_numVertexConstant: function() {
		return this._numVertexConstant;
	}
	,get_numFragmentConstant: function() {
		return this._numFragmentConstant;
	}
	,setDataLength: function() {
		this._numVertexConstant = this._numUsedVertexConstants - this._vertexConstantOffset;
		this._numFragmentConstant = this._numUsedFragmentConstants - this._fragmentConstantOffset;
		this.vertexConstantData.set_length(this._numVertexConstant * 4);
		this.fragmentConstantData.set_length(this._numFragmentConstant * 4);
	}
	,setVertexConst: function(index,x,y,z,w) {
		if(w == null) {
			w = 0;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _index = (index - this._vertexConstantOffset) * 4;
		this.vertexConstantData.set(_index++,x);
		this.vertexConstantData.set(_index++,y);
		this.vertexConstantData.set(_index++,z);
		this.vertexConstantData.set(_index,w);
	}
	,setVertexConstFromVector: function(index,data) {
		var _index = (index - this._vertexConstantOffset) * 4;
		var _g1 = 0;
		var _g = data.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this.vertexConstantData.set(_index++,data.get(i));
		}
	}
	,setVertexConstFromMatrix: function(index,matrix) {
		var rawData = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		matrix.copyRawDataTo(rawData);
		var _index = (index - this._vertexConstantOffset) * 4;
		this.vertexConstantData.set(_index++,rawData.get(0));
		this.vertexConstantData.set(_index++,rawData.get(4));
		this.vertexConstantData.set(_index++,rawData.get(8));
		this.vertexConstantData.set(_index++,rawData.get(12));
		this.vertexConstantData.set(_index++,rawData.get(1));
		this.vertexConstantData.set(_index++,rawData.get(5));
		this.vertexConstantData.set(_index++,rawData.get(9));
		this.vertexConstantData.set(_index++,rawData.get(13));
		this.vertexConstantData.set(_index++,rawData.get(2));
		this.vertexConstantData.set(_index++,rawData.get(6));
		this.vertexConstantData.set(_index++,rawData.get(10));
		this.vertexConstantData.set(_index++,rawData.get(14));
		this.vertexConstantData.set(_index++,rawData.get(3));
		this.vertexConstantData.set(_index++,rawData.get(7));
		this.vertexConstantData.set(_index++,rawData.get(11));
		this.vertexConstantData.set(_index,rawData.get(15));
	}
	,setFragmentConst: function(index,x,y,z,w) {
		if(w == null) {
			w = 0;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _index = (index - this._fragmentConstantOffset) * 4;
		this.fragmentConstantData.set(_index++,x);
		this.fragmentConstantData.set(_index++,y);
		this.fragmentConstantData.set(_index++,z);
		this.fragmentConstantData.set(_index,w);
	}
	,__class__: away3d_animators_data_AnimationRegisterCache
});
var away3d_animators_data_AnimationSubGeometry = function() {
	this.animationParticles = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.previousTime = -Infinity;
	this.numProcessedVertices = 0;
	this._bufferDirty = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8);
	this._bufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this._bufferDirty.set(i,true);
	}
};
$hxClasses["away3d.animators.data.AnimationSubGeometry"] = away3d_animators_data_AnimationSubGeometry;
away3d_animators_data_AnimationSubGeometry.__name__ = ["away3d","animators","data","AnimationSubGeometry"];
away3d_animators_data_AnimationSubGeometry.prototype = {
	_vertexData: null
	,_vertexBuffer: null
	,_bufferContext: null
	,_bufferDirty: null
	,_numVertices: null
	,_totalLenOfOneVertex: null
	,numProcessedVertices: null
	,previousTime: null
	,animationParticles: null
	,createVertexData: function(numVertices,totalLenOfOneVertex) {
		this._numVertices = numVertices;
		this._totalLenOfOneVertex = totalLenOfOneVertex;
		this._vertexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVertices * totalLenOfOneVertex);
	}
	,activateVertexBuffer: function(index,bufferOffset,stage3DProxy,format) {
		var contextIndex = stage3DProxy.get_stage3DIndex();
		var context = stage3DProxy.get_context3D();
		var buffer = this._vertexBuffer.get(contextIndex);
		if(buffer == null || this._bufferContext.get(contextIndex) != context) {
			buffer = this._vertexBuffer.set(contextIndex,context.createVertexBuffer(this._numVertices,this._totalLenOfOneVertex));
			this._bufferContext.set(contextIndex,context);
			this._bufferDirty.set(contextIndex,true);
		}
		if(this._bufferDirty.get(contextIndex)) {
			buffer.uploadFromVector(this._vertexData,0,this._numVertices);
			this._bufferDirty.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,buffer,bufferOffset,format);
	}
	,dispose: function() {
		while(this._vertexBuffer.get_length() > 0) {
			var vertexBuffer = this._vertexBuffer.pop();
			if(vertexBuffer != null) {
				vertexBuffer.dispose();
			}
		}
	}
	,invalidateBuffer: function() {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._bufferDirty.set(i,true);
		}
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_numVertices: function() {
		return this._numVertices;
	}
	,get_totalLenOfOneVertex: function() {
		return this._totalLenOfOneVertex;
	}
	,__class__: away3d_animators_data_AnimationSubGeometry
};
var away3d_animators_data_ParticleAnimationData = function(index,startTime,duration,delay,particle) {
	this.index = index;
	this.startTime = startTime;
	this.totalTime = duration + delay;
	this.duration = duration;
	this.delay = delay;
	this.startVertexIndex = particle.startVertexIndex;
	this.numVertices = particle.numVertices;
};
$hxClasses["away3d.animators.data.ParticleAnimationData"] = away3d_animators_data_ParticleAnimationData;
away3d_animators_data_ParticleAnimationData.__name__ = ["away3d","animators","data","ParticleAnimationData"];
away3d_animators_data_ParticleAnimationData.prototype = {
	index: null
	,startTime: null
	,totalTime: null
	,duration: null
	,delay: null
	,startVertexIndex: null
	,numVertices: null
	,__class__: away3d_animators_data_ParticleAnimationData
};
var away3d_animators_data_ParticleProperties = function() {
	this.nodes = new haxe_ds_StringMap();
};
$hxClasses["away3d.animators.data.ParticleProperties"] = away3d_animators_data_ParticleProperties;
away3d_animators_data_ParticleProperties.__name__ = ["away3d","animators","data","ParticleProperties"];
away3d_animators_data_ParticleProperties.prototype = {
	index: null
	,total: null
	,startTime: null
	,duration: null
	,delay: null
	,nodes: null
	,__class__: away3d_animators_data_ParticleProperties
};
var away3d_animators_data_ParticlePropertiesMode = function() { };
$hxClasses["away3d.animators.data.ParticlePropertiesMode"] = away3d_animators_data_ParticlePropertiesMode;
away3d_animators_data_ParticlePropertiesMode.__name__ = ["away3d","animators","data","ParticlePropertiesMode"];
var away3d_animators_nodes_AnimationNodeBase = function() {
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.animators.nodes.AnimationNodeBase"] = away3d_animators_nodes_AnimationNodeBase;
away3d_animators_nodes_AnimationNodeBase.__name__ = ["away3d","animators","nodes","AnimationNodeBase"];
away3d_animators_nodes_AnimationNodeBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_animators_nodes_AnimationNodeBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_animators_nodes_AnimationNodeBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_stateConstructor: null
	,get_stateConstructor: function() {
		return this._stateConstructor;
	}
	,dispose: function() {
	}
	,get_assetType: function() {
		return "animationNode";
	}
	,__class__: away3d_animators_nodes_AnimationNodeBase
});
var away3d_animators_nodes_ParticleNodeBase = function(name,mode,dataLength,priority) {
	if(priority == null) {
		priority = 1;
	}
	this._dataLength = 3;
	away3d_animators_nodes_AnimationNodeBase.call(this);
	name += away3d_animators_nodes_ParticleNodeBase.MODES[mode];
	this.set_name(name);
	this._mode = mode;
	this._priority = priority;
	this._dataLength = dataLength;
	this._oneData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,this._dataLength,true);
};
$hxClasses["away3d.animators.nodes.ParticleNodeBase"] = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleNodeBase.__name__ = ["away3d","animators","nodes","ParticleNodeBase"];
away3d_animators_nodes_ParticleNodeBase.getParticleNodeName = function(particleNodeClass,particleNodeMode) {
	var nodeName = particleNodeClass.node.get("ANIMATION_NODE_NAME");
	if(nodeName == null) {
		nodeName = away3d_animators_nodes_ParticleNodeBase.getNodeNameFromClass(particleNodeClass);
	}
	return nodeName + away3d_animators_nodes_ParticleNodeBase.MODES[particleNodeMode];
};
away3d_animators_nodes_ParticleNodeBase.getNodeNameFromClass = function(particleNodeClass) {
	return StringTools.replace(Type.getClassName(particleNodeClass),"Node","").split("::")[1];
};
away3d_animators_nodes_ParticleNodeBase.__super__ = away3d_animators_nodes_AnimationNodeBase;
away3d_animators_nodes_ParticleNodeBase.prototype = $extend(away3d_animators_nodes_AnimationNodeBase.prototype,{
	_mode: null
	,_priority: null
	,_dataLength: null
	,_oneData: null
	,dataOffset: null
	,get_mode: function() {
		return this._mode;
	}
	,get_priority: function() {
		return this._priority;
	}
	,get_dataLength: function() {
		return this._dataLength;
	}
	,get_oneData: function() {
		return this._oneData;
	}
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		return "";
	}
	,getAGALFragmentCode: function(pass,animationRegisterCache) {
		return "";
	}
	,getAGALUVCode: function(pass,animationRegisterCache) {
		return "";
	}
	,generatePropertyOfOneParticle: function(param) {
	}
	,processAnimationSetting: function(particleAnimationSet) {
	}
	,__class__: away3d_animators_nodes_ParticleNodeBase
});
var away3d_animators_nodes_ParticleBillboardNode = function(billboardAxis) {
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleBillboard",0,0,4);
	this._stateConstructor = function(animator,particleNode) {
		return new away3d_animators_states_ParticleBillboardState(animator,particleNode);
	};
	this._billboardAxis = billboardAxis;
};
$hxClasses["away3d.animators.nodes.ParticleBillboardNode"] = away3d_animators_nodes_ParticleBillboardNode;
away3d_animators_nodes_ParticleBillboardNode.__name__ = ["away3d","animators","nodes","ParticleBillboardNode"];
away3d_animators_nodes_ParticleBillboardNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleBillboardNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_billboardAxis: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var rotationMatrixRegister = animationRegisterCache.getFreeVertexConstant();
		animationRegisterCache.setRegisterIndex(this,0,rotationMatrixRegister.get_index());
		animationRegisterCache.getFreeVertexConstant();
		animationRegisterCache.getFreeVertexConstant();
		animationRegisterCache.getFreeVertexConstant();
		var code = "m33 " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(rotationMatrixRegister) + "\n";
		var shaderRegisterElement;
		var _g = 0;
		var _g1 = animationRegisterCache.rotationRegisters;
		while(_g < _g1.get_length()) {
			var shaderRegisterElement1 = _g1.get(_g);
			++_g;
			code += "m33 " + shaderRegisterElement1.get_regName() + shaderRegisterElement1.get_index() + ".xyz," + Std.string(shaderRegisterElement1) + "," + Std.string(rotationMatrixRegister) + "\n";
		}
		return code;
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticleBillboardState);
	}
	,processAnimationSetting: function(particleAnimationSet) {
		particleAnimationSet.hasBillboard = true;
	}
	,__class__: away3d_animators_nodes_ParticleBillboardNode
});
var away3d_animators_nodes_ParticleColorNode = function(mode,usesMultiplier,usesOffset,usesCycle,usesPhase,startColor,endColor,cycleDuration,cyclePhase) {
	if(cyclePhase == null) {
		cyclePhase = 0;
	}
	if(cycleDuration == null) {
		cycleDuration = 1;
	}
	if(usesPhase == null) {
		usesPhase = false;
	}
	if(usesCycle == null) {
		usesCycle = false;
	}
	if(usesOffset == null) {
		usesOffset = true;
	}
	if(usesMultiplier == null) {
		usesMultiplier = true;
	}
	this._stateConstructor = function(animator,particleColorNode) {
		return new away3d_animators_states_ParticleColorState(animator,particleColorNode);
	};
	this._usesMultiplier = usesMultiplier;
	this._usesOffset = usesOffset;
	this._usesCycle = usesCycle;
	this._usesPhase = usesPhase;
	this._startColor = startColor;
	if(this._startColor == null) {
		this._startColor = new openfl_geom_ColorTransform();
	}
	this._endColor = endColor;
	if(this._endColor == null) {
		this._endColor = new openfl_geom_ColorTransform();
	}
	this._cycleDuration = cycleDuration;
	this._cyclePhase = cyclePhase;
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleColor",mode,this._usesMultiplier && this._usesOffset ? 16 : 8,away3d_animators_ParticleAnimationSet.COLOR_PRIORITY);
};
$hxClasses["away3d.animators.nodes.ParticleColorNode"] = away3d_animators_nodes_ParticleColorNode;
away3d_animators_nodes_ParticleColorNode.__name__ = ["away3d","animators","nodes","ParticleColorNode"];
away3d_animators_nodes_ParticleColorNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleColorNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_usesMultiplier: null
	,_usesOffset: null
	,_usesCycle: null
	,_usesPhase: null
	,_startColor: null
	,_endColor: null
	,_cycleDuration: null
	,_cyclePhase: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var code = "";
		if(animationRegisterCache.needFragmentAnimation) {
			var temp = animationRegisterCache.getFreeVertexVectorTemp();
			var sin = null;
			if(this._usesCycle) {
				var cycleConst = animationRegisterCache.getFreeVertexConstant();
				animationRegisterCache.setRegisterIndex(this,4,cycleConst.get_index());
				animationRegisterCache.addVertexTempUsages(temp,1);
				sin = animationRegisterCache.getFreeVertexSingleTemp();
				animationRegisterCache.removeVertexTempUsage(temp);
				code += "mul " + Std.string(sin) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(cycleConst) + ".x\n";
				if(this._usesPhase) {
					code += "add " + Std.string(sin) + "," + Std.string(sin) + "," + Std.string(cycleConst) + ".y\n";
				}
				code += "sin " + Std.string(sin) + "," + Std.string(sin) + "\n";
			}
			if(this._usesMultiplier) {
				var startMultiplierValue = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
				var deltaMultiplierValue = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
				animationRegisterCache.setRegisterIndex(this,0,startMultiplierValue.get_index());
				animationRegisterCache.setRegisterIndex(this,1,deltaMultiplierValue.get_index());
				code += "mul " + Std.string(temp) + "," + Std.string(deltaMultiplierValue) + "," + (this._usesCycle ? sin.toString() : animationRegisterCache.vertexLife.toString()) + "\n";
				code += "add " + Std.string(temp) + "," + Std.string(temp) + "," + Std.string(startMultiplierValue) + "\n";
				code += "mul " + Std.string(animationRegisterCache.colorMulTarget) + "," + Std.string(temp) + "," + Std.string(animationRegisterCache.colorMulTarget) + "\n";
			}
			if(this._usesOffset) {
				var startOffsetValue = this._mode == 1 ? animationRegisterCache.getFreeVertexAttribute() : animationRegisterCache.getFreeVertexConstant();
				var deltaOffsetValue = this._mode == 1 ? animationRegisterCache.getFreeVertexAttribute() : animationRegisterCache.getFreeVertexConstant();
				animationRegisterCache.setRegisterIndex(this,2,startOffsetValue.get_index());
				animationRegisterCache.setRegisterIndex(this,3,deltaOffsetValue.get_index());
				code += "mul " + Std.string(temp) + "," + Std.string(deltaOffsetValue) + "," + (this._usesCycle ? sin.toString() : animationRegisterCache.vertexLife.toString()) + "\n";
				code += "add " + Std.string(temp) + "," + Std.string(temp) + "," + Std.string(startOffsetValue) + "\n";
				code += "add " + Std.string(animationRegisterCache.colorAddTarget) + "," + Std.string(temp) + "," + Std.string(animationRegisterCache.colorAddTarget) + "\n";
			}
		}
		return code;
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticleColorState);
	}
	,processAnimationSetting: function(particleAnimationSet) {
		if(this._usesMultiplier) {
			particleAnimationSet.hasColorMulNode = true;
		}
		if(this._usesOffset) {
			particleAnimationSet.hasColorAddNode = true;
		}
	}
	,generatePropertyOfOneParticle: function(param) {
		var _this = param.nodes;
		var startColor = __map_reserved["ColorStartColorTransform"] != null ? _this.getReserved("ColorStartColorTransform") : _this.h["ColorStartColorTransform"];
		if(startColor == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "ColorStartColorTransform" + " in param!"));
		}
		var _this1 = param.nodes;
		var endColor = __map_reserved["ColorEndColorTransform"] != null ? _this1.getReserved("ColorEndColorTransform") : _this1.h["ColorEndColorTransform"];
		if(endColor == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "ColorEndColorTransform" + " in param!"));
		}
		var i = 0;
		if(!this._usesCycle) {
			if(this._usesMultiplier) {
				this._oneData.set(i++,startColor.redMultiplier);
				this._oneData.set(i++,startColor.greenMultiplier);
				this._oneData.set(i++,startColor.blueMultiplier);
				this._oneData.set(i++,startColor.alphaMultiplier);
				this._oneData.set(i++,endColor.redMultiplier - startColor.redMultiplier);
				this._oneData.set(i++,endColor.greenMultiplier - startColor.greenMultiplier);
				this._oneData.set(i++,endColor.blueMultiplier - startColor.blueMultiplier);
				this._oneData.set(i++,endColor.alphaMultiplier - startColor.alphaMultiplier);
			}
			if(this._usesOffset) {
				this._oneData.set(i++,startColor.redOffset / 255);
				this._oneData.set(i++,startColor.greenOffset / 255);
				this._oneData.set(i++,startColor.blueOffset / 255);
				this._oneData.set(i++,startColor.alphaOffset / 255);
				this._oneData.set(i++,(endColor.redOffset - startColor.redOffset) / 255);
				this._oneData.set(i++,(endColor.greenOffset - startColor.greenOffset) / 255);
				this._oneData.set(i++,(endColor.blueOffset - startColor.blueOffset) / 255);
				this._oneData.set(i++,(endColor.alphaOffset - startColor.alphaOffset) / 255);
			}
		} else {
			if(this._usesMultiplier) {
				this._oneData.set(i++,(startColor.redMultiplier + endColor.redMultiplier) / 2);
				this._oneData.set(i++,(startColor.greenMultiplier + endColor.greenMultiplier) / 2);
				this._oneData.set(i++,(startColor.blueMultiplier + endColor.blueMultiplier) / 2);
				this._oneData.set(i++,(startColor.alphaMultiplier + endColor.alphaMultiplier) / 2);
				this._oneData.set(i++,(startColor.redMultiplier - endColor.redMultiplier) / 2);
				this._oneData.set(i++,(startColor.greenMultiplier - endColor.greenMultiplier) / 2);
				this._oneData.set(i++,(startColor.blueMultiplier - endColor.blueMultiplier) / 2);
				this._oneData.set(i++,(startColor.alphaMultiplier - endColor.alphaMultiplier) / 2);
			}
			if(this._usesOffset) {
				this._oneData.set(i++,(startColor.redOffset + endColor.redOffset) / 510);
				this._oneData.set(i++,(startColor.greenOffset + endColor.greenOffset) / 510);
				this._oneData.set(i++,(startColor.blueOffset + endColor.blueOffset) / 510);
				this._oneData.set(i++,(startColor.alphaOffset + endColor.alphaOffset) / 510);
				this._oneData.set(i++,(startColor.redOffset - endColor.redOffset) / 510);
				this._oneData.set(i++,(startColor.greenOffset - endColor.greenOffset) / 510);
				this._oneData.set(i++,(startColor.blueOffset - endColor.blueOffset) / 510);
				this._oneData.set(i++,(startColor.alphaOffset - endColor.alphaOffset) / 510);
			}
		}
	}
	,__class__: away3d_animators_nodes_ParticleColorNode
});
var away3d_animators_nodes_ParticleInitialColorNode = function(mode,usesMultiplier,usesOffset,initialColor) {
	if(usesOffset == null) {
		usesOffset = false;
	}
	if(usesMultiplier == null) {
		usesMultiplier = true;
	}
	this._stateConstructor = function(animator,particleInitialColorNode) {
		return new away3d_animators_states_ParticleInitialColorState(animator,particleInitialColorNode);
	};
	this._usesMultiplier = usesMultiplier;
	this._usesOffset = usesOffset;
	this._initialColor = initialColor;
	if(this._initialColor == null) {
		this._initialColor = new openfl_geom_ColorTransform();
	}
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleInitialColor",mode,this._usesMultiplier && this._usesOffset ? 8 : 4,away3d_animators_ParticleAnimationSet.COLOR_PRIORITY);
};
$hxClasses["away3d.animators.nodes.ParticleInitialColorNode"] = away3d_animators_nodes_ParticleInitialColorNode;
away3d_animators_nodes_ParticleInitialColorNode.__name__ = ["away3d","animators","nodes","ParticleInitialColorNode"];
away3d_animators_nodes_ParticleInitialColorNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleInitialColorNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_usesMultiplier: null
	,_usesOffset: null
	,_initialColor: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var code = "";
		if(animationRegisterCache.needFragmentAnimation) {
			if(this._usesMultiplier) {
				var multiplierValue = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
				animationRegisterCache.setRegisterIndex(this,0,multiplierValue.get_index());
				code += "mul " + Std.string(animationRegisterCache.colorMulTarget) + "," + Std.string(multiplierValue) + "," + Std.string(animationRegisterCache.colorMulTarget) + "\n";
			}
			if(this._usesOffset) {
				var offsetValue = this._mode == 1 ? animationRegisterCache.getFreeVertexAttribute() : animationRegisterCache.getFreeVertexConstant();
				animationRegisterCache.setRegisterIndex(this,1,offsetValue.get_index());
				code += "add " + Std.string(animationRegisterCache.colorAddTarget) + "," + Std.string(offsetValue) + "," + Std.string(animationRegisterCache.colorAddTarget) + "\n";
			}
		}
		return code;
	}
	,processAnimationSetting: function(particleAnimationSet) {
		if(this._usesMultiplier) {
			particleAnimationSet.hasColorMulNode = true;
		}
		if(this._usesOffset) {
			particleAnimationSet.hasColorAddNode = true;
		}
	}
	,generatePropertyOfOneParticle: function(param) {
		var _this = param.nodes;
		var initialColor = __map_reserved["ColorInitialColorTransform"] != null ? _this.getReserved("ColorInitialColorTransform") : _this.h["ColorInitialColorTransform"];
		if(initialColor == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "ColorInitialColorTransform" + " in param!"));
		}
		var i = 0;
		if(this._usesMultiplier) {
			this._oneData.set(i++,initialColor.redMultiplier);
			this._oneData.set(i++,initialColor.greenMultiplier);
			this._oneData.set(i++,initialColor.blueMultiplier);
			this._oneData.set(i++,initialColor.alphaMultiplier);
		}
		if(this._usesOffset) {
			this._oneData.set(i++,initialColor.redOffset / 255);
			this._oneData.set(i++,initialColor.greenOffset / 255);
			this._oneData.set(i++,initialColor.blueOffset / 255);
			this._oneData.set(i++,initialColor.alphaOffset / 255);
		}
	}
	,__class__: away3d_animators_nodes_ParticleInitialColorNode
});
var away3d_animators_nodes_ParticlePositionNode = function(mode,position) {
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticlePosition",mode,3);
	this._stateConstructor = function(animator,particlePositionNode) {
		return new away3d_animators_states_ParticlePositionState(animator,particlePositionNode);
	};
	this._position = position;
	if(this._position == null) {
		this._position = new openfl_geom_Vector3D();
	}
};
$hxClasses["away3d.animators.nodes.ParticlePositionNode"] = away3d_animators_nodes_ParticlePositionNode;
away3d_animators_nodes_ParticlePositionNode.__name__ = ["away3d","animators","nodes","ParticlePositionNode"];
away3d_animators_nodes_ParticlePositionNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticlePositionNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_position: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var positionAttribute = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,0,positionAttribute.get_index());
		return "add " + Std.string(animationRegisterCache.positionTarget) + ".xyz," + Std.string(positionAttribute) + ".xyz," + Std.string(animationRegisterCache.positionTarget) + ".xyz\n";
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticlePositionState);
	}
	,generatePropertyOfOneParticle: function(param) {
		var _this = param.nodes;
		var offset = __map_reserved["PositionVector3D"] != null ? _this.getReserved("PositionVector3D") : _this.h["PositionVector3D"];
		if(offset == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "PositionVector3D" + " in param!"));
		}
		this._oneData.set(0,offset.x);
		this._oneData.set(1,offset.y);
		this._oneData.set(2,offset.z);
	}
	,__class__: away3d_animators_nodes_ParticlePositionNode
});
var away3d_animators_nodes_ParticleScaleNode = function(mode,usesCycle,usesPhase,minScale,maxScale,cycleDuration,cyclePhase) {
	if(cyclePhase == null) {
		cyclePhase = 0;
	}
	if(cycleDuration == null) {
		cycleDuration = 1;
	}
	if(maxScale == null) {
		maxScale = 1;
	}
	if(minScale == null) {
		minScale = 1;
	}
	var len = 2;
	if(usesCycle) {
		++len;
	}
	if(usesPhase) {
		++len;
	}
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleScale",mode,len,3);
	this._stateConstructor = function(animator,particleScaleNode) {
		return new away3d_animators_states_ParticleScaleState(animator,particleScaleNode);
	};
	this._usesCycle = usesCycle;
	this._usesPhase = usesPhase;
	this._minScale = minScale;
	this._maxScale = maxScale;
	this._cycleDuration = cycleDuration;
	this._cyclePhase = cyclePhase;
};
$hxClasses["away3d.animators.nodes.ParticleScaleNode"] = away3d_animators_nodes_ParticleScaleNode;
away3d_animators_nodes_ParticleScaleNode.__name__ = ["away3d","animators","nodes","ParticleScaleNode"];
away3d_animators_nodes_ParticleScaleNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleScaleNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_usesCycle: null
	,_usesPhase: null
	,_minScale: null
	,_maxScale: null
	,_cycleDuration: null
	,_cyclePhase: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var code = "";
		var temp = animationRegisterCache.getFreeVertexSingleTemp();
		var scaleRegister = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,0,scaleRegister.get_index());
		if(this._usesCycle) {
			code += "mul " + Std.string(temp) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(scaleRegister) + ".z\n";
			if(this._usesPhase) {
				code += "add " + Std.string(temp) + "," + Std.string(temp) + "," + Std.string(scaleRegister) + ".w\n";
			}
			code += "sin " + Std.string(temp) + "," + Std.string(temp) + "\n";
		}
		code += "mul " + Std.string(temp) + "," + Std.string(scaleRegister) + ".y," + Std.string(this._usesCycle ? temp : animationRegisterCache.vertexLife) + "\n";
		code += "add " + Std.string(temp) + "," + Std.string(scaleRegister) + ".x," + Std.string(temp) + "\n";
		code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(temp) + "\n";
		return code;
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticleScaleState);
	}
	,generatePropertyOfOneParticle: function(param) {
		var _this = param.nodes;
		var scale = __map_reserved["ScaleVector3D"] != null ? _this.getReserved("ScaleVector3D") : _this.h["ScaleVector3D"];
		if(scale == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "ScaleVector3D" + " in param!"));
		}
		if(this._usesCycle) {
			this._oneData.set(0,(scale.x + scale.y) / 2);
			this._oneData.set(1,Math.abs(scale.x - scale.y) / 2);
			if(scale.z <= 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("the cycle duration must be greater than zero"));
			}
			this._oneData.set(2,Math.PI * 2 / scale.z);
			if(this._usesPhase) {
				this._oneData.set(3,scale.w * Math.PI / 180);
			}
		} else {
			this._oneData.set(0,scale.x);
			this._oneData.set(1,scale.y - scale.x);
		}
	}
	,__class__: away3d_animators_nodes_ParticleScaleNode
});
var away3d_animators_nodes_ParticleTimeNode = function(usesDuration,usesLooping,usesDelay) {
	if(usesDelay == null) {
		usesDelay = false;
	}
	if(usesLooping == null) {
		usesLooping = false;
	}
	if(usesDuration == null) {
		usesDuration = false;
	}
	this._stateConstructor = function(animator,particleTimeNode) {
		return new away3d_animators_states_ParticleTimeState(animator,particleTimeNode);
	};
	this._usesDuration = usesDuration;
	this._usesLooping = usesLooping;
	this._usesDelay = usesDelay;
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleTime",1,4,0);
};
$hxClasses["away3d.animators.nodes.ParticleTimeNode"] = away3d_animators_nodes_ParticleTimeNode;
away3d_animators_nodes_ParticleTimeNode.__name__ = ["away3d","animators","nodes","ParticleTimeNode"];
away3d_animators_nodes_ParticleTimeNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleTimeNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_usesDuration: null
	,_usesDelay: null
	,_usesLooping: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var timeStreamRegister = animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,0,timeStreamRegister.get_index());
		var timeConst = animationRegisterCache.getFreeVertexConstant();
		animationRegisterCache.setRegisterIndex(this,1,timeConst.get_index());
		var code = "";
		code += "sub " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeConst) + "," + Std.string(timeStreamRegister) + ".x\n";
		var temp = animationRegisterCache.getFreeVertexSingleTemp();
		code += "sge " + Std.string(temp) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(animationRegisterCache.vertexZeroConst) + "\n";
		code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(temp) + "\n";
		if(this._usesDuration) {
			if(this._usesLooping) {
				var div = animationRegisterCache.getFreeVertexSingleTemp();
				if(this._usesDelay) {
					code += "div " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".z\n";
					code += "frc " + Std.string(div) + "," + Std.string(div) + "\n";
					code += "mul " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(div) + "," + Std.string(timeStreamRegister) + ".z\n";
					code += "slt " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".y\n";
					code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(div) + "\n";
				} else {
					code += "mul " + Std.string(div) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".w\n";
					code += "frc " + Std.string(div) + "," + Std.string(div) + "\n";
					code += "mul " + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(div) + "," + Std.string(timeStreamRegister) + ".y\n";
				}
			} else {
				var sge = animationRegisterCache.getFreeVertexSingleTemp();
				code += "sge " + Std.string(sge) + "," + Std.string(timeStreamRegister) + ".y," + Std.string(animationRegisterCache.vertexTime) + "\n";
				code += "mul " + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(animationRegisterCache.scaleAndRotateTarget) + ".xyz," + Std.string(sge) + "\n";
			}
		}
		code += "mul " + Std.string(animationRegisterCache.vertexLife) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(timeStreamRegister) + ".w\n";
		return code;
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticleTimeState);
	}
	,generatePropertyOfOneParticle: function(param) {
		this._oneData.set(0,param.startTime);
		this._oneData.set(1,param.duration);
		this._oneData.set(2,param.delay + param.duration);
		this._oneData.set(3,1 / param.duration);
	}
	,__class__: away3d_animators_nodes_ParticleTimeNode
});
var away3d_animators_nodes_ParticleVelocityNode = function(mode,velocity) {
	away3d_animators_nodes_ParticleNodeBase.call(this,"ParticleVelocity",mode,3);
	this._stateConstructor = function(animator,particleVelocityNode) {
		return new away3d_animators_states_ParticleVelocityState(animator,particleVelocityNode);
	};
	this._velocity = velocity;
	if(this._velocity == null) {
		this._velocity = new openfl_geom_Vector3D();
	}
};
$hxClasses["away3d.animators.nodes.ParticleVelocityNode"] = away3d_animators_nodes_ParticleVelocityNode;
away3d_animators_nodes_ParticleVelocityNode.__name__ = ["away3d","animators","nodes","ParticleVelocityNode"];
away3d_animators_nodes_ParticleVelocityNode.__super__ = away3d_animators_nodes_ParticleNodeBase;
away3d_animators_nodes_ParticleVelocityNode.prototype = $extend(away3d_animators_nodes_ParticleNodeBase.prototype,{
	_velocity: null
	,getAGALVertexCode: function(pass,animationRegisterCache) {
		var velocityValue = this._mode == 0 ? animationRegisterCache.getFreeVertexConstant() : animationRegisterCache.getFreeVertexAttribute();
		animationRegisterCache.setRegisterIndex(this,0,velocityValue.get_index());
		var distance = animationRegisterCache.getFreeVertexVectorTemp();
		var code = "";
		code += "mul " + Std.string(distance) + "," + Std.string(animationRegisterCache.vertexTime) + "," + Std.string(velocityValue) + "\n";
		code += "add " + Std.string(animationRegisterCache.positionTarget) + ".xyz," + Std.string(distance) + "," + Std.string(animationRegisterCache.positionTarget) + ".xyz\n";
		if(animationRegisterCache.needVelocity) {
			code += "add " + Std.string(animationRegisterCache.velocityTarget) + ".xyz," + Std.string(velocityValue) + ".xyz," + Std.string(animationRegisterCache.velocityTarget) + ".xyz\n";
		}
		return code;
	}
	,getAnimationState: function(animator) {
		return js_Boot.__cast(animator.getAnimationState(this) , away3d_animators_states_ParticleVelocityState);
	}
	,generatePropertyOfOneParticle: function(param) {
		var _this = param.nodes;
		var _tempVelocity = __map_reserved["VelocityVector3D"] != null ? _this.getReserved("VelocityVector3D") : _this.h["VelocityVector3D"];
		if(_tempVelocity == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("there is no " + "VelocityVector3D" + " in param!"));
		}
		this._oneData.set(0,_tempVelocity.x);
		this._oneData.set(1,_tempVelocity.y);
		this._oneData.set(2,_tempVelocity.z);
	}
	,__class__: away3d_animators_nodes_ParticleVelocityNode
});
var away3d_animators_states_IAnimationState = function() { };
$hxClasses["away3d.animators.states.IAnimationState"] = away3d_animators_states_IAnimationState;
away3d_animators_states_IAnimationState.__name__ = ["away3d","animators","states","IAnimationState"];
away3d_animators_states_IAnimationState.prototype = {
	get_positionDelta: null
	,offset: null
	,update: null
	,phase: null
	,__class__: away3d_animators_states_IAnimationState
};
var away3d_animators_states_AnimationStateBase = function(animator,animationNode) {
	this._startTime = 0;
	this._time = 0;
	this._positionDeltaDirty = true;
	this._rootDelta = new openfl_geom_Vector3D();
	this._animator = animator;
	this._animationNode = animationNode;
};
$hxClasses["away3d.animators.states.AnimationStateBase"] = away3d_animators_states_AnimationStateBase;
away3d_animators_states_AnimationStateBase.__name__ = ["away3d","animators","states","AnimationStateBase"];
away3d_animators_states_AnimationStateBase.__interfaces__ = [away3d_animators_states_IAnimationState];
away3d_animators_states_AnimationStateBase.prototype = {
	_animationNode: null
	,_rootDelta: null
	,_positionDeltaDirty: null
	,_time: null
	,_startTime: null
	,_animator: null
	,get_positionDelta: function() {
		if(this._positionDeltaDirty) {
			this.updatePositionDelta();
		}
		return this._rootDelta;
	}
	,offset: function(startTime) {
		this._startTime = startTime;
		this._positionDeltaDirty = true;
	}
	,update: function(time) {
		if(this._time == time - this._startTime) {
			return;
		}
		this.updateTime(time);
	}
	,phase: function(value) {
	}
	,updateTime: function(time) {
		this._time = time - this._startTime;
		this._positionDeltaDirty = true;
	}
	,updatePositionDelta: function() {
	}
	,__class__: away3d_animators_states_AnimationStateBase
};
var away3d_animators_states_ParticleStateBase = function(animator,particleNode,needUpdateTime) {
	if(needUpdateTime == null) {
		needUpdateTime = false;
	}
	this._dynamicPropertiesDirty = new haxe_ds_ObjectMap();
	this._dynamicProperties = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	away3d_animators_states_AnimationStateBase.call(this,animator,particleNode);
	this._particleNode = particleNode;
	this._needUpdateTime = needUpdateTime;
};
$hxClasses["away3d.animators.states.ParticleStateBase"] = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleStateBase.__name__ = ["away3d","animators","states","ParticleStateBase"];
away3d_animators_states_ParticleStateBase.__super__ = away3d_animators_states_AnimationStateBase;
away3d_animators_states_ParticleStateBase.prototype = $extend(away3d_animators_states_AnimationStateBase.prototype,{
	_particleNode: null
	,_dynamicProperties: null
	,_dynamicPropertiesDirty: null
	,_needUpdateTime: null
	,get_needUpdateTime: function() {
		return this._needUpdateTime;
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
	}
	,updateDynamicProperties: function(animationSubGeometry) {
		this._dynamicPropertiesDirty.set(animationSubGeometry,true);
		var animationParticles = animationSubGeometry.animationParticles;
		var vertexData = animationSubGeometry.get_vertexData();
		var totalLenOfOneVertex = animationSubGeometry.get_totalLenOfOneVertex();
		var dataLength = this._particleNode.get_dataLength();
		var dataOffset = this._particleNode.dataOffset;
		var vertexLength;
		var startingOffset;
		var vertexOffset;
		var data;
		var animationParticle = null;
		var numParticles = this._dynamicProperties.get_length();
		var i = 0;
		var j = 0;
		var k = 0;
		while(i < numParticles) {
			while(true) {
				var tmp;
				if(j < numParticles) {
					animationParticle = animationParticles.get(j);
					tmp = animationParticle.index == i;
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				data = this._dynamicProperties.get(i);
				vertexLength = animationParticle.numVertices * totalLenOfOneVertex;
				startingOffset = animationParticle.startVertexIndex * totalLenOfOneVertex + dataOffset;
				k = 0;
				while(k < vertexLength) {
					vertexOffset = startingOffset + k;
					k = 0;
					while(k < vertexLength) {
						vertexOffset = startingOffset + k;
						vertexData.set(vertexOffset++,data.x);
						vertexData.set(vertexOffset++,data.y);
						vertexData.set(vertexOffset++,data.z);
						if(dataLength == 4) {
							vertexData.set(vertexOffset++,data.w);
						}
						k += totalLenOfOneVertex;
					}
					k += totalLenOfOneVertex;
				}
				++j;
			}
			++i;
		}
		animationSubGeometry.invalidateBuffer();
	}
	,__class__: away3d_animators_states_ParticleStateBase
});
var away3d_animators_states_ParticleBillboardState = function(animator,particleNode) {
	this._matrix = new openfl_geom_Matrix3D();
	away3d_animators_states_ParticleStateBase.call(this,animator,particleNode);
	this.set_billboardAxis(particleNode._billboardAxis);
};
$hxClasses["away3d.animators.states.ParticleBillboardState"] = away3d_animators_states_ParticleBillboardState;
away3d_animators_states_ParticleBillboardState.__name__ = ["away3d","animators","states","ParticleBillboardState"];
away3d_animators_states_ParticleBillboardState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleBillboardState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_matrix: null
	,_billboardAxis: null
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		var comps;
		if(this._billboardAxis != null) {
			var pos = renderable.getRenderSceneTransform(camera).get_position();
			var look = camera.get_sceneTransform().get_position().subtract(pos);
			var right = look.crossProduct(this._billboardAxis);
			right.normalize();
			look = this._billboardAxis.crossProduct(right);
			look.normalize();
			this._matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			comps = away3d_core_math_Matrix3DUtils.decompose(this._matrix,0);
			this._matrix.copyColumnFrom(0,right);
			this._matrix.copyColumnFrom(1,this._billboardAxis);
			this._matrix.copyColumnFrom(2,look);
			this._matrix.copyColumnFrom(3,pos);
			this._matrix.appendRotation(-comps.get(1).w * away3d_core_math_MathConsts.RADIANS_TO_DEGREES,comps.get(1));
		} else {
			this._matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			this._matrix.append(camera.get_inverseSceneTransform());
			comps = away3d_core_math_Matrix3DUtils.decompose(this._matrix,0);
			this._matrix.identity();
			this._matrix.appendRotation(-comps.get(1).w * away3d_core_math_MathConsts.RADIANS_TO_DEGREES,comps.get(1));
		}
		animationRegisterCache.setVertexConstFromMatrix(animationRegisterCache.getRegisterIndex(this._animationNode,0),this._matrix);
	}
	,get_billboardAxis: function() {
		return this._billboardAxis;
	}
	,set_billboardAxis: function(value) {
		this._billboardAxis = value != null ? value.clone() : null;
		if(this._billboardAxis != null) {
			this._billboardAxis.normalize();
		}
		return value;
	}
	,__class__: away3d_animators_states_ParticleBillboardState
});
var away3d_animators_states_ParticleColorState = function(animator,particleColorNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particleColorNode);
	this._particleColorNode = particleColorNode;
	this._usesMultiplier = this._particleColorNode._usesMultiplier;
	this._usesOffset = this._particleColorNode._usesOffset;
	this._usesCycle = this._particleColorNode._usesCycle;
	this._usesPhase = this._particleColorNode._usesPhase;
	this._startColor = this._particleColorNode._startColor;
	this._endColor = this._particleColorNode._endColor;
	this._cycleDuration = this._particleColorNode._cycleDuration;
	this._cyclePhase = this._particleColorNode._cyclePhase;
	this.updateColorData();
};
$hxClasses["away3d.animators.states.ParticleColorState"] = away3d_animators_states_ParticleColorState;
away3d_animators_states_ParticleColorState.__name__ = ["away3d","animators","states","ParticleColorState"];
away3d_animators_states_ParticleColorState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleColorState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particleColorNode: null
	,_usesMultiplier: null
	,_usesOffset: null
	,_usesCycle: null
	,_usesPhase: null
	,_startColor: null
	,_endColor: null
	,_cycleDuration: null
	,_cyclePhase: null
	,_cycleData: null
	,_startMultiplierData: null
	,_deltaMultiplierData: null
	,_startOffsetData: null
	,_deltaOffsetData: null
	,get_startColor: function() {
		return this._startColor;
	}
	,set_startColor: function(value) {
		this._startColor = value;
		this.updateColorData();
		return value;
	}
	,get_endColor: function() {
		return this._endColor;
	}
	,set_endColor: function(value) {
		this._endColor = value;
		this.updateColorData();
		return value;
	}
	,get_cycleDuration: function() {
		return this._cycleDuration;
	}
	,set_cycleDuration: function(value) {
		this._cycleDuration = value;
		this.updateColorData();
		return value;
	}
	,get_cyclePhase: function() {
		return this._cyclePhase;
	}
	,set_cyclePhase: function(value) {
		this._cyclePhase = value;
		this.updateColorData();
		return value;
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(animationRegisterCache.needFragmentAnimation) {
			var dataOffset = this._particleColorNode.dataOffset;
			if(this._usesCycle) {
				animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,4),this._cycleData.x,this._cycleData.y,this._cycleData.z,this._cycleData.w);
			}
			if(this._usesMultiplier) {
				if(this._particleColorNode.get_mode() == 1) {
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,0),dataOffset,stage3DProxy,4);
					dataOffset += 4;
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,1),dataOffset,stage3DProxy,4);
					dataOffset += 4;
				} else {
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,0),this._startMultiplierData.x,this._startMultiplierData.y,this._startMultiplierData.z,this._startMultiplierData.w);
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,1),this._deltaMultiplierData.x,this._deltaMultiplierData.y,this._deltaMultiplierData.z,this._deltaMultiplierData.w);
				}
			}
			if(this._usesOffset) {
				if(this._particleColorNode.get_mode() == 1) {
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,2),dataOffset,stage3DProxy,4);
					dataOffset += 4;
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,3),dataOffset,stage3DProxy,4);
					dataOffset += 4;
				} else {
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,2),this._startOffsetData.x,this._startOffsetData.y,this._startOffsetData.z,this._startOffsetData.w);
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,3),this._deltaOffsetData.x,this._deltaOffsetData.y,this._deltaOffsetData.z,this._deltaOffsetData.w);
				}
			}
		}
	}
	,updateColorData: function() {
		if(this._usesCycle) {
			if(this._cycleDuration <= 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("the cycle duration must be greater than zero"));
			}
			this._cycleData = new openfl_geom_Vector3D(Math.PI * 2 / this._cycleDuration,this._cyclePhase * Math.PI / 180,0,0);
		}
		if(this._particleColorNode.get_mode() == 0) {
			if(this._usesCycle) {
				if(this._usesMultiplier) {
					this._startMultiplierData = new openfl_geom_Vector3D((this._startColor.redMultiplier + this._endColor.redMultiplier) / 2,(this._startColor.greenMultiplier + this._endColor.greenMultiplier) / 2,(this._startColor.blueMultiplier + this._endColor.blueMultiplier) / 2,(this._startColor.alphaMultiplier + this._endColor.alphaMultiplier) / 2);
					this._deltaMultiplierData = new openfl_geom_Vector3D((this._endColor.redMultiplier - this._startColor.redMultiplier) / 2,(this._endColor.greenMultiplier - this._startColor.greenMultiplier) / 2,(this._endColor.blueMultiplier - this._startColor.blueMultiplier) / 2,(this._endColor.alphaMultiplier - this._startColor.alphaMultiplier) / 2);
				}
				if(this._usesOffset) {
					this._startOffsetData = new openfl_geom_Vector3D((this._startColor.redOffset + this._endColor.redOffset) / 510,(this._startColor.greenOffset + this._endColor.greenOffset) / 510,(this._startColor.blueOffset + this._endColor.blueOffset) / 510,(this._startColor.alphaOffset + this._endColor.alphaOffset) / 510);
					this._deltaOffsetData = new openfl_geom_Vector3D((this._endColor.redOffset - this._startColor.redOffset) / 510,(this._endColor.greenOffset - this._startColor.greenOffset) / 510,(this._endColor.blueOffset - this._startColor.blueOffset) / 510,(this._endColor.alphaOffset - this._startColor.alphaOffset) / 510);
				}
			} else {
				if(this._usesMultiplier) {
					this._startMultiplierData = new openfl_geom_Vector3D(this._startColor.redMultiplier,this._startColor.greenMultiplier,this._startColor.blueMultiplier,this._startColor.alphaMultiplier);
					this._deltaMultiplierData = new openfl_geom_Vector3D(this._endColor.redMultiplier - this._startColor.redMultiplier,this._endColor.greenMultiplier - this._startColor.greenMultiplier,this._endColor.blueMultiplier - this._startColor.blueMultiplier,this._endColor.alphaMultiplier - this._startColor.alphaMultiplier);
				}
				if(this._usesOffset) {
					this._startOffsetData = new openfl_geom_Vector3D(this._startColor.redOffset / 255,this._startColor.greenOffset / 255,this._startColor.blueOffset / 255,this._startColor.alphaOffset / 255);
					this._deltaOffsetData = new openfl_geom_Vector3D((this._endColor.redOffset - this._startColor.redOffset) / 255,(this._endColor.greenOffset - this._startColor.greenOffset) / 255,(this._endColor.blueOffset - this._startColor.blueOffset) / 255,(this._endColor.alphaOffset - this._startColor.alphaOffset) / 255);
				}
			}
		}
	}
	,__class__: away3d_animators_states_ParticleColorState
});
var away3d_animators_states_ParticleInitialColorState = function(animator,particleInitialColorNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particleInitialColorNode);
	this._particleInitialColorNode = particleInitialColorNode;
	this._usesMultiplier = particleInitialColorNode._usesMultiplier;
	this._usesOffset = particleInitialColorNode._usesOffset;
	this._initialColor = particleInitialColorNode._initialColor;
	this.updateColorData();
};
$hxClasses["away3d.animators.states.ParticleInitialColorState"] = away3d_animators_states_ParticleInitialColorState;
away3d_animators_states_ParticleInitialColorState.__name__ = ["away3d","animators","states","ParticleInitialColorState"];
away3d_animators_states_ParticleInitialColorState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleInitialColorState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particleInitialColorNode: null
	,_usesMultiplier: null
	,_usesOffset: null
	,_initialColor: null
	,_multiplierData: null
	,_offsetData: null
	,get_initialColor: function() {
		return this._initialColor;
	}
	,set_initialColor: function(value) {
		this._initialColor = value;
		return value;
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(animationRegisterCache.needFragmentAnimation) {
			if(this._particleInitialColorNode.get_mode() == 1) {
				var dataOffset = this._particleInitialColorNode.dataOffset;
				if(this._usesMultiplier) {
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,0),dataOffset,stage3DProxy,4);
					dataOffset += 4;
				}
				if(this._usesOffset) {
					animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,1),dataOffset,stage3DProxy,4);
				}
			} else {
				if(this._usesMultiplier) {
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,0),this._multiplierData.x,this._multiplierData.y,this._multiplierData.z,this._multiplierData.w);
				}
				if(this._usesOffset) {
					animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,1),this._offsetData.x,this._offsetData.y,this._offsetData.z,this._offsetData.w);
				}
			}
		}
	}
	,updateColorData: function() {
		if(this._particleInitialColorNode.get_mode() == 0) {
			if(this._usesMultiplier) {
				this._multiplierData = new openfl_geom_Vector3D(this._initialColor.redMultiplier,this._initialColor.greenMultiplier,this._initialColor.blueMultiplier,this._initialColor.alphaMultiplier);
			}
			if(this._usesOffset) {
				this._offsetData = new openfl_geom_Vector3D(this._initialColor.redOffset / 255,this._initialColor.greenOffset / 255,this._initialColor.blueOffset / 255,this._initialColor.alphaOffset / 255);
			}
		}
	}
	,__class__: away3d_animators_states_ParticleInitialColorState
});
var away3d_animators_states_ParticlePositionState = function(animator,particlePositionNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particlePositionNode);
	this._particlePositionNode = particlePositionNode;
	this._position = this._particlePositionNode._position;
};
$hxClasses["away3d.animators.states.ParticlePositionState"] = away3d_animators_states_ParticlePositionState;
away3d_animators_states_ParticlePositionState.__name__ = ["away3d","animators","states","ParticlePositionState"];
away3d_animators_states_ParticlePositionState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticlePositionState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particlePositionNode: null
	,_position: null
	,get_position: function() {
		return this._position;
	}
	,set_position: function(value) {
		this._position = value;
		return value;
	}
	,getPositions: function() {
		return this._dynamicProperties;
	}
	,setPositions: function(value) {
		this._dynamicProperties = value;
		this._dynamicPropertiesDirty = new haxe_ds_ObjectMap();
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(this._particlePositionNode.get_mode() == 2 && this._dynamicPropertiesDirty.h.__keys__[animationSubGeometry.__id__] == null) {
			this.updateDynamicProperties(animationSubGeometry);
		}
		var index = animationRegisterCache.getRegisterIndex(this._animationNode,0);
		if(this._particlePositionNode.get_mode() == 0) {
			animationRegisterCache.setVertexConst(index,this._position.x,this._position.y,this._position.z);
		} else {
			animationSubGeometry.activateVertexBuffer(index,this._particlePositionNode.dataOffset,stage3DProxy,3);
		}
	}
	,__class__: away3d_animators_states_ParticlePositionState
});
var away3d_animators_states_ParticleScaleState = function(animator,particleScaleNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particleScaleNode);
	this._particleScaleNode = particleScaleNode;
	this._usesCycle = this._particleScaleNode._usesCycle;
	this._usesPhase = this._particleScaleNode._usesPhase;
	this._minScale = this._particleScaleNode._minScale;
	this._maxScale = this._particleScaleNode._maxScale;
	this._cycleDuration = this._particleScaleNode._cycleDuration;
	this._cyclePhase = this._particleScaleNode._cyclePhase;
	this.updateScaleData();
};
$hxClasses["away3d.animators.states.ParticleScaleState"] = away3d_animators_states_ParticleScaleState;
away3d_animators_states_ParticleScaleState.__name__ = ["away3d","animators","states","ParticleScaleState"];
away3d_animators_states_ParticleScaleState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleScaleState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particleScaleNode: null
	,_usesCycle: null
	,_usesPhase: null
	,_minScale: null
	,_maxScale: null
	,_cycleDuration: null
	,_cyclePhase: null
	,_scaleData: null
	,get_minScale: function() {
		return this._minScale;
	}
	,set_minScale: function(value) {
		this._minScale = value;
		this.updateScaleData();
		return value;
	}
	,get_maxScale: function() {
		return this._maxScale;
	}
	,set_maxScale: function(value) {
		this._maxScale = value;
		this.updateScaleData();
		return value;
	}
	,get_cycleDuration: function() {
		return this._cycleDuration;
	}
	,set_cycleDuration: function(value) {
		this._cycleDuration = value;
		this.updateScaleData();
		return value;
	}
	,get_cyclePhase: function() {
		return this._cyclePhase;
	}
	,set_cyclePhase: function(value) {
		this._cyclePhase = value;
		this.updateScaleData();
		return value;
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		var index = animationRegisterCache.getRegisterIndex(this._animationNode,0);
		if(this._particleScaleNode.get_mode() == 1) {
			if(this._usesCycle) {
				if(this._usesPhase) {
					animationSubGeometry.activateVertexBuffer(index,this._particleScaleNode.dataOffset,stage3DProxy,4);
				} else {
					animationSubGeometry.activateVertexBuffer(index,this._particleScaleNode.dataOffset,stage3DProxy,3);
				}
			} else {
				animationSubGeometry.activateVertexBuffer(index,this._particleScaleNode.dataOffset,stage3DProxy,2);
			}
		} else {
			animationRegisterCache.setVertexConst(index,this._scaleData.x,this._scaleData.y,this._scaleData.z,this._scaleData.w);
		}
	}
	,updateScaleData: function() {
		if(this._particleScaleNode.get_mode() == 0) {
			if(this._usesCycle) {
				if(this._cycleDuration <= 0) {
					throw new js__$Boot_HaxeError(new openfl_errors_Error("the cycle duration must be greater than zero"));
				}
				this._scaleData = new openfl_geom_Vector3D((this._minScale + this._maxScale) / 2,Math.abs(this._minScale - this._maxScale) / 2,Math.PI * 2 / this._cycleDuration,this._cyclePhase * Math.PI / 180);
			} else {
				this._scaleData = new openfl_geom_Vector3D(this._minScale,this._maxScale - this._minScale,0,0);
			}
		}
	}
	,__class__: away3d_animators_states_ParticleScaleState
});
var away3d_animators_states_ParticleTimeState = function(animator,particleTimeNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particleTimeNode,true);
	this._particleTimeNode = particleTimeNode;
};
$hxClasses["away3d.animators.states.ParticleTimeState"] = away3d_animators_states_ParticleTimeState;
away3d_animators_states_ParticleTimeState.__name__ = ["away3d","animators","states","ParticleTimeState"];
away3d_animators_states_ParticleTimeState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleTimeState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particleTimeNode: null
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		animationSubGeometry.activateVertexBuffer(animationRegisterCache.getRegisterIndex(this._animationNode,0),this._particleTimeNode.dataOffset,stage3DProxy,4);
		var particleTime = this._time / 1000;
		animationRegisterCache.setVertexConst(animationRegisterCache.getRegisterIndex(this._animationNode,1),particleTime,particleTime,particleTime,particleTime);
	}
	,__class__: away3d_animators_states_ParticleTimeState
});
var away3d_animators_states_ParticleVelocityState = function(animator,particleVelocityNode) {
	away3d_animators_states_ParticleStateBase.call(this,animator,particleVelocityNode);
	this._particleVelocityNode = particleVelocityNode;
	this._velocity = this._particleVelocityNode._velocity;
};
$hxClasses["away3d.animators.states.ParticleVelocityState"] = away3d_animators_states_ParticleVelocityState;
away3d_animators_states_ParticleVelocityState.__name__ = ["away3d","animators","states","ParticleVelocityState"];
away3d_animators_states_ParticleVelocityState.__super__ = away3d_animators_states_ParticleStateBase;
away3d_animators_states_ParticleVelocityState.prototype = $extend(away3d_animators_states_ParticleStateBase.prototype,{
	_particleVelocityNode: null
	,_velocity: null
	,get_velocity: function() {
		return this._velocity;
	}
	,set_velocity: function(value) {
		this._velocity = value;
		return value;
	}
	,getVelocities: function() {
		return this._dynamicProperties;
	}
	,setVelocities: function(value) {
		this._dynamicProperties = value;
		this._dynamicPropertiesDirty = new haxe_ds_ObjectMap();
	}
	,setRenderState: function(stage3DProxy,renderable,animationSubGeometry,animationRegisterCache,camera) {
		if(this._particleVelocityNode.get_mode() == 2 && this._dynamicPropertiesDirty.h.__keys__[animationSubGeometry.__id__] == null) {
			this.updateDynamicProperties(animationSubGeometry);
		}
		var index = animationRegisterCache.getRegisterIndex(this._animationNode,0);
		if(this._particleVelocityNode.get_mode() == 0) {
			animationRegisterCache.setVertexConst(index,this._velocity.x,this._velocity.y,this._velocity.z);
		} else {
			animationSubGeometry.activateVertexBuffer(index,this._particleVelocityNode.dataOffset,stage3DProxy,3);
		}
	}
	,__class__: away3d_animators_states_ParticleVelocityState
});
var away3d_bounds_BoundingVolumeBase = function() {
	this._aabbPointsDirty = true;
	this._aabbPoints = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this._min = new openfl_geom_Vector3D();
	this._max = new openfl_geom_Vector3D();
};
$hxClasses["away3d.bounds.BoundingVolumeBase"] = away3d_bounds_BoundingVolumeBase;
away3d_bounds_BoundingVolumeBase.__name__ = ["away3d","bounds","BoundingVolumeBase"];
away3d_bounds_BoundingVolumeBase.prototype = {
	_min: null
	,_max: null
	,_aabbPoints: null
	,_aabbPointsDirty: null
	,_boundingRenderable: null
	,get_max: function() {
		return this._max;
	}
	,get_min: function() {
		return this._min;
	}
	,get_aabbPoints: function() {
		if(this._aabbPointsDirty) {
			this.updateAABBPoints();
		}
		return this._aabbPoints;
	}
	,get_boundingRenderable: function() {
		if(this._boundingRenderable == null) {
			this._boundingRenderable = this.createBoundingRenderable();
			this.updateBoundingRenderable();
		}
		return this._boundingRenderable;
	}
	,nullify: function() {
		this._min.x = this._min.y = this._min.z = 0;
		this._max.x = this._max.y = this._max.z = 0;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) {
			this.updateBoundingRenderable();
		}
	}
	,disposeRenderable: function() {
		if(this._boundingRenderable != null) {
			this._boundingRenderable.dispose();
		}
		this._boundingRenderable = null;
	}
	,fromVertices: function(vertices) {
		var i = 0;
		var len = vertices.get_length();
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(len == 0) {
			this.nullify();
			return;
		}
		var v;
		maxX = vertices.get(i++);
		minX = maxX;
		maxY = vertices.get(i++);
		minY = maxY;
		maxZ = vertices.get(i++);
		minZ = maxZ;
		while(i < len) {
			v = vertices.get(i++);
			if(v < minX) {
				minX = v;
			} else if(v > maxX) {
				maxX = v;
			}
			v = vertices.get(i++);
			if(v < minY) {
				minY = v;
			} else if(v > maxY) {
				maxY = v;
			}
			v = vertices.get(i++);
			if(v < minZ) {
				minZ = v;
			} else if(v > maxZ) {
				maxZ = v;
			}
		}
		this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
	}
	,fromGeometry: function(geometry) {
		var subGeoms = geometry.get_subGeometries();
		var numSubGeoms = subGeoms.get_length();
		var minX;
		var minY;
		var minZ;
		var maxX;
		var maxY;
		var maxZ;
		if(numSubGeoms > 0) {
			var subGeom = subGeoms.get(0);
			var vertices = subGeom.get_vertexData();
			var i = subGeom.get_vertexOffset();
			maxX = vertices.get(i);
			minX = maxX;
			maxY = vertices.get(i + 1);
			minY = maxY;
			maxZ = vertices.get(i + 2);
			minZ = maxZ;
			var j = 0;
			while(j < numSubGeoms) {
				subGeom = subGeoms.get(j++);
				vertices = subGeom.get_vertexData();
				var vertexDataLen = vertices.get_length();
				i = subGeom.get_vertexOffset();
				var stride = subGeom.get_vertexStride();
				while(i < vertexDataLen) {
					var v = vertices.get(i);
					if(v < minX) {
						minX = v;
					} else if(v > maxX) {
						maxX = v;
					}
					v = vertices.get(i + 1);
					if(v < minY) {
						minY = v;
					} else if(v > maxY) {
						maxY = v;
					}
					v = vertices.get(i + 2);
					if(v < minZ) {
						minZ = v;
					} else if(v > maxZ) {
						maxZ = v;
					}
					i += stride;
				}
			}
			this.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
		} else {
			this.fromExtremes(0,0,0,0,0,0);
		}
	}
	,fromSphere: function(center,radius) {
		this.fromExtremes(center.x - radius,center.y - radius,center.z - radius,center.x + radius,center.y + radius,center.z + radius);
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._min.x = minX;
		this._min.y = minY;
		this._min.z = minZ;
		this._max.x = maxX;
		this._max.y = maxY;
		this._max.z = maxZ;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) {
			this.updateBoundingRenderable();
		}
	}
	,isInFrustum: function(planes,numPlanes) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,overlaps: function(bounds) {
		var min = bounds._min;
		var max = bounds._max;
		if(this._max.x > min.x && this._min.x < max.x && this._max.y > min.y && this._min.y < max.y && this._max.z > min.z) {
			return this._min.z < max.z;
		} else {
			return false;
		}
	}
	,clone: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,rayIntersection: function(position,direction,targetNormal) {
		return -1;
	}
	,containsPoint: function(position) {
		return false;
	}
	,updateAABBPoints: function() {
		var maxX = this._max.x;
		var maxY = this._max.y;
		var maxZ = this._max.z;
		var minX = this._min.x;
		var minY = this._min.y;
		var minZ = this._min.z;
		this._aabbPoints.set(0,minX);
		this._aabbPoints.set(1,minY);
		this._aabbPoints.set(2,minZ);
		this._aabbPoints.set(3,maxX);
		this._aabbPoints.set(4,minY);
		this._aabbPoints.set(5,minZ);
		this._aabbPoints.set(6,minX);
		this._aabbPoints.set(7,maxY);
		this._aabbPoints.set(8,minZ);
		this._aabbPoints.set(9,maxX);
		this._aabbPoints.set(10,maxY);
		this._aabbPoints.set(11,minZ);
		this._aabbPoints.set(12,minX);
		this._aabbPoints.set(13,minY);
		this._aabbPoints.set(14,maxZ);
		this._aabbPoints.set(15,maxX);
		this._aabbPoints.set(16,minY);
		this._aabbPoints.set(17,maxZ);
		this._aabbPoints.set(18,minX);
		this._aabbPoints.set(19,maxY);
		this._aabbPoints.set(20,maxZ);
		this._aabbPoints.set(21,maxX);
		this._aabbPoints.set(22,maxY);
		this._aabbPoints.set(23,maxZ);
		this._aabbPointsDirty = false;
	}
	,updateBoundingRenderable: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,createBoundingRenderable: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,classifyToPlane: function(plane) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,transformFrom: function(bounds,matrix) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,__class__: away3d_bounds_BoundingVolumeBase
};
var away3d_bounds_AxisAlignedBoundingBox = function() {
	this._halfExtentsZ = 0;
	this._halfExtentsY = 0;
	this._halfExtentsX = 0;
	this._centerZ = 0;
	this._centerY = 0;
	this._centerX = 0;
	away3d_bounds_BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.AxisAlignedBoundingBox"] = away3d_bounds_AxisAlignedBoundingBox;
away3d_bounds_AxisAlignedBoundingBox.__name__ = ["away3d","bounds","AxisAlignedBoundingBox"];
away3d_bounds_AxisAlignedBoundingBox.__super__ = away3d_bounds_BoundingVolumeBase;
away3d_bounds_AxisAlignedBoundingBox.prototype = $extend(away3d_bounds_BoundingVolumeBase.prototype,{
	_centerX: null
	,_centerY: null
	,_centerZ: null
	,_halfExtentsX: null
	,_halfExtentsY: null
	,_halfExtentsZ: null
	,nullify: function() {
		away3d_bounds_BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._halfExtentsX = this._halfExtentsY = this._halfExtentsZ = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var _g1 = 0;
		var _g = numPlanes;
		while(_g1 < _g) {
			var i = _g1++;
			var plane = planes.get(i);
			var a = plane.a;
			var b = plane.b;
			var c = plane.c;
			var flippedExtentX = a < 0 ? -this._halfExtentsX : this._halfExtentsX;
			var flippedExtentY = b < 0 ? -this._halfExtentsY : this._halfExtentsY;
			var flippedExtentZ = c < 0 ? -this._halfExtentsZ : this._halfExtentsZ;
			var projDist = a * (this._centerX + flippedExtentX) + b * (this._centerY + flippedExtentY) + c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) {
				return false;
			}
		}
		return true;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) {
			return 0;
		}
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var ix;
		var iy;
		var iz;
		var rayEntryDistance = 0;
		var intersects = false;
		if(vx < 0) {
			rayEntryDistance = (this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vx > 0) {
			rayEntryDistance = (-this._halfExtentsX - px) / vx;
			if(rayEntryDistance > 0) {
				iy = py + rayEntryDistance * vy;
				iz = pz + rayEntryDistance * vz;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = -1;
					targetNormal.y = 0;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy < 0) {
			rayEntryDistance = (this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = 1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vy > 0) {
			rayEntryDistance = (-this._halfExtentsY - py) / vy;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iz = pz + rayEntryDistance * vz;
				if(ix > -this._halfExtentsX && ix < this._halfExtentsX && iz > -this._halfExtentsZ && iz < this._halfExtentsZ) {
					targetNormal.x = 0;
					targetNormal.y = -1;
					targetNormal.z = 0;
					intersects = true;
				}
			}
		}
		if(!intersects && vz < 0) {
			rayEntryDistance = (this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = 1;
					intersects = true;
				}
			}
		}
		if(!intersects && vz > 0) {
			rayEntryDistance = (-this._halfExtentsZ - pz) / vz;
			if(rayEntryDistance > 0) {
				ix = px + rayEntryDistance * vx;
				iy = py + rayEntryDistance * vy;
				if(iy > -this._halfExtentsY && iy < this._halfExtentsY && ix > -this._halfExtentsX && ix < this._halfExtentsX) {
					targetNormal.x = 0;
					targetNormal.y = 0;
					targetNormal.z = -1;
					intersects = true;
				}
			}
		}
		if(intersects) {
			return rayEntryDistance;
		} else {
			return -1;
		}
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		if(px <= this._halfExtentsX && px >= -this._halfExtentsX && py <= this._halfExtentsY && py >= -this._halfExtentsY && pz <= this._halfExtentsZ) {
			return pz >= -this._halfExtentsZ;
		} else {
			return false;
		}
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		this._halfExtentsX = (maxX - minX) * .5;
		this._halfExtentsY = (maxY - minY) * .5;
		this._halfExtentsZ = (maxZ - minZ) * .5;
		away3d_bounds_BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d_bounds_AxisAlignedBoundingBox();
		clone.fromExtremes(this._min.x,this._min.y,this._min.z,this._max.x,this._max.y,this._max.z);
		return clone;
	}
	,get_halfExtentsX: function() {
		return this._halfExtentsX;
	}
	,get_halfExtentsY: function() {
		return this._halfExtentsY;
	}
	,get_halfExtentsZ: function() {
		return this._halfExtentsZ;
	}
	,closestPointToPoint: function(point,target) {
		var p;
		if(target == null) {
			target = new openfl_geom_Vector3D();
		}
		p = point.x;
		if(p < this._min.x) {
			p = this._min.x;
		}
		if(p > this._max.x) {
			p = this._max.x;
		}
		target.x = p;
		p = point.y;
		if(p < this._min.y) {
			p = this._min.y;
		}
		if(p > this._max.y) {
			p = this._max.y;
		}
		target.y = p;
		p = point.z;
		if(p < this._min.z) {
			p = this._min.z;
		}
		if(p > this._max.z) {
			p = this._max.z;
		}
		target.z = p;
		return target;
	}
	,updateBoundingRenderable: function() {
		this._boundingRenderable.set_scaleX(Math.max(this._halfExtentsX * 2,0.001));
		this._boundingRenderable.set_scaleY(Math.max(this._halfExtentsY * 2,0.001));
		this._boundingRenderable.set_scaleZ(Math.max(this._halfExtentsZ * 2,0.001));
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d_primitives_WireframeCube(1,1,1,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var centerDistance = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var boundOffset = a * this._halfExtentsX + b * this._halfExtentsY + c * this._halfExtentsZ;
		if(centerDistance > boundOffset) {
			return 1;
		} else if(centerDistance < -boundOffset) {
			return 0;
		} else {
			return 2;
		}
	}
	,transformFrom: function(bounds,matrix) {
		var aabb = js_Boot.__cast(bounds , away3d_bounds_AxisAlignedBoundingBox);
		var cx = aabb._centerX;
		var cy = aabb._centerY;
		var cz = aabb._centerZ;
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		matrix.copyRawDataTo(raw);
		var m11 = raw.get(0);
		var m12 = raw.get(4);
		var m13 = raw.get(8);
		var m14 = raw.get(12);
		var m21 = raw.get(1);
		var m22 = raw.get(5);
		var m23 = raw.get(9);
		var m24 = raw.get(13);
		var m31 = raw.get(2);
		var m32 = raw.get(6);
		var m33 = raw.get(10);
		var m34 = raw.get(14);
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) {
			m11 = -m11;
		}
		if(m12 < 0) {
			m12 = -m12;
		}
		if(m13 < 0) {
			m13 = -m13;
		}
		if(m21 < 0) {
			m21 = -m21;
		}
		if(m22 < 0) {
			m22 = -m22;
		}
		if(m23 < 0) {
			m23 = -m23;
		}
		if(m31 < 0) {
			m31 = -m31;
		}
		if(m32 < 0) {
			m32 = -m32;
		}
		if(m33 < 0) {
			m33 = -m33;
		}
		var hx = aabb._halfExtentsX;
		var hy = aabb._halfExtentsY;
		var hz = aabb._halfExtentsZ;
		this._halfExtentsX = hx * m11 + hy * m12 + hz * m13;
		this._halfExtentsY = hx * m21 + hy * m22 + hz * m23;
		this._halfExtentsZ = hx * m31 + hy * m32 + hz * m33;
		this._min.x = this._centerX - this._halfExtentsX;
		this._min.y = this._centerY - this._halfExtentsY;
		this._min.z = this._centerZ - this._halfExtentsZ;
		this._max.x = this._centerX + this._halfExtentsX;
		this._max.y = this._centerY + this._halfExtentsY;
		this._max.z = this._centerZ + this._halfExtentsZ;
		this._aabbPointsDirty = true;
	}
	,__class__: away3d_bounds_AxisAlignedBoundingBox
});
var away3d_bounds_BoundingSphere = function() {
	this._centerZ = 0;
	this._centerY = 0;
	this._centerX = 0;
	this._radius = 0;
	away3d_bounds_BoundingVolumeBase.call(this);
};
$hxClasses["away3d.bounds.BoundingSphere"] = away3d_bounds_BoundingSphere;
away3d_bounds_BoundingSphere.__name__ = ["away3d","bounds","BoundingSphere"];
away3d_bounds_BoundingSphere.__super__ = away3d_bounds_BoundingVolumeBase;
away3d_bounds_BoundingSphere.prototype = $extend(away3d_bounds_BoundingVolumeBase.prototype,{
	_radius: null
	,_centerX: null
	,_centerY: null
	,_centerZ: null
	,get_radius: function() {
		return this._radius;
	}
	,nullify: function() {
		away3d_bounds_BoundingVolumeBase.prototype.nullify.call(this);
		this._centerX = this._centerY = this._centerZ = 0;
		this._radius = 0;
	}
	,isInFrustum: function(planes,numPlanes) {
		var _g1 = 0;
		var _g = numPlanes;
		while(_g1 < _g) {
			var i = _g1++;
			var plane = planes.get(i);
			var flippedExtentX = plane.a < 0 ? -this._radius : this._radius;
			var flippedExtentY = plane.b < 0 ? -this._radius : this._radius;
			var flippedExtentZ = plane.c < 0 ? -this._radius : this._radius;
			var projDist = plane.a * (this._centerX + flippedExtentX) + plane.b * (this._centerY + flippedExtentY) + plane.c * (this._centerZ + flippedExtentZ) - plane.d;
			if(projDist < 0) {
				return false;
			}
		}
		return true;
	}
	,fromSphere: function(center,radius) {
		this._centerX = center.x;
		this._centerY = center.y;
		this._centerZ = center.z;
		this._radius = radius;
		this._max.x = this._centerX + radius;
		this._max.y = this._centerY + radius;
		this._max.z = this._centerZ + radius;
		this._min.x = this._centerX - radius;
		this._min.y = this._centerY - radius;
		this._min.z = this._centerZ - radius;
		this._aabbPointsDirty = true;
		if(this._boundingRenderable != null) {
			this.updateBoundingRenderable();
		}
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
		this._centerX = (maxX + minX) * .5;
		this._centerY = (maxY + minY) * .5;
		this._centerZ = (maxZ + minZ) * .5;
		var d = maxX - minX;
		var y = maxY - minY;
		var z = maxZ - minZ;
		if(y > d) {
			d = y;
		}
		if(z > d) {
			d = z;
		}
		this._radius = d * Math.sqrt(.5);
		away3d_bounds_BoundingVolumeBase.prototype.fromExtremes.call(this,minX,minY,minZ,maxX,maxY,maxZ);
	}
	,clone: function() {
		var clone = new away3d_bounds_BoundingSphere();
		clone.fromSphere(new openfl_geom_Vector3D(this._centerX,this._centerY,this._centerZ),this._radius);
		return clone;
	}
	,rayIntersection: function(position,direction,targetNormal) {
		if(this.containsPoint(position)) {
			return 0;
		}
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var vx = direction.x;
		var vy = direction.y;
		var vz = direction.z;
		var rayEntryDistance;
		var a = vx * vx + vy * vy + vz * vz;
		var b = 2 * (px * vx + py * vy + pz * vz);
		var c = px * px + py * py + pz * pz - this._radius * this._radius;
		var det = b * b - 4 * a * c;
		if(det >= 0) {
			var sqrtDet = Math.sqrt(det);
			rayEntryDistance = (-b - sqrtDet) / (2 * a);
			if(rayEntryDistance >= 0) {
				targetNormal.x = px + rayEntryDistance * vx;
				targetNormal.y = py + rayEntryDistance * vy;
				targetNormal.z = pz + rayEntryDistance * vz;
				targetNormal.normalize();
				return rayEntryDistance;
			}
		}
		return -1;
	}
	,containsPoint: function(position) {
		var px = position.x - this._centerX;
		var py = position.y - this._centerY;
		var pz = position.z - this._centerZ;
		var distance = Math.sqrt(px * px + py * py + pz * pz);
		return distance <= this._radius;
	}
	,updateBoundingRenderable: function() {
		var sc = this._radius;
		if(sc == 0) {
			sc = 0.001;
		}
		this._boundingRenderable.set_scaleX(sc);
		this._boundingRenderable.set_scaleY(sc);
		this._boundingRenderable.set_scaleZ(sc);
		this._boundingRenderable.set_x(this._centerX);
		this._boundingRenderable.set_y(this._centerY);
		this._boundingRenderable.set_z(this._centerZ);
	}
	,createBoundingRenderable: function() {
		return new away3d_primitives_WireframeSphere(1,16,12,16777215,0.5);
	}
	,classifyToPlane: function(plane) {
		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var dd = a * this._centerX + b * this._centerY + c * this._centerZ - plane.d;
		if(a < 0) {
			a = -a;
		}
		if(b < 0) {
			b = -b;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = (a + b + c) * this._radius;
		if(dd > rr) {
			return 1;
		} else if(dd < -rr) {
			return 0;
		} else {
			return 2;
		}
	}
	,transformFrom: function(bounds,matrix) {
		var sphere = js_Boot.__cast(bounds , away3d_bounds_BoundingSphere);
		var cx = sphere._centerX;
		var cy = sphere._centerY;
		var cz = sphere._centerZ;
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		matrix.copyRawDataTo(raw);
		var m11 = raw.get(0);
		var m12 = raw.get(4);
		var m13 = raw.get(8);
		var m14 = raw.get(12);
		var m21 = raw.get(1);
		var m22 = raw.get(5);
		var m23 = raw.get(9);
		var m24 = raw.get(13);
		var m31 = raw.get(2);
		var m32 = raw.get(6);
		var m33 = raw.get(10);
		var m34 = raw.get(14);
		this._centerX = cx * m11 + cy * m12 + cz * m13 + m14;
		this._centerY = cx * m21 + cy * m22 + cz * m23 + m24;
		this._centerZ = cx * m31 + cy * m32 + cz * m33 + m34;
		if(m11 < 0) {
			m11 = -m11;
		}
		if(m12 < 0) {
			m12 = -m12;
		}
		if(m13 < 0) {
			m13 = -m13;
		}
		if(m21 < 0) {
			m21 = -m21;
		}
		if(m22 < 0) {
			m22 = -m22;
		}
		if(m23 < 0) {
			m23 = -m23;
		}
		if(m31 < 0) {
			m31 = -m31;
		}
		if(m32 < 0) {
			m32 = -m32;
		}
		if(m33 < 0) {
			m33 = -m33;
		}
		var r = sphere._radius;
		var rx = m11 + m12 + m13;
		var ry = m21 + m22 + m23;
		var rz = m31 + m32 + m33;
		this._radius = r * Math.sqrt(rx * rx + ry * ry + rz * rz);
		this._min.x = this._centerX - this._radius;
		this._min.y = this._centerY - this._radius;
		this._min.z = this._centerZ - this._radius;
		this._max.x = this._centerX + this._radius;
		this._max.y = this._centerY + this._radius;
		this._max.z = this._centerZ + this._radius;
	}
	,__class__: away3d_bounds_BoundingSphere
});
var away3d_bounds_NullBounds = function(alwaysIn,renderable) {
	if(alwaysIn == null) {
		alwaysIn = true;
	}
	away3d_bounds_BoundingVolumeBase.call(this);
	this._alwaysIn = alwaysIn;
	this._renderable = renderable;
	this._max.x = this._max.y = this._max.z = Infinity;
	this._min.x = this._min.y = this._min.z = this._alwaysIn ? -Infinity : Infinity;
};
$hxClasses["away3d.bounds.NullBounds"] = away3d_bounds_NullBounds;
away3d_bounds_NullBounds.__name__ = ["away3d","bounds","NullBounds"];
away3d_bounds_NullBounds.__super__ = away3d_bounds_BoundingVolumeBase;
away3d_bounds_NullBounds.prototype = $extend(away3d_bounds_BoundingVolumeBase.prototype,{
	_alwaysIn: null
	,_renderable: null
	,clone: function() {
		return new away3d_bounds_NullBounds(this._alwaysIn);
	}
	,createBoundingRenderable: function() {
		if(this._renderable != null) {
			return this._renderable;
		} else {
			return new away3d_primitives_WireframeSphere(100,16,12,16777215,0.5);
		}
	}
	,isInFrustum: function(planes,numPlanes) {
		return this._alwaysIn;
	}
	,fromGeometry: function(geometry) {
	}
	,fromSphere: function(center,radius) {
	}
	,fromExtremes: function(minX,minY,minZ,maxX,maxY,maxZ) {
	}
	,classifyToPlane: function(plane) {
		return 2;
	}
	,transformFrom: function(bounds,matrix) {
		this._alwaysIn = (js_Boot.__cast(bounds , away3d_bounds_NullBounds))._alwaysIn;
	}
	,__class__: away3d_bounds_NullBounds
});
var away3d_core_base_Object3D = function() {
	this._sca = new openfl_geom_Vector3D();
	this._rot = new openfl_geom_Vector3D();
	this._pos = new openfl_geom_Vector3D();
	this._pivotZero = true;
	this._pivotPoint = new openfl_geom_Vector3D();
	this._z = 0;
	this._y = 0;
	this._x = 0;
	this._scaleZ = 1;
	this._scaleY = 1;
	this._scaleX = 1;
	this._transform = new openfl_geom_Matrix3D();
	this._zOffset = 0;
	this._flipY = new openfl_geom_Matrix3D();
	this._eulers = new openfl_geom_Vector3D();
	this._rotationZ = 0;
	this._rotationY = 0;
	this._rotationX = 0;
	this._transformDirty = true;
	this._smallestNumber = 0.0000000000000000000001;
	this._transformComponents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,3,true);
	this._transformComponents.set(0,this._pos);
	this._transformComponents.set(1,this._rot);
	this._transformComponents.set(2,this._sca);
	this._transform.identity();
	this._flipY.appendScale(1,-1,1);
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.core.base.Object3D"] = away3d_core_base_Object3D;
away3d_core_base_Object3D.__name__ = ["away3d","core","base","Object3D"];
away3d_core_base_Object3D.__super__ = away3d_library_assets_NamedAssetBase;
away3d_core_base_Object3D.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_controller: null
	,_smallestNumber: null
	,_transformDirty: null
	,_positionDirty: null
	,_rotationDirty: null
	,_scaleDirty: null
	,_positionChanged: null
	,_rotationChanged: null
	,_scaleChanged: null
	,_rotationX: null
	,_rotationY: null
	,_rotationZ: null
	,_eulers: null
	,_flipY: null
	,_listenToPositionChanged: null
	,_listenToRotationChanged: null
	,_listenToScaleChanged: null
	,_zOffset: null
	,invalidatePivot: function() {
		this._pivotZero = this._pivotPoint.x == 0 && this._pivotPoint.y == 0 && this._pivotPoint.z == 0;
		this.invalidateTransform();
	}
	,invalidatePosition: function() {
		if(this._positionDirty) {
			return;
		}
		this._positionDirty = true;
		this.invalidateTransform();
		if(this._listenToPositionChanged) {
			this.notifyPositionChanged();
		}
	}
	,notifyPositionChanged: function() {
		if(this._positionChanged == null) {
			this._positionChanged = new away3d_events_Object3DEvent("positionChanged",this);
		}
		this.dispatchEvent(this._positionChanged);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		away3d_library_assets_NamedAssetBase.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case "positionChanged":
			this._listenToPositionChanged = true;
			break;
		case "rotationChanged":
			this._listenToRotationChanged = true;
			break;
		case "scaleChanged":
			this._listenToScaleChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		away3d_library_assets_NamedAssetBase.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) {
			return;
		}
		switch(type) {
		case "positionChanged":
			this._listenToPositionChanged = false;
			break;
		case "rotationChanged":
			this._listenToRotationChanged = false;
			break;
		case "scaleChanged":
			this._listenToScaleChanged = false;
			break;
		}
	}
	,invalidateRotation: function() {
		if(this._rotationDirty) {
			return;
		}
		this._rotationDirty = true;
		this.invalidateTransform();
		if(this._listenToRotationChanged) {
			this.notifyRotationChanged();
		}
	}
	,notifyRotationChanged: function() {
		if(this._rotationChanged == null) {
			this._rotationChanged = new away3d_events_Object3DEvent("rotationChanged",this);
		}
		this.dispatchEvent(this._rotationChanged);
	}
	,invalidateScale: function() {
		if(this._scaleDirty) {
			return;
		}
		this._scaleDirty = true;
		this.invalidateTransform();
		if(this._listenToScaleChanged) {
			this.notifyScaleChanged();
		}
	}
	,notifyScaleChanged: function() {
		if(this._scaleChanged == null) {
			this._scaleChanged = new away3d_events_Object3DEvent("scaleChanged",this);
		}
		this.dispatchEvent(this._scaleChanged);
	}
	,_transform: null
	,_scaleX: null
	,_scaleY: null
	,_scaleZ: null
	,_x: null
	,_y: null
	,_z: null
	,_pivotPoint: null
	,_pivotZero: null
	,_pos: null
	,_rot: null
	,_sca: null
	,_transformComponents: null
	,extra: null
	,get_x: function() {
		return this._x;
	}
	,set_x: function(val) {
		if(this._x == val) {
			return val;
		}
		this._x = val;
		this.invalidatePosition();
		return val;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(val) {
		if(this._y == val) {
			return val;
		}
		this._y = val;
		this.invalidatePosition();
		return val;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(val) {
		if(this._z == val) {
			return val;
		}
		this._z = val;
		this.invalidatePosition();
		return val;
	}
	,get_rotationX: function() {
		return this._rotationX * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationX: function(val) {
		if(this.get_rotationX() == val) {
			return val;
		}
		this._rotationX = val * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationY: function() {
		return this._rotationY * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationY: function(val) {
		if(this.get_rotationY() == val) {
			return val;
		}
		this._rotationY = val * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_rotationZ: function() {
		return this._rotationZ * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
	}
	,set_rotationZ: function(val) {
		if(this.get_rotationZ() == val) {
			return val;
		}
		this._rotationZ = val * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return val;
	}
	,get_scaleX: function() {
		return this._scaleX;
	}
	,set_scaleX: function(val) {
		if(this._scaleX == val) {
			return val;
		}
		this._scaleX = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleY: function() {
		return this._scaleY;
	}
	,set_scaleY: function(val) {
		if(this._scaleY == val) {
			return val;
		}
		this._scaleY = val;
		this.invalidateScale();
		return val;
	}
	,get_scaleZ: function() {
		return this._scaleZ;
	}
	,set_scaleZ: function(val) {
		if(this._scaleZ == val) {
			return val;
		}
		this._scaleZ = val;
		this.invalidateScale();
		return val;
	}
	,get_eulers: function() {
		this._eulers.x = this._rotationX * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
		this._eulers.y = this._rotationY * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
		this._eulers.z = this._rotationZ * away3d_core_math_MathConsts.RADIANS_TO_DEGREES;
		return this._eulers;
	}
	,set_eulers: function(value) {
		this._rotationX = value.x * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = value.y * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = value.z * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
		return value;
	}
	,get_transform: function() {
		if(this._transformDirty) {
			this.updateTransform();
		}
		return this._transform;
	}
	,set_transform: function(val) {
		if(val.rawData.get(0) == 0) {
			var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
			val.copyRawDataTo(raw);
			raw.set(0,this._smallestNumber);
			val.copyRawDataFrom(raw);
		}
		var elements = away3d_core_math_Matrix3DUtils.decompose(val);
		var vec = elements.get(0);
		if(this._x != vec.x || this._y != vec.y || this._z != vec.z) {
			this._x = vec.x;
			this._y = vec.y;
			this._z = vec.z;
			this.invalidatePosition();
		}
		vec = elements.get(1);
		if(this._rotationX != vec.x || this._rotationY != vec.y || this._rotationZ != vec.z) {
			this._rotationX = vec.x;
			this._rotationY = vec.y;
			this._rotationZ = vec.z;
			this.invalidateRotation();
		}
		vec = elements.get(2);
		if(this._scaleX != vec.x || this._scaleY != vec.y || this._scaleZ != vec.z) {
			this._scaleX = vec.x;
			this._scaleY = vec.y;
			this._scaleZ = vec.z;
			this.invalidateScale();
		}
		return val;
	}
	,get_pivotPoint: function() {
		return this._pivotPoint;
	}
	,set_pivotPoint: function(pivot) {
		if(this._pivotPoint == null) {
			this._pivotPoint = new openfl_geom_Vector3D();
		}
		this._pivotPoint.x = pivot.x;
		this._pivotPoint.y = pivot.y;
		this._pivotPoint.z = pivot.z;
		this.invalidatePivot();
		return pivot;
	}
	,get_position: function() {
		this.get_transform().copyColumnTo(3,this._pos);
		return this._pos.clone();
	}
	,set_position: function(value) {
		this._x = value.x;
		this._y = value.y;
		this._z = value.z;
		this.invalidatePosition();
		return value;
	}
	,getPosition: function(v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		this.get_transform().copyColumnTo(3,v);
		return v;
	}
	,get_forwardVector: function() {
		return away3d_core_math_Matrix3DUtils.getForward(this.get_transform());
	}
	,get_rightVector: function() {
		return away3d_core_math_Matrix3DUtils.getRight(this.get_transform());
	}
	,get_upVector: function() {
		return away3d_core_math_Matrix3DUtils.getUp(this.get_transform());
	}
	,get_backVector: function() {
		var director = away3d_core_math_Matrix3DUtils.getForward(this.get_transform());
		director.negate();
		return director;
	}
	,get_leftVector: function() {
		var director = away3d_core_math_Matrix3DUtils.getRight(this.get_transform());
		director.negate();
		return director;
	}
	,get_downVector: function() {
		var director = away3d_core_math_Matrix3DUtils.getUp(this.get_transform());
		director.negate();
		return director;
	}
	,scale: function(value) {
		this._scaleX *= value;
		this._scaleY *= value;
		this._scaleZ *= value;
		this.invalidateScale();
	}
	,moveForward: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(0,0,1),distance);
	}
	,moveBackward: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(0,0,1),-distance);
	}
	,moveLeft: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(1,0,0),-distance);
	}
	,moveRight: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(1,0,0),distance);
	}
	,moveUp: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(0,1,0),distance);
	}
	,moveDown: function(distance) {
		this.translateLocal(new openfl_geom_Vector3D(0,1,0),-distance);
	}
	,moveTo: function(dx,dy,dz) {
		if(this._x == dx && this._y == dy && this._z == dz) {
			return;
		}
		this._x = dx;
		this._y = dy;
		this._z = dz;
		this.invalidatePosition();
	}
	,movePivot: function(dx,dy,dz) {
		if(this._pivotPoint == null) {
			this._pivotPoint = new openfl_geom_Vector3D();
		}
		this._pivotPoint.x += dx;
		this._pivotPoint.y += dy;
		this._pivotPoint.z += dz;
		this.invalidatePivot();
	}
	,translate: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this._x += x * len;
		this._y += y * len;
		this._z += z * len;
		this.invalidatePosition();
	}
	,translateLocal: function(axis,distance) {
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var len = distance / Math.sqrt(x * x + y * y + z * z);
		this.get_transform().prependTranslation(x * len,y * len,z * len);
		this._transform.copyColumnTo(3,this._pos);
		this._x = this._pos.x;
		this._y = this._pos.y;
		this._z = this._pos.z;
		this.invalidatePosition();
	}
	,pitch: function(angle) {
		this.rotate(new openfl_geom_Vector3D(1,0,0),angle);
	}
	,yaw: function(angle) {
		this.rotate(new openfl_geom_Vector3D(0,1,0),angle);
	}
	,roll: function(angle) {
		this.rotate(new openfl_geom_Vector3D(0,0,1),angle);
	}
	,clone: function() {
		var clone = new away3d_core_base_Object3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_name(this.get_name());
		return clone;
	}
	,rotateTo: function(ax,ay,az) {
		this._rotationX = ax * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this._rotationY = ay * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this._rotationZ = az * away3d_core_math_MathConsts.DEGREES_TO_RADIANS;
		this.invalidateRotation();
	}
	,rotate: function(axis,angle) {
		var m = new openfl_geom_Matrix3D();
		m.prependRotation(angle,axis);
		var vec = m.decompose().get(1);
		this._rotationX += vec.x;
		this._rotationY += vec.y;
		this._rotationZ += vec.z;
		this.invalidateRotation();
	}
	,lookAt: function(target,upAxis) {
		if(away3d_core_base_Object3D.tempAxeX == null) {
			away3d_core_base_Object3D.tempAxeX = new openfl_geom_Vector3D();
		}
		if(away3d_core_base_Object3D.tempAxeY == null) {
			away3d_core_base_Object3D.tempAxeY = new openfl_geom_Vector3D();
		}
		if(away3d_core_base_Object3D.tempAxeZ == null) {
			away3d_core_base_Object3D.tempAxeZ = new openfl_geom_Vector3D();
		}
		var xAxis = away3d_core_base_Object3D.tempAxeX;
		var yAxis = away3d_core_base_Object3D.tempAxeY;
		var zAxis = away3d_core_base_Object3D.tempAxeZ;
		var raw;
		if(upAxis == null) {
			upAxis = new openfl_geom_Vector3D(0,1,0);
		}
		if(this._transformDirty) {
			this.updateTransform();
		}
		zAxis.x = target.x - this._x;
		zAxis.y = target.y - this._y;
		zAxis.z = target.z - this._z;
		zAxis.normalize();
		xAxis.x = upAxis.y * zAxis.z - upAxis.z * zAxis.y;
		xAxis.y = upAxis.z * zAxis.x - upAxis.x * zAxis.z;
		xAxis.z = upAxis.x * zAxis.y - upAxis.y * zAxis.x;
		xAxis.normalize();
		if(xAxis.get_length() < .05) {
			xAxis.x = upAxis.y;
			xAxis.y = upAxis.x;
			xAxis.z = 0;
			xAxis.normalize();
		}
		yAxis.x = zAxis.y * xAxis.z - zAxis.z * xAxis.y;
		yAxis.y = zAxis.z * xAxis.x - zAxis.x * xAxis.z;
		yAxis.z = zAxis.x * xAxis.y - zAxis.y * xAxis.x;
		raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		raw.set(0,this._scaleX * xAxis.x);
		raw.set(1,this._scaleX * xAxis.y);
		raw.set(2,this._scaleX * xAxis.z);
		raw.set(3,0);
		raw.set(4,this._scaleY * yAxis.x);
		raw.set(5,this._scaleY * yAxis.y);
		raw.set(6,this._scaleY * yAxis.z);
		raw.set(7,0);
		raw.set(8,this._scaleZ * zAxis.x);
		raw.set(9,this._scaleZ * zAxis.y);
		raw.set(10,this._scaleZ * zAxis.z);
		raw.set(11,0);
		raw.set(12,this._x);
		raw.set(13,this._y);
		raw.set(14,this._z);
		raw.set(15,1);
		this._transform.copyRawDataFrom(raw);
		this.set_transform(this.get_transform());
		if(zAxis.z < 0) {
			this.set_rotationY(180 - this.get_rotationY());
			var _g = this;
			_g.set_rotationX(_g.get_rotationX() - 180);
			var _g1 = this;
			_g1.set_rotationZ(_g1.get_rotationZ() - 180);
		}
	}
	,dispose: function() {
	}
	,disposeAsset: function() {
		this.dispose();
	}
	,invalidateTransform: function() {
		this._transformDirty = true;
	}
	,updateTransform: function() {
		this._pos.x = this._x;
		this._pos.y = this._y;
		this._pos.z = this._z;
		this._rot.x = this._rotationX;
		this._rot.y = this._rotationY;
		this._rot.z = this._rotationZ;
		if(!this._pivotZero) {
			this._sca.x = 1;
			this._sca.y = 1;
			this._sca.z = 1;
			this._transform.recompose(this._transformComponents);
			this._transform.appendTranslation(this._pivotPoint.x,this._pivotPoint.y,this._pivotPoint.z);
			this._transform.prependTranslation(-this._pivotPoint.x,-this._pivotPoint.y,-this._pivotPoint.z);
			this._transform.prependScale(this._scaleX,this._scaleY,this._scaleZ);
			this._sca.x = this._scaleX;
			this._sca.y = this._scaleY;
			this._sca.z = this._scaleZ;
		} else {
			this._sca.x = this._scaleX;
			this._sca.y = this._scaleY;
			this._sca.z = this._scaleZ;
			this._transform.recompose(this._transformComponents);
		}
		this._transformDirty = false;
		this._positionDirty = false;
		this._rotationDirty = false;
		this._scaleDirty = false;
	}
	,get_zOffset: function() {
		return this._zOffset;
	}
	,set_zOffset: function(value) {
		this._zOffset = value;
		return value;
	}
	,__class__: away3d_core_base_Object3D
});
var away3d_containers_ObjectContainer3D = function() {
	this._ignoreTransform = false;
	this._implicitVisibility = true;
	this._explicitVisibility = true;
	this._scenePositionDirty = true;
	this._scenePosition = new openfl_geom_Vector3D();
	this._inverseSceneTransformDirty = true;
	this._inverseSceneTransform = new openfl_geom_Matrix3D();
	this._mouseChildren = true;
	this._children = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._sceneTransformDirty = true;
	this._sceneTransform = new openfl_geom_Matrix3D();
	away3d_core_base_Object3D.call(this);
};
$hxClasses["away3d.containers.ObjectContainer3D"] = away3d_containers_ObjectContainer3D;
away3d_containers_ObjectContainer3D.__name__ = ["away3d","containers","ObjectContainer3D"];
away3d_containers_ObjectContainer3D.__interfaces__ = [away3d_library_assets_IAsset];
away3d_containers_ObjectContainer3D.__super__ = away3d_core_base_Object3D;
away3d_containers_ObjectContainer3D.prototype = $extend(away3d_core_base_Object3D.prototype,{
	_ancestorsAllowMouseEnabled: null
	,_isRoot: null
	,_scene: null
	,_parent: null
	,_sceneTransform: null
	,_sceneTransformDirty: null
	,_explicitPartition: null
	,_implicitPartition: null
	,_mouseEnabled: null
	,_sceneTransformChanged: null
	,_scenechanged: null
	,_children: null
	,_mouseChildren: null
	,_oldScene: null
	,_inverseSceneTransform: null
	,_inverseSceneTransformDirty: null
	,_scenePosition: null
	,_scenePositionDirty: null
	,_explicitVisibility: null
	,_implicitVisibility: null
	,_listenToSceneTransformChanged: null
	,_listenToSceneChanged: null
	,_ignoreTransform: null
	,get_ignoreTransform: function() {
		return this._ignoreTransform;
	}
	,set_ignoreTransform: function(value) {
		this._ignoreTransform = value;
		this._sceneTransformDirty = !value;
		this._inverseSceneTransformDirty = !value;
		this._scenePositionDirty = !value;
		if(!value) {
			this._sceneTransform.identity();
			this._scenePosition.setTo(0,0,0);
		}
		return value;
	}
	,get_implicitPartition: function() {
		return this._implicitPartition;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) {
			return value;
		}
		var i = 0;
		var len = this._children.get_length();
		var child;
		this._implicitPartition = value;
		while(i < len) {
			child = this._children.get(i++);
			if(child._explicitPartition == null) {
				child.set_implicitPartition(value);
			}
		}
		return value;
	}
	,get_isVisible: function() {
		if(this._implicitVisibility) {
			return this._explicitVisibility;
		} else {
			return false;
		}
	}
	,setParent: function(value) {
		this._parent = value;
		this.updateMouseChildren();
		if(value == null) {
			this.set_scene(null);
			return;
		}
		this.notifySceneTransformChange();
		this.notifySceneChange();
	}
	,notifySceneTransformChange: function() {
		if(this._sceneTransformDirty || this._ignoreTransform) {
			return;
		}
		this.invalidateSceneTransform();
		var i = 0;
		var len = this._children.get_length();
		while(i < len) this._children.get(i++).notifySceneTransformChange();
		if(this._listenToSceneTransformChanged) {
			if(this._sceneTransformChanged == null) {
				this._sceneTransformChanged = new away3d_events_Object3DEvent("scenetransformChanged",this);
			}
			this.dispatchEvent(this._sceneTransformChanged);
		}
	}
	,notifySceneChange: function() {
		this.notifySceneTransformChange();
		var i = 0;
		var len = this._children.get_length();
		while(i < len) this._children.get(i++).notifySceneChange();
		if(this._listenToSceneChanged) {
			if(this._scenechanged == null) {
				this._scenechanged = new away3d_events_Object3DEvent("sceneChanged",this);
			}
			this.dispatchEvent(this._scenechanged);
		}
	}
	,updateMouseChildren: function() {
		if(this._parent != null && !this._parent._isRoot) {
			this._ancestorsAllowMouseEnabled = this.get_parent()._ancestorsAllowMouseEnabled && this._parent.get_mouseChildren();
		} else {
			this._ancestorsAllowMouseEnabled = this.get_mouseChildren();
		}
		var len = this._children.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._children.get(i).updateMouseChildren();
		}
	}
	,get_mouseEnabled: function() {
		return this._mouseEnabled;
	}
	,set_mouseEnabled: function(value) {
		this._mouseEnabled = value;
		this.updateMouseChildren();
		return value;
	}
	,invalidateTransform: function() {
		away3d_core_base_Object3D.prototype.invalidateTransform.call(this);
		this.notifySceneTransformChange();
	}
	,invalidateSceneTransform: function() {
		this._sceneTransformDirty = !this._ignoreTransform;
		this._inverseSceneTransformDirty = !this._ignoreTransform;
		this._scenePositionDirty = !this._ignoreTransform;
	}
	,updateSceneTransform: function() {
		if(this._parent != null && !this._parent._isRoot) {
			this._sceneTransform.copyFrom(this._parent.get_sceneTransform());
			this._sceneTransform.prepend(this.get_transform());
		} else {
			this._sceneTransform.copyFrom(this.get_transform());
		}
		this._sceneTransformDirty = false;
	}
	,get_mouseChildren: function() {
		return this._mouseChildren;
	}
	,set_mouseChildren: function(value) {
		this._mouseChildren = value;
		this.updateMouseChildren();
		return value;
	}
	,get_visible: function() {
		return this._explicitVisibility;
	}
	,set_visible: function(value) {
		var len = this._children.get_length();
		this._explicitVisibility = value;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._children.get(i).updateImplicitVisibility();
		}
		return value;
	}
	,get_assetType: function() {
		return "container";
	}
	,get_scenePosition: function() {
		if(this._scenePositionDirty) {
			this.get_sceneTransform().copyColumnTo(3,this._scenePosition);
			this._scenePositionDirty = false;
		}
		return this._scenePosition;
	}
	,get_minX: function() {
		var i = 0;
		var len = this._children.get_length();
		var min = Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_minX() + child.get_x();
			if(m < min) {
				min = m;
			}
		}
		return min;
	}
	,get_minY: function() {
		var i = 0;
		var len = this._children.get_length();
		var min = Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_minY() + child.get_y();
			if(m < min) {
				min = m;
			}
		}
		return min;
	}
	,get_minZ: function() {
		var i = 0;
		var len = this._children.get_length();
		var min = Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_minZ() + child.get_z();
			if(m < min) {
				min = m;
			}
		}
		return min;
	}
	,get_maxX: function() {
		var i = 0;
		var len = this._children.get_length();
		var max = -Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_maxX() + child.get_x();
			if(m > max) {
				max = m;
			}
		}
		return max;
	}
	,get_maxY: function() {
		var i = 0;
		var len = this._children.get_length();
		var max = -Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_maxY() + child.get_y();
			if(m > max) {
				max = m;
			}
		}
		return max;
	}
	,get_maxZ: function() {
		var i = 0;
		var len = this._children.get_length();
		var max = -Infinity;
		var m;
		while(i < len) {
			var child = this._children.get(i++);
			m = child.get_maxZ() + child.get_z();
			if(m > max) {
				max = m;
			}
		}
		return max;
	}
	,get_partition: function() {
		return this._explicitPartition;
	}
	,set_partition: function(value) {
		this._explicitPartition = value;
		this.set_implicitPartition(value != null ? value : this._parent != null ? this._parent.get_implicitPartition() : null);
		return value;
	}
	,get_sceneTransform: function() {
		if(this._sceneTransformDirty) {
			this.updateSceneTransform();
		}
		return this._sceneTransform;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		var i = 0;
		var len = this._children.get_length();
		while(i < len) this._children.get(i++).set_scene(value);
		if(this._scene == value) {
			return value;
		}
		if(value == null) {
			this._oldScene = this._scene;
		}
		if(this._explicitPartition != null && this._oldScene != null && this._oldScene != this._scene) {
			this.set_partition(null);
		}
		if(value != null) {
			this._oldScene = null;
		}
		this._scene = value;
		if(this._scene != null) {
			this._scene.dispatchEvent(new away3d_events_Scene3DEvent("addedToScene",this));
		} else if(this._oldScene != null) {
			this._oldScene.dispatchEvent(new away3d_events_Scene3DEvent("removedFromScene",this));
		}
		return value;
	}
	,get_inverseSceneTransform: function() {
		if(this._inverseSceneTransformDirty) {
			this._inverseSceneTransform.copyFrom(this.get_sceneTransform());
			this._inverseSceneTransform.invert();
			this._inverseSceneTransformDirty = false;
		}
		return this._inverseSceneTransform;
	}
	,get_parent: function() {
		return this._parent;
	}
	,contains: function(child) {
		return this._children.indexOf(child,0) >= 0;
	}
	,addChild: function(child) {
		if(child == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Parameter child cannot be null."));
		}
		if(child._parent != null) {
			child._parent.removeChild(child);
		}
		if(child._explicitPartition == null) {
			child.set_implicitPartition(this._implicitPartition);
		}
		child.setParent(this);
		child.set_scene(this._scene);
		child.notifySceneTransformChange();
		child.updateMouseChildren();
		child.updateImplicitVisibility();
		this._children.push(child);
		return child;
	}
	,addChildren: function(childarray) {
		var _g = 0;
		while(_g < childarray.get_length()) {
			var child = childarray.get(_g);
			++_g;
			this.addChild(child);
		}
	}
	,removeChild: function(child) {
		if(child == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Parameter child cannot be null"));
		}
		var childIndex = this._children.indexOf(child,0);
		if(childIndex == -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Parameter is not a child of the caller"));
		}
		this.removeChildInternal(childIndex,child);
	}
	,removeChildAt: function(index) {
		var child = this._children.get(index);
		this.removeChildInternal(index,child);
	}
	,removeChildInternal: function(childIndex,child) {
		this._children.splice(childIndex,1);
		child.setParent(null);
		if(child._explicitPartition == null) {
			child.set_implicitPartition(null);
		}
	}
	,getChildAt: function(index) {
		return this._children.get(index);
	}
	,get_numChildren: function() {
		return this._children.get_length();
	}
	,lookAt: function(target,upAxis) {
		away3d_core_base_Object3D.prototype.lookAt.call(this,target,upAxis);
		this.notifySceneTransformChange();
	}
	,translateLocal: function(axis,distance) {
		away3d_core_base_Object3D.prototype.translateLocal.call(this,axis,distance);
		this.notifySceneTransformChange();
	}
	,dispose: function() {
		if(this.get_parent() != null) {
			this.get_parent().removeChild(this);
		}
	}
	,disposeWithChildren: function() {
		this.dispose();
		while(this.get_numChildren() > 0) this.getChildAt(0).dispose();
	}
	,clone: function() {
		var clone = new away3d_containers_ObjectContainer3D();
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_transform(this.get_transform());
		clone.set_partition(this.get_partition());
		clone.set_name(this.get_name());
		var len = this._children.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			clone.addChild(js_Boot.__cast(this._children.get(i).clone() , away3d_containers_ObjectContainer3D));
		}
		return clone;
	}
	,rotate: function(axis,angle) {
		away3d_core_base_Object3D.prototype.rotate.call(this,axis,angle);
		this.notifySceneTransformChange();
	}
	,dispatchEvent: function(event) {
		var ret = away3d_core_base_Object3D.prototype.dispatchEvent.call(this,event);
		if(event.bubbles) {
			if(this._parent != null) {
				this._parent.dispatchEvent(event);
			} else if(this._scene != null) {
				this._scene.dispatchEvent(event);
			}
		}
		return ret;
	}
	,updateImplicitVisibility: function() {
		var len = this._children.get_length();
		this._implicitVisibility = this._parent._explicitVisibility && this._parent._implicitVisibility;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._children.get(i).updateImplicitVisibility();
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		away3d_core_base_Object3D.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		switch(type) {
		case "sceneChanged":
			this._listenToSceneChanged = true;
			break;
		case "scenetransformChanged":
			this._listenToSceneTransformChanged = true;
			break;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		away3d_core_base_Object3D.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(this.hasEventListener(type)) {
			return;
		}
		switch(type) {
		case "sceneChanged":
			this._listenToSceneChanged = false;
			break;
		case "scenetransformChanged":
			this._listenToSceneTransformChanged = false;
			break;
		}
	}
	,__class__: away3d_containers_ObjectContainer3D
});
var away3d_entities_Entity = function() {
	this._worldBoundsInvalid = true;
	this._boundsInvalid = true;
	this._boundsIsShown = false;
	away3d_containers_ObjectContainer3D.call(this);
	this._bounds = this.getDefaultBoundingVolume();
	this._worldBounds = this.getDefaultBoundingVolume();
};
$hxClasses["away3d.entities.Entity"] = away3d_entities_Entity;
away3d_entities_Entity.__name__ = ["away3d","entities","Entity"];
away3d_entities_Entity.__super__ = away3d_containers_ObjectContainer3D;
away3d_entities_Entity.prototype = $extend(away3d_containers_ObjectContainer3D.prototype,{
	_showBounds: null
	,_partitionNode: null
	,_boundsIsShown: null
	,_shaderPickingDetails: null
	,_pickingCollisionVO: null
	,_pickingCollider: null
	,_staticNode: null
	,_bounds: null
	,_boundsInvalid: null
	,_worldBounds: null
	,_worldBoundsInvalid: null
	,set_ignoreTransform: function(value) {
		if(this._scene != null) {
			this._scene.invalidateEntityBounds(this);
		}
		away3d_containers_ObjectContainer3D.prototype.set_ignoreTransform.call(this,value);
		return value;
	}
	,get_shaderPickingDetails: function() {
		return this._shaderPickingDetails;
	}
	,set_shaderPickingDetails: function(value) {
		this._shaderPickingDetails = value;
		return value;
	}
	,get_staticNode: function() {
		return this._staticNode;
	}
	,set_staticNode: function(value) {
		this._staticNode = value;
		return value;
	}
	,get_pickingCollisionVO: function() {
		if(this._pickingCollisionVO == null) {
			this._pickingCollisionVO = new away3d_core_pick_PickingCollisionVO(this);
		}
		return this._pickingCollisionVO;
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		return true;
	}
	,get_showBounds: function() {
		return this._showBounds;
	}
	,set_showBounds: function(value) {
		if(value == this._showBounds) {
			return value;
		}
		this._showBounds = value;
		if(this._showBounds) {
			this.addBounds();
		} else {
			this.removeBounds();
		}
		return value;
	}
	,get_minX: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_min().x;
	}
	,get_minY: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_min().y;
	}
	,get_minZ: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_min().z;
	}
	,get_maxX: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_max().x;
	}
	,get_maxY: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_max().y;
	}
	,get_maxZ: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds.get_max().z;
	}
	,get_bounds: function() {
		if(this._boundsInvalid) {
			this.updateBounds();
		}
		return this._bounds;
	}
	,set_bounds: function(value) {
		this.removeBounds();
		this._bounds = value;
		this._worldBounds = value.clone();
		this.invalidateBounds();
		if(this._showBounds) {
			this.addBounds();
		}
		return value;
	}
	,get_worldBounds: function() {
		if(this._worldBoundsInvalid) {
			this.updateWorldBounds();
		}
		return this._worldBounds;
	}
	,updateWorldBounds: function() {
		this._worldBounds.transformFrom(this.get_bounds(),this.get_sceneTransform());
		this._worldBoundsInvalid = false;
	}
	,set_implicitPartition: function(value) {
		if(value == this._implicitPartition) {
			return value;
		}
		if(this._implicitPartition != null) {
			this.notifyPartitionUnassigned();
		}
		away3d_containers_ObjectContainer3D.prototype.set_implicitPartition.call(this,value);
		this.notifyPartitionAssigned();
		return value;
	}
	,set_scene: function(value) {
		if(value == this._scene) {
			return value;
		}
		if(this._scene != null) {
			this._scene.unregisterEntity(this);
		}
		if(value != null) {
			value.registerEntity(this);
		}
		away3d_containers_ObjectContainer3D.prototype.set_scene.call(this,value);
		return value;
	}
	,get_assetType: function() {
		return "entity";
	}
	,get_pickingCollider: function() {
		return this._pickingCollider;
	}
	,set_pickingCollider: function(value) {
		this._pickingCollider = value;
		return value;
	}
	,getEntityPartitionNode: function() {
		if(this._partitionNode == null) {
			this._partitionNode = this.createEntityPartitionNode();
		}
		return this._partitionNode;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		if(this.get_pickingCollisionVO().localRayPosition == null) {
			this.get_pickingCollisionVO().localRayPosition = new openfl_geom_Vector3D();
		}
		if(this.get_pickingCollisionVO().localRayDirection == null) {
			this.get_pickingCollisionVO().localRayDirection = new openfl_geom_Vector3D();
		}
		if(this.get_pickingCollisionVO().localNormal == null) {
			this.get_pickingCollisionVO().localNormal = new openfl_geom_Vector3D();
		}
		var localRayPosition = this.get_pickingCollisionVO().localRayPosition;
		var localRayDirection = this.get_pickingCollisionVO().localRayDirection;
		away3d_core_math_Matrix3DUtils.transformVector(this.get_inverseSceneTransform(),rayPosition,localRayPosition);
		away3d_core_math_Matrix3DUtils.deltaTransformVector(this.get_inverseSceneTransform(),rayDirection,localRayDirection);
		var rayEntryDistance = this.get_bounds().rayIntersection(localRayPosition,localRayDirection,this.get_pickingCollisionVO().localNormal);
		if(rayEntryDistance < 0) {
			return false;
		}
		this.get_pickingCollisionVO().rayEntryDistance = rayEntryDistance;
		this.get_pickingCollisionVO().rayPosition = rayPosition;
		this.get_pickingCollisionVO().rayDirection = rayDirection;
		this.get_pickingCollisionVO().rayOriginIsInsideBounds = rayEntryDistance == 0;
		return true;
	}
	,createEntityPartitionNode: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_AxisAlignedBoundingBox();
	}
	,updateBounds: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,invalidateSceneTransform: function() {
		if(!this._ignoreTransform) {
			away3d_containers_ObjectContainer3D.prototype.invalidateSceneTransform.call(this);
			this._worldBoundsInvalid = true;
			this.notifySceneBoundsInvalid();
		}
	}
	,invalidateBounds: function() {
		this._boundsInvalid = true;
		this._worldBoundsInvalid = true;
		this.notifySceneBoundsInvalid();
	}
	,updateMouseChildren: function() {
		if(this._parent == null && this.get_pickingCollider() != null) {
			if(js_Boot.__instanceof(this._parent,away3d_entities_Entity)) {
				var collider = (js_Boot.__cast(this._parent , away3d_entities_Entity)).get_pickingCollider();
				if(collider != null) {
					this.set_pickingCollider(collider);
				}
			}
		}
		away3d_containers_ObjectContainer3D.prototype.updateMouseChildren.call(this);
	}
	,notifySceneBoundsInvalid: function() {
		if(this._scene != null) {
			this._scene.invalidateEntityBounds(this);
		}
	}
	,notifyPartitionAssigned: function() {
		if(this._scene != null) {
			this._scene.registerPartition(this);
		}
	}
	,notifyPartitionUnassigned: function() {
		if(this._scene != null) {
			this._scene.unregisterPartition(this);
		}
	}
	,addBounds: function() {
		if(!this._boundsIsShown) {
			this._boundsIsShown = true;
			this.addChild(this._bounds.get_boundingRenderable());
		}
	}
	,removeBounds: function() {
		if(this._boundsIsShown) {
			this._boundsIsShown = false;
			this.removeChild(this._bounds.get_boundingRenderable());
			this._bounds.disposeRenderable();
		}
	}
	,internalUpdate: function() {
		if(this._controller != null) {
			this._controller.update();
		}
	}
	,__class__: away3d_entities_Entity
});
var away3d_cameras_Camera3D = function(lens) {
	this._frustumPlanesDirty = true;
	this._viewProjectionDirty = true;
	this._viewProjection = new openfl_geom_Matrix3D();
	away3d_entities_Entity.call(this);
	this._lens = lens;
	if(this._lens == null) {
		this._lens = new away3d_cameras_lenses_PerspectiveLens();
	}
	this._lens.addEventListener("matrixChanged",$bind(this,this.onLensMatrixChanged));
	this._frustumPlanes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,6,true);
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._frustumPlanes.set(i,new away3d_core_math_Plane3D());
	}
	this.set_z(-1000);
};
$hxClasses["away3d.cameras.Camera3D"] = away3d_cameras_Camera3D;
away3d_cameras_Camera3D.__name__ = ["away3d","cameras","Camera3D"];
away3d_cameras_Camera3D.__super__ = away3d_entities_Entity;
away3d_cameras_Camera3D.prototype = $extend(away3d_entities_Entity.prototype,{
	_viewProjection: null
	,_viewProjectionDirty: null
	,_lens: null
	,_frustumPlanes: null
	,_frustumPlanesDirty: null
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_NullBounds();
	}
	,get_assetType: function() {
		return "camera";
	}
	,onLensMatrixChanged: function(event) {
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
		this.dispatchEvent(event);
	}
	,get_frustumPlanes: function() {
		if(this._frustumPlanesDirty) {
			this.updateFrustum();
		}
		return this._frustumPlanes;
	}
	,updateFrustum: function() {
		var a;
		var b;
		var c;
		var c11;
		var c12;
		var c13;
		var c14;
		var c21;
		var c22;
		var c23;
		var c24;
		var c31;
		var c32;
		var c33;
		var c34;
		var c41;
		var c42;
		var c43;
		var c44;
		var p;
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var invLen;
		this.get_viewProjection().copyRawDataTo(raw);
		c11 = raw.get(0);
		c12 = raw.get(4);
		c13 = raw.get(8);
		c14 = raw.get(12);
		c21 = raw.get(1);
		c22 = raw.get(5);
		c23 = raw.get(9);
		c24 = raw.get(13);
		c31 = raw.get(2);
		c32 = raw.get(6);
		c33 = raw.get(10);
		c34 = raw.get(14);
		c41 = raw.get(3);
		c42 = raw.get(7);
		c43 = raw.get(11);
		c44 = raw.get(15);
		p = this._frustumPlanes.get(0);
		a = c41 + c11;
		b = c42 + c12;
		c = c43 + c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c14) * invLen;
		p = this._frustumPlanes.get(1);
		a = c41 - c11;
		b = c42 - c12;
		c = c43 - c13;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c14 - c44) * invLen;
		p = this._frustumPlanes.get(2);
		a = c41 + c21;
		b = c42 + c22;
		c = c43 + c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -(c44 + c24) * invLen;
		p = this._frustumPlanes.get(3);
		a = c41 - c21;
		b = c42 - c22;
		c = c43 - c23;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c24 - c44) * invLen;
		p = this._frustumPlanes.get(4);
		a = c31;
		b = c32;
		c = c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = -c34 * invLen;
		p = this._frustumPlanes.get(5);
		a = c41 - c31;
		b = c42 - c32;
		c = c43 - c33;
		invLen = 1 / Math.sqrt(a * a + b * b + c * c);
		p.a = a * invLen;
		p.b = b * invLen;
		p.c = c * invLen;
		p.d = (c34 - c44) * invLen;
		this._frustumPlanesDirty = false;
	}
	,invalidateSceneTransform: function() {
		away3d_entities_Entity.prototype.invalidateSceneTransform.call(this);
		this._viewProjectionDirty = true;
		this._frustumPlanesDirty = true;
	}
	,updateBounds: function() {
		this._bounds.nullify();
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_CameraNode(this);
	}
	,get_lens: function() {
		return this._lens;
	}
	,set_lens: function(value) {
		if(this._lens == value) {
			return value;
		}
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Lens cannot be null!"));
		}
		this._lens.removeEventListener("matrixChanged",$bind(this,this.onLensMatrixChanged));
		this._lens = value;
		this._lens.addEventListener("matrixChanged",$bind(this,this.onLensMatrixChanged));
		this.dispatchEvent(new away3d_events_CameraEvent("lensChanged",this));
		return value;
	}
	,get_viewProjection: function() {
		if(this._viewProjectionDirty) {
			this._viewProjection.copyFrom(this.get_inverseSceneTransform());
			this._viewProjection.append(this._lens.get_matrix());
			this._viewProjectionDirty = false;
		}
		return this._viewProjection;
	}
	,unproject: function(nX,nY,sZ,v) {
		return away3d_core_math_Matrix3DUtils.transformVector(this.get_sceneTransform(),this.get_lens().unproject(nX,nY,sZ,v),v);
	}
	,getRay: function(nX,nY,sZ,v) {
		return away3d_core_math_Matrix3DUtils.deltaTransformVector(this.get_sceneTransform(),this.get_lens().unproject(nX,nY,sZ,v),v);
	}
	,project: function(point3d,v) {
		return this.get_lens().project(away3d_core_math_Matrix3DUtils.transformVector(this.get_inverseSceneTransform(),point3d,v),v);
	}
	,__class__: away3d_cameras_Camera3D
});
var away3d_cameras_lenses_CoordinateSystem = function() { };
$hxClasses["away3d.cameras.lenses.CoordinateSystem"] = away3d_cameras_lenses_CoordinateSystem;
away3d_cameras_lenses_CoordinateSystem.__name__ = ["away3d","cameras","lenses","CoordinateSystem"];
var away3d_cameras_lenses_LensBase = function() {
	this._unprojectionInvalid = true;
	this._frustumCorners = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,24,true);
	this._matrixInvalid = true;
	this._aspectRatio = 1;
	this._far = 3000;
	this._near = 20;
	this._viewPort = new openfl_geom_Rectangle();
	this._scissorRect = new openfl_geom_Rectangle();
	openfl_events_EventDispatcher.call(this);
	this._matrix = new openfl_geom_Matrix3D();
};
$hxClasses["away3d.cameras.lenses.LensBase"] = away3d_cameras_lenses_LensBase;
away3d_cameras_lenses_LensBase.__name__ = ["away3d","cameras","lenses","LensBase"];
away3d_cameras_lenses_LensBase.__super__ = openfl_events_EventDispatcher;
away3d_cameras_lenses_LensBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_matrix: null
	,_scissorRect: null
	,_viewPort: null
	,_near: null
	,_far: null
	,_aspectRatio: null
	,_matrixInvalid: null
	,_frustumCorners: null
	,_unprojection: null
	,_unprojectionInvalid: null
	,get_frustumCorners: function() {
		return this._frustumCorners;
	}
	,set_frustumCorners: function(frustumCorners) {
		this._frustumCorners = frustumCorners;
		return frustumCorners;
	}
	,get_matrix: function() {
		if(this._matrixInvalid) {
			this.updateMatrix();
			this._matrixInvalid = false;
		}
		return this._matrix;
	}
	,set_matrix: function(value) {
		this._matrix = value;
		this.invalidateMatrix();
		return value;
	}
	,get_near: function() {
		return this._near;
	}
	,set_near: function(value) {
		if(value == this._near) {
			return value;
		}
		this._near = value;
		this.invalidateMatrix();
		return value;
	}
	,get_far: function() {
		return this._far;
	}
	,set_far: function(value) {
		if(value == this._far) {
			return value;
		}
		this._far = value;
		this.invalidateMatrix();
		return value;
	}
	,project: function(point3d,v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		away3d_core_math_Matrix3DUtils.transformVector(this.get_matrix(),point3d,v);
		v.x /= v.w;
		v.y = -v.y / v.w;
		v.z = point3d.z;
		return v;
	}
	,get_unprojectionMatrix: function() {
		if(this._unprojectionInvalid) {
			if(this._unprojection == null) {
				this._unprojection = new openfl_geom_Matrix3D();
			}
			this._unprojection.copyFrom(this.get_matrix());
			this._unprojection.invert();
			this._unprojectionInvalid = false;
		}
		return this._unprojection;
	}
	,unproject: function(nX,nY,sZ,v) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,clone: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_aspectRatio: function() {
		return this._aspectRatio;
	}
	,set_aspectRatio: function(value) {
		if(this._aspectRatio == value || value * 0 != 0) {
			return value;
		}
		this._aspectRatio = value;
		this.invalidateMatrix();
		return value;
	}
	,invalidateMatrix: function() {
		this._matrixInvalid = true;
		this._unprojectionInvalid = true;
		this.dispatchEvent(new away3d_events_LensEvent("matrixChanged",this));
	}
	,updateMatrix: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,updateScissorRect: function(x,y,width,height) {
		this._scissorRect.x = x;
		this._scissorRect.y = y;
		this._scissorRect.width = width;
		this._scissorRect.height = height;
		this.invalidateMatrix();
	}
	,updateViewport: function(x,y,width,height) {
		this._viewPort.x = x;
		this._viewPort.y = y;
		this._viewPort.width = width;
		this._viewPort.height = height;
		this.invalidateMatrix();
	}
	,__class__: away3d_cameras_lenses_LensBase
});
var away3d_cameras_lenses_FreeMatrixLens = function() {
	away3d_cameras_lenses_LensBase.call(this);
	this._matrix.copyFrom(new away3d_cameras_lenses_PerspectiveLens().get_matrix());
};
$hxClasses["away3d.cameras.lenses.FreeMatrixLens"] = away3d_cameras_lenses_FreeMatrixLens;
away3d_cameras_lenses_FreeMatrixLens.__name__ = ["away3d","cameras","lenses","FreeMatrixLens"];
away3d_cameras_lenses_FreeMatrixLens.__super__ = away3d_cameras_lenses_LensBase;
away3d_cameras_lenses_FreeMatrixLens.prototype = $extend(away3d_cameras_lenses_LensBase.prototype,{
	set_near: function(value) {
		this._near = value;
		return value;
	}
	,set_far: function(value) {
		this._far = value;
		return value;
	}
	,set_aspectRatio: function(value) {
		this._aspectRatio = value;
		return value;
	}
	,clone: function() {
		var clone = new away3d_cameras_lenses_FreeMatrixLens();
		clone._matrix.copyFrom(this._matrix);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone.invalidateMatrix();
		return clone;
	}
	,updateMatrix: function() {
		this._matrixInvalid = false;
	}
	,__class__: away3d_cameras_lenses_FreeMatrixLens
});
var away3d_cameras_lenses_OrthographicLens = function(projectionHeight) {
	if(projectionHeight == null) {
		projectionHeight = 500;
	}
	away3d_cameras_lenses_LensBase.call(this);
	this._projectionHeight = projectionHeight;
};
$hxClasses["away3d.cameras.lenses.OrthographicLens"] = away3d_cameras_lenses_OrthographicLens;
away3d_cameras_lenses_OrthographicLens.__name__ = ["away3d","cameras","lenses","OrthographicLens"];
away3d_cameras_lenses_OrthographicLens.__super__ = away3d_cameras_lenses_LensBase;
away3d_cameras_lenses_OrthographicLens.prototype = $extend(away3d_cameras_lenses_LensBase.prototype,{
	_projectionHeight: null
	,_xMax: null
	,_yMax: null
	,get_projectionHeight: function() {
		return this._projectionHeight;
	}
	,set_projectionHeight: function(value) {
		if(value == this._projectionHeight) {
			return value;
		}
		this._projectionHeight = value;
		this.invalidateMatrix();
		return value;
	}
	,unproject: function(nX,nY,sZ,v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		var translation = away3d_core_math_Matrix3DUtils.CALCULATION_VECTOR3D;
		this.get_matrix().copyColumnTo(3,translation);
		v.x = nX + translation.x;
		v.y = nX + translation.y;
		v.z = sZ;
		v.w = 1;
		away3d_core_math_Matrix3DUtils.transformVector(this.get_unprojectionMatrix(),v,v);
		v.z = sZ;
		return v;
	}
	,clone: function() {
		var clone = new away3d_cameras_lenses_OrthographicLens();
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone.set_projectionHeight(this._projectionHeight);
		return clone;
	}
	,updateMatrix: function() {
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		this._yMax = this._projectionHeight * .5;
		this._xMax = this._yMax * this._aspectRatio;
		var left;
		var right;
		var top;
		var bottom;
		if(this._scissorRect.x == 0 && this._scissorRect.y == 0 && this._scissorRect.width == this._viewPort.width && this._scissorRect.height == this._viewPort.height) {
			left = -this._xMax;
			right = this._xMax;
			top = -this._yMax;
			bottom = this._yMax;
			raw.set(0,2 / (this._projectionHeight * this._aspectRatio));
			raw.set(5,2 / this._projectionHeight);
			raw.set(10,1 / (this._far - this._near));
			raw.set(14,this._near / (this._near - this._far));
			raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(11,raw.set(12,raw.set(13,0)))))))))));
			raw.set(15,1);
		} else {
			var xWidth = this._xMax * (this._viewPort.width / this._scissorRect.width);
			var yHgt = this._yMax * (this._viewPort.height / this._scissorRect.height);
			var center = this._xMax * (this._scissorRect.x * 2 - this._viewPort.width) / this._scissorRect.width + this._xMax;
			var middle = -this._yMax * (this._scissorRect.y * 2 - this._viewPort.height) / this._scissorRect.height - this._yMax;
			left = center - xWidth;
			right = center + xWidth;
			top = middle - yHgt;
			bottom = middle + yHgt;
			raw.set(0,2 / (right - left));
			raw.set(5,-2 / (top - bottom));
			raw.set(10,1 / (this._far - this._near));
			raw.set(12,(right + left) / (right - left));
			raw.set(13,(bottom + top) / (bottom - top));
			raw.set(14,this._near / (this.get_near() - this.get_far()));
			raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(11,0)))))))));
			raw.set(15,1);
		}
		this._frustumCorners.set(0,this._frustumCorners.set(9,this._frustumCorners.set(12,this._frustumCorners.set(21,left))));
		this._frustumCorners.set(3,this._frustumCorners.set(6,this._frustumCorners.set(15,this._frustumCorners.set(18,right))));
		this._frustumCorners.set(1,this._frustumCorners.set(4,this._frustumCorners.set(13,this._frustumCorners.set(16,top))));
		this._frustumCorners.set(7,this._frustumCorners.set(10,this._frustumCorners.set(19,this._frustumCorners.set(22,bottom))));
		this._frustumCorners.set(2,this._frustumCorners.set(5,this._frustumCorners.set(8,this._frustumCorners.set(11,this._near))));
		this._frustumCorners.set(14,this._frustumCorners.set(17,this._frustumCorners.set(20,this._frustumCorners.set(23,this._far))));
		this._matrix.copyRawDataFrom(raw);
		this._matrixInvalid = false;
	}
	,__class__: away3d_cameras_lenses_OrthographicLens
});
var away3d_cameras_lenses_PerspectiveLens = function(fieldOfView,coordinateSystem) {
	if(coordinateSystem == null) {
		coordinateSystem = 0;
	}
	if(fieldOfView == null) {
		fieldOfView = 60;
	}
	away3d_cameras_lenses_LensBase.call(this);
	this.set_fieldOfView(fieldOfView);
	this.set_coordinateSystem(coordinateSystem);
};
$hxClasses["away3d.cameras.lenses.PerspectiveLens"] = away3d_cameras_lenses_PerspectiveLens;
away3d_cameras_lenses_PerspectiveLens.__name__ = ["away3d","cameras","lenses","PerspectiveLens"];
away3d_cameras_lenses_PerspectiveLens.__super__ = away3d_cameras_lenses_LensBase;
away3d_cameras_lenses_PerspectiveLens.prototype = $extend(away3d_cameras_lenses_LensBase.prototype,{
	_fieldOfView: null
	,_focalLength: null
	,_focalLengthInv: null
	,_yMax: null
	,_xMax: null
	,_coordinateSystem: null
	,get_fieldOfView: function() {
		return this._fieldOfView;
	}
	,set_fieldOfView: function(value) {
		if(value == this._fieldOfView) {
			return value;
		}
		this._fieldOfView = value;
		this._focalLengthInv = Math.tan(this._fieldOfView * Math.PI / 360);
		this._focalLength = 1 / this._focalLengthInv;
		this.invalidateMatrix();
		return value;
	}
	,get_focalLength: function() {
		return this._focalLength;
	}
	,set_focalLength: function(value) {
		if(value == this._focalLength) {
			return value;
		}
		this._focalLength = value;
		this._focalLengthInv = 1 / this._focalLength;
		this._fieldOfView = Math.atan(this._focalLengthInv) * 360 / Math.PI;
		this.invalidateMatrix();
		return value;
	}
	,unproject: function(nX,nY,sZ,v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		v.x = nX;
		v.y = -nY;
		v.z = sZ;
		v.w = 1;
		v.x *= sZ;
		v.y *= sZ;
		away3d_core_math_Matrix3DUtils.transformVector(this.get_unprojectionMatrix(),v,v);
		v.z = sZ;
		return v;
	}
	,clone: function() {
		var clone = new away3d_cameras_lenses_PerspectiveLens(this._fieldOfView);
		clone._near = this._near;
		clone._far = this._far;
		clone._aspectRatio = this._aspectRatio;
		clone._coordinateSystem = this._coordinateSystem;
		return clone;
	}
	,get_coordinateSystem: function() {
		return this._coordinateSystem;
	}
	,set_coordinateSystem: function(value) {
		if(value == this._coordinateSystem) {
			return value;
		}
		this._coordinateSystem = value;
		this.invalidateMatrix();
		return value;
	}
	,updateMatrix: function() {
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		this._yMax = this._near * this._focalLengthInv;
		this._xMax = this._yMax * this._aspectRatio;
		var left;
		var right;
		var top;
		var bottom;
		if(this._scissorRect.x == 0 && this._scissorRect.y == 0 && this._scissorRect.width == this._viewPort.width && this._scissorRect.height == this._viewPort.height) {
			left = -this._xMax;
			right = this._xMax;
			top = -this._yMax;
			bottom = this._yMax;
			raw.set(0,this._near / this._xMax);
			raw.set(5,this._near / this._yMax);
			raw.set(10,this._far / (this._far - this._near));
			raw.set(11,1);
			raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(12,raw.set(13,raw.set(15,0)))))))))));
			raw.set(14,-this._near * raw.get(10));
		} else {
			var xWidth = this._xMax * (this._viewPort.width / this._scissorRect.width);
			var yHgt = this._yMax * (this._viewPort.height / this._scissorRect.height);
			var center = this._xMax * (this._scissorRect.x * 2 - this._viewPort.width) / this._scissorRect.width + this._xMax;
			var middle = -this._yMax * (this._scissorRect.y * 2 - this._viewPort.height) / this._scissorRect.height - this._yMax;
			left = center - xWidth;
			right = center + xWidth;
			top = middle - yHgt;
			bottom = middle + yHgt;
			raw.set(0,2 * this._near / (right - left));
			raw.set(5,2 * this._near / (bottom - top));
			raw.set(8,(right + left) / (right - left));
			raw.set(9,(bottom + top) / (bottom - top));
			raw.set(10,(this._far + this._near) / (this._far - this._near));
			raw.set(11,1);
			raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(12,raw.set(13,raw.set(15,0)))))))));
			raw.set(14,-2 * this._far * this._near / (this._far - this._near));
		}
		if(this._coordinateSystem == 1) {
			raw.set(5,-raw.get(5));
		}
		this._matrix.copyRawDataFrom(raw);
		var yMaxFar = this._far * this._focalLengthInv;
		var xMaxFar = yMaxFar * this._aspectRatio;
		this._frustumCorners.set(0,this._frustumCorners.set(9,left));
		this._frustumCorners.set(3,this._frustumCorners.set(6,right));
		this._frustumCorners.set(1,this._frustumCorners.set(4,top));
		this._frustumCorners.set(7,this._frustumCorners.set(10,bottom));
		this._frustumCorners.set(12,this._frustumCorners.set(21,-xMaxFar));
		this._frustumCorners.set(15,this._frustumCorners.set(18,xMaxFar));
		this._frustumCorners.set(13,this._frustumCorners.set(16,-yMaxFar));
		this._frustumCorners.set(19,this._frustumCorners.set(22,yMaxFar));
		this._frustumCorners.set(2,this._frustumCorners.set(5,this._frustumCorners.set(8,this._frustumCorners.set(11,this._near))));
		this._frustumCorners.set(14,this._frustumCorners.set(17,this._frustumCorners.set(20,this._frustumCorners.set(23,this._far))));
		this._matrixInvalid = false;
	}
	,__class__: away3d_cameras_lenses_PerspectiveLens
});
var away3d_containers_Scene3D = function() {
	this._partitions = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._sceneGraphRoot = new away3d_containers_ObjectContainer3D();
	this._sceneGraphRoot.set_scene(this);
	this._sceneGraphRoot._isRoot = true;
	this._sceneGraphRoot.set_partition(new away3d_core_partition_Partition3D(new away3d_core_partition_NodeBase()));
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["away3d.containers.Scene3D"] = away3d_containers_Scene3D;
away3d_containers_Scene3D.__name__ = ["away3d","containers","Scene3D"];
away3d_containers_Scene3D.__super__ = openfl_events_EventDispatcher;
away3d_containers_Scene3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_sceneGraphRoot: null
	,_partitions: null
	,traversePartitions: function(traverser) {
		var i = 0;
		var len = this._partitions.get_length();
		traverser.scene = this;
		while(i < len) this._partitions.get(i++).traverse(traverser);
	}
	,get_partition: function() {
		return this._sceneGraphRoot.get_partition();
	}
	,set_partition: function(value) {
		this._sceneGraphRoot.set_partition(value);
		this.dispatchEvent(new away3d_events_Scene3DEvent("partitionChanged",this._sceneGraphRoot));
		return value;
	}
	,contains: function(child) {
		return this._sceneGraphRoot.contains(child);
	}
	,addChild: function(child) {
		return this._sceneGraphRoot.addChild(child);
	}
	,removeChild: function(child) {
		this._sceneGraphRoot.removeChild(child);
	}
	,removeChildAt: function(index) {
		this._sceneGraphRoot.removeChildAt(index);
	}
	,getChildAt: function(index) {
		return this._sceneGraphRoot.getChildAt(index);
	}
	,get_numChildren: function() {
		return this._sceneGraphRoot.get_numChildren();
	}
	,registerEntity: function(entity) {
		var partition = entity.get_implicitPartition();
		this.addPartitionUnique(partition);
		partition.markForUpdate(entity);
	}
	,unregisterEntity: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,invalidateEntityBounds: function(entity) {
		entity.get_implicitPartition().markForUpdate(entity);
	}
	,registerPartition: function(entity) {
		this.addPartitionUnique(entity.get_implicitPartition());
	}
	,unregisterPartition: function(entity) {
		entity.get_implicitPartition().removeEntity(entity);
	}
	,addPartitionUnique: function(partition) {
		if(this._partitions.indexOf(partition,0) == -1) {
			this._partitions.push(partition);
		}
	}
	,__class__: away3d_containers_Scene3D
});
var away3d_containers_View3D = function(scene,camera,renderer,forceSoftware,profile,contextIndex) {
	if(contextIndex == null) {
		contextIndex = -1;
	}
	if(profile == null) {
		profile = "baseline";
	}
	if(forceSoftware == null) {
		forceSoftware = false;
	}
	this._contextIndex = -1;
	this._layeredView = false;
	this._viewportDirty = true;
	this._scissorRectDirty = true;
	this._shareContext = false;
	this._rightClickMenuEnabled = true;
	this._backBufferInvalid = true;
	this._depthTextureInvalid = true;
	this._backgroundAlpha = 1;
	this._backgroundColor = 0;
	this._time = 0;
	this._globalPos = new openfl_geom_Point();
	this._localPos = new openfl_geom_Point();
	this._height = 0;
	this._width = 0;
	openfl_display_Sprite.call(this);
	this._profile = profile;
	this._scene = scene != null ? scene : new away3d_containers_Scene3D();
	this._scene.addEventListener("partitionChanged",$bind(this,this.onScenePartitionChanged));
	this._camera = camera != null ? camera : new away3d_cameras_Camera3D();
	this._renderer = renderer != null ? renderer : new away3d_core_render_DefaultRenderer();
	this._depthRenderer = new away3d_core_render_DepthRenderer();
	this._forceSoftware = forceSoftware;
	this._contextIndex = contextIndex;
	this._entityCollector = this._renderer.createEntityCollector();
	this._entityCollector.set_camera(this._camera);
	this._scissorRect = new openfl_geom_Rectangle();
	this.initHitField();
	this._mouse3DManager = new away3d_core_managers_Mouse3DManager();
	this._mouse3DManager.enableMouseListeners(this);
	this._touch3DManager = new away3d_core_managers_Touch3DManager();
	this._touch3DManager.set_view(this);
	this._touch3DManager.enableTouchListeners(this);
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage),false,0,true);
	this.addEventListener("added",$bind(this,this.onAdded),false,0,true);
	this._camera.addEventListener("lensChanged",$bind(this,this.onLensChanged));
	this._camera.set_partition(this._scene.get_partition());
};
$hxClasses["away3d.containers.View3D"] = away3d_containers_View3D;
away3d_containers_View3D.__name__ = ["away3d","containers","View3D"];
away3d_containers_View3D.__super__ = openfl_display_Sprite;
away3d_containers_View3D.prototype = $extend(openfl_display_Sprite.prototype,{
	_width: null
	,_height: null
	,_localPos: null
	,_globalPos: null
	,_globalPosDirty: null
	,_scene: null
	,_camera: null
	,_entityCollector: null
	,_aspectRatio: null
	,_time: null
	,_deltaTime: null
	,_backgroundColor: null
	,_backgroundAlpha: null
	,_mouse3DManager: null
	,_touch3DManager: null
	,_renderer: null
	,_depthRenderer: null
	,_addedToStage: null
	,_forceSoftware: null
	,_filter3DRenderer: null
	,_requireDepthRender: null
	,_depthRender: null
	,_depthTextureInvalid: null
	,_hitField: null
	,_parentIsStage: null
	,_background: null
	,_stage3DProxy: null
	,_backBufferInvalid: null
	,_antiAlias: null
	,_rttBufferManager: null
	,_rightClickMenuEnabled: null
	,_sourceURL: null
	,_shareContext: null
	,_scissorRect: null
	,_scissorRectDirty: null
	,_viewportDirty: null
	,_depthPrepass: null
	,_profile: null
	,_layeredView: null
	,_contextIndex: null
	,get_depthPrepass: function() {
		return this._depthPrepass;
	}
	,set_depthPrepass: function(value) {
		this._depthPrepass = value;
		return value;
	}
	,onScenePartitionChanged: function(event) {
		if(this._camera != null) {
			this._camera.set_partition(this.get_scene().get_partition());
		}
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(stage3DProxy) {
		if(this._stage3DProxy != null) {
			this._stage3DProxy.removeEventListener("ViewportUpdated",$bind(this,this.onViewportUpdated));
			this._stage3DProxy.removeEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
		}
		this._stage3DProxy = stage3DProxy;
		this._stage3DProxy.addEventListener("ViewportUpdated",$bind(this,this.onViewportUpdated));
		this._stage3DProxy.addEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		this._globalPosDirty = true;
		this._backBufferInvalid = true;
		return this._stage3DProxy;
	}
	,onContext3DRecreated: function(event) {
		this._depthTextureInvalid = true;
	}
	,get_forceMouseMove: function() {
		return this._mouse3DManager.get_forceMouseMove();
	}
	,set_forceMouseMove: function(value) {
		this._mouse3DManager.set_forceMouseMove(value);
		this._touch3DManager.set_forceTouchMove(value);
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		this._background = value;
		this._renderer.set_background(this._background);
		return this._background;
	}
	,get_layeredView: function() {
		return this._layeredView;
	}
	,set_layeredView: function(value) {
		this._layeredView = value;
		return this._layeredView;
	}
	,initHitField: function() {
		this._hitField = new openfl_display_Sprite();
		this._hitField.set_alpha(0);
		this._hitField.doubleClickEnabled = true;
		this._hitField.get_graphics().beginFill(0);
		this._hitField.get_graphics().drawRect(0,0,100,100);
		this.addChild(this._hitField);
	}
	,get_filters3d: function() {
		if(this._filter3DRenderer != null) {
			return this._filter3DRenderer.get_filters();
		} else {
			return null;
		}
	}
	,set_filters3d: function(value) {
		if(value != null && value.length == 0) {
			value = null;
		}
		if(this._filter3DRenderer != null && value == null) {
			this._filter3DRenderer.dispose();
			this._filter3DRenderer = null;
		} else if(this._filter3DRenderer == null && value != null) {
			this._filter3DRenderer = new away3d_core_render_Filter3DRenderer(this.get_stage3DProxy());
			this._filter3DRenderer.set_filters(value);
		}
		if(this._filter3DRenderer != null) {
			this._filter3DRenderer.set_filters(value);
			this._requireDepthRender = this._filter3DRenderer.get_requireDepthRender();
		} else {
			this._requireDepthRender = false;
			if(this._depthRender != null) {
				this._depthRender.dispose();
				this._depthRender = null;
			}
		}
		return value;
	}
	,get_renderer: function() {
		return this._renderer;
	}
	,set_renderer: function(value) {
		this._renderer.dispose();
		this._renderer = value;
		this._entityCollector = this._renderer.createEntityCollector();
		this._entityCollector.set_camera(this._camera);
		this._renderer.set_stage3DProxy(this._stage3DProxy);
		this._renderer.set_antiAlias(this._antiAlias);
		this._renderer.set_backgroundR(_$UInt_UInt_$Impl_$.toFloat(this._backgroundColor >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		this._renderer.set_backgroundG(_$UInt_UInt_$Impl_$.toFloat(this._backgroundColor >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		this._renderer.set_backgroundB(_$UInt_UInt_$Impl_$.toFloat(this._backgroundColor & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		this._renderer.set_backgroundAlpha(this._backgroundAlpha);
		this._renderer.set_viewWidth(this._width);
		this._renderer.set_viewHeight(this._height);
		this._backBufferInvalid = true;
		return this._renderer;
	}
	,get_backgroundColor: function() {
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		this._backgroundColor = value;
		this._renderer.set_backgroundR(_$UInt_UInt_$Impl_$.toFloat(value >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		this._renderer.set_backgroundG(_$UInt_UInt_$Impl_$.toFloat(value >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		this._renderer.set_backgroundB(_$UInt_UInt_$Impl_$.toFloat(value & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
		return value;
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value > 1) {
			value = 1;
		} else if(value < 0) {
			value = 0;
		}
		this._renderer.set_backgroundAlpha(value);
		this._backgroundAlpha = value;
		return value;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(camera) {
		this._camera.removeEventListener("lensChanged",$bind(this,this.onLensChanged));
		this._camera = camera;
		this._entityCollector.set_camera(this._camera);
		if(this._scene != null) {
			this._camera.set_partition(this._scene.get_partition());
		}
		this._camera.addEventListener("lensChanged",$bind(this,this.onLensChanged));
		this._scissorRectDirty = true;
		this._viewportDirty = true;
		return camera;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(scene) {
		this._scene.removeEventListener("partitionChanged",$bind(this,this.onScenePartitionChanged));
		this._scene = scene;
		this._scene.addEventListener("partitionChanged",$bind(this,this.onScenePartitionChanged));
		if(this._camera != null) {
			this._camera.set_partition(this._scene.get_partition());
		}
		return this._scene;
	}
	,deltaTime: null
	,get_deltaTime: function() {
		return this._deltaTime;
	}
	,get_filters: function() {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("filters is not supported in View3D. Use filters3d instead."));
	}
	,set_filters: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("filters is not supported in View3D. Use filters3d instead."));
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) {
			value = 2048;
		}
		if(this._width == value) {
			return value;
		}
		if(this._rttBufferManager != null) {
			this._rttBufferManager.set_viewWidth(value | 0);
		}
		this._hitField.set_width(value);
		this._width = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewWidth(value);
		this._scissorRect.width = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._stage3DProxy != null && this._stage3DProxy.get_usesSoftwareRendering() && value > 2048) {
			value = 2048;
		}
		if(this._height == value) {
			return value;
		}
		if(this._rttBufferManager != null) {
			this._rttBufferManager.set_viewHeight(value | 0);
		}
		this._hitField.set_height(value);
		this._height = value;
		this._aspectRatio = this._width / this._height;
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		this._depthTextureInvalid = true;
		this._renderer.set_viewHeight(value);
		this._scissorRect.height = value;
		this._backBufferInvalid = true;
		this._scissorRectDirty = true;
		return value;
	}
	,set_x: function(value) {
		if(this.get_x() == value) {
			return value;
		}
		openfl_display_Sprite.prototype.set_x.call(this,value);
		this._localPos.x = value;
		var tmp = this.parent != null ? this.parent.localToGlobal(this._localPos).x : value;
		this._globalPos.x = tmp;
		this._globalPosDirty = true;
		return value;
	}
	,set_y: function(value) {
		if(this.get_y() == value) {
			return value;
		}
		openfl_display_Sprite.prototype.set_y.call(this,value);
		this._localPos.y = value;
		var tmp = this.parent != null ? this.parent.localToGlobal(this._localPos).y : value;
		this._globalPos.y = tmp;
		this._globalPosDirty = true;
		return value;
	}
	,set_visible: function(value) {
		openfl_display_Sprite.prototype.set_visible.call(this,value);
		if(this._stage3DProxy != null && !this._shareContext) {
			this._stage3DProxy.set_visible(value);
		}
		return value;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(value) {
		this._antiAlias = value;
		this._renderer.set_antiAlias(value);
		this._backBufferInvalid = true;
		return this._antiAlias;
	}
	,renderedFacesCount: null
	,get_renderedFacesCount: function() {
		return this._entityCollector.get_numTriangles();
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		if(this._shareContext == value) {
			return value;
		}
		this._shareContext = value;
		this._globalPosDirty = true;
		return value;
	}
	,updateBackBuffer: function() {
		if(this._stage3DProxy.get_context3D() != null && !this._shareContext) {
			if(this._width > 0 && this._height > 0) {
				if(this._stage3DProxy.get_usesSoftwareRendering()) {
					if(this._width > 2048) {
						this._width = 2048;
					}
					if(this._height > 2048) {
						this._height = 2048;
					}
				}
				this._stage3DProxy.configureBackBuffer(this._width | 0,this._height | 0,this._antiAlias,true);
				this._backBufferInvalid = false;
			} else {
				this.set_width(this.stage.stageWidth);
				this.set_height(this.stage.stageHeight);
			}
		}
	}
	,render: function() {
		away3d_core_managers_Stage3DProxy.drawTriangleCount = 0;
		if(this.get_stage3DProxy().get_context3D() == null || !this.get_stage3DProxy().recoverFromDisposal()) {
			this._backBufferInvalid = true;
			return;
		}
		if(this._backBufferInvalid) {
			this.updateBackBuffer();
		}
		if(this._shareContext && this._layeredView) {
			this.get_stage3DProxy().clearDepthBuffer();
		}
		if(!this._parentIsStage) {
			var globalPos = this.parent.localToGlobal(this._localPos);
			if(this._globalPos.x != globalPos.x || this._globalPos.y != globalPos.y) {
				this._globalPos = globalPos;
				this._globalPosDirty = true;
			}
		}
		if(this._globalPosDirty) {
			this.updateGlobalPos();
		}
		this.updateTime();
		this.updateViewSizeData();
		this._entityCollector.clear();
		this._scene.traversePartitions(this._entityCollector);
		this._mouse3DManager.updateCollider(this);
		this._touch3DManager.updateCollider();
		if(this._requireDepthRender) {
			this.renderSceneDepthToTexture(this._entityCollector);
		}
		if(this._depthPrepass) {
			this.renderDepthPrepass(this._entityCollector);
		}
		this._renderer.set_clearOnRender(!this._depthPrepass);
		if(this._filter3DRenderer != null && this._stage3DProxy.get_context3D() != null) {
			this._renderer.render(this._entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
			this._filter3DRenderer.render(this._stage3DProxy,this.get_camera(),this._depthRender);
		} else {
			this._renderer.set_shareContext(this._shareContext);
			if(this._shareContext) {
				this._renderer.render(this._entityCollector,null,this._scissorRect);
			} else {
				this._renderer.render(this._entityCollector);
			}
		}
		if(!this._shareContext) {
			this.get_stage3DProxy().present();
			this._mouse3DManager.fireMouseEvents();
			this._touch3DManager.fireTouchEvents();
		}
		this._entityCollector.cleanUp();
		this.get_stage3DProxy().set_bufferClear(false);
	}
	,updateGlobalPos: function() {
		this._globalPosDirty = false;
		if(this._stage3DProxy == null) {
			return;
		}
		if(this._shareContext) {
			var tmp = this._globalPos.x;
			var tmp1 = this._stage3DProxy.get_x();
			this._scissorRect.x = tmp - tmp1;
			var tmp2 = this._globalPos.y;
			var tmp3 = this._stage3DProxy.get_y();
			this._scissorRect.y = tmp2 - tmp3;
		} else {
			this._scissorRect.x = 0;
			this._scissorRect.y = 0;
			this._stage3DProxy.set_x(this._globalPos.x);
			this._stage3DProxy.set_y(this._globalPos.y);
		}
		this._scissorRectDirty = true;
	}
	,updateTime: function() {
		var time = openfl_Lib.getTimer();
		if(this._time == 0) {
			this._time = time;
		}
		this._deltaTime = time - this._time;
		this._time = time;
	}
	,updateViewSizeData: function() {
		this._camera.get_lens().set_aspectRatio(this._aspectRatio);
		if(this._scissorRectDirty) {
			this._scissorRectDirty = false;
			this._camera.get_lens().updateScissorRect(this._scissorRect.x,this._scissorRect.y,this._scissorRect.width,this._scissorRect.height);
		}
		if(this._viewportDirty) {
			this._viewportDirty = false;
			this._camera.get_lens().updateViewport(this._stage3DProxy.get_viewPort().x,this._stage3DProxy.get_viewPort().y,this._stage3DProxy.get_viewPort().width,this._stage3DProxy.get_viewPort().height);
		}
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._renderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._renderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		} else {
			this._renderer.set_textureRatioX(1);
			this._renderer.set_textureRatioY(1);
		}
	}
	,renderDepthPrepass: function(entityCollector) {
		this._depthRenderer.set_disableColor(true);
		if(this._filter3DRenderer != null || this._renderer.get_renderToTexture()) {
			this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
			this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
			this._depthRenderer.render(entityCollector,this._filter3DRenderer.getMainInputTexture(this._stage3DProxy),this._rttBufferManager.get_renderToTextureRect());
		} else {
			this._depthRenderer.set_textureRatioX(1);
			this._depthRenderer.set_textureRatioY(1);
			this._depthRenderer.render(entityCollector);
		}
		this._depthRenderer.set_disableColor(false);
	}
	,renderSceneDepthToTexture: function(entityCollector) {
		if(this._depthTextureInvalid || this._depthRender == null) {
			this.initDepthTexture(this._stage3DProxy.get_context3D());
		}
		this._depthRenderer.set_textureRatioX(this._rttBufferManager.get_textureRatioX());
		this._depthRenderer.set_textureRatioY(this._rttBufferManager.get_textureRatioY());
		this._depthRenderer.render(entityCollector,this._depthRender);
	}
	,initDepthTexture: function(context) {
		this._depthTextureInvalid = false;
		if(this._depthRender != null) {
			this._depthRender.dispose();
		}
		this._depthRender = context.createTexture(this._rttBufferManager.get_textureWidth(),this._rttBufferManager.get_textureHeight(),1,true);
	}
	,dispose: function() {
		this._stage3DProxy.removeEventListener("ViewportUpdated",$bind(this,this.onViewportUpdated));
		this._stage3DProxy.removeEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
		if(!this.get_shareContext()) {
			this._stage3DProxy.dispose();
		}
		this._renderer.dispose();
		if(this._depthRender != null) {
			this._depthRender.dispose();
		}
		if(this._rttBufferManager != null) {
			this._rttBufferManager.dispose();
		}
		this._mouse3DManager.disableMouseListeners(this);
		this._mouse3DManager.dispose();
		this._touch3DManager.disableTouchListeners(this);
		this._touch3DManager.dispose();
		this._rttBufferManager = null;
		this._depthRender = null;
		this._mouse3DManager = null;
		this._touch3DManager = null;
		this._depthRenderer = null;
		this._stage3DProxy = null;
		this._renderer = null;
		this._entityCollector = null;
	}
	,project: function(point3d) {
		var v = this._camera.project(point3d);
		v.x = (v.x + 1.0) * this._width / 2.0;
		v.y = (v.y + 1.0) * this._height / 2.0;
		return v;
	}
	,unproject: function(sX,sY,sZ,v) {
		return this._camera.unproject((sX * 2 - this._width) / this._stage3DProxy.get_width(),(sY * 2 - this._height) / this._stage3DProxy.get_height(),sZ,v);
	}
	,getRay: function(sX,sY,sZ) {
		return this._camera.getRay((sX * 2 - this._width) / this._width,(sY * 2 - this._height) / this._height,sZ);
	}
	,get_mousePicker: function() {
		return this._mouse3DManager.get_mousePicker();
	}
	,set_mousePicker: function(value) {
		this._mouse3DManager.set_mousePicker(value);
		return value;
	}
	,get_touchPicker: function() {
		return this._touch3DManager.get_touchPicker();
	}
	,set_touchPicker: function(value) {
		this._touch3DManager.set_touchPicker(value);
		return value;
	}
	,entityCollector: null
	,get_entityCollector: function() {
		return this._entityCollector;
	}
	,onLensChanged: function(event) {
		this._scissorRectDirty = true;
		this._viewportDirty = true;
	}
	,onAddedToStage: function(event) {
		if(this._addedToStage) {
			return;
		}
		this._addedToStage = true;
		if(this._stage3DProxy == null) {
			if(this._contextIndex == -1) {
				this._stage3DProxy = away3d_core_managers_Stage3DManager.getInstance(this.stage).getFreeStage3DProxy(this._forceSoftware,this._profile);
			} else {
				this._stage3DProxy = away3d_core_managers_Stage3DManager.getInstance(this.stage).getStage3DProxy(this._contextIndex,this._forceSoftware,this._profile);
			}
			this._stage3DProxy.addEventListener("ViewportUpdated",$bind(this,this.onViewportUpdated));
			this._stage3DProxy.addEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
		}
		this._globalPosDirty = true;
		this._rttBufferManager = away3d_core_managers_RTTBufferManager.getInstance(this._stage3DProxy);
		this._renderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(this._stage3DProxy));
		if(this._width == 0) {
			this.set_width(this.stage.stageWidth);
		} else {
			this._rttBufferManager.set_viewWidth(this._width | 0);
		}
		if(this._height == 0) {
			this.set_height(this.stage.stageHeight);
		} else {
			this._rttBufferManager.set_viewHeight(this._height | 0);
		}
		if(this._shareContext) {
			this._mouse3DManager.addViewLayer(this);
		}
	}
	,onAdded: function(event) {
		this._parentIsStage = this.parent == this.stage;
		this._globalPos = this.parent.localToGlobal(this._localPos);
		this._globalPosDirty = true;
	}
	,onViewportUpdated: function(event) {
		if(this._shareContext) {
			var tmp = this._globalPos.x;
			var tmp1 = this._stage3DProxy.get_x();
			this._scissorRect.x = tmp - tmp1;
			var tmp2 = this._globalPos.y;
			var tmp3 = this._stage3DProxy.get_y();
			this._scissorRect.y = tmp2 - tmp3;
			this._scissorRectDirty = true;
		}
		this._viewportDirty = true;
	}
	,__class__: away3d_containers_View3D
});
var away3d_controllers_ControllerBase = function(targetObject) {
	this._autoUpdate = true;
	this.set_targetObject(targetObject);
};
$hxClasses["away3d.controllers.ControllerBase"] = away3d_controllers_ControllerBase;
away3d_controllers_ControllerBase.__name__ = ["away3d","controllers","ControllerBase"];
away3d_controllers_ControllerBase.prototype = {
	_autoUpdate: null
	,_targetObject: null
	,notifyUpdate: function() {
		if(this._targetObject != null && this._targetObject.get_implicitPartition() != null && this._autoUpdate) {
			this._targetObject.get_implicitPartition().markForUpdate(this._targetObject);
		}
	}
	,get_targetObject: function() {
		return this._targetObject;
	}
	,set_targetObject: function(val) {
		if(this._targetObject == val) {
			return val;
		}
		if(this._targetObject != null && this._autoUpdate) {
			this._targetObject._controller = null;
		}
		this._targetObject = val;
		if(this._targetObject != null && this._autoUpdate) {
			this._targetObject._controller = this;
		}
		this.notifyUpdate();
		return val;
	}
	,get_autoUpdate: function() {
		return this._autoUpdate;
	}
	,set_autoUpdate: function(val) {
		if(this._autoUpdate == val) {
			return val;
		}
		this._autoUpdate = val;
		if(this._targetObject != null) {
			if(this._autoUpdate) {
				this._targetObject._controller = this;
			} else {
				this._targetObject._controller = null;
			}
		}
		return val;
	}
	,update: function(interpolate) {
		if(interpolate == null) {
			interpolate = true;
		}
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,__class__: away3d_controllers_ControllerBase
};
var away3d_core_base_SubGeometryBase = function() {
	this._uvsDirty = true;
	this._scaleV = 1;
	this._scaleU = 1;
	this._vertexTangentsDirty = true;
	this._vertexNormalsDirty = true;
	this._useFaceWeights = false;
	this._autoGenerateUVs = false;
	this._autoDeriveVertexTangents = true;
	this._autoDeriveVertexNormals = true;
	this._indicesInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._indexBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._indexBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._faceTangentsDirty = true;
	this._faceNormalsDirty = true;
};
$hxClasses["away3d.core.base.SubGeometryBase"] = away3d_core_base_SubGeometryBase;
away3d_core_base_SubGeometryBase.__name__ = ["away3d","core","base","SubGeometryBase"];
away3d_core_base_SubGeometryBase.prototype = {
	_parentGeometry: null
	,_vertexData: null
	,_faceNormalsDirty: null
	,_faceTangentsDirty: null
	,_faceTangents: null
	,_indices: null
	,_indexBuffer: null
	,_numIndices: null
	,_indexBufferContext: null
	,_indicesInvalid: null
	,_numTriangles: null
	,_autoDeriveVertexNormals: null
	,_autoDeriveVertexTangents: null
	,_autoGenerateUVs: null
	,_useFaceWeights: null
	,_vertexNormalsDirty: null
	,_vertexTangentsDirty: null
	,_faceNormals: null
	,_faceWeights: null
	,_scaleU: null
	,_scaleV: null
	,_uvsDirty: null
	,get_autoGenerateDummyUVs: function() {
		return this._autoGenerateUVs;
	}
	,set_autoGenerateDummyUVs: function(value) {
		this._autoGenerateUVs = value;
		this._uvsDirty = value;
		return value;
	}
	,get_autoDeriveVertexNormals: function() {
		return this._autoDeriveVertexNormals;
	}
	,set_autoDeriveVertexNormals: function(value) {
		this._autoDeriveVertexNormals = value;
		this._vertexNormalsDirty = value;
		return value;
	}
	,get_useFaceWeights: function() {
		return this._useFaceWeights;
	}
	,set_useFaceWeights: function(value) {
		this._useFaceWeights = value;
		if(this._autoDeriveVertexNormals) {
			this._vertexNormalsDirty = true;
		}
		if(this._autoDeriveVertexTangents) {
			this._vertexTangentsDirty = true;
		}
		this._faceNormalsDirty = true;
		return value;
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,getIndexBuffer: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._indexBuffer.get(contextIndex) == null || this._indexBufferContext.get(contextIndex) != context) {
			this._indexBuffer.set(contextIndex,stage3DProxy.createIndexBuffer(this._numIndices));
			this._indexBufferContext.set(contextIndex,context);
			this._indicesInvalid.set(contextIndex,true);
		}
		if(this._indicesInvalid.get(contextIndex)) {
			this._indexBuffer.get(contextIndex).uploadFromVector(this._indices,0,this._numIndices);
			this._indicesInvalid.set(contextIndex,false);
		}
		return this._indexBuffer.get(contextIndex);
	}
	,updateFaceTangents: function() {
		var i = 0;
		var index1;
		var index2;
		var index3;
		var len = this._indices.get_length();
		var ui;
		var vi;
		var v0;
		var dv1;
		var dv2;
		var denom;
		var x0;
		var y0;
		var z0;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var vertices = this._vertexData;
		var uvs = this.get_UVData();
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		var texStride = this.get_UVStride();
		var texOffset = this.get_UVOffset();
		if(this._faceTangents == null) {
			this._faceTangents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,this._indices.get_length(),true);
		}
		while(i < len) {
			index1 = this._indices.get(i);
			index2 = this._indices.get(i + 1);
			index3 = this._indices.get(i + 2);
			ui = texOffset + index1 * texStride + 1;
			v0 = uvs.get(ui);
			ui = texOffset + index2 * texStride + 1;
			dv1 = uvs.get(ui) - v0;
			ui = texOffset + index3 * texStride + 1;
			dv2 = uvs.get(ui) - v0;
			vi = posOffset + index1 * posStride;
			x0 = vertices.get(vi);
			y0 = vertices.get(vi + 1);
			z0 = vertices.get(vi + 2);
			vi = posOffset + index2 * posStride;
			dx1 = vertices.get(vi) - x0;
			dy1 = vertices.get(vi + 1) - y0;
			dz1 = vertices.get(vi + 2) - z0;
			vi = posOffset + index3 * posStride;
			dx2 = vertices.get(vi) - x0;
			dy2 = vertices.get(vi + 1) - y0;
			dz2 = vertices.get(vi + 2) - z0;
			cx = dv2 * dx1 - dv1 * dx2;
			cy = dv2 * dy1 - dv1 * dy2;
			cz = dv2 * dz1 - dv1 * dz2;
			denom = 1 / Math.sqrt(cx * cx + cy * cy + cz * cz);
			this._faceTangents.set(i++,denom * cx);
			this._faceTangents.set(i++,denom * cy);
			this._faceTangents.set(i++,denom * cz);
		}
		this._faceTangentsDirty = false;
	}
	,updateFaceNormals: function() {
		var i = 0;
		var j = 0;
		var k = 0;
		var index;
		var len = this._indices.get_length();
		var x1;
		var x2;
		var x3;
		var y1;
		var y2;
		var y3;
		var z1;
		var z2;
		var z3;
		var dx1;
		var dy1;
		var dz1;
		var dx2;
		var dy2;
		var dz2;
		var cx;
		var cy;
		var cz;
		var d;
		var vertices = this._vertexData;
		var posStride = this.get_vertexStride();
		var posOffset = this.get_vertexOffset();
		if(this._faceNormals == null) {
			this._faceNormals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,len,true);
		}
		if(this._faceWeights == null) {
			this._faceWeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,len / 3 | 0,true);
		}
		while(i < len) {
			index = posOffset + this._indices.get(i++) * posStride;
			x1 = vertices.get(index);
			y1 = vertices.get(index + 1);
			z1 = vertices.get(index + 2);
			index = posOffset + this._indices.get(i++) * posStride;
			x2 = vertices.get(index);
			y2 = vertices.get(index + 1);
			z2 = vertices.get(index + 2);
			index = posOffset + this._indices.get(i++) * posStride;
			x3 = vertices.get(index);
			y3 = vertices.get(index + 1);
			z3 = vertices.get(index + 2);
			dx1 = x3 - x1;
			dy1 = y3 - y1;
			dz1 = z3 - z1;
			dx2 = x2 - x1;
			dy2 = y2 - y1;
			dz2 = z2 - z1;
			cx = dz1 * dy2 - dy1 * dz2;
			cy = dx1 * dz2 - dz1 * dx2;
			cz = dy1 * dx2 - dx1 * dy2;
			d = Math.sqrt(cx * cx + cy * cy + cz * cz);
			if(this._useFaceWeights) {
				var w = d * 10000;
				if(w < 1) {
					w = 1;
				}
				this._faceWeights.set(k++,w);
			}
			d = 1 / d;
			this._faceNormals.set(j++,cx * d);
			this._faceNormals.set(j++,cy * d);
			this._faceNormals.set(j++,cz * d);
		}
		this._faceNormalsDirty = false;
	}
	,updateVertexNormals: function(target) {
		if(this._faceNormalsDirty) {
			this.updateFaceNormals();
		}
		var v1;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		var lenV = this._vertexData.get_length();
		var normalStride = this.get_vertexNormalStride();
		var normalOffset = this.get_vertexNormalOffset();
		if(target == null) {
			target = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,lenV,true);
		}
		v1 = normalOffset;
		while(v1 < lenV) {
			target.set(v1,0.0);
			target.set(v1 + 1,0.0);
			target.set(v1 + 2,0.0);
			v1 += normalStride;
		}
		var i = 0;
		var k = 0;
		var lenI = this._indices.get_length();
		var index;
		var weight;
		while(i < lenI) {
			if(this._useFaceWeights) {
				weight = this._faceWeights.get(k++);
			} else {
				weight = 1;
			}
			index = normalOffset + this._indices.get(i++) * normalStride;
			var _g = index++;
			var _g1 = target;
			_g1.set(_g,_g1.get(_g) + this._faceNormals.get(f1) * weight);
			var _g2 = index++;
			var _g11 = target;
			_g11.set(_g2,_g11.get(_g2) + this._faceNormals.get(f2) * weight);
			var _g3 = index;
			var _g12 = target;
			_g12.set(_g3,_g12.get(_g3) + this._faceNormals.get(f3) * weight);
			index = normalOffset + this._indices.get(i++) * normalStride;
			var _g4 = index++;
			var _g13 = target;
			_g13.set(_g4,_g13.get(_g4) + this._faceNormals.get(f1) * weight);
			var _g5 = index++;
			var _g14 = target;
			_g14.set(_g5,_g14.get(_g5) + this._faceNormals.get(f2) * weight);
			var _g6 = index;
			var _g15 = target;
			_g15.set(_g6,_g15.get(_g6) + this._faceNormals.get(f3) * weight);
			index = normalOffset + this._indices.get(i++) * normalStride;
			var _g7 = index++;
			var _g16 = target;
			_g16.set(_g7,_g16.get(_g7) + this._faceNormals.get(f1) * weight);
			var _g8 = index++;
			var _g17 = target;
			_g17.set(_g8,_g17.get(_g8) + this._faceNormals.get(f2) * weight);
			var _g9 = index;
			var _g18 = target;
			_g18.set(_g9,_g18.get(_g9) + this._faceNormals.get(f3) * weight);
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		v1 = normalOffset;
		while(v1 < lenV) {
			var vx = target.get(v1);
			var vy = target.get(v1 + 1);
			var vz = target.get(v1 + 2);
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			target.set(v1,vx * d);
			target.set(v1 + 1,vy * d);
			target.set(v1 + 2,vz * d);
			v1 += normalStride;
		}
		this._vertexNormalsDirty = false;
		return target;
	}
	,updateVertexTangents: function(target) {
		if(this._faceTangentsDirty) {
			this.updateFaceTangents();
		}
		var i = 0;
		var lenV = this._vertexData.get_length();
		var tangentStride = this.get_vertexTangentStride();
		var tangentOffset = this.get_vertexTangentOffset();
		if(target == null) {
			target = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,lenV,true);
		}
		i = tangentOffset;
		while(i < lenV) {
			target.set(i,0.0);
			target.set(i + 1,0.0);
			target.set(i + 2,0.0);
			i += tangentStride;
		}
		var k = 0;
		var lenI = this._indices.get_length();
		var index;
		var weight;
		var f1 = 0;
		var f2 = 1;
		var f3 = 2;
		i = 0;
		while(i < lenI) {
			if(this._useFaceWeights) {
				weight = this._faceWeights.get(k++);
			} else {
				weight = 1;
			}
			index = tangentOffset + this._indices.get(i++) * tangentStride;
			var _g = index++;
			var _g1 = target;
			_g1.set(_g,_g1.get(_g) + this._faceTangents.get(f1) * weight);
			var _g2 = index++;
			var _g11 = target;
			_g11.set(_g2,_g11.get(_g2) + this._faceTangents.get(f2) * weight);
			var _g3 = index;
			var _g12 = target;
			_g12.set(_g3,_g12.get(_g3) + this._faceTangents.get(f3) * weight);
			index = tangentOffset + this._indices.get(i++) * tangentStride;
			var _g4 = index++;
			var _g13 = target;
			_g13.set(_g4,_g13.get(_g4) + this._faceTangents.get(f1) * weight);
			var _g5 = index++;
			var _g14 = target;
			_g14.set(_g5,_g14.get(_g5) + this._faceTangents.get(f2) * weight);
			var _g6 = index;
			var _g15 = target;
			_g15.set(_g6,_g15.get(_g6) + this._faceTangents.get(f3) * weight);
			index = tangentOffset + this._indices.get(i++) * tangentStride;
			var _g7 = index++;
			var _g16 = target;
			_g16.set(_g7,_g16.get(_g7) + this._faceTangents.get(f1) * weight);
			var _g8 = index++;
			var _g17 = target;
			_g17.set(_g8,_g17.get(_g8) + this._faceTangents.get(f2) * weight);
			var _g9 = index;
			var _g18 = target;
			_g18.set(_g9,_g18.get(_g9) + this._faceTangents.get(f3) * weight);
			f1 += 3;
			f2 += 3;
			f3 += 3;
		}
		i = tangentOffset;
		while(i < lenV) {
			var vx = target.get(i);
			var vy = target.get(i + 1);
			var vz = target.get(i + 2);
			var d = 1.0 / Math.sqrt(vx * vx + vy * vy + vz * vz);
			target.set(i,vx * d);
			target.set(i + 1,vy * d);
			target.set(i + 2,vz * d);
			i += tangentStride;
		}
		this._vertexTangentsDirty = false;
		return target;
	}
	,dispose: function() {
		this.disposeIndexBuffers(this._indexBuffer);
		this._indices = null;
		this._indexBufferContext = null;
		this._faceNormals = null;
		this._faceWeights = null;
		this._faceTangents = null;
		this._vertexData = null;
	}
	,get_indexData: function() {
		return this._indices;
	}
	,updateIndexData: function(indices) {
		this._indices = indices;
		this._numIndices = indices.get_length();
		var numTriangles = this._numIndices / 3 | 0;
		if(this._numTriangles != numTriangles) {
			this.disposeIndexBuffers(this._indexBuffer);
		}
		this._numTriangles = numTriangles;
		this.invalidateBuffers(this._indicesInvalid);
		this._faceNormalsDirty = true;
		if(this._autoDeriveVertexNormals) {
			this._vertexNormalsDirty = true;
		}
		if(this._autoDeriveVertexTangents) {
			this._vertexTangentsDirty = true;
		}
	}
	,disposeIndexBuffers: function(buffers) {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			if(buffers.get(i) != null) {
				away3d_core_managers_Stage3DProxy.disposeIndexBuffer(buffers.get(i));
				buffers.set(i,null);
			}
		}
	}
	,disposeVertexBuffers: function(buffers) {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			if(buffers.get(i) != null) {
				away3d_core_managers_Stage3DProxy.disposeVertexBuffer(buffers.get(i));
				buffers.set(i,null);
			}
		}
	}
	,get_autoDeriveVertexTangents: function() {
		return this._autoDeriveVertexTangents;
	}
	,set_autoDeriveVertexTangents: function(value) {
		this._autoDeriveVertexTangents = value;
		this._vertexTangentsDirty = value;
		return value;
	}
	,get_faceNormals: function() {
		if(this._faceNormalsDirty) {
			this.updateFaceNormals();
		}
		return this._faceNormals;
	}
	,invalidateBuffers: function(invalid) {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			invalid.set(i,true);
		}
	}
	,get_UVStride: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexData: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexPositionData: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexNormalData: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexTangentData: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_UVData: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexStride: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexNormalStride: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexTangentStride: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexOffset: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexNormalOffset: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_vertexTangentOffset: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_UVOffset: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,invalidateBounds: function() {
		if(this._parentGeometry != null) {
			this._parentGeometry.invalidateBounds(js_Boot.__cast(this , away3d_core_base_ISubGeometry));
		}
	}
	,get_parentGeometry: function() {
		return this._parentGeometry;
	}
	,set_parentGeometry: function(value) {
		this._parentGeometry = value;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) {
			scaleV = 1;
		}
		if(scaleU == null) {
			scaleU = 1;
		}
		var offset = this.get_UVOffset();
		var stride = this.get_UVStride();
		var uvs = this.get_UVData();
		var len = uvs.get_length();
		var ratioU = scaleU / this._scaleU;
		var ratioV = scaleV / this._scaleV;
		var i = offset;
		while(i < len) {
			var _g = i;
			var _g1 = uvs;
			_g1.set(_g,_g1.get(_g) * ratioU);
			var _g2 = i + 1;
			var _g11 = uvs;
			_g11.set(_g2,_g11.get(_g2) * ratioV);
			i += stride;
		}
		this._scaleU = scaleU;
		this._scaleV = scaleV;
	}
	,scale: function(scale) {
		var vertices = this.get_UVData();
		var len = vertices.get_length();
		var offset = this.get_vertexOffset();
		var stride = this.get_vertexStride();
		var i = offset;
		while(i < len) {
			var _g = i;
			var _g1 = vertices;
			_g1.set(_g,_g1.get(_g) * scale);
			var _g2 = i + 1;
			var _g11 = vertices;
			_g11.set(_g2,_g11.get(_g2) * scale);
			var _g3 = i + 2;
			var _g12 = vertices;
			_g12.set(_g3,_g12.get(_g3) * scale);
			i += stride;
		}
	}
	,applyTransformation: function(transform) {
		var vertices = this._vertexData;
		var normals = this.get_vertexNormalData();
		var tangents = this.get_vertexTangentData();
		var posStride = this.get_vertexStride();
		var normalStride = this.get_vertexNormalStride();
		var tangentStride = this.get_vertexTangentStride();
		var posOffset = this.get_vertexOffset();
		var normalOffset = this.get_vertexNormalOffset();
		var tangentOffset = this.get_vertexTangentOffset();
		var len = vertices.get_length() / posStride | 0;
		var i;
		var i1;
		var i2;
		var vector = new openfl_geom_Vector3D();
		var bakeNormals = normals != null;
		var bakeTangents = tangents != null;
		var invTranspose = null;
		if(bakeNormals || bakeTangents) {
			invTranspose = transform.clone();
			invTranspose.invert();
			invTranspose.transpose();
		}
		var vi0 = posOffset;
		var ni0 = normalOffset;
		var ti0 = tangentOffset;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i3 = _g1++;
			i1 = vi0 + 1;
			i2 = vi0 + 2;
			vector.x = vertices.get(vi0);
			vector.y = vertices.get(i1);
			vector.z = vertices.get(i2);
			vector = transform.transformVector(vector);
			vertices.set(vi0,vector.x);
			vertices.set(i1,vector.y);
			vertices.set(i2,vector.z);
			vi0 += posStride;
			if(bakeNormals) {
				i1 = ni0 + 1;
				i2 = ni0 + 2;
				vector.x = normals.get(ni0);
				vector.y = normals.get(i1);
				vector.z = normals.get(i2);
				vector = invTranspose.transformVector(vector);
				vector.normalize();
				normals.set(ni0,vector.x);
				normals.set(i1,vector.y);
				normals.set(i2,vector.z);
				ni0 += normalStride;
			}
			if(bakeTangents) {
				i1 = ti0 + 1;
				i2 = ti0 + 2;
				vector.x = tangents.get(ti0);
				vector.y = tangents.get(i1);
				vector.z = tangents.get(i2);
				vector = invTranspose.transformVector(vector);
				vector.normalize();
				tangents.set(ti0,vector.x);
				tangents.set(i1,vector.y);
				tangents.set(i2,vector.z);
				ti0 += tangentStride;
			}
		}
	}
	,updateDummyUVs: function(target) {
		this._uvsDirty = false;
		var idx;
		var uvIdx;
		var stride = this.get_UVStride();
		var skip = stride - 2;
		var len = this._vertexData.get_length() / this.get_vertexStride() * stride | 0;
		if(target == null) {
			target = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		target.fixed = false;
		target.set_length(len);
		target.fixed = true;
		idx = this.get_UVOffset();
		uvIdx = 0;
		while(idx < len) {
			target.set(idx++,uvIdx * .5);
			target.set(idx++,1.0 - (uvIdx & 1));
			idx += skip;
			if(++uvIdx == 3) {
				uvIdx = 0;
			}
		}
		return target;
	}
	,__class__: away3d_core_base_SubGeometryBase
};
var away3d_core_base_ISubGeometry = function() { };
$hxClasses["away3d.core.base.ISubGeometry"] = away3d_core_base_ISubGeometry;
away3d_core_base_ISubGeometry.__name__ = ["away3d","core","base","ISubGeometry"];
away3d_core_base_ISubGeometry.prototype = {
	get_vertexPositionData: null
	,set_autoDeriveVertexTangents: null
	,get_autoDeriveVertexTangents: null
	,set_autoDeriveVertexNormals: null
	,get_autoDeriveVertexNormals: null
	,get_faceNormals: null
	,set_parentGeometry: null
	,get_parentGeometry: null
	,get_scaleV: null
	,get_scaleU: null
	,get_UVData: null
	,get_indexData: null
	,get_secondaryUVOffset: null
	,get_UVOffset: null
	,get_vertexTangentOffset: null
	,get_vertexNormalOffset: null
	,get_vertexOffset: null
	,get_vertexTangentData: null
	,get_vertexNormalData: null
	,get_vertexData: null
	,get_secondaryUVStride: null
	,get_UVStride: null
	,get_vertexTangentStride: null
	,get_vertexNormalStride: null
	,get_vertexStride: null
	,get_numTriangles: null
	,get_numVertices: null
	,activateVertexBuffer: null
	,activateUVBuffer: null
	,activateSecondaryUVBuffer: null
	,activateVertexNormalBuffer: null
	,activateVertexTangentBuffer: null
	,getIndexBuffer: null
	,applyTransformation: null
	,scale: null
	,dispose: null
	,clone: null
	,scaleUV: null
	,cloneWithSeperateBuffers: null
	,fromVectors: null
	,__class__: away3d_core_base_ISubGeometry
};
var away3d_core_base_CompactSubGeometry = function() {
	this._bufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexDataInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	away3d_core_base_SubGeometryBase.call(this);
	this._autoDeriveVertexNormals = false;
	this._autoDeriveVertexTangents = false;
};
$hxClasses["away3d.core.base.CompactSubGeometry"] = away3d_core_base_CompactSubGeometry;
away3d_core_base_CompactSubGeometry.__name__ = ["away3d","core","base","CompactSubGeometry"];
away3d_core_base_CompactSubGeometry.__interfaces__ = [away3d_core_base_ISubGeometry];
away3d_core_base_CompactSubGeometry.__super__ = away3d_core_base_SubGeometryBase;
away3d_core_base_CompactSubGeometry.prototype = $extend(away3d_core_base_SubGeometryBase.prototype,{
	_vertexDataInvalid: null
	,_vertexBuffer: null
	,_bufferContext: null
	,_numVertices: null
	,_contextIndex: null
	,_activeBuffer: null
	,_activeContext: null
	,_activeDataInvalid: null
	,_isolatedVertexPositionData: null
	,_isolatedVertexPositionDataDirty: null
	,get_numVertices: function() {
		return this._numVertices;
	}
	,updateData: function(data) {
		if(this._autoDeriveVertexNormals) {
			this._vertexNormalsDirty = true;
		}
		if(this._autoDeriveVertexTangents) {
			this._vertexTangentsDirty = true;
		}
		this._faceNormalsDirty = true;
		this._faceTangentsDirty = true;
		this._isolatedVertexPositionDataDirty = true;
		this._vertexData = data;
		var numVertices = this._vertexData.get_length() / 13 | 0;
		if(numVertices != this._numVertices) {
			this.disposeVertexBuffers(this._vertexBuffer);
		}
		this._numVertices = numVertices;
		if(this._numVertices == 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Bad data: geometry can't have zero triangles"));
		}
		this.invalidateBuffers(this._vertexDataInvalid);
		this.invalidateBounds();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) {
			this.updateActiveBuffer(contextIndex);
		}
		if(this._activeBuffer == null || this._activeContext != context) {
			this.createBuffer(contextIndex,context,stage3DProxy);
		}
		if(this._activeDataInvalid) {
			this.uploadData(contextIndex);
		}
		context.setVertexBufferAt(index,this._activeBuffer,0,3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		if(contextIndex != this._contextIndex) {
			this.updateActiveBuffer(contextIndex);
		}
		if(this._activeBuffer == null || this._activeContext != context) {
			this.createBuffer(contextIndex,context,stage3DProxy);
		}
		if(this._activeDataInvalid) {
			this.uploadData(contextIndex);
		}
		context.setVertexBufferAt(index,this._activeBuffer,9,2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) {
			this.updateActiveBuffer(contextIndex);
		}
		if(this._activeBuffer == null || this._activeContext != context) {
			this.createBuffer(contextIndex,context,stage3DProxy);
		}
		if(this._activeDataInvalid) {
			this.uploadData(contextIndex);
		}
		context.setVertexBufferAt(index,this._activeBuffer,11,2);
	}
	,uploadData: function(contextIndex) {
		this._activeBuffer.uploadFromVector(this._vertexData,0,this._numVertices);
		this._vertexDataInvalid.set(contextIndex,this._activeDataInvalid = false);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) {
			this.updateActiveBuffer(contextIndex);
		}
		if(this._activeBuffer == null || this._activeContext != context) {
			this.createBuffer(contextIndex,context,stage3DProxy);
		}
		if(this._activeDataInvalid) {
			this.uploadData(contextIndex);
		}
		context.setVertexBufferAt(index,this._activeBuffer,3,3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(contextIndex != this._contextIndex) {
			this.updateActiveBuffer(contextIndex);
		}
		if(this._activeBuffer == null || this._activeContext != context) {
			this.createBuffer(contextIndex,context,stage3DProxy);
		}
		if(this._activeDataInvalid) {
			this.uploadData(contextIndex);
		}
		context.setVertexBufferAt(index,this._activeBuffer,6,3);
	}
	,createBuffer: function(contextIndex,context,stage3DProxy) {
		this._vertexBuffer.set(contextIndex,this._activeBuffer = stage3DProxy.createVertexBuffer(this._numVertices,13));
		this._bufferContext.set(contextIndex,this._activeContext = context);
		this._vertexDataInvalid.set(contextIndex,this._activeDataInvalid = true);
	}
	,updateActiveBuffer: function(contextIndex) {
		this._contextIndex = contextIndex;
		this._activeDataInvalid = this._vertexDataInvalid.get(contextIndex);
		this._activeBuffer = this._vertexBuffer.get(contextIndex);
		this._activeContext = this._bufferContext.get(contextIndex);
	}
	,get_vertexData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) {
			this._vertexData = this.updateVertexNormals(this._vertexData);
		}
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) {
			this._vertexData = this.updateVertexTangents(this._vertexData);
		}
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
		}
		return this._vertexData;
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d_core_base_SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) {
			this._vertexData = this.updateVertexNormals(this._vertexData);
		}
		this.invalidateBuffers(this._vertexDataInvalid);
		return away3d_core_base_SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) {
			this._vertexData = this.updateVertexNormals(this._vertexData);
		}
		return this._vertexData;
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) {
			this._vertexData = this.updateVertexTangents(this._vertexData);
		}
		return this._vertexData;
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._vertexData = this.updateDummyUVs(this._vertexData);
			this.invalidateBuffers(this._vertexDataInvalid);
		}
		return this._vertexData;
	}
	,applyTransformation: function(transform) {
		away3d_core_base_SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,scale: function(scale) {
		away3d_core_base_SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,clone: function() {
		var clone = new away3d_core_base_CompactSubGeometry();
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone.updateData(this._vertexData.concat(null));
		clone.updateIndexData(this._indices.concat(null));
		return clone;
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) {
			scaleV = 1;
		}
		if(scaleU == null) {
			scaleU = 1;
		}
		away3d_core_base_SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,get_vertexStride: function() {
		return 13;
	}
	,get_vertexNormalStride: function() {
		return 13;
	}
	,get_vertexTangentStride: function() {
		return 13;
	}
	,get_UVStride: function() {
		return 13;
	}
	,get_secondaryUVStride: function() {
		return 13;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 3;
	}
	,get_vertexTangentOffset: function() {
		return 6;
	}
	,get_UVOffset: function() {
		return 9;
	}
	,get_secondaryUVOffset: function() {
		return 11;
	}
	,dispose: function() {
		away3d_core_base_SubGeometryBase.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._vertexBuffer);
		this._vertexBuffer = null;
	}
	,disposeVertexBuffers: function(buffers) {
		away3d_core_base_SubGeometryBase.prototype.disposeVertexBuffers.call(this,buffers);
		this._activeBuffer = null;
	}
	,invalidateBuffers: function(invalid) {
		away3d_core_base_SubGeometryBase.prototype.invalidateBuffers.call(this,invalid);
		this._activeDataInvalid = true;
	}
	,cloneWithSeperateBuffers: function() {
		var clone = new away3d_core_base_SubGeometry();
		clone.updateVertexData(this._isolatedVertexPositionData != null ? this._isolatedVertexPositionData : this._isolatedVertexPositionData = this.stripBuffer(0,3));
		clone.set_autoDeriveVertexNormals(this._autoDeriveVertexNormals);
		clone.set_autoDeriveVertexTangents(this._autoDeriveVertexTangents);
		if(!this._autoDeriveVertexNormals) {
			clone.updateVertexNormalData(this.stripBuffer(3,3));
		}
		if(!this._autoDeriveVertexTangents) {
			clone.updateVertexTangentData(this.stripBuffer(6,3));
		}
		clone.updateUVData(this.stripBuffer(9,2));
		clone.updateSecondaryUVData(this.stripBuffer(11,2));
		clone.updateIndexData(this.get_indexData().concat(null));
		return clone;
	}
	,get_vertexPositionData: function() {
		if(this._isolatedVertexPositionDataDirty || this._isolatedVertexPositionData == null) {
			this._isolatedVertexPositionData = this.stripBuffer(0,3);
			this._isolatedVertexPositionDataDirty = false;
		}
		return this._isolatedVertexPositionData;
	}
	,stripBuffer: function(offset,numEntries) {
		var data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,this._numVertices * numEntries);
		var i = 0;
		var j = offset;
		var skip = 13 - numEntries;
		var _g1 = 0;
		var _g = this._numVertices;
		while(_g1 < _g) {
			var v = _g1++;
			var _g3 = 0;
			var _g2 = numEntries;
			while(_g3 < _g2) {
				var k = _g3++;
				data.set(i++,this._vertexData.get(j++));
			}
			j += skip;
		}
		return data;
	}
	,fromVectors: function(verts,uvs,normals,tangents) {
		var vertLen = verts.get_length() / 3 * 13 | 0;
		var index = 0;
		var v = 0;
		var n = 0;
		var t = 0;
		var u = 0;
		var data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,vertLen,true);
		while(index < vertLen) {
			data.set(index++,verts.get(v++));
			data.set(index++,verts.get(v++));
			data.set(index++,verts.get(v++));
			if(normals != null && normals.get_length() > 0) {
				data.set(index++,normals.get(n++));
				data.set(index++,normals.get(n++));
				data.set(index++,normals.get(n++));
			} else {
				data.set(index++,0);
				data.set(index++,0);
				data.set(index++,0);
			}
			if(tangents != null && tangents.get_length() > 0) {
				data.set(index++,tangents.get(t++));
				data.set(index++,tangents.get(t++));
				data.set(index++,tangents.get(t++));
			} else {
				data.set(index++,0);
				data.set(index++,0);
				data.set(index++,0);
			}
			if(uvs != null && uvs.get_length() > 0) {
				data.set(index++,uvs.get(u));
				data.set(index++,uvs.get(u + 1));
				data.set(index++,uvs.get(u++));
				data.set(index++,uvs.get(u++));
			} else {
				data.set(index++,0);
				data.set(index++,0);
				data.set(index++,0);
				data.set(index++,0);
			}
		}
		this.set_autoDeriveVertexNormals(!(normals != null && normals.get_length() > 0));
		this.set_autoDeriveVertexTangents(!(tangents != null && tangents.get_length() > 0));
		this.set_autoGenerateDummyUVs(!(uvs != null && uvs.get_length() > 0));
		this.updateData(data);
	}
	,__class__: away3d_core_base_CompactSubGeometry
});
var away3d_core_base_Geometry = function() {
	away3d_library_assets_NamedAssetBase.call(this);
	this._subGeometries = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["away3d.core.base.Geometry"] = away3d_core_base_Geometry;
away3d_core_base_Geometry.__name__ = ["away3d","core","base","Geometry"];
away3d_core_base_Geometry.__interfaces__ = [away3d_library_assets_IAsset];
away3d_core_base_Geometry.__super__ = away3d_library_assets_NamedAssetBase;
away3d_core_base_Geometry.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_subGeometries: null
	,get_assetType: function() {
		return "geometry";
	}
	,get_subGeometries: function() {
		return this._subGeometries;
	}
	,applyTransformation: function(transform) {
		var len = this._subGeometries.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._subGeometries.get(i).applyTransformation(transform);
		}
	}
	,addSubGeometry: function(subGeometry) {
		this._subGeometries.push(subGeometry);
		subGeometry.set_parentGeometry(this);
		if(this.hasEventListener("SubGeometryAdded")) {
			this.dispatchEvent(new away3d_events_GeometryEvent("SubGeometryAdded",subGeometry));
		}
		this.invalidateBounds(subGeometry);
	}
	,removeSubGeometry: function(subGeometry) {
		this._subGeometries.splice(this._subGeometries.indexOf(subGeometry,0),1);
		subGeometry.set_parentGeometry(null);
		if(this.hasEventListener("SubGeometryRemoved")) {
			this.dispatchEvent(new away3d_events_GeometryEvent("SubGeometryRemoved",subGeometry));
		}
		this.invalidateBounds(subGeometry);
	}
	,clone: function() {
		var clone = new away3d_core_base_Geometry();
		var len = this._subGeometries.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			clone.addSubGeometry(this._subGeometries.get(i).clone());
		}
		return clone;
	}
	,scale: function(scale) {
		var numSubGeoms = this._subGeometries.get_length();
		var _g1 = 0;
		var _g = numSubGeoms;
		while(_g1 < _g) {
			var i = _g1++;
			this._subGeometries.get(i).scale(scale);
		}
	}
	,dispose: function() {
		var numSubGeoms = this._subGeometries.get_length();
		var _g1 = 0;
		var _g = numSubGeoms;
		while(_g1 < _g) {
			var i = _g1++;
			var subGeom = this._subGeometries.get(0);
			this.removeSubGeometry(subGeom);
			subGeom.dispose();
		}
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) {
			scaleV = 1;
		}
		if(scaleU == null) {
			scaleU = 1;
		}
		var numSubGeoms = this._subGeometries.get_length();
		var _g1 = 0;
		var _g = numSubGeoms;
		while(_g1 < _g) {
			var i = _g1++;
			this._subGeometries.get(i).scaleUV(scaleU,scaleV);
		}
	}
	,convertToSeparateBuffers: function() {
		var subGeom;
		var numSubGeoms = this._subGeometries.get_length();
		var _removableCompactSubGeometries = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g1 = 0;
		var _g = numSubGeoms;
		while(_g1 < _g) {
			var i = _g1++;
			subGeom = this._subGeometries.get(i);
			if(js_Boot.__instanceof(subGeom,away3d_core_base_SubGeometry)) {
				continue;
			}
			_removableCompactSubGeometries.push(subGeom);
			this.addSubGeometry(subGeom.cloneWithSeperateBuffers());
		}
		var _g2 = 0;
		while(_g2 < _removableCompactSubGeometries.get_length()) {
			var s = _removableCompactSubGeometries.get(_g2);
			++_g2;
			this.removeSubGeometry(s);
			s.dispose();
		}
	}
	,validate: function() {
	}
	,invalidateBounds: function(subGeom) {
		if(this.hasEventListener("BoundsInvalid")) {
			this.dispatchEvent(new away3d_events_GeometryEvent("BoundsInvalid",subGeom));
		}
	}
	,__class__: away3d_core_base_Geometry
});
var away3d_core_base_IMaterialOwner = function() { };
$hxClasses["away3d.core.base.IMaterialOwner"] = away3d_core_base_IMaterialOwner;
away3d_core_base_IMaterialOwner.__name__ = ["away3d","core","base","IMaterialOwner"];
away3d_core_base_IMaterialOwner.prototype = {
	get_animator: null
	,set_material: null
	,get_material: null
	,__class__: away3d_core_base_IMaterialOwner
};
var away3d_core_base_IRenderable = function() { };
$hxClasses["away3d.core.base.IRenderable"] = away3d_core_base_IRenderable;
away3d_core_base_IRenderable.__name__ = ["away3d","core","base","IRenderable"];
away3d_core_base_IRenderable.__interfaces__ = [away3d_core_base_IMaterialOwner];
away3d_core_base_IRenderable.prototype = {
	get_UVData: null
	,get_indexData: null
	,get_vertexTangentData: null
	,get_vertexNormalData: null
	,get_vertexData: null
	,get_vertexStride: null
	,get_numTriangles: null
	,get_numVertices: null
	,get_shaderPickingDetails: null
	,get_uvTransform2: null
	,get_uvTransform: null
	,get_castsShadows: null
	,get_sourceEntity: null
	,get_mouseEnabled: null
	,get_inverseSceneTransform: null
	,get_sceneTransform: null
	,getRenderSceneTransform: null
	,activateVertexBuffer: null
	,activateUVBuffer: null
	,activateSecondaryUVBuffer: null
	,activateVertexNormalBuffer: null
	,activateVertexTangentBuffer: null
	,getIndexBuffer: null
	,__class__: away3d_core_base_IRenderable
};
var away3d_core_base_ParticleGeometry = function() {
	away3d_core_base_Geometry.call(this);
};
$hxClasses["away3d.core.base.ParticleGeometry"] = away3d_core_base_ParticleGeometry;
away3d_core_base_ParticleGeometry.__name__ = ["away3d","core","base","ParticleGeometry"];
away3d_core_base_ParticleGeometry.__super__ = away3d_core_base_Geometry;
away3d_core_base_ParticleGeometry.prototype = $extend(away3d_core_base_Geometry.prototype,{
	particles: null
	,numParticles: null
	,__class__: away3d_core_base_ParticleGeometry
});
var away3d_core_base_SkinnedSubGeometry = function(jointsPerVertex) {
	this._jointIndexContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._jointWeightContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._jointIndicesInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._jointWeightsInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._jointIndexBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._jointWeightsBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	away3d_core_base_CompactSubGeometry.call(this);
	this._jointsPerVertex = jointsPerVertex;
	this._bufferFormat = this.getVertexBufferFormat(this._jointsPerVertex);
};
$hxClasses["away3d.core.base.SkinnedSubGeometry"] = away3d_core_base_SkinnedSubGeometry;
away3d_core_base_SkinnedSubGeometry.__name__ = ["away3d","core","base","SkinnedSubGeometry"];
away3d_core_base_SkinnedSubGeometry.__super__ = away3d_core_base_CompactSubGeometry;
away3d_core_base_SkinnedSubGeometry.prototype = $extend(away3d_core_base_CompactSubGeometry.prototype,{
	_bufferFormat: null
	,_jointWeightsData: null
	,_jointIndexData: null
	,_animatedData: null
	,_jointWeightsBuffer: null
	,_jointIndexBuffer: null
	,_jointWeightsInvalid: null
	,_jointIndicesInvalid: null
	,_jointWeightContext: null
	,_jointIndexContext: null
	,_jointsPerVertex: null
	,_condensedJointIndexData: null
	,_condensedIndexLookUp: null
	,_numCondensedJoints: null
	,getVertexBufferFormat: function(size) {
		switch(size) {
		case 1:
			return 1;
		case 2:
			return 2;
		case 3:
			return 3;
		case 4:
			return 3;
		default:
			return null;
		}
	}
	,get_condensedIndexLookUp: function() {
		return this._condensedIndexLookUp;
	}
	,get_numCondensedJoints: function() {
		return this._numCondensedJoints;
	}
	,get_animatedData: function() {
		if(this._animatedData != null) {
			return this._animatedData;
		}
		return this._vertexData.concat(null);
	}
	,updateAnimatedData: function(value) {
		this._animatedData = value;
		this.invalidateBuffers(this._vertexDataInvalid);
	}
	,activateJointWeightsBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointWeightContext.get(contextIndex) != context || this._jointWeightsBuffer.get(contextIndex) == null) {
			this._jointWeightsBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,this._jointsPerVertex));
			this._jointWeightContext.set(contextIndex,context);
			this._jointWeightsInvalid.set(contextIndex,true);
		}
		if(this._jointWeightsInvalid.get(contextIndex)) {
			this._jointWeightsBuffer.get(contextIndex).uploadFromVector(this._jointWeightsData,0,this._jointWeightsData.get_length() / this._jointsPerVertex | 0);
			this._jointWeightsInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._jointWeightsBuffer.get(contextIndex),0,this._bufferFormat);
	}
	,activateJointIndexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._jointIndexContext.get(contextIndex) != context || this._jointIndexBuffer.get(contextIndex) == null) {
			this._jointIndexBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,this._jointsPerVertex));
			this._jointIndexContext.set(contextIndex,context);
			this._jointIndicesInvalid.set(contextIndex,true);
		}
		if(this._jointIndicesInvalid.get(contextIndex)) {
			this._jointIndexBuffer.get(contextIndex).uploadFromVector(this._numCondensedJoints > 0 ? this._condensedJointIndexData : this._jointIndexData,0,this._jointIndexData.get_length() / this._jointsPerVertex | 0);
			this._jointIndicesInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._jointIndexBuffer.get(contextIndex),0,this._bufferFormat);
	}
	,uploadData: function(contextIndex) {
		if(this._animatedData != null) {
			this._activeBuffer.uploadFromVector(this._animatedData,0,this._numVertices);
			this._vertexDataInvalid.set(contextIndex,this._activeDataInvalid = false);
		} else {
			away3d_core_base_CompactSubGeometry.prototype.uploadData.call(this,contextIndex);
		}
	}
	,clone: function() {
		var clone = new away3d_core_base_SkinnedSubGeometry(this._jointsPerVertex);
		clone.updateData(this._vertexData.concat(null));
		clone.updateIndexData(this._indices.concat(null));
		clone.updateJointIndexData(this._jointIndexData.concat(null));
		clone.updateJointWeightsData(this._jointWeightsData.concat(null));
		clone._autoDeriveVertexNormals = this._autoDeriveVertexNormals;
		clone._autoDeriveVertexTangents = this._autoDeriveVertexTangents;
		clone._numCondensedJoints = this._numCondensedJoints;
		clone._condensedIndexLookUp = this._condensedIndexLookUp;
		clone._condensedJointIndexData = this._condensedJointIndexData;
		return clone;
	}
	,dispose: function() {
		away3d_core_base_CompactSubGeometry.prototype.dispose.call(this);
		this.disposeVertexBuffers(this._jointWeightsBuffer);
		this.disposeVertexBuffers(this._jointIndexBuffer);
	}
	,condenseIndexData: function() {
		var len = this._jointIndexData.get_length();
		var oldIndex;
		var newIndex = 0;
		var dic = new haxe_ds_IntMap();
		this._condensedJointIndexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,len,true);
		this._condensedIndexLookUp = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			oldIndex = this._jointIndexData.get(i) | 0;
			if(!dic.h.hasOwnProperty(oldIndex)) {
				dic.h[oldIndex] = newIndex;
				this._condensedIndexLookUp.set(newIndex++,oldIndex);
				this._condensedIndexLookUp.set(newIndex++,oldIndex + 1);
				this._condensedIndexLookUp.set(newIndex++,oldIndex + 2);
			}
			this._condensedJointIndexData.set(i,dic.h[oldIndex]);
		}
		this._numCondensedJoints = newIndex / 3 | 0;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,get_jointWeightsData: function() {
		return this._jointWeightsData;
	}
	,updateJointWeightsData: function(value) {
		this._numCondensedJoints = 0;
		this._condensedIndexLookUp = null;
		this._condensedJointIndexData = null;
		this._jointWeightsData = value;
		this.invalidateBuffers(this._jointWeightsInvalid);
	}
	,get_jointIndexData: function() {
		return this._jointIndexData;
	}
	,updateJointIndexData: function(value) {
		this._jointIndexData = value;
		this.invalidateBuffers(this._jointIndicesInvalid);
	}
	,__class__: away3d_core_base_SkinnedSubGeometry
});
var away3d_core_base_SubGeometry = function() {
	this._vertexTangentBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexNormalBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._secondaryUvBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._uvBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexBufferContext = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexTangentBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexNormalBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._secondaryUvBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._uvBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._vertexBuffer = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._tangentsInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._normalsInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._secondaryUvsInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._uvsInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	this._verticesInvalid = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,8,true);
	away3d_core_base_SubGeometryBase.call(this);
};
$hxClasses["away3d.core.base.SubGeometry"] = away3d_core_base_SubGeometry;
away3d_core_base_SubGeometry.__name__ = ["away3d","core","base","SubGeometry"];
away3d_core_base_SubGeometry.__interfaces__ = [away3d_core_base_ISubGeometry];
away3d_core_base_SubGeometry.__super__ = away3d_core_base_SubGeometryBase;
away3d_core_base_SubGeometry.prototype = $extend(away3d_core_base_SubGeometryBase.prototype,{
	_uvs: null
	,_secondaryUvs: null
	,_vertexNormals: null
	,_vertexTangents: null
	,_verticesInvalid: null
	,_uvsInvalid: null
	,_secondaryUvsInvalid: null
	,_normalsInvalid: null
	,_tangentsInvalid: null
	,_vertexBuffer: null
	,_uvBuffer: null
	,_secondaryUvBuffer: null
	,_vertexNormalBuffer: null
	,_vertexTangentBuffer: null
	,_vertexBufferContext: null
	,_uvBufferContext: null
	,_secondaryUvBufferContext: null
	,_vertexNormalBufferContext: null
	,_vertexTangentBufferContext: null
	,_numVertices: null
	,get_numVertices: function() {
		return this._numVertices;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexBuffer.get(contextIndex) == null || this._vertexBufferContext.get(contextIndex) != context) {
			this._vertexBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,3));
			this._vertexBufferContext.set(contextIndex,context);
			this._verticesInvalid.set(contextIndex,true);
		}
		if(this._verticesInvalid.get(contextIndex)) {
			this._vertexBuffer.get(contextIndex).uploadFromVector(this._vertexData,0,this._numVertices);
			this._verticesInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._vertexBuffer.get(contextIndex),0,3);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoGenerateUVs && this._uvsDirty) {
			this._uvs = this.updateDummyUVs(this._uvs);
		}
		if(this._uvBuffer.get(contextIndex) == null || this._uvBufferContext.get(contextIndex) != context) {
			this._uvBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,2));
			this._uvBufferContext.set(contextIndex,context);
			this._uvsInvalid.set(contextIndex,true);
		}
		if(this._uvsInvalid.get(contextIndex)) {
			this._uvBuffer.get(contextIndex).uploadFromVector(this._uvs,0,this._numVertices);
			this._uvsInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._uvBuffer.get(contextIndex),0,2);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._secondaryUvBuffer.get(contextIndex) == null || this._secondaryUvBufferContext.get(contextIndex) != context) {
			this._secondaryUvBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,2));
			this._secondaryUvBufferContext.set(contextIndex,context);
			this._secondaryUvsInvalid.set(contextIndex,true);
		}
		if(this._secondaryUvsInvalid.get(contextIndex)) {
			this._secondaryUvBuffer.get(contextIndex).uploadFromVector(this._secondaryUvs,0,this._numVertices);
			this._secondaryUvsInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._secondaryUvBuffer.get(contextIndex),0,2);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) {
			this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		}
		if(this._vertexNormalBuffer.get(contextIndex) == null || this._vertexNormalBufferContext.get(contextIndex) != context) {
			this._vertexNormalBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,3));
			this._vertexNormalBufferContext.set(contextIndex,context);
			this._normalsInvalid.set(contextIndex,true);
		}
		if(this._normalsInvalid.get(contextIndex)) {
			this._vertexNormalBuffer.get(contextIndex).uploadFromVector(this._vertexNormals,0,this._numVertices);
			this._normalsInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._vertexNormalBuffer.get(contextIndex),0,3);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		if(this._vertexTangentsDirty) {
			this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		}
		if(this._vertexTangentBuffer.get(contextIndex) == null || this._vertexTangentBufferContext.get(contextIndex) != context) {
			this._vertexTangentBuffer.set(contextIndex,stage3DProxy.createVertexBuffer(this._numVertices,3));
			this._vertexTangentBufferContext.set(contextIndex,context);
			this._tangentsInvalid.set(contextIndex,true);
		}
		if(this._tangentsInvalid.get(contextIndex)) {
			this._vertexTangentBuffer.get(contextIndex).uploadFromVector(this._vertexTangents,0,this._numVertices);
			this._tangentsInvalid.set(contextIndex,false);
		}
		context.setVertexBufferAt(index,this._vertexTangentBuffer.get(contextIndex),0,3);
	}
	,applyTransformation: function(transform) {
		away3d_core_base_SubGeometryBase.prototype.applyTransformation.call(this,transform);
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBuffers(this._normalsInvalid);
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,clone: function() {
		var clone = new away3d_core_base_SubGeometry();
		clone.updateVertexData(this._vertexData.concat(null));
		clone.updateUVData(this._uvs.concat(null));
		clone.updateIndexData(this._indices.concat(null));
		if(this._secondaryUvs != null) {
			clone.updateSecondaryUVData(this._secondaryUvs.concat(null));
		}
		if(!this._autoDeriveVertexNormals) {
			clone.updateVertexNormalData(this._vertexNormals.concat(null));
		}
		if(!this._autoDeriveVertexTangents) {
			clone.updateVertexTangentData(this._vertexTangents.concat(null));
		}
		return clone;
	}
	,scale: function(scale) {
		away3d_core_base_SubGeometryBase.prototype.scale.call(this,scale);
		this.invalidateBuffers(this._verticesInvalid);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) {
			scaleV = 1;
		}
		if(scaleU == null) {
			scaleU = 1;
		}
		away3d_core_base_SubGeometryBase.prototype.scaleUV.call(this,scaleU,scaleV);
		this.invalidateBuffers(this._uvsInvalid);
	}
	,dispose: function() {
		away3d_core_base_SubGeometryBase.prototype.dispose.call(this);
		this.disposeAllVertexBuffers();
		this._vertexBuffer = null;
		this._vertexNormalBuffer = null;
		this._uvBuffer = null;
		this._secondaryUvBuffer = null;
		this._vertexTangentBuffer = null;
		this._indexBuffer = null;
		this._uvs = null;
		this._secondaryUvs = null;
		this._vertexNormals = null;
		this._vertexTangents = null;
		this._vertexBufferContext = null;
		this._uvBufferContext = null;
		this._secondaryUvBufferContext = null;
		this._vertexNormalBufferContext = null;
		this._vertexTangentBufferContext = null;
	}
	,disposeAllVertexBuffers: function() {
		this.disposeVertexBuffers(this._vertexBuffer);
		this.disposeVertexBuffers(this._vertexNormalBuffer);
		this.disposeVertexBuffers(this._uvBuffer);
		this.disposeVertexBuffers(this._secondaryUvBuffer);
		this.disposeVertexBuffers(this._vertexTangentBuffer);
	}
	,get_vertexData: function() {
		return this._vertexData;
	}
	,get_vertexPositionData: function() {
		return this._vertexData;
	}
	,updateVertexData: function(vertices) {
		if(this._autoDeriveVertexNormals) {
			this._vertexNormalsDirty = true;
		}
		if(this._autoDeriveVertexTangents) {
			this._vertexTangentsDirty = true;
		}
		this._faceNormalsDirty = true;
		this._vertexData = vertices;
		var numVertices = vertices.get_length() / 3 | 0;
		if(numVertices != this._numVertices) {
			this.disposeAllVertexBuffers();
		}
		this._numVertices = numVertices;
		this.invalidateBuffers(this._verticesInvalid);
		this.invalidateBounds();
	}
	,get_UVData: function() {
		if(this._uvsDirty && this._autoGenerateUVs) {
			this._uvs = this.updateDummyUVs(this._uvs);
		}
		return this._uvs;
	}
	,get_secondaryUVData: function() {
		return this._secondaryUvs;
	}
	,updateUVData: function(uvs) {
		if(this._autoDeriveVertexTangents) {
			this._vertexTangentsDirty = true;
		}
		this._faceTangentsDirty = true;
		this._uvs = uvs;
		this.invalidateBuffers(this._uvsInvalid);
	}
	,updateSecondaryUVData: function(uvs) {
		this._secondaryUvs = uvs;
		this.invalidateBuffers(this._secondaryUvsInvalid);
	}
	,get_vertexNormalData: function() {
		if(this._autoDeriveVertexNormals && this._vertexNormalsDirty) {
			this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		}
		return this._vertexNormals;
	}
	,updateVertexNormalData: function(vertexNormals) {
		this._vertexNormalsDirty = false;
		this._autoDeriveVertexNormals = vertexNormals == null;
		this._vertexNormals = vertexNormals;
		this.invalidateBuffers(this._normalsInvalid);
	}
	,get_vertexTangentData: function() {
		if(this._autoDeriveVertexTangents && this._vertexTangentsDirty) {
			this._vertexTangents = this.updateVertexTangents(this._vertexTangents);
		}
		return this._vertexTangents;
	}
	,updateVertexTangentData: function(vertexTangents) {
		this._vertexTangentsDirty = false;
		this._autoDeriveVertexTangents = vertexTangents == null;
		this._vertexTangents = vertexTangents;
		this.invalidateBuffers(this._tangentsInvalid);
	}
	,fromVectors: function(vertices,uvs,normals,tangents) {
		this.updateVertexData(vertices);
		this.updateUVData(uvs);
		this.updateVertexNormalData(normals);
		this.updateVertexTangentData(tangents);
	}
	,updateVertexNormals: function(target) {
		this.invalidateBuffers(this._normalsInvalid);
		return away3d_core_base_SubGeometryBase.prototype.updateVertexNormals.call(this,target);
	}
	,updateVertexTangents: function(target) {
		if(this._vertexNormalsDirty) {
			this._vertexNormals = this.updateVertexNormals(this._vertexNormals);
		}
		this.invalidateBuffers(this._tangentsInvalid);
		return away3d_core_base_SubGeometryBase.prototype.updateVertexTangents.call(this,target);
	}
	,updateDummyUVs: function(target) {
		this.invalidateBuffers(this._uvsInvalid);
		return away3d_core_base_SubGeometryBase.prototype.updateDummyUVs.call(this,target);
	}
	,disposeForStage3D: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		if(this._vertexBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._vertexBuffer.get(index));
			this._vertexBuffer.set(index,null);
		}
		if(this._uvBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._uvBuffer.get(index));
			this._uvBuffer.set(index,null);
		}
		if(this._secondaryUvBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._secondaryUvBuffer.get(index));
			this._secondaryUvBuffer.set(index,null);
		}
		if(this._vertexNormalBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._vertexNormalBuffer.get(index));
			this._vertexNormalBuffer.set(index,null);
		}
		if(this._vertexTangentBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._vertexTangentBuffer.get(index));
			this._vertexTangentBuffer.set(index,null);
		}
		if(this._indexBuffer.get(index) != null) {
			away3d_core_managers_Stage3DProxy.disposeIndexBuffer(this._indexBuffer.get(index));
			this._indexBuffer.set(index,null);
		}
	}
	,get_vertexStride: function() {
		return 3;
	}
	,get_vertexTangentStride: function() {
		return 3;
	}
	,get_vertexNormalStride: function() {
		return 3;
	}
	,get_UVStride: function() {
		return 2;
	}
	,get_secondaryUVStride: function() {
		return 2;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_UVOffset: function() {
		return 0;
	}
	,get_secondaryUVOffset: function() {
		return 0;
	}
	,cloneWithSeperateBuffers: function() {
		return js_Boot.__cast(this.clone() , away3d_core_base_SubGeometry);
	}
	,__class__: away3d_core_base_SubGeometry
});
var away3d_core_base_SubMesh = function(subGeometry,parentMesh,material) {
	this._offsetV2 = 0;
	this._offsetU2 = 0;
	this._scaleV2 = 1;
	this._scaleU2 = 1;
	this._uvRotation2 = 0;
	this._offsetV = 0;
	this._offsetU = 0;
	this._scaleV = 1;
	this._scaleU = 1;
	this._uvRotation = 0;
	this._parentMesh = parentMesh;
	this._subGeometry = subGeometry;
	this.set_material(material);
};
$hxClasses["away3d.core.base.SubMesh"] = away3d_core_base_SubMesh;
away3d_core_base_SubMesh.__name__ = ["away3d","core","base","SubMesh"];
away3d_core_base_SubMesh.__interfaces__ = [away3d_core_base_IRenderable];
away3d_core_base_SubMesh.prototype = {
	_material: null
	,_parentMesh: null
	,_subGeometry: null
	,_index: null
	,_uvTransform: null
	,_uvTransformDirty: null
	,_uvRotation: null
	,_scaleU: null
	,_scaleV: null
	,_offsetU: null
	,_offsetV: null
	,_uvTransform2: null
	,_uvTransformDirty2: null
	,_uvRotation2: null
	,_scaleU2: null
	,_scaleV2: null
	,_offsetU2: null
	,_offsetV2: null
	,animationSubGeometry: null
	,animatorSubGeometry: null
	,get_shaderPickingDetails: function() {
		return this.get_sourceEntity().get_shaderPickingDetails();
	}
	,get_offsetU: function() {
		return this._offsetU;
	}
	,set_offsetU: function(value) {
		if(value == this._offsetU) {
			return value;
		}
		this._offsetU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_offsetV: function() {
		return this._offsetV;
	}
	,set_offsetV: function(value) {
		if(value == this._offsetV) {
			return value;
		}
		this._offsetV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleU: function() {
		return this._scaleU;
	}
	,set_scaleU: function(value) {
		if(value == this._scaleU) {
			return value;
		}
		this._scaleU = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_scaleV: function() {
		return this._scaleV;
	}
	,set_scaleV: function(value) {
		if(value == this._scaleV) {
			return value;
		}
		this._scaleV = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_uvRotation: function() {
		return this._uvRotation;
	}
	,set_uvRotation: function(value) {
		if(value == this._uvRotation) {
			return value;
		}
		this._uvRotation = value;
		this._uvTransformDirty = true;
		return value;
	}
	,get_offsetU2: function() {
		return this._offsetU2;
	}
	,set_offsetU2: function(value) {
		if(value == this._offsetU2) {
			return value;
		}
		this._offsetU2 = value;
		this._uvTransformDirty2 = true;
		return value;
	}
	,get_offsetV2: function() {
		return this._offsetV2;
	}
	,set_offsetV2: function(value) {
		if(value == this._offsetV2) {
			return value;
		}
		this._offsetV2 = value;
		this._uvTransformDirty2 = true;
		return value;
	}
	,get_scaleU2: function() {
		return this._scaleU2;
	}
	,set_scaleU2: function(value) {
		if(value == this._scaleU2) {
			return value;
		}
		this._scaleU2 = value;
		this._uvTransformDirty2 = true;
		return value;
	}
	,get_scaleV2: function() {
		return this._scaleV2;
	}
	,set_scaleV2: function(value) {
		if(value == this._scaleV2) {
			return value;
		}
		this._scaleV2 = value;
		this._uvTransformDirty2 = true;
		return value;
	}
	,get_uvRotation2: function() {
		return this._uvRotation2;
	}
	,set_uvRotation2: function(value) {
		if(value == this._uvRotation2) {
			return value;
		}
		this._uvRotation2 = value;
		this._uvTransformDirty2 = true;
		return value;
	}
	,get_sourceEntity: function() {
		return this._parentMesh;
	}
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,set_subGeometry: function(value) {
		this._subGeometry = value;
		return value;
	}
	,get_material: function() {
		if(this._material != null) {
			return this._material;
		}
		return this._parentMesh.get_material();
	}
	,set_material: function(value) {
		if(this._material != null) {
			this._material.removeOwner(this);
		}
		this._material = value;
		if(this._material != null) {
			this._material.addOwner(this);
		}
		return value;
	}
	,get_sceneTransform: function() {
		return this._parentMesh.get_sceneTransform();
	}
	,get_inverseSceneTransform: function() {
		return this._parentMesh.get_inverseSceneTransform();
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexBuffer(index,stage3DProxy);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexNormalBuffer(index,stage3DProxy);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateVertexTangentBuffer(index,stage3DProxy);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateUVBuffer(index,stage3DProxy);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		this._subGeometry.activateSecondaryUVBuffer(index,stage3DProxy);
	}
	,getIndexBuffer: function(stage3DProxy) {
		return this._subGeometry.getIndexBuffer(stage3DProxy);
	}
	,get_numTriangles: function() {
		return this._subGeometry.get_numTriangles();
	}
	,get_animator: function() {
		return this._parentMesh.get_animator();
	}
	,get_mouseEnabled: function() {
		if(!this._parentMesh.get_mouseEnabled()) {
			return this._parentMesh._ancestorsAllowMouseEnabled;
		} else {
			return true;
		}
	}
	,get_castsShadows: function() {
		return this._parentMesh.get_castsShadows();
	}
	,get_parentMesh: function() {
		return this._parentMesh;
	}
	,set_parentMesh: function(value) {
		this._parentMesh = value;
		return value;
	}
	,get_uvTransform: function() {
		if(this._uvTransformDirty) {
			this.updateUVTransform();
		}
		return this._uvTransform;
	}
	,get_uvTransform2: function() {
		if(this._uvTransformDirty2) {
			this.updateUVTransform2();
		}
		return this._uvTransform2;
	}
	,updateUVTransform: function() {
		if(this._uvTransform == null) {
			this._uvTransform = new openfl_geom_Matrix();
		}
		this._uvTransform.identity();
		if(this._uvRotation != 0) {
			this._uvTransform.rotate(this._uvRotation);
		}
		if(this._scaleU != 1 || this._scaleV != 1) {
			this._uvTransform.scale(this._scaleU,this._scaleV);
		}
		this._uvTransform.translate(this._offsetU,this._offsetV);
		this._uvTransformDirty = false;
	}
	,updateUVTransform2: function() {
		if(this._uvTransform2 == null) {
			this._uvTransform2 = new openfl_geom_Matrix();
		}
		this._uvTransform2.identity();
		if(this._uvRotation2 != 0) {
			this._uvTransform2.rotate(this._uvRotation2);
		}
		if(this._scaleU2 != 1 || this._scaleV2 != 1) {
			this._uvTransform2.scale(this._scaleU2,this._scaleV2);
		}
		this._uvTransform2.translate(this._offsetU2,this._offsetV2);
		this._uvTransformDirty2 = false;
	}
	,dispose: function() {
		this.set_material(null);
	}
	,get_vertexData: function() {
		return this._subGeometry.get_vertexData();
	}
	,get_indexData: function() {
		return this._subGeometry.get_indexData();
	}
	,get_UVData: function() {
		return this._subGeometry.get_UVData();
	}
	,get_bounds: function() {
		return this._parentMesh.get_bounds();
	}
	,get_visible: function() {
		return this._parentMesh.get_visible();
	}
	,get_numVertices: function() {
		return this._subGeometry.get_numVertices();
	}
	,get_vertexStride: function() {
		return this._subGeometry.get_vertexStride();
	}
	,get_UVStride: function() {
		return this._subGeometry.get_UVStride();
	}
	,get_vertexNormalData: function() {
		return this._subGeometry.get_vertexNormalData();
	}
	,get_vertexTangentData: function() {
		return this._subGeometry.get_vertexTangentData();
	}
	,get_UVOffset: function() {
		return this._subGeometry.get_UVOffset();
	}
	,get_vertexOffset: function() {
		return this._subGeometry.get_vertexOffset();
	}
	,get_vertexNormalOffset: function() {
		return this._subGeometry.get_vertexNormalOffset();
	}
	,get_vertexTangentOffset: function() {
		return this._subGeometry.get_vertexTangentOffset();
	}
	,getRenderSceneTransform: function(camera) {
		return this._parentMesh.get_sceneTransform();
	}
	,__class__: away3d_core_base_SubMesh
};
var away3d_core_base_data_ParticleData = function() {
};
$hxClasses["away3d.core.base.data.ParticleData"] = away3d_core_base_data_ParticleData;
away3d_core_base_data_ParticleData.__name__ = ["away3d","core","base","data","ParticleData"];
away3d_core_base_data_ParticleData.prototype = {
	particleIndex: null
	,numVertices: null
	,startVertexIndex: null
	,subGeometry: null
	,__class__: away3d_core_base_data_ParticleData
};
var away3d_core_base_data_UV = function(u,v) {
	if(v == null) {
		v = 0;
	}
	if(u == null) {
		u = 0;
	}
	this._u = u;
	this._v = v;
};
$hxClasses["away3d.core.base.data.UV"] = away3d_core_base_data_UV;
away3d_core_base_data_UV.__name__ = ["away3d","core","base","data","UV"];
away3d_core_base_data_UV.prototype = {
	_u: null
	,_v: null
	,get_v: function() {
		return this._v;
	}
	,set_v: function(value) {
		this._v = value;
		return value;
	}
	,get_u: function() {
		return this._u;
	}
	,set_u: function(value) {
		this._u = value;
		return value;
	}
	,clone: function() {
		return new away3d_core_base_data_UV(this._u,this._v);
	}
	,toString: function() {
		return this._u + "," + this._v;
	}
	,__class__: away3d_core_base_data_UV
};
var away3d_core_base_data_Vertex = function(x,y,z,index) {
	if(index == null) {
		index = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._x = x;
	this._y = y;
	this._z = z;
	this._index = index;
};
$hxClasses["away3d.core.base.data.Vertex"] = away3d_core_base_data_Vertex;
away3d_core_base_data_Vertex.__name__ = ["away3d","core","base","data","Vertex"];
away3d_core_base_data_Vertex.prototype = {
	_x: null
	,_y: null
	,_z: null
	,_index: null
	,set_index: function(ind) {
		this._index = ind;
		return ind;
	}
	,get_index: function() {
		return this._index;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		this._x = value;
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		this._y = value;
		return value;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(value) {
		this._z = value;
		return value;
	}
	,clone: function() {
		return new away3d_core_base_data_Vertex(this._x,this._y,this._z);
	}
	,toString: function() {
		return this._x + "," + this._y + "," + this._z;
	}
	,__class__: away3d_core_base_data_Vertex
};
var away3d_core_data_EntityListItem = function() {
};
$hxClasses["away3d.core.data.EntityListItem"] = away3d_core_data_EntityListItem;
away3d_core_data_EntityListItem.__name__ = ["away3d","core","data","EntityListItem"];
away3d_core_data_EntityListItem.prototype = {
	entity: null
	,next: null
	,__class__: away3d_core_data_EntityListItem
};
var away3d_core_data_EntityListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["away3d.core.data.EntityListItemPool"] = away3d_core_data_EntityListItemPool;
away3d_core_data_EntityListItemPool.__name__ = ["away3d","core","data","EntityListItemPool"];
away3d_core_data_EntityListItemPool.prototype = {
	_pool: null
	,_index: null
	,_poolSize: null
	,getItem: function() {
		var item;
		if(this._index == this._poolSize) {
			item = new away3d_core_data_EntityListItem();
			this._pool.set(this._index++,item);
			++this._poolSize;
		} else {
			item = this._pool.get(this._index++);
		}
		return item;
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool.set_length(0);
	}
	,__class__: away3d_core_data_EntityListItemPool
};
var away3d_core_data_RenderableListItem = function() {
};
$hxClasses["away3d.core.data.RenderableListItem"] = away3d_core_data_RenderableListItem;
away3d_core_data_RenderableListItem.__name__ = ["away3d","core","data","RenderableListItem"];
away3d_core_data_RenderableListItem.prototype = {
	next: null
	,renderable: null
	,materialId: null
	,renderOrderId: null
	,zIndex: null
	,renderSceneTransform: null
	,cascaded: null
	,__class__: away3d_core_data_RenderableListItem
};
var away3d_core_data_RenderableListItemPool = function() {
	this._index = 0;
	this._poolSize = 0;
	this._pool = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["away3d.core.data.RenderableListItemPool"] = away3d_core_data_RenderableListItemPool;
away3d_core_data_RenderableListItemPool.__name__ = ["away3d","core","data","RenderableListItemPool"];
away3d_core_data_RenderableListItemPool.prototype = {
	_pool: null
	,_index: null
	,_poolSize: null
	,getItem: function() {
		if(this._index == this._poolSize) {
			var item = new away3d_core_data_RenderableListItem();
			this._pool.set(this._index++,item);
			++this._poolSize;
			return item;
		} else {
			return this._pool.get(this._index++);
		}
	}
	,freeAll: function() {
		this._index = 0;
	}
	,dispose: function() {
		this._pool.set_length(0);
	}
	,__class__: away3d_core_data_RenderableListItemPool
};
var away3d_core_managers_AGALProgram3DCache = function(stage3DProxy) {
	this._stage3DProxy = stage3DProxy;
	this._program3Ds = new haxe_ds_StringMap();
	this._ids = new haxe_ds_StringMap();
	this._usages = [];
	this._keys = [];
};
$hxClasses["away3d.core.managers.AGALProgram3DCache"] = away3d_core_managers_AGALProgram3DCache;
away3d_core_managers_AGALProgram3DCache.__name__ = ["away3d","core","managers","AGALProgram3DCache"];
away3d_core_managers_AGALProgram3DCache.getInstance = function(stage3DProxy) {
	var index = stage3DProxy.get_stage3DIndex();
	if(away3d_core_managers_AGALProgram3DCache._instances == null) {
		away3d_core_managers_AGALProgram3DCache._instances = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8,true);
	}
	if(away3d_core_managers_AGALProgram3DCache._instances.get(index) == null) {
		away3d_core_managers_AGALProgram3DCache._instances.set(index,new away3d_core_managers_AGALProgram3DCache(stage3DProxy));
		stage3DProxy.addEventListener("Context3DDisposed",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener("Context3DCreated",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed,false,0,true);
		stage3DProxy.addEventListener("Context3DRecreated",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed,false,0,true);
	}
	return away3d_core_managers_AGALProgram3DCache._instances.get(index);
};
away3d_core_managers_AGALProgram3DCache.getInstanceFromIndex = function(index) {
	if(away3d_core_managers_AGALProgram3DCache._instances.get(index) == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Instance not created yet!"));
	}
	return away3d_core_managers_AGALProgram3DCache._instances.get(index);
};
away3d_core_managers_AGALProgram3DCache.onContext3DDisposed = function(event) {
	var stage3DProxy = js_Boot.__cast(event.target , away3d_core_managers_Stage3DProxy);
	var index = stage3DProxy._stage3DIndex;
	away3d_core_managers_AGALProgram3DCache._instances.get(index).dispose();
	away3d_core_managers_AGALProgram3DCache._instances.set(index,null);
	stage3DProxy.removeEventListener("Context3DDisposed",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener("Context3DCreated",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed);
	stage3DProxy.removeEventListener("Context3DRecreated",away3d_core_managers_AGALProgram3DCache.onContext3DDisposed);
};
away3d_core_managers_AGALProgram3DCache.prototype = {
	_stage3DProxy: null
	,_program3Ds: null
	,_ids: null
	,_usages: null
	,_keys: null
	,dispose: function() {
		var keys = this._program3Ds.keys();
		var key = keys;
		while(key.hasNext()) {
			var key1 = key.next();
			this.destroyProgram(key1);
		}
		this._keys = null;
		this._program3Ds = null;
		this._usages = null;
	}
	,setProgram3D: function(pass,vertexCode,fragmentCode) {
		var stageIndex = this._stage3DProxy._stage3DIndex;
		var program;
		var key = vertexCode + "---" + fragmentCode;
		var _this = this._program3Ds;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			this._keys[away3d_core_managers_AGALProgram3DCache._currentId] = key;
			this._usages[away3d_core_managers_AGALProgram3DCache._currentId] = 0;
			var v = away3d_core_managers_AGALProgram3DCache._currentId;
			var _this1 = this._ids;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,v);
			} else {
				_this1.h[key] = v;
			}
			++away3d_core_managers_AGALProgram3DCache._currentId;
			program = this._stage3DProxy._context3D.createProgram();
			var vertexByteCode = new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexCode);
			var fragmentByteCode = new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentCode);
			program.upload(vertexByteCode,fragmentByteCode);
			var _this2 = this._program3Ds;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,program);
			} else {
				_this2.h[key] = program;
			}
		}
		var oldId = pass._program3Dids.get(stageIndex);
		var _this3 = this._ids;
		var newId = __map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key];
		if(oldId != newId) {
			if(oldId >= 0) {
				this.freeProgram3D(oldId);
			}
			this._usages[newId]++;
		}
		pass._program3Dids.set(stageIndex,newId);
		var _this4 = this._program3Ds;
		pass._program3Ds.set(stageIndex,__map_reserved[key] != null ? _this4.getReserved(key) : _this4.h[key]);
	}
	,freeProgram3D: function(programId) {
		this._usages[programId]--;
		if(this._usages[programId] == 0) {
			this.destroyProgram(this._keys[programId]);
		}
	}
	,destroyProgram: function(key) {
		var _this = this._program3Ds;
		(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).dispose();
		this._program3Ds.remove(key);
		var _this1 = this._ids;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,-1);
		} else {
			_this1.h[key] = -1;
		}
	}
	,getKey: function(vertexCode,fragmentCode) {
		return vertexCode + "---" + fragmentCode;
	}
	,__class__: away3d_core_managers_AGALProgram3DCache
};
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var away3d_events_MouseEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl_events_Event.call(this,type,true,true);
};
$hxClasses["away3d.events.MouseEvent3D"] = away3d_events_MouseEvent3D;
away3d_events_MouseEvent3D.__name__ = ["away3d","events","MouseEvent3D"];
away3d_events_MouseEvent3D.__super__ = openfl_events_Event;
away3d_events_MouseEvent3D.prototype = $extend(openfl_events_Event.prototype,{
	_allowedToPropagate: null
	,_parentEvent: null
	,screenX: null
	,screenY: null
	,view: null
	,object: null
	,renderable: null
	,material: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localPosition: null
	,localNormal: null
	,ctrlKey: null
	,altKey: null
	,shiftKey: null
	,delta: null
	,stopPropagation: function() {
		openfl_events_Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) {
			this._parentEvent.stopPropagation();
		}
	}
	,stopImmediatePropagation: function() {
		openfl_events_Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) {
			this._parentEvent.stopImmediatePropagation();
		}
	}
	,clone: function() {
		var result = new away3d_events_MouseEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.delta = this.delta;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		result._allowedToPropagate = this._allowedToPropagate;
		return result;
	}
	,get_scenePosition: function() {
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			return away3d_core_math_Matrix3DUtils.transformVector((js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform(),this.localPosition);
		} else {
			return this.localPosition;
		}
	}
	,getScenePosition: function(v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			away3d_core_math_Matrix3DUtils.transformVector((js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform(),this.localPosition,v);
		} else {
			v.x = this.localPosition.x;
			v.y = this.localPosition.y;
			v.z = this.localPosition.z;
		}
		return v;
	}
	,get_sceneNormal: function() {
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			var sceneNormal = away3d_core_math_Matrix3DUtils.deltaTransformVector((js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform(),this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else {
			return this.localNormal;
		}
	}
	,getSceneNormal: function(v) {
		if(v == null) {
			v = new openfl_geom_Vector3D();
		}
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			away3d_core_math_Matrix3DUtils.deltaTransformVector((js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform(),this.localNormal,v);
			v.normalize();
		} else {
			v.x = this.localNormal.x;
			v.y = this.localNormal.y;
			v.z = this.localNormal.z;
		}
		return v;
	}
	,__class__: away3d_events_MouseEvent3D
});
var away3d_core_managers_Mouse3DManager = function() {
	this._childDepth = 0;
	this._mousePicker = away3d_core_pick_PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._mouseMoveEvent = new openfl_events_MouseEvent("mouseMove");
	this._nullVector = new openfl_geom_Vector3D();
	this._updateDirty = true;
	if(away3d_core_managers_Mouse3DManager._view3Ds == null) {
		away3d_core_managers_Mouse3DManager._view3Ds = new haxe_ds_ObjectMap();
		away3d_core_managers_Mouse3DManager._view3DLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	}
};
$hxClasses["away3d.core.managers.Mouse3DManager"] = away3d_core_managers_Mouse3DManager;
away3d_core_managers_Mouse3DManager.__name__ = ["away3d","core","managers","Mouse3DManager"];
away3d_core_managers_Mouse3DManager.prototype = {
	_activeView: null
	,_updateDirty: null
	,_nullVector: null
	,_mouseMoveEvent: null
	,_forceMouseMove: null
	,_mousePicker: null
	,_childDepth: null
	,_collidingDownObject: null
	,_collidingUpObject: null
	,updateCollider: function(view) {
		away3d_core_managers_Mouse3DManager._previousCollidingView = away3d_core_managers_Mouse3DManager._collidingView;
		if(view != null) {
			if(view.get_stage3DProxy().get_bufferClear()) {
				away3d_core_managers_Mouse3DManager._collidingViewObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,away3d_core_managers_Mouse3DManager._viewCount);
			}
			if(!view.get_shareContext()) {
				if(view == this._activeView && (this._forceMouseMove || this._updateDirty)) {
					away3d_core_managers_Mouse3DManager._collidingObject = this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view);
				}
			} else if(view.getBounds(view.parent).contains(view.get_mouseX() + view.get_x(),view.get_mouseY() + view.get_y())) {
				if(away3d_core_managers_Mouse3DManager._collidingViewObjects == null) {
					away3d_core_managers_Mouse3DManager._collidingViewObjects = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,away3d_core_managers_Mouse3DManager._viewCount);
				}
				away3d_core_managers_Mouse3DManager._collidingObject = away3d_core_managers_Mouse3DManager._collidingViewObjects.set(away3d_core_managers_Mouse3DManager._view3Ds.h[view.__id__],this._mousePicker.getViewCollision(view.get_mouseX(),view.get_mouseY(),view));
			}
		}
	}
	,fireMouseEvents: function() {
		var i = 0;
		var len;
		var event;
		var dispatcher;
		if(away3d_core_managers_Mouse3DManager._collidingViewObjects != null) {
			away3d_core_managers_Mouse3DManager._collidingObject = null;
			var distance = Infinity;
			var view;
			var v = away3d_core_managers_Mouse3DManager._viewCount - 1;
			while(v >= 0) {
				view = away3d_core_managers_Mouse3DManager._view3DLookup.get(v);
				if(away3d_core_managers_Mouse3DManager._collidingViewObjects.get(v) != null && (view.get_layeredView() || away3d_core_managers_Mouse3DManager._collidingViewObjects.get(v).rayEntryDistance < distance)) {
					distance = away3d_core_managers_Mouse3DManager._collidingViewObjects.get(v).rayEntryDistance;
					away3d_core_managers_Mouse3DManager._collidingObject = away3d_core_managers_Mouse3DManager._collidingViewObjects.get(v);
					if(view.get_layeredView()) {
						break;
					}
				}
				--v;
			}
		}
		if(away3d_core_managers_Mouse3DManager._collidingObject != away3d_core_managers_Mouse3DManager._previousCollidingObject) {
			if(away3d_core_managers_Mouse3DManager._previousCollidingObject != null) {
				this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseOut,this._mouseMoveEvent,away3d_core_managers_Mouse3DManager._previousCollidingObject);
			}
			if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
				this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseOver,this._mouseMoveEvent,away3d_core_managers_Mouse3DManager._collidingObject);
			}
		}
		if(this._forceMouseMove && away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseMove,this._mouseMoveEvent,away3d_core_managers_Mouse3DManager._collidingObject);
		}
		len = away3d_core_managers_Mouse3DManager._queuedEvents.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			event = away3d_core_managers_Mouse3DManager._queuedEvents.get(i1);
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) {
				dispatcher.dispatchEvent(event);
			}
		}
		away3d_core_managers_Mouse3DManager._queuedEvents.set_length(0);
		this._updateDirty = false;
		away3d_core_managers_Mouse3DManager._previousCollidingObject = away3d_core_managers_Mouse3DManager._collidingObject;
	}
	,addViewLayer: function(view) {
		var stg = view.stage;
		if(view.get_stage3DProxy().get_mouse3DManager() == null) {
			view.get_stage3DProxy().set_mouse3DManager(this);
		}
		if(!this.hasKey(view)) {
			away3d_core_managers_Mouse3DManager._view3Ds.set(view,0);
		}
		this._childDepth = 0;
		this.traverseDisplayObjects(stg);
		away3d_core_managers_Mouse3DManager._viewCount = this._childDepth;
	}
	,enableMouseListeners: function(view) {
		view.addEventListener("click",$bind(this,this.onClick));
		view.addEventListener("doubleClick",$bind(this,this.onDoubleClick));
		view.addEventListener("mouseDown",$bind(this,this.onMouseDown));
		view.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		view.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		view.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		view.addEventListener("mouseOver",$bind(this,this.onMouseOver));
		view.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	}
	,disableMouseListeners: function(view) {
		view.removeEventListener("click",$bind(this,this.onClick));
		view.removeEventListener("doubleClick",$bind(this,this.onDoubleClick));
		view.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		view.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		view.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		view.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		view.removeEventListener("mouseOver",$bind(this,this.onMouseOver));
		view.removeEventListener("mouseOut",$bind(this,this.onMouseOut));
	}
	,dispose: function() {
		this._mousePicker.dispose();
	}
	,queueDispatch: function(event,sourceEvent,collider) {
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.delta = sourceEvent.delta;
		event.screenX = sourceEvent.localX;
		event.screenY = sourceEvent.localY;
		if(collider == null) {
			collider = away3d_core_managers_Mouse3DManager._collidingObject;
		}
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			event.localPosition = collider.localPosition != null ? collider.localPosition.clone() : null;
			event.localNormal = collider.localNormal != null ? collider.localNormal.clone() : null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d_core_managers_Mouse3DManager._queuedEvents.push(event);
	}
	,reThrowEvent: function(event) {
		if(this._activeView == null || this._activeView != null && !this._activeView.get_shareContext()) {
			return;
		}
		var keys = away3d_core_managers_Mouse3DManager._view3Ds.keys();
		var v = keys;
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1 != this._activeView && away3d_core_managers_Mouse3DManager._view3Ds.h[v1.__id__] == away3d_core_managers_Mouse3DManager._view3Ds.h[this._activeView.__id__] - 1) {
				if(event.bubbles == true) {
					v1.dispatchEvent(new openfl_events_MouseEvent(event.type,false,event.cancelable,event.localX,event.localY,event.relatedObject,event.ctrlKey,event.altKey,event.shiftKey,event.buttonDown,event.delta,event.commandKey,event.clickCount));
				} else {
					v1.dispatchEvent(event);
				}
			}
		}
	}
	,hasKey: function(view) {
		return away3d_core_managers_Mouse3DManager._view3Ds.h.__keys__[view.__id__] != null;
	}
	,traverseDisplayObjects: function(container) {
		var childCount = container.get_numChildren();
		var c = 0;
		var child;
		var _g1 = 0;
		var _g = childCount;
		while(_g1 < _g) {
			var c1 = _g1++;
			child = container.getChildAt(c1);
			if(js_Boot.__instanceof(child,away3d_containers_View3D) && away3d_core_managers_Mouse3DManager._view3Ds.h.__keys__[child.__id__] != null) {
				var v = this._childDepth;
				away3d_core_managers_Mouse3DManager._view3Ds.set(child,v);
				away3d_core_managers_Mouse3DManager._view3DLookup.set(this._childDepth,child);
				this._childDepth++;
			}
			if(js_Boot.__instanceof(child,openfl_display_DisplayObjectContainer)) {
				this.traverseDisplayObjects(js_Boot.__cast(child , openfl_display_DisplayObjectContainer));
			}
		}
	}
	,onMouseMove: function(event) {
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseMove,this._mouseMoveEvent = event);
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onMouseOut: function(event) {
		this._activeView = null;
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseOut,event,away3d_core_managers_Mouse3DManager._collidingObject);
		}
		this._updateDirty = true;
	}
	,onMouseOver: function(event) {
		this._activeView = js_Boot.__cast(event.currentTarget , away3d_containers_View3D);
		if(away3d_core_managers_Mouse3DManager._collidingObject != null && away3d_core_managers_Mouse3DManager._previousCollidingObject != away3d_core_managers_Mouse3DManager._collidingObject) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseOver,event,away3d_core_managers_Mouse3DManager._collidingObject);
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onClick: function(event) {
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseClick,event);
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onDoubleClick: function(event) {
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseDoubleClick,event);
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onMouseDown: function(event) {
		this._activeView = js_Boot.__cast(event.currentTarget , away3d_containers_View3D);
		this.updateCollider(this._activeView);
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseDown,event);
			away3d_core_managers_Mouse3DManager._previousCollidingObject = away3d_core_managers_Mouse3DManager._collidingObject;
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onMouseUp: function(event) {
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseUp,event);
			away3d_core_managers_Mouse3DManager._previousCollidingObject = away3d_core_managers_Mouse3DManager._collidingObject;
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,onMouseWheel: function(event) {
		if(away3d_core_managers_Mouse3DManager._collidingObject != null) {
			this.queueDispatch(away3d_core_managers_Mouse3DManager._mouseWheel,event);
		} else {
			this.reThrowEvent(event);
		}
		this._updateDirty = true;
	}
	,get_forceMouseMove: function() {
		return this._forceMouseMove;
	}
	,set_forceMouseMove: function(value) {
		this._forceMouseMove = value;
		return value;
	}
	,get_mousePicker: function() {
		return this._mousePicker;
	}
	,set_mousePicker: function(value) {
		this._mousePicker = value;
		return value;
	}
	,__class__: away3d_core_managers_Mouse3DManager
};
var away3d_core_managers_RTTBufferManager = function(stage3DProxy) {
	this._buffersInvalid = true;
	this._textureHeight = -1;
	this._textureWidth = -1;
	this._viewHeight = -1;
	this._viewWidth = -1;
	this._renderToTextureRect = new openfl_geom_Rectangle();
	this._stage3DProxy = stage3DProxy;
	this._stage3DProxy.addEventListener("Context3DRecreated",$bind(this,this.onContextRecreated));
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["away3d.core.managers.RTTBufferManager"] = away3d_core_managers_RTTBufferManager;
away3d_core_managers_RTTBufferManager.__name__ = ["away3d","core","managers","RTTBufferManager"];
away3d_core_managers_RTTBufferManager.getInstance = function(stage3DProxy) {
	if(stage3DProxy == null) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("stage3DProxy key cannot be null!"));
	}
	if(away3d_core_managers_RTTBufferManager._instances == null) {
		away3d_core_managers_RTTBufferManager._instances = new haxe_ds_ObjectMap();
	}
	var rttb = away3d_core_managers_RTTBufferManager._instances.h[stage3DProxy.__id__];
	if(rttb == null) {
		rttb = new away3d_core_managers_RTTBufferManager(stage3DProxy);
		away3d_core_managers_RTTBufferManager._instances.set(stage3DProxy,rttb);
	}
	return rttb;
};
away3d_core_managers_RTTBufferManager.__super__ = openfl_events_EventDispatcher;
away3d_core_managers_RTTBufferManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_renderToTextureVertexBuffer: null
	,_renderToScreenVertexBuffer: null
	,_indexBuffer: null
	,_stage3DProxy: null
	,_viewWidth: null
	,_viewHeight: null
	,_textureWidth: null
	,_textureHeight: null
	,_renderToTextureRect: null
	,_buffersInvalid: null
	,_textureRatioX: null
	,_textureRatioY: null
	,get_textureRatioX: function() {
		if(this._buffersInvalid) {
			this.updateRTTBuffers();
		}
		return this._textureRatioX;
	}
	,get_textureRatioY: function() {
		if(this._buffersInvalid) {
			this.updateRTTBuffers();
		}
		return this._textureRatioY;
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		if(value == this._viewWidth) {
			return value;
		}
		this._viewWidth = value;
		this._buffersInvalid = true;
		this._textureWidth = away3d_tools_utils_TextureUtils.getBestPowerOf2(this._viewWidth);
		if(this._textureWidth > this._viewWidth) {
			this._renderToTextureRect.x = (this._textureWidth - this._viewWidth) * .5 | 0;
			this._renderToTextureRect.width = this._viewWidth;
		} else {
			this._renderToTextureRect.x = 0;
			this._renderToTextureRect.width = this._textureWidth;
		}
		this.dispatchEvent(new openfl_events_Event("resize"));
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		if(value == this._viewHeight) {
			return value;
		}
		this._viewHeight = value;
		this._buffersInvalid = true;
		this._textureHeight = away3d_tools_utils_TextureUtils.getBestPowerOf2(this._viewHeight);
		if(this._textureHeight > this._viewHeight) {
			this._renderToTextureRect.y = (this._textureHeight - this._viewHeight) * .5 | 0;
			this._renderToTextureRect.height = this._viewHeight;
		} else {
			this._renderToTextureRect.y = 0;
			this._renderToTextureRect.height = this._textureHeight;
		}
		this.dispatchEvent(new openfl_events_Event("resize"));
		return value;
	}
	,get_renderToTextureVertexBuffer: function() {
		if(this._buffersInvalid) {
			this.updateRTTBuffers();
		}
		return this._renderToTextureVertexBuffer;
	}
	,get_renderToScreenVertexBuffer: function() {
		if(this._buffersInvalid) {
			this.updateRTTBuffers();
		}
		return this._renderToScreenVertexBuffer;
	}
	,get_indexBuffer: function() {
		return this._indexBuffer;
	}
	,get_renderToTextureRect: function() {
		if(this._buffersInvalid) {
			this.updateRTTBuffers();
		}
		return this._renderToTextureRect;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,dispose: function() {
		away3d_core_managers_RTTBufferManager._instances.remove(this._stage3DProxy);
		this._stage3DProxy.removeEventListener("Context3DRecreated",$bind(this,this.onContextRecreated));
		if(this._indexBuffer != null) {
			away3d_core_managers_Stage3DProxy.disposeIndexBuffer(this._indexBuffer);
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._renderToScreenVertexBuffer);
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._renderToTextureVertexBuffer);
			this._renderToScreenVertexBuffer = null;
			this._renderToTextureVertexBuffer = null;
			this._indexBuffer = null;
		}
	}
	,onContextRecreated: function(event) {
		this._indexBuffer = null;
		this._renderToTextureVertexBuffer = null;
		this._renderToScreenVertexBuffer = null;
		this.updateRTTBuffers();
	}
	,updateRTTBuffers: function() {
		var context = this._stage3DProxy.get_context3D();
		var textureVerts;
		var screenVerts;
		var x;
		var y;
		if(this._renderToTextureVertexBuffer == null) {
			this._renderToTextureVertexBuffer = this._stage3DProxy.createVertexBuffer(4,5);
		}
		if(this._renderToScreenVertexBuffer == null) {
			this._renderToScreenVertexBuffer = this._stage3DProxy.createVertexBuffer(4,5);
		}
		if(this._indexBuffer == null) {
			this._indexBuffer = this._stage3DProxy.createIndexBuffer(6);
			var a = [2,1,0,3,2,0];
			var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			var v = vector;
			this._indexBuffer.uploadFromVector(v,0,6);
		}
		x = Math.min(this._viewWidth / this._textureWidth,1);
		this._textureRatioX = x;
		y = Math.min(this._viewHeight / this._textureHeight,1);
		this._textureRatioY = y;
		var u1 = (1 - x) * .5;
		var u2 = (x + 1) * .5;
		var v1 = (y + 1) * .5;
		var v2 = (1 - y) * .5;
		var a1 = [-x,-y,u1,v1,0,x,-y,u2,v1,1,x,y,u2,v2,2,-x,y,u1,v2,3];
		var vector1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector1.set(i1,a1[i1]);
		}
		textureVerts = vector1;
		var a2 = [-1,-1,u1,v1,0,1,-1,u2,v1,1,1,1,u2,v2,2,-1,1,u1,v2,3];
		var vector2 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g12 = 0;
		var _g3 = a2.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			vector2.set(i2,a2[i2]);
		}
		screenVerts = vector2;
		this._renderToTextureVertexBuffer.uploadFromVector(textureVerts,0,4);
		this._renderToScreenVertexBuffer.uploadFromVector(screenVerts,0,4);
		this._buffersInvalid = false;
	}
	,__class__: away3d_core_managers_RTTBufferManager
});
var away3d_core_managers_Stage3DManager = function(stage) {
	this._stage = stage;
	if(away3d_core_managers_Stage3DManager._stageProxies == null) {
		away3d_core_managers_Stage3DManager._stageProxies = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,this._stage.stage3Ds.get_length(),true);
	}
};
$hxClasses["away3d.core.managers.Stage3DManager"] = away3d_core_managers_Stage3DManager;
away3d_core_managers_Stage3DManager.__name__ = ["away3d","core","managers","Stage3DManager"];
away3d_core_managers_Stage3DManager.getInstance = function(stage) {
	if(away3d_core_managers_Stage3DManager._instances == null) {
		away3d_core_managers_Stage3DManager._instances = new haxe_ds_ObjectMap();
	}
	var manager = away3d_core_managers_Stage3DManager._instances.h[stage.__id__];
	if(manager == null) {
		manager = new away3d_core_managers_Stage3DManager(stage);
		away3d_core_managers_Stage3DManager._instances.set(stage,manager);
	}
	return manager;
};
away3d_core_managers_Stage3DManager.prototype = {
	_stage: null
	,getStage3DProxy: function(index,forceSoftware,profile) {
		if(profile == null) {
			profile = "baseline";
		}
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(away3d_core_managers_Stage3DManager._stageProxies.get(index) == null) {
			away3d_core_managers_Stage3DManager._numStageProxies++;
			away3d_core_managers_Stage3DManager._stageProxies.set(index,new away3d_core_managers_Stage3DProxy(index,this._stage.stage3Ds.get(index),this,forceSoftware,profile));
		}
		return away3d_core_managers_Stage3DManager._stageProxies.get(index);
	}
	,removeStage3DProxy: function(stage3DProxy) {
		away3d_core_managers_Stage3DManager._numStageProxies--;
		away3d_core_managers_Stage3DManager._stageProxies.set(stage3DProxy.get_stage3DIndex(),null);
	}
	,getFreeStage3DProxy: function(forceSoftware,profile) {
		if(profile == null) {
			profile = "baseline";
		}
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var i = 0;
		var len = away3d_core_managers_Stage3DManager._stageProxies.get_length();
		while(i < len) {
			if(away3d_core_managers_Stage3DManager._stageProxies.get(i) == null) {
				this.getStage3DProxy(i,forceSoftware,profile);
				away3d_core_managers_Stage3DManager._stageProxies.get(i).set_width(this._stage.stageWidth);
				away3d_core_managers_Stage3DManager._stageProxies.get(i).set_height(this._stage.stageHeight);
				return away3d_core_managers_Stage3DManager._stageProxies.get(i);
			}
			++i;
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Too many Stage3D instances used!"));
	}
	,get_hasFreeStage3DProxy: function() {
		if(away3d_core_managers_Stage3DManager._numStageProxies < away3d_core_managers_Stage3DManager._stageProxies.get_length()) {
			return true;
		} else {
			return false;
		}
	}
	,get_numProxySlotsFree: function() {
		return away3d_core_managers_Stage3DManager._stageProxies.get_length() - away3d_core_managers_Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsUsed: function() {
		return away3d_core_managers_Stage3DManager._numStageProxies;
	}
	,get_numProxySlotsTotal: function() {
		return away3d_core_managers_Stage3DManager._stageProxies.get_length();
	}
	,__class__: away3d_core_managers_Stage3DManager
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
});
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = 1 / this.redMultiplier;
		this.greenMultiplier = 1 / this.greenMultiplier;
		this.blueMultiplier = 1 / this.blueMultiplier;
		this.alphaMultiplier = 1 / this.alphaMultiplier;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
};
var away3d_core_managers_Stage3DProxy = function(stage3DIndex,stage3D,stage3DManager,forceSoftware,profile) {
	if(profile == null) {
		profile = "baseline";
	}
	if(forceSoftware == null) {
		forceSoftware = false;
	}
	this._backBufferEnableDepthAndStencil = true;
	this._stage3DIndex = -1;
	away3d_core_managers_Stage3DProxy.vertexBufferCount = away3d_core_managers_Stage3DProxy.indexBufferCount = away3d_core_managers_Stage3DProxy.drawTriangleCount = 0;
	this._stage3DIndex = stage3DIndex;
	this._stage3D = stage3D;
	this._stage3D.set_x(0);
	this._stage3D.set_y(0);
	this._stage3D.visible = true;
	this._stage3DManager = stage3DManager;
	this._viewPort = new openfl_geom_Rectangle();
	this._enableDepthAndStencil = true;
	openfl_events_EventDispatcher.call(this);
	this._stage3D.addEventListener("context3DCreate",$bind(this,this.onContext3DUpdate),false,1000,false);
	this.forceSoftware = forceSoftware;
	this._profile = profile;
	if(this._stage3D.context3D != null) {
		this.onContext3DUpdate(null);
	} else {
		this.requestContext(forceSoftware,this._profile);
	}
};
$hxClasses["away3d.core.managers.Stage3DProxy"] = away3d_core_managers_Stage3DProxy;
away3d_core_managers_Stage3DProxy.__name__ = ["away3d","core","managers","Stage3DProxy"];
away3d_core_managers_Stage3DProxy.disposeVertexBuffer = function(vb) {
	vb.dispose();
	away3d_core_managers_Stage3DProxy.vertexBufferCount--;
};
away3d_core_managers_Stage3DProxy.disposeIndexBuffer = function(ib) {
	ib.dispose();
	away3d_core_managers_Stage3DProxy.indexBufferCount--;
};
away3d_core_managers_Stage3DProxy.uploadVertexBufferFromVector = function(vb,data,startVertex,numVertices) {
	vb.uploadFromVector(data,startVertex,numVertices);
	away3d_core_managers_Stage3DProxy._vbUploadCount++;
};
away3d_core_managers_Stage3DProxy.uploadIndexBufferFromVector = function(ib,data,startOffset,count) {
	ib.uploadFromVector(data,startOffset,count);
	away3d_core_managers_Stage3DProxy._ibUploadCount++;
};
away3d_core_managers_Stage3DProxy.__super__ = openfl_events_EventDispatcher;
away3d_core_managers_Stage3DProxy.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_context3D: null
	,_stage3DIndex: null
	,_usesSoftwareRendering: null
	,_profile: null
	,_stage3D: null
	,_activeProgram3D: null
	,_stage3DManager: null
	,_backBufferWidth: null
	,_backBufferHeight: null
	,_antiAlias: null
	,_enableDepthAndStencil: null
	,_backBufferEnableDepthAndStencil: null
	,_contextRequested: null
	,_renderTarget: null
	,_renderSurfaceSelector: null
	,_scissorRect: null
	,_color: null
	,_backBufferDirty: null
	,_viewPort: null
	,_enterFrame: null
	,_exitFrame: null
	,_viewportUpdated: null
	,_viewportDirty: null
	,_bufferClear: null
	,_mouse3DManager: null
	,_touch3DManager: null
	,notifyViewportUpdated: function() {
		if(this._viewportDirty) {
			return;
		}
		this._viewportDirty = true;
		if(!this.hasEventListener("ViewportUpdated")) {
			return;
		}
		this._viewportUpdated = new away3d_events_Stage3DEvent("ViewportUpdated");
		this.dispatchEvent(this._viewportUpdated);
	}
	,notifyEnterFrame: function() {
		if(!this.hasEventListener("enterFrame")) {
			return;
		}
		if(this._enterFrame == null) {
			this._enterFrame = new openfl_events_Event("enterFrame");
		}
		this.dispatchEvent(this._enterFrame);
	}
	,notifyExitFrame: function() {
		if(!this.hasEventListener("exitFrame")) {
			return;
		}
		if(this._exitFrame == null) {
			this._exitFrame = new openfl_events_Event("exitFrame");
		}
		this.dispatchEvent(this._exitFrame);
	}
	,forceSoftware: null
	,get_profile: function() {
		return this._profile;
	}
	,dispose: function() {
		this._stage3DManager.removeStage3DProxy(this);
		this._stage3D.removeEventListener("context3DCreate",$bind(this,this.onContext3DUpdate));
		this.freeContext3D();
		this._stage3D = null;
		this._stage3DManager = null;
		this._stage3DIndex = -1;
	}
	,configureBackBuffer: function(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil) {
		if(backBufferWidth < 50) {
			backBufferWidth = 50;
		}
		if(backBufferHeight < 50) {
			backBufferHeight = 50;
		}
		var oldWidth = this._backBufferWidth;
		var oldHeight = this._backBufferHeight;
		this._backBufferWidth = backBufferWidth;
		this._backBufferHeight = backBufferHeight;
		this._viewPort.width = backBufferWidth;
		this._viewPort.height = backBufferHeight;
		if(oldWidth != this._backBufferWidth || oldHeight != this._backBufferHeight) {
			this.notifyViewportUpdated();
		}
		this._antiAlias = antiAlias;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(this._context3D != null) {
			this._context3D.configureBackBuffer(backBufferWidth,backBufferHeight,antiAlias,enableDepthAndStencil);
		}
	}
	,get_enableDepthAndStencil: function() {
		return this._enableDepthAndStencil;
	}
	,set_enableDepthAndStencil: function(enableDepthAndStencil) {
		this._enableDepthAndStencil = enableDepthAndStencil;
		this._backBufferDirty = true;
		return enableDepthAndStencil;
	}
	,get_renderTarget: function() {
		return this._renderTarget;
	}
	,get_renderSurfaceSelector: function() {
		return this._renderSurfaceSelector;
	}
	,setRenderTarget: function(target,enableDepthAndStencil,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		if(this._renderTarget == target && surfaceSelector == this._renderSurfaceSelector && this._enableDepthAndStencil == enableDepthAndStencil) {
			return;
		}
		this._renderTarget = target;
		this._renderSurfaceSelector = surfaceSelector;
		this._enableDepthAndStencil = enableDepthAndStencil;
		if(target != null) {
			this._context3D.setRenderToTexture(target,enableDepthAndStencil,this._antiAlias,surfaceSelector);
		} else {
			this._context3D.setRenderToBackBuffer();
		}
	}
	,clear: function() {
		if(this._context3D == null) {
			return;
		}
		if(this._backBufferDirty) {
			this.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			this._backBufferDirty = false;
		}
		this._context3D.clear((this._color >> 16 & 255) / 255.0,(this._color >> 8 & 255) / 255.0,(this._color & 255) / 255.0,(this._color >> 24 & 255) / 255.0);
		this._bufferClear = true;
	}
	,present: function() {
		if(this._context3D == null) {
			return;
		}
		this._context3D.present();
		this._activeProgram3D = null;
		if(this._mouse3DManager != null) {
			this._mouse3DManager.fireMouseEvents();
		}
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if((type == "enterFrame" || type == "exitFrame") && !away3d_core_managers_Stage3DProxy._frameEventDriver.hasEventListener("enterFrame")) {
			away3d_core_managers_Stage3DProxy._frameEventDriver.addEventListener("enterFrame",$bind(this,this.onEnterFrame),useCapture,priority,useWeakReference);
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		if(!this.hasEventListener("enterFrame") && !this.hasEventListener("exitFrame") && away3d_core_managers_Stage3DProxy._frameEventDriver.hasEventListener("enterFrame")) {
			away3d_core_managers_Stage3DProxy._frameEventDriver.removeEventListener("enterFrame",$bind(this,this.onEnterFrame),useCapture);
		}
	}
	,get_scissorRect: function() {
		return this._scissorRect;
	}
	,set_scissorRect: function(value) {
		this._scissorRect = value;
		this._context3D.setScissorRectangle(this._scissorRect);
		return value;
	}
	,get_stage3DIndex: function() {
		return this._stage3DIndex;
	}
	,get_stage3D: function() {
		return this._stage3D;
	}
	,get_context3D: function() {
		return this._context3D;
	}
	,get_driverInfo: function() {
		if(this._context3D != null) {
			return this._context3D.driverInfo;
		} else {
			return null;
		}
	}
	,get_usesSoftwareRendering: function() {
		return this._usesSoftwareRendering;
	}
	,get_x: function() {
		return this._stage3D.get_x();
	}
	,set_x: function(value) {
		if(this._viewPort.x == value) {
			return value;
		}
		this._stage3D.set_x(this._viewPort.x = value);
		this.notifyViewportUpdated();
		return value;
	}
	,get_y: function() {
		return this._stage3D.get_y();
	}
	,set_y: function(value) {
		if(this._viewPort.y == value) {
			return value;
		}
		this._stage3D.set_y(this._viewPort.y = value);
		this.notifyViewportUpdated();
		return value;
	}
	,get_width: function() {
		return this._backBufferWidth;
	}
	,set_width: function(width) {
		if(this._viewPort.width == width) {
			return width;
		}
		if(width < 50) {
			width = 50;
		}
		this._viewPort.width = this._backBufferWidth = width;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return width;
	}
	,get_height: function() {
		return this._backBufferHeight;
	}
	,set_height: function(height) {
		if(this._viewPort.height == height) {
			return height;
		}
		if(height < 50) {
			height = 50;
		}
		this._viewPort.height = this._backBufferHeight = height;
		this._backBufferDirty = true;
		this.notifyViewportUpdated();
		return height;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		this._backBufferDirty = true;
		return antiAlias;
	}
	,get_viewPort: function() {
		this._viewportDirty = false;
		return this._viewPort;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(color) {
		this._color = color;
		return color;
	}
	,get_visible: function() {
		return this._stage3D.visible;
	}
	,set_visible: function(value) {
		this._stage3D.visible = value;
		return value;
	}
	,get_bufferClear: function() {
		return this._bufferClear;
	}
	,set_bufferClear: function(newBufferClear) {
		this._bufferClear = newBufferClear;
		return newBufferClear;
	}
	,get_mouse3DManager: function() {
		return this._mouse3DManager;
	}
	,set_mouse3DManager: function(value) {
		this._mouse3DManager = value;
		return value;
	}
	,get_touch3DManager: function() {
		return this._touch3DManager;
	}
	,set_touch3DManager: function(value) {
		this._touch3DManager = value;
		return value;
	}
	,freeContext3D: function() {
		if(this._context3D != null) {
			this._context3D.dispose();
			this.dispatchEvent(new away3d_events_Stage3DEvent("Context3DDisposed"));
		}
		this._context3D = null;
	}
	,onContext3DUpdate: function(event) {
		if(this._stage3D.context3D != null) {
			var hadContext = this._context3D != null;
			this._context3D = this._stage3D.context3D;
			this._context3D.set_enableErrorChecking(away3d_debug_Debug.active);
			this._usesSoftwareRendering = this._context3D.driverInfo.indexOf("Software") == 0;
			if(this._backBufferWidth > 0 && this._backBufferHeight > 0) {
				this._context3D.configureBackBuffer(this._backBufferWidth,this._backBufferHeight,this._antiAlias,this._enableDepthAndStencil);
			}
			this.dispatchEvent(new away3d_events_Stage3DEvent(hadContext ? "Context3DRecreated" : "Context3DCreated"));
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Rendering context lost!"));
		}
	}
	,requestContext: function(forceSoftware,profile) {
		if(profile == null) {
			profile = "baseline";
		}
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(!this._usesSoftwareRendering) {
			this._usesSoftwareRendering = forceSoftware;
		}
		this._profile = profile;
		var renderMode = forceSoftware ? 1 : 0;
		if(profile == "baseline") {
			this._stage3D.requestContext3D(renderMode);
		} else {
			try {
				this._stage3D.requestContext3D(renderMode,openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString(profile));
			} catch( error ) {
				haxe_CallStack.lastException = error;
				throw new js__$Boot_HaxeError("An error occurred creating a context using the given profile. Profiles are not supported for the SDK this was compiled with.");
			}
		}
		this._contextRequested = true;
	}
	,onEnterFrame: function(event) {
		if(this._context3D == null) {
			return;
		}
		this.clear();
		this.notifyEnterFrame();
		this.present();
		this.notifyExitFrame();
	}
	,recoverFromDisposal: function() {
		if(this._context3D == null) {
			return false;
		}
		if(this._context3D.driverInfo == "Disposed") {
			this._context3D = null;
			this.dispatchEvent(new away3d_events_Stage3DEvent("Context3DDisposed"));
			return false;
		}
		return true;
	}
	,clearDepthBuffer: function() {
		if(this._context3D == null) {
			return;
		}
		this._context3D.clear(0,0,0,1,1,0,2);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		away3d_core_managers_Stage3DProxy.vertexBufferCount++;
		return this._context3D.createVertexBuffer(numVertices,data32PerVertex);
	}
	,createIndexBuffer: function(numIndices) {
		away3d_core_managers_Stage3DProxy.indexBufferCount++;
		return this._context3D.createIndexBuffer(numIndices);
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		away3d_core_managers_Stage3DProxy.drawTriangleCount++;
		this._context3D.drawTriangles(indexBuffer,firstIndex,numTriangles);
	}
	,__class__: away3d_core_managers_Stage3DProxy
});
var away3d_core_managers_Touch3DManager = function() {
	this._touchPicker = away3d_core_pick_PickingType.RAYCAST_FIRST_ENCOUNTERED;
	this._touchMoveEvent = new openfl_events_TouchEvent("touchMove");
	this._nullVector = new openfl_geom_Vector3D();
	this._updateDirty = true;
	this._touchPoints = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._touchPointFromId = new haxe_ds_IntMap();
	away3d_core_managers_Touch3DManager._collidingObjectFromTouchId = new haxe_ds_IntMap();
	away3d_core_managers_Touch3DManager._previousCollidingObjectFromTouchId = new haxe_ds_IntMap();
};
$hxClasses["away3d.core.managers.Touch3DManager"] = away3d_core_managers_Touch3DManager;
away3d_core_managers_Touch3DManager.__name__ = ["away3d","core","managers","Touch3DManager"];
away3d_core_managers_Touch3DManager.prototype = {
	_updateDirty: null
	,_nullVector: null
	,_numTouchPoints: null
	,_touchPoint: null
	,_collidingObject: null
	,_previousCollidingObject: null
	,_touchPoints: null
	,_touchPointFromId: null
	,_touchMoveEvent: null
	,_forceTouchMove: null
	,_touchPicker: null
	,_view: null
	,updateCollider: function() {
		if(this._forceTouchMove || this._updateDirty) {
			var _g1 = 0;
			var _g = this._numTouchPoints;
			while(_g1 < _g) {
				var i = _g1++;
				this._touchPoint = this._touchPoints.get(i);
				this._collidingObject = this._touchPicker.getViewCollision(this._touchPoint.x,this._touchPoint.y,this._view);
				var v = this._collidingObject;
				away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[this._touchPoint.id] = v;
			}
		}
	}
	,fireTouchEvents: function() {
		var i;
		var len;
		var event;
		var dispatcher;
		var _g1 = 0;
		var _g = this._numTouchPoints;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._touchPoint = this._touchPoints.get(i1);
			this._collidingObject = away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[this._touchPoint.id];
			this._previousCollidingObject = away3d_core_managers_Touch3DManager._previousCollidingObjectFromTouchId.h[this._touchPoint.id];
			if(this._collidingObject != this._previousCollidingObject) {
				if(this._previousCollidingObject != null) {
					this.queueDispatch("touchOut3d",this._touchMoveEvent,this._previousCollidingObject,this._touchPoint);
				}
				if(this._collidingObject != null) {
					this.queueDispatch("touchOver3d",this._touchMoveEvent,this._collidingObject,this._touchPoint);
				}
			}
			if(this._forceTouchMove && this._collidingObject != null) {
				this.queueDispatch("touchMove3d",this._touchMoveEvent,this._collidingObject,this._touchPoint);
			}
		}
		len = away3d_core_managers_Touch3DManager._queuedEvents.get_length();
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i2 = _g11++;
			event = away3d_core_managers_Touch3DManager._queuedEvents.get(i2);
			dispatcher = event.object;
			while(dispatcher != null && !dispatcher._ancestorsAllowMouseEnabled) dispatcher = dispatcher.get_parent();
			if(dispatcher != null) {
				dispatcher.dispatchEvent(event);
			}
		}
		away3d_core_managers_Touch3DManager._queuedEvents.set_length(0);
		this._updateDirty = false;
		var _g12 = 0;
		var _g3 = this._numTouchPoints;
		while(_g12 < _g3) {
			var i3 = _g12++;
			this._touchPoint = this._touchPoints.get(i3);
			var v = away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[this._touchPoint.id];
			away3d_core_managers_Touch3DManager._previousCollidingObjectFromTouchId.h[this._touchPoint.id] = v;
		}
	}
	,enableTouchListeners: function(view) {
		view.addEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.addEventListener("touchMove",$bind(this,this.onTouchMove));
		view.addEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,disableTouchListeners: function(view) {
		view.removeEventListener("touchBegin",$bind(this,this.onTouchBegin));
		view.removeEventListener("touchMove",$bind(this,this.onTouchMove));
		view.removeEventListener("touchEnd",$bind(this,this.onTouchEnd));
	}
	,dispose: function() {
		this._touchPicker.dispose();
		this._touchPoints = null;
		this._touchPointFromId = null;
		away3d_core_managers_Touch3DManager._collidingObjectFromTouchId = null;
		away3d_core_managers_Touch3DManager._previousCollidingObjectFromTouchId = null;
	}
	,queueDispatch: function(emitType,sourceEvent,collider,touch) {
		var event = new away3d_events_TouchEvent3D(emitType);
		event.ctrlKey = sourceEvent.ctrlKey;
		event.altKey = sourceEvent.altKey;
		event.shiftKey = sourceEvent.shiftKey;
		event.screenX = touch.x;
		event.screenY = touch.y;
		event.touchPointID = touch.id;
		if(collider != null) {
			event.object = collider.entity;
			event.renderable = collider.renderable;
			event.uv = collider.uv;
			event.localPosition = collider.localPosition != null ? collider.localPosition.clone() : null;
			event.localNormal = collider.localNormal != null ? collider.localNormal.clone() : null;
			event.index = collider.index;
			event.subGeometryIndex = collider.subGeometryIndex;
		} else {
			event.uv = null;
			event.object = null;
			event.localPosition = this._nullVector;
			event.localNormal = this._nullVector;
			event.index = 0;
			event.subGeometryIndex = 0;
		}
		away3d_core_managers_Touch3DManager._queuedEvents.push(event);
	}
	,onTouchBegin: function(event) {
		var touch = new away3d_core_managers_TouchPoint();
		touch.id = event.touchPointID;
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._numTouchPoints++;
		this._touchPoints.push(touch);
		this._touchPointFromId.h[touch.id] = touch;
		this.updateCollider();
		this._collidingObject = away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[touch.id];
		if(this._collidingObject != null) {
			this.queueDispatch("touchBegin3d",event,this._collidingObject,touch);
		}
		this._updateDirty = true;
	}
	,onTouchMove: function(event) {
		var touch = this._touchPointFromId.h[event.touchPointID];
		if(touch == null) {
			return;
		}
		touch.x = event.stageX;
		touch.y = event.stageY;
		this._collidingObject = away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[touch.id];
		if(this._collidingObject != null) {
			this.queueDispatch("touchMove3d",this._touchMoveEvent = event,this._collidingObject,touch);
		}
		this._updateDirty = true;
	}
	,onTouchEnd: function(event) {
		var touch = this._touchPointFromId.h[event.touchPointID];
		if(touch == null) {
			return;
		}
		this._collidingObject = away3d_core_managers_Touch3DManager._collidingObjectFromTouchId.h[touch.id];
		if(this._collidingObject != null) {
			this.queueDispatch("touchEnd3d",event,this._collidingObject,touch);
		}
		this._touchPointFromId.remove(touch.id);
		this._numTouchPoints--;
		this._touchPoints.splice(this._touchPoints.indexOf(touch,0),1);
		this._updateDirty = true;
	}
	,get_forceTouchMove: function() {
		return this._forceTouchMove;
	}
	,set_forceTouchMove: function(value) {
		this._forceTouchMove = value;
		return value;
	}
	,get_touchPicker: function() {
		return this._touchPicker;
	}
	,set_touchPicker: function(value) {
		this._touchPicker = value;
		return value;
	}
	,set_view: function(value) {
		this._view = value;
		return value;
	}
	,__class__: away3d_core_managers_Touch3DManager
};
var away3d_core_managers_TouchPoint = function() {
};
$hxClasses["away3d.core.managers.TouchPoint"] = away3d_core_managers_TouchPoint;
away3d_core_managers_TouchPoint.__name__ = ["away3d","core","managers","TouchPoint"];
away3d_core_managers_TouchPoint.prototype = {
	id: null
	,x: null
	,y: null
	,__class__: away3d_core_managers_TouchPoint
};
var away3d_core_math_MathConsts = function() { };
$hxClasses["away3d.core.math.MathConsts"] = away3d_core_math_MathConsts;
away3d_core_math_MathConsts.__name__ = ["away3d","core","math","MathConsts"];
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
};
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a1.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a1[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2.0 * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return new openfl_geom_Matrix3D(vector);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		m.rawData.set(i,thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.append(new openfl_geom_Matrix3D(vector));
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g1 = this.rawData;
		_g1.set(13,_g1.get(13) + y);
		var _g2 = this.rawData;
		_g2.set(14,_g2.get(14) + z);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i + index,this.rawData.get(i));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = m.rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) {
			scale.z = -scale.z;
		}
		var _g = mr;
		_g.set(0,_g.get(0) / scale.x);
		var _g1 = mr;
		_g1.set(1,_g1.get(1) / scale.x);
		var _g2 = mr;
		_g2.set(2,_g2.get(2) / scale.x);
		var _g3 = mr;
		_g3.set(4,_g3.get(4) / scale.y);
		var _g4 = mr;
		_g4.set(5,_g4.get(5) / scale.y);
		var _g5 = mr;
		_g5.set(6,_g5.get(6) / scale.y);
		var _g6 = mr;
		_g6.set(8,_g6.get(8) / scale.z);
		var _g7 = mr;
		_g7.set(9,_g7.get(9) / scale.z);
		var _g8 = mr;
		_g8.set(10,_g8.get(10) / scale.z);
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(3),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(7),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.rawData.set(i,this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz = 0;
		ty = tz;
		tx = ty;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.prepend(new openfl_geom_Matrix3D(vector));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle == null) {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		} else {
			var x1 = components.get(1).x;
			var y1 = components.get(1).y;
			var z1 = components.get(1).z;
			var w1 = components.get(1).w;
			if(orientationStyle == 0) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			this.rawData.set(0,(1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0]);
			this.rawData.set(1,(2 * x1 * y1 + 2 * w1 * z1) * scale[1]);
			this.rawData.set(2,(2 * x1 * z1 - 2 * w1 * y1) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x1 * y1 - 2 * w1 * z1) * scale[4]);
			this.rawData.set(5,(1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5]);
			this.rawData.set(6,(2 * y1 * z1 + 2 * w1 * x1) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x1 * z1 + 2 * w1 * y1) * scale[8]);
			this.rawData.set(9,(2 * y1 * z1 - 2 * w1 * x1) * scale[9]);
			this.rawData.set(10,(1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10]);
			this.rawData.set(11,0);
			this.rawData.set(12,components.get(0).x);
			this.rawData.set(13,components.get(0).y);
			this.rawData.set(14,components.get(0).z);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) {
			this.rawData.set(0,1e-15);
		}
		if(components.get(2).y == 0) {
			this.rawData.set(5,1e-15);
		}
		if(components.get(2).z == 0) {
			this.rawData.set(10,1e-15);
		}
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			vout.set(i,x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12));
			vout.set(i + 1,x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13));
			vout.set(i + 2,x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14));
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
};
var away3d_core_math_Matrix3DUtils = function() { };
$hxClasses["away3d.core.math.Matrix3DUtils"] = away3d_core_math_Matrix3DUtils;
away3d_core_math_Matrix3DUtils.__name__ = ["away3d","core","math","Matrix3DUtils"];
away3d_core_math_Matrix3DUtils.quaternion2matrix = function(quarternion,m) {
	var x = quarternion.x;
	var y = quarternion.y;
	var z = quarternion.z;
	var w = quarternion.w;
	var xx = x * x;
	var xy = x * y;
	var xz = x * z;
	var xw = x * w;
	var yy = y * y;
	var yz = y * z;
	var yw = y * w;
	var zz = z * z;
	var zw = z * w;
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	raw.set(0,1 - 2 * (yy + zz));
	raw.set(1,2 * (xy + zw));
	raw.set(2,2 * (xz - yw));
	raw.set(4,2 * (xy - zw));
	raw.set(5,1 - 2 * (xx + zz));
	raw.set(6,2 * (yz + xw));
	raw.set(8,2 * (xz + yw));
	raw.set(9,2 * (yz - xw));
	raw.set(10,1 - 2 * (xx + yy));
	raw.set(3,raw.set(7,raw.set(11,raw.set(12,raw.set(13,raw.set(14,0))))));
	raw.set(15,1);
	if(m != null) {
		m.copyRawDataFrom(raw);
		return m;
	} else {
		return new openfl_geom_Matrix3D(raw);
	}
};
away3d_core_math_Matrix3DUtils.getForward = function(m,v) {
	if(v == null) {
		v = new openfl_geom_Vector3D(0.0,0.0,0.0);
	}
	m.copyColumnTo(2,v);
	v.normalize();
	return v;
};
away3d_core_math_Matrix3DUtils.getUp = function(m,v) {
	if(v == null) {
		v = new openfl_geom_Vector3D(0.0,0.0,0.0);
	}
	m.copyColumnTo(1,v);
	v.normalize();
	return v;
};
away3d_core_math_Matrix3DUtils.getRight = function(m,v) {
	if(v == null) {
		v = new openfl_geom_Vector3D(0.0,0.0,0.0);
	}
	m.copyColumnTo(0,v);
	v.normalize();
	return v;
};
away3d_core_math_Matrix3DUtils.compare = function(m1,m2) {
	var r1 = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	var r2 = m2.rawData;
	m1.copyRawDataTo(r1);
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		if(r1.get(i) != r2.get(i)) {
			return false;
		}
	}
	return true;
};
away3d_core_math_Matrix3DUtils.lookAt = function(matrix,pos,dir,up) {
	var dirN;
	var upN;
	var lftN;
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	lftN = dir.crossProduct(up);
	lftN.normalize();
	upN = lftN.crossProduct(dir);
	upN.normalize();
	dirN = dir.clone();
	dirN.normalize();
	raw.set(0,lftN.x);
	raw.set(1,upN.x);
	raw.set(2,-dirN.x);
	raw.set(3,0.0);
	raw.set(4,lftN.y);
	raw.set(5,upN.y);
	raw.set(6,-dirN.y);
	raw.set(7,0.0);
	raw.set(8,lftN.z);
	raw.set(9,upN.z);
	raw.set(10,-dirN.z);
	raw.set(11,0.0);
	raw.set(12,-lftN.dotProduct(pos));
	raw.set(13,-upN.dotProduct(pos));
	raw.set(14,dirN.dotProduct(pos));
	raw.set(15,1.0);
	matrix.copyRawDataFrom(raw);
};
away3d_core_math_Matrix3DUtils.reflection = function(plane,target) {
	if(target == null) {
		target = new openfl_geom_Matrix3D();
	}
	var a = plane.a;
	var b = plane.b;
	var c = plane.c;
	var d = plane.d;
	var rawData = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	var ab2 = -2 * a * b;
	var ac2 = -2 * a * c;
	var bc2 = -2 * b * c;
	rawData.set(0,1 - 2 * a * a);
	rawData.set(4,ab2);
	rawData.set(8,ac2);
	rawData.set(12,-2 * a * d);
	rawData.set(1,ab2);
	rawData.set(5,1 - 2 * b * b);
	rawData.set(9,bc2);
	rawData.set(13,-2 * b * d);
	rawData.set(2,ac2);
	rawData.set(6,bc2);
	rawData.set(10,1 - 2 * c * c);
	rawData.set(14,-2 * c * d);
	rawData.set(3,0);
	rawData.set(7,0);
	rawData.set(11,0);
	rawData.set(15,1);
	target.copyRawDataFrom(rawData);
	return target;
};
away3d_core_math_Matrix3DUtils.decompose = function(sourceMatrix,orientationStyle) {
	if(orientationStyle == null) {
		orientationStyle = 1;
	}
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	sourceMatrix.copyRawDataTo(raw);
	var a = raw.get(0);
	var e = raw.get(1);
	var i = raw.get(2);
	var b = raw.get(4);
	var f = raw.get(5);
	var j = raw.get(6);
	var c = raw.get(8);
	var g = raw.get(9);
	var k = raw.get(10);
	var x = raw.get(12);
	var y = raw.get(13);
	var z = raw.get(14);
	var tx = Math.sqrt(a * a + e * e + i * i);
	var ty = Math.sqrt(b * b + f * f + j * j);
	var tz = Math.sqrt(c * c + g * g + k * k);
	var tw = 0;
	var scaleX = tx;
	var scaleY = ty;
	var scaleZ = tz;
	if(a * (f * k - j * g) - e * (b * k - j * c) + i * (b * g - f * c) < 0) {
		scaleZ = -scaleZ;
	}
	a /= scaleX;
	e /= scaleX;
	i /= scaleX;
	b /= scaleY;
	f /= scaleY;
	j /= scaleY;
	c /= scaleZ;
	g /= scaleZ;
	k /= scaleZ;
	if(orientationStyle == 1) {
		tx = Math.atan2(j,k);
		ty = Math.atan2(-i,Math.sqrt(a * a + e * e));
		var s1 = Math.sin(tx);
		var c1 = Math.cos(tx);
		tz = Math.atan2(s1 * c - c1 * b,c1 * f - s1 * g);
	} else if(orientationStyle == 0) {
		tw = Math.acos((a + f + k - 1) / 2);
		var len = Math.sqrt((j - g) * (j - g) + (c - i) * (c - i) + (e - b) * (e - b));
		tx = (j - g) / len;
		ty = (c - i) / len;
		tz = (e - b) / len;
	} else {
		var tr = a + f + k;
		if(tr > 0) {
			tw = Math.sqrt(1 + tr) / 2;
			tx = (j - g) / (4 * tw);
			ty = (c - i) / (4 * tw);
			tz = (e - b) / (4 * tw);
		} else if(a > f && a > k) {
			tx = Math.sqrt(1 + a - f - k) / 2;
			tw = (j - g) / (4 * tx);
			ty = (e + b) / (4 * tx);
			tz = (c + i) / (4 * tx);
		} else if(f > k) {
			ty = Math.sqrt(1 + f - a - k) / 2;
			tx = (e + b) / (4 * ty);
			tw = (c - i) / (4 * ty);
			tz = (j + g) / (4 * ty);
		} else {
			tz = Math.sqrt(1 + k - a - f) / 2;
			tx = (c + i) / (4 * tz);
			ty = (j + g) / (4 * tz);
			tw = (e - b) / (4 * tz);
		}
	}
	var v = away3d_core_math_Matrix3DUtils.CALCULATION_DECOMPOSE;
	v.get(0).x = x;
	v.get(0).y = y;
	v.get(0).z = z;
	v.get(1).x = tx;
	v.get(1).y = ty;
	v.get(1).z = tz;
	v.get(1).w = tw;
	v.get(2).x = scaleX;
	v.get(2).y = scaleY;
	v.get(2).z = scaleZ;
	return v;
};
away3d_core_math_Matrix3DUtils.transformVector = function(matrix,vector,result) {
	if(result == null) {
		result = new openfl_geom_Vector3D();
	}
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	matrix.copyRawDataTo(raw);
	var a = raw.get(0);
	var e = raw.get(1);
	var i = raw.get(2);
	var m = raw.get(3);
	var b = raw.get(4);
	var f = raw.get(5);
	var j = raw.get(6);
	var n = raw.get(7);
	var c = raw.get(8);
	var g = raw.get(9);
	var k = raw.get(10);
	var o = raw.get(11);
	var d = raw.get(12);
	var h = raw.get(13);
	var l = raw.get(14);
	var p = raw.get(15);
	var x = vector.x;
	var y = vector.y;
	var z = vector.z;
	result.x = a * x + b * y + c * z + d;
	result.y = e * x + f * y + g * z + h;
	result.z = i * x + j * y + k * z + l;
	result.w = m * x + n * y + o * z + p;
	return result;
};
away3d_core_math_Matrix3DUtils.deltaTransformVector = function(matrix,vector,result) {
	if(result == null) {
		result = new openfl_geom_Vector3D();
	}
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	matrix.copyRawDataTo(raw);
	var a = raw.get(0);
	var e = raw.get(1);
	var i = raw.get(2);
	var m = raw.get(3);
	var b = raw.get(4);
	var f = raw.get(5);
	var j = raw.get(6);
	var n = raw.get(7);
	var c = raw.get(8);
	var g = raw.get(9);
	var k = raw.get(10);
	var o = raw.get(11);
	var x = vector.x;
	var y = vector.y;
	var z = vector.z;
	result.x = a * x + b * y + c * z;
	result.y = e * x + f * y + g * z;
	result.z = i * x + j * y + k * z;
	result.w = m * x + n * y + o * z;
	return result;
};
away3d_core_math_Matrix3DUtils.getTranslation = function(transform,result) {
	if(result == null) {
		result = new openfl_geom_Vector3D();
	}
	transform.copyColumnTo(3,result);
	return result;
};
away3d_core_math_Matrix3DUtils.deltaTransformVectors = function(matrix,vin,vout) {
	var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
	matrix.copyRawDataTo(raw);
	var a = raw.get(0);
	var e = raw.get(1);
	var i = raw.get(2);
	var m = raw.get(3);
	var b = raw.get(4);
	var f = raw.get(5);
	var j = raw.get(6);
	var n = raw.get(7);
	var c = raw.get(8);
	var g = raw.get(9);
	var k = raw.get(10);
	var o = raw.get(11);
	var outIndex = 0;
	var length = vin.get_length();
	var index = 0;
	while(index < length) {
		var x = vin.get(index);
		var y = vin.get(index + 1);
		var z = vin.get(index + 2);
		vout.set(outIndex++,a * x + b * y + c * z);
		vout.set(outIndex++,e * x + f * y + g * z);
		vout.set(outIndex++,i * x + j * y + k * z);
		index += 3;
	}
};
var away3d_core_math_Plane3D = function(a,b,c,d) {
	if(d == null) {
		d = 0;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 0;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	if(a == 0 && b == 0) {
		this._alignment = 1;
	} else if(b == 0 && c == 0) {
		this._alignment = 2;
	} else if(a == 0 && c == 0) {
		this._alignment = 3;
	} else {
		this._alignment = 0;
	}
};
$hxClasses["away3d.core.math.Plane3D"] = away3d_core_math_Plane3D;
away3d_core_math_Plane3D.__name__ = ["away3d","core","math","Plane3D"];
away3d_core_math_Plane3D.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,_alignment: null
	,fromPoints: function(p0,p1,p2) {
		var d1x = p1.x - p0.x;
		var d1y = p1.y - p0.y;
		var d1z = p1.z - p0.z;
		var d2x = p2.x - p0.x;
		var d2y = p2.y - p0.y;
		var d2z = p2.z - p0.z;
		this.a = d1y * d2z - d1z * d2y;
		this.b = d1z * d2x - d1x * d2z;
		this.c = d1x * d2y - d1y * d2x;
		this.d = this.a * p0.x + this.b * p0.y + this.c * p0.z;
		if(this.a == 0 && this.b == 0) {
			this._alignment = 1;
		} else if(this.b == 0 && this.c == 0) {
			this._alignment = 2;
		} else if(this.a == 0 && this.c == 0) {
			this._alignment = 3;
		} else {
			this._alignment = 0;
		}
	}
	,fromNormalAndPoint: function(normal,point) {
		this.a = normal.x;
		this.b = normal.y;
		this.c = normal.z;
		this.d = this.a * point.x + this.b * point.y + this.c * point.z;
		if(this.a == 0 && this.b == 0) {
			this._alignment = 1;
		} else if(this.b == 0 && this.c == 0) {
			this._alignment = 2;
		} else if(this.a == 0 && this.c == 0) {
			this._alignment = 3;
		} else {
			this._alignment = 0;
		}
	}
	,normalize: function() {
		var len = 1 / Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
		this.a *= len;
		this.b *= len;
		this.c *= len;
		this.d *= len;
		return this;
	}
	,distance: function(p) {
		if(this._alignment == 2) {
			return this.a * p.x - this.d;
		} else if(this._alignment == 3) {
			return this.b * p.y - this.d;
		} else if(this._alignment == 1) {
			return this.c * p.z - this.d;
		} else {
			return this.a * p.x + this.b * p.y + this.c * p.z - this.d;
		}
	}
	,classifyPoint: function(p,epsilon) {
		if(epsilon == null) {
			epsilon = 0.01;
		}
		if(this.d != this.d) {
			return 1;
		}
		var len;
		if(this._alignment == 2) {
			len = this.a * p.x - this.d;
		} else if(this._alignment == 3) {
			len = this.b * p.y - this.d;
		} else if(this._alignment == 1) {
			len = this.c * p.z - this.d;
		} else {
			len = this.a * p.x + this.b * p.y + this.c * p.z - this.d;
		}
		if(len < -epsilon) {
			return 0;
		} else if(len > epsilon) {
			return 1;
		} else {
			return 2;
		}
	}
	,toString: function() {
		return "Plane3D [a:" + this.a + ", b:" + this.b + ", c:" + this.c + ", d:" + this.d + "].";
	}
	,__class__: away3d_core_math_Plane3D
};
var away3d_core_math_PlaneClassification = function() { };
$hxClasses["away3d.core.math.PlaneClassification"] = away3d_core_math_PlaneClassification;
away3d_core_math_PlaneClassification.__name__ = ["away3d","core","math","PlaneClassification"];
var away3d_core_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["away3d.core.math.Quaternion"] = away3d_core_math_Quaternion;
away3d_core_math_Quaternion.__name__ = ["away3d","core","math","Quaternion"];
away3d_core_math_Quaternion.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_magnitude: function() {
		return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,multiply: function(qa,qb) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		this.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
		this.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;
		this.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;
		this.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;
	}
	,multiplyVector: function(vector,target) {
		if(target == null) {
			target = new away3d_core_math_Quaternion();
		}
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		target.w = -this.x * x2 - this.y * y2 - this.z * z2;
		target.x = this.w * x2 + this.y * z2 - this.z * y2;
		target.y = this.w * y2 - this.x * z2 + this.z * x2;
		target.z = this.w * z2 + this.x * y2 - this.y * x2;
		return target;
	}
	,fromAxisAngle: function(axis,angle) {
		var sin_a = Math.sin(angle / 2);
		var cos_a = Math.cos(angle / 2);
		this.x = axis.x * sin_a;
		this.y = axis.y * sin_a;
		this.z = axis.z * sin_a;
		this.w = cos_a;
		this.normalize();
	}
	,slerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var dot = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;
		if(dot < 0) {
			dot = -dot;
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		if(dot < 0.95) {
			var angle = Math.acos(dot);
			var s = 1 / Math.sin(angle);
			var s1 = Math.sin(angle * (1 - t)) * s;
			var s2 = Math.sin(angle * t) * s;
			this.w = w1 * s1 + w2 * s2;
			this.x = x1 * s1 + x2 * s2;
			this.y = y1 * s1 + y2 * s2;
			this.z = z1 * s1 + z2 * s2;
		} else {
			this.w = w1 + t * (w2 - w1);
			this.x = x1 + t * (x2 - x1);
			this.y = y1 + t * (y2 - y1);
			this.z = z1 + t * (z2 - z1);
			var len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
			this.w *= len;
			this.x *= len;
			this.y *= len;
			this.z *= len;
		}
	}
	,lerp: function(qa,qb,t) {
		var w1 = qa.w;
		var x1 = qa.x;
		var y1 = qa.y;
		var z1 = qa.z;
		var w2 = qb.w;
		var x2 = qb.x;
		var y2 = qb.y;
		var z2 = qb.z;
		var len;
		if(w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2 < 0) {
			w2 = -w2;
			x2 = -x2;
			y2 = -y2;
			z2 = -z2;
		}
		this.w = w1 + t * (w2 - w1);
		this.x = x1 + t * (x2 - x1);
		this.y = y1 + t * (y2 - y1);
		this.z = z1 + t * (z2 - z1);
		len = 1.0 / Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
		this.w *= len;
		this.x *= len;
		this.y *= len;
		this.z *= len;
	}
	,fromEulerAngles: function(ax,ay,az) {
		var halfX = ax * .5;
		var halfY = ay * .5;
		var halfZ = az * .5;
		var cosX = Math.cos(halfX);
		var sinX = Math.sin(halfX);
		var cosY = Math.cos(halfY);
		var sinY = Math.sin(halfY);
		var cosZ = Math.cos(halfZ);
		var sinZ = Math.sin(halfZ);
		this.w = cosX * cosY * cosZ + sinX * sinY * sinZ;
		this.x = sinX * cosY * cosZ - cosX * sinY * sinZ;
		this.y = cosX * sinY * cosZ + sinX * cosY * sinZ;
		this.z = cosX * cosY * sinZ - sinX * sinY * cosZ;
	}
	,toEulerAngles: function(target) {
		if(target == null) {
			target = new openfl_geom_Vector3D();
		}
		target.x = Math.atan2(2 * (this.w * this.x + this.y * this.z),1 - 2 * (this.x * this.x + this.y * this.y));
		target.y = Math.asin(2 * (this.w * this.y - this.z * this.x));
		target.z = Math.atan2(2 * (this.w * this.z + this.x * this.y),1 - 2 * (this.y * this.y + this.z * this.z));
		return target;
	}
	,normalize: function(val) {
		if(val == null) {
			val = 1;
		}
		var mag = val / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		this.x *= mag;
		this.y *= mag;
		this.z *= mag;
		this.w *= mag;
	}
	,toString: function() {
		return "{x:" + this.x + " y:" + this.y + " z:" + this.z + " w:" + this.w + "}";
	}
	,toMatrix3D: function(target) {
		var rawData = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		rawData.set(0,xx - yy - zz + ww);
		rawData.set(4,xy2 - zw2);
		rawData.set(8,xz2 + yw2);
		rawData.set(12,0);
		rawData.set(1,xy2 + zw2);
		rawData.set(5,-xx + yy - zz + ww);
		rawData.set(9,yz2 - xw2);
		rawData.set(13,0);
		rawData.set(2,xz2 - yw2);
		rawData.set(6,yz2 + xw2);
		rawData.set(10,-xx - yy + zz + ww);
		rawData.set(14,0);
		rawData.set(3,0.0);
		rawData.set(7,0.0);
		rawData.set(11,0);
		rawData.set(15,1);
		if(target == null) {
			return new openfl_geom_Matrix3D(rawData);
		}
		target.copyRawDataFrom(rawData);
		return target;
	}
	,fromMatrix: function(matrix) {
		var v = matrix.decompose(2).get(1);
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
	}
	,toRawData: function(target,exclude4thRow) {
		if(exclude4thRow == null) {
			exclude4thRow = false;
		}
		var xy2 = 2.0 * this.x * this.y;
		var xz2 = 2.0 * this.x * this.z;
		var xw2 = 2.0 * this.x * this.w;
		var yz2 = 2.0 * this.y * this.z;
		var yw2 = 2.0 * this.y * this.w;
		var zw2 = 2.0 * this.z * this.w;
		var xx = this.x * this.x;
		var yy = this.y * this.y;
		var zz = this.z * this.z;
		var ww = this.w * this.w;
		target.set(0,xx - yy - zz + ww);
		target.set(1,xy2 - zw2);
		target.set(2,xz2 + yw2);
		target.set(4,xy2 + zw2);
		target.set(5,-xx + yy - zz + ww);
		target.set(6,yz2 - xw2);
		target.set(8,xz2 - yw2);
		target.set(9,yz2 + xw2);
		target.set(10,-xx - yy + zz + ww);
		target.set(3,target.set(7,target.set(11,0)));
		if(!exclude4thRow) {
			target.set(12,target.set(13,target.set(14,0)));
			target.set(15,1);
		}
	}
	,clone: function() {
		return new away3d_core_math_Quaternion(this.x,this.y,this.z,this.w);
	}
	,rotatePoint: function(vector,target) {
		var x1;
		var y1;
		var z1;
		var w1;
		var x2 = vector.x;
		var y2 = vector.y;
		var z2 = vector.z;
		if(target == null) {
			target = new openfl_geom_Vector3D();
		}
		w1 = -this.x * x2 - this.y * y2 - this.z * z2;
		x1 = this.w * x2 + this.y * z2 - this.z * y2;
		y1 = this.w * y2 - this.x * z2 + this.z * x2;
		z1 = this.w * z2 + this.x * y2 - this.y * x2;
		target.x = -w1 * this.x + x1 * this.w - y1 * this.z + z1 * this.y;
		target.y = -w1 * this.y + x1 * this.z + y1 * this.w - z1 * this.x;
		target.z = -w1 * this.z - x1 * this.y + y1 * this.x + z1 * this.w;
		return target;
	}
	,copyFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
	}
	,__class__: away3d_core_math_Quaternion
};
var away3d_core_partition_NodeBase = function() {
	this._childNodes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._numEntities = 0;
	this._collectionMark = 0;
	this._numChildNodes = 0;
};
$hxClasses["away3d.core.partition.NodeBase"] = away3d_core_partition_NodeBase;
away3d_core_partition_NodeBase.__name__ = ["away3d","core","partition","NodeBase"];
away3d_core_partition_NodeBase.prototype = {
	_parent: null
	,_childNodes: null
	,_numChildNodes: null
	,_debugPrimitive: null
	,_numEntities: null
	,_collectionMark: null
	,get_showDebugBounds: function() {
		return this._debugPrimitive != null;
	}
	,set_showDebugBounds: function(value) {
		if(this._debugPrimitive != null == value) {
			return value;
		}
		if(value) {
			this._debugPrimitive = this.createDebugBounds();
		} else {
			this._debugPrimitive.dispose();
			this._debugPrimitive = null;
		}
		var _g1 = 0;
		var _g = this._numChildNodes;
		while(_g1 < _g) {
			var i = _g1++;
			this._childNodes.get(i).set_showDebugBounds(value);
		}
		return value;
	}
	,get_parent: function() {
		return this._parent;
	}
	,addNode: function(node) {
		node._parent = this;
		this._numEntities += node._numEntities;
		this._childNodes.set(this._numChildNodes++,node);
		node.set_showDebugBounds(this._debugPrimitive != null);
		var numEntities = node._numEntities;
		node = this;
		while(true) {
			node._numEntities += numEntities;
			node = node._parent;
			if(!(node != null)) {
				break;
			}
		}
	}
	,removeNode: function(node) {
		var index = this._childNodes.indexOf(node,0);
		this._childNodes.set(index,this._childNodes.get(--this._numChildNodes));
		this._childNodes.pop();
		var numEntities = node._numEntities;
		node = this;
		while(true) {
			node._numEntities -= numEntities;
			node = node._parent;
			if(!(node != null)) {
				break;
			}
		}
	}
	,isInFrustum: function(planes,numPlanes) {
		return true;
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		return true;
	}
	,findPartitionForEntity: function(entity) {
		return this;
	}
	,acceptTraverser: function(traverser) {
		if(this._numEntities == 0 && this._debugPrimitive == null) {
			return;
		}
		if(traverser.enterNode(this)) {
			var i = 0;
			while(i < this._numChildNodes) this._childNodes.get(i++).acceptTraverser(traverser);
			if(this._debugPrimitive != null) {
				traverser.applyRenderable(this._debugPrimitive);
			}
		}
	}
	,createDebugBounds: function() {
		return null;
	}
	,get_numEntities: function() {
		return this._numEntities;
	}
	,updateNumEntities: function(value) {
		var diff = value - this._numEntities;
		var node = this;
		while(true) {
			node._numEntities += diff;
			node = node._parent;
			if(!(node != null)) {
				break;
			}
		}
	}
	,__class__: away3d_core_partition_NodeBase
};
var away3d_core_partition_EntityNode = function(entity) {
	away3d_core_partition_NodeBase.call(this);
	this._entity = entity;
	this._numEntities = 1;
};
$hxClasses["away3d.core.partition.EntityNode"] = away3d_core_partition_EntityNode;
away3d_core_partition_EntityNode.__name__ = ["away3d","core","partition","EntityNode"];
away3d_core_partition_EntityNode.__super__ = away3d_core_partition_NodeBase;
away3d_core_partition_EntityNode.prototype = $extend(away3d_core_partition_NodeBase.prototype,{
	_entity: null
	,_updateQueueNext: null
	,get_entity: function() {
		return this._entity;
	}
	,acceptTraverser: function(traverser) {
		traverser.applyEntity(this._entity);
	}
	,removeFromParent: function() {
		if(this._parent != null) {
			this._parent.removeNode(this);
		}
		this._parent = null;
	}
	,isInFrustum: function(planes,numPlanes) {
		if(!this._entity.get_isVisible()) {
			return false;
		}
		return this._entity.get_worldBounds().isInFrustum(planes,numPlanes);
	}
	,isIntersectingRay: function(rayPosition,rayDirection) {
		if(!this._entity.get_isVisible()) {
			return false;
		}
		return this._entity.isIntersectingRay(rayPosition,rayDirection);
	}
	,__class__: away3d_core_partition_EntityNode
});
var away3d_core_partition_CameraNode = function(camera) {
	away3d_core_partition_EntityNode.call(this,camera);
};
$hxClasses["away3d.core.partition.CameraNode"] = away3d_core_partition_CameraNode;
away3d_core_partition_CameraNode.__name__ = ["away3d","core","partition","CameraNode"];
away3d_core_partition_CameraNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_CameraNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	acceptTraverser: function(traverser) {
	}
	,__class__: away3d_core_partition_CameraNode
});
var away3d_core_partition_DirectionalLightNode = function(light) {
	away3d_core_partition_EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.DirectionalLightNode"] = away3d_core_partition_DirectionalLightNode;
away3d_core_partition_DirectionalLightNode.__name__ = ["away3d","core","partition","DirectionalLightNode"];
away3d_core_partition_DirectionalLightNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_DirectionalLightNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyDirectionalLight(this._light);
		}
	}
	,__class__: away3d_core_partition_DirectionalLightNode
});
var away3d_core_partition_LightNode = function(light) {
	away3d_core_partition_EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightNode"] = away3d_core_partition_LightNode;
away3d_core_partition_LightNode.__name__ = ["away3d","core","partition","LightNode"];
away3d_core_partition_LightNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_LightNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyUnknownLight(this._light);
		}
	}
	,__class__: away3d_core_partition_LightNode
});
var away3d_core_partition_LightProbeNode = function(light) {
	away3d_core_partition_EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.LightProbeNode"] = away3d_core_partition_LightProbeNode;
away3d_core_partition_LightProbeNode.__name__ = ["away3d","core","partition","LightProbeNode"];
away3d_core_partition_LightProbeNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_LightProbeNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyLightProbe(this._light);
		}
	}
	,__class__: away3d_core_partition_LightProbeNode
});
var away3d_core_partition_MeshNode = function(mesh) {
	away3d_core_partition_EntityNode.call(this,mesh);
	this._mesh = mesh;
};
$hxClasses["away3d.core.partition.MeshNode"] = away3d_core_partition_MeshNode;
away3d_core_partition_MeshNode.__name__ = ["away3d","core","partition","MeshNode"];
away3d_core_partition_MeshNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_MeshNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_mesh: null
	,get_mesh: function() {
		return this._mesh;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			var subs = this._mesh.get_subMeshes();
			var i = 0;
			var len = subs.get_length();
			while(i < len) traverser.applyRenderable(subs.get(i++));
		}
	}
	,__class__: away3d_core_partition_MeshNode
});
var away3d_core_partition_NullNode = function() {
	away3d_core_partition_NodeBase.call(this);
};
$hxClasses["away3d.core.partition.NullNode"] = away3d_core_partition_NullNode;
away3d_core_partition_NullNode.__name__ = ["away3d","core","partition","NullNode"];
away3d_core_partition_NullNode.__super__ = away3d_core_partition_NodeBase;
away3d_core_partition_NullNode.prototype = $extend(away3d_core_partition_NodeBase.prototype,{
	__class__: away3d_core_partition_NullNode
});
var away3d_core_partition_Partition3D = function(rootNode) {
	this._rootNode = rootNode;
	if(rootNode == null) {
		this._rootNode = new away3d_core_partition_NullNode();
	}
};
$hxClasses["away3d.core.partition.Partition3D"] = away3d_core_partition_Partition3D;
away3d_core_partition_Partition3D.__name__ = ["away3d","core","partition","Partition3D"];
away3d_core_partition_Partition3D.prototype = {
	_rootNode: null
	,_updatesMade: null
	,_updateQueue: null
	,get_showDebugBounds: function() {
		return this._rootNode.get_showDebugBounds();
	}
	,set_showDebugBounds: function(value) {
		this._rootNode.set_showDebugBounds(value);
		return value;
	}
	,traverse: function(traverser) {
		if(this._updatesMade) {
			this.updateEntities();
		}
		++away3d_core_traverse_PartitionTraverser._collectionMark;
		this._rootNode.acceptTraverser(traverser);
	}
	,markForUpdate: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t = this._updateQueue;
		while(t != null) {
			if(node == t) {
				return;
			}
			t = t._updateQueueNext;
		}
		node._updateQueueNext = this._updateQueue;
		this._updateQueue = node;
		this._updatesMade = true;
	}
	,removeEntity: function(entity) {
		var node = entity.getEntityPartitionNode();
		var t;
		node.removeFromParent();
		if(node == this._updateQueue) {
			this._updateQueue = node._updateQueueNext;
		} else {
			t = this._updateQueue;
			while(t != null && t._updateQueueNext != node) t = t._updateQueueNext;
			if(t != null) {
				t._updateQueueNext = node._updateQueueNext;
			}
		}
		node._updateQueueNext = null;
		if(this._updateQueue == null) {
			this._updatesMade = false;
		}
	}
	,updateEntities: function() {
		var node = this._updateQueue;
		var targetNode;
		var t;
		this._updateQueue = null;
		this._updatesMade = false;
		while(true) {
			targetNode = this._rootNode.findPartitionForEntity(node.get_entity());
			if(node.get_parent() != targetNode) {
				if(node != null) {
					node.removeFromParent();
				}
				targetNode.addNode(node);
			}
			t = node._updateQueueNext;
			node._updateQueueNext = null;
			node.get_entity().internalUpdate();
			node = t;
			if(!(node != null)) {
				break;
			}
		}
	}
	,__class__: away3d_core_partition_Partition3D
};
var away3d_core_partition_PointLightNode = function(light) {
	away3d_core_partition_EntityNode.call(this,light);
	this._light = light;
};
$hxClasses["away3d.core.partition.PointLightNode"] = away3d_core_partition_PointLightNode;
away3d_core_partition_PointLightNode.__name__ = ["away3d","core","partition","PointLightNode"];
away3d_core_partition_PointLightNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_PointLightNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_light: null
	,get_light: function() {
		return this._light;
	}
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyPointLight(this._light);
		}
	}
	,__class__: away3d_core_partition_PointLightNode
});
var away3d_core_partition_RenderableNode = function(renderable) {
	away3d_core_partition_EntityNode.call(this,js_Boot.__cast(renderable , away3d_entities_Entity));
	this._renderable = renderable;
};
$hxClasses["away3d.core.partition.RenderableNode"] = away3d_core_partition_RenderableNode;
away3d_core_partition_RenderableNode.__name__ = ["away3d","core","partition","RenderableNode"];
away3d_core_partition_RenderableNode.__super__ = away3d_core_partition_EntityNode;
away3d_core_partition_RenderableNode.prototype = $extend(away3d_core_partition_EntityNode.prototype,{
	_renderable: null
	,acceptTraverser: function(traverser) {
		if(traverser.enterNode(this)) {
			away3d_core_partition_EntityNode.prototype.acceptTraverser.call(this,traverser);
			traverser.applyRenderable(this._renderable);
		}
	}
	,__class__: away3d_core_partition_RenderableNode
});
var away3d_core_pick_IPicker = function() { };
$hxClasses["away3d.core.pick.IPicker"] = away3d_core_pick_IPicker;
away3d_core_pick_IPicker.__name__ = ["away3d","core","pick","IPicker"];
away3d_core_pick_IPicker.prototype = {
	set_onlyMouseEnabled: null
	,get_onlyMouseEnabled: null
	,getViewCollision: null
	,getSceneCollision: null
	,dispose: null
	,__class__: away3d_core_pick_IPicker
};
var away3d_core_pick_IPickingCollider = function() { };
$hxClasses["away3d.core.pick.IPickingCollider"] = away3d_core_pick_IPickingCollider;
away3d_core_pick_IPickingCollider.__name__ = ["away3d","core","pick","IPickingCollider"];
away3d_core_pick_IPickingCollider.prototype = {
	setLocalRay: null
	,testSubMeshCollision: null
	,__class__: away3d_core_pick_IPickingCollider
};
var away3d_core_pick_PickingCollisionVO = function(entity) {
	this.entity = entity;
};
$hxClasses["away3d.core.pick.PickingCollisionVO"] = away3d_core_pick_PickingCollisionVO;
away3d_core_pick_PickingCollisionVO.__name__ = ["away3d","core","pick","PickingCollisionVO"];
away3d_core_pick_PickingCollisionVO.prototype = {
	entity: null
	,localPosition: null
	,localNormal: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localRayPosition: null
	,localRayDirection: null
	,rayPosition: null
	,rayDirection: null
	,rayOriginIsInsideBounds: null
	,rayEntryDistance: null
	,renderable: null
	,__class__: away3d_core_pick_PickingCollisionVO
};
var away3d_core_pick_RaycastPicker = function(findClosestCollision) {
	this._onlyMouseEnabled = true;
	this._ignoredEntities = [];
	this._raycastCollector = new away3d_core_traverse_RaycastCollector();
	this._findClosestCollision = findClosestCollision;
	this._entities = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["away3d.core.pick.RaycastPicker"] = away3d_core_pick_RaycastPicker;
away3d_core_pick_RaycastPicker.__name__ = ["away3d","core","pick","RaycastPicker"];
away3d_core_pick_RaycastPicker.__interfaces__ = [away3d_core_pick_IPicker];
away3d_core_pick_RaycastPicker.prototype = {
	_findClosestCollision: null
	,_raycastCollector: null
	,_ignoredEntities: null
	,_onlyMouseEnabled: null
	,_entities: null
	,_numEntities: null
	,_hasCollisions: null
	,get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		if(collector.get_numMouseEnableds() == 0) {
			return null;
		}
		var rayPosition = view.unproject(x,y,0,away3d_core_pick_RaycastPicker.tempRayPosition);
		var rayDirection = view.unproject(x,y,1,away3d_core_pick_RaycastPicker.tempRayDirection);
		rayDirection.x -= rayPosition.x;
		rayDirection.y -= rayPosition.y;
		rayDirection.z -= rayPosition.z;
		this._numEntities = 0;
		var node = collector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			if(entity.get_isVisible() && entity.isIntersectingRay(rayPosition,rayDirection)) {
				this._entities.set(this._numEntities++,entity);
			}
			node = node.next;
		}
		if(this._numEntities == 0) {
			return null;
		}
		return this.getPickingCollisionVO();
	}
	,getSceneCollision: function(position,direction,scene) {
		this._raycastCollector.clear();
		this._raycastCollector.set_rayPosition(position);
		this._raycastCollector.set_rayDirection(direction);
		scene.traversePartitions(this._raycastCollector);
		this._numEntities = 0;
		var node = this._raycastCollector.get_entityHead();
		var entity;
		while(node != null) {
			entity = node.entity;
			if(this.isIgnored(entity)) {
				node = node.next;
				continue;
			}
			this._entities.set(this._numEntities++,entity);
			node = node.next;
		}
		if(this._numEntities == 0) {
			return null;
		}
		return this.getPickingCollisionVO();
	}
	,getEntityCollision: function(position,direction,entities) {
		this._numEntities = 0;
		var entity;
		var _g = 0;
		while(_g < entities.length) {
			var entity1 = entities[_g];
			++_g;
			if(entity1.isIntersectingRay(position,direction)) {
				this._entities.set(this._numEntities++,entity1);
			}
		}
		return this.getPickingCollisionVO();
	}
	,setIgnoreList: function(entities) {
		this._ignoredEntities = entities;
	}
	,isIgnored: function(entity) {
		if(this._onlyMouseEnabled && (!entity._ancestorsAllowMouseEnabled || !entity.get_mouseEnabled())) {
			return true;
		}
		var ignoredEntity;
		var _g = 0;
		var _g1 = this._ignoredEntities;
		while(_g < _g1.length) {
			var ignoredEntity1 = _g1[_g];
			++_g;
			if(ignoredEntity1 == entity) {
				return true;
			}
		}
		return false;
	}
	,sortOnNearT: function(entity1,entity2) {
		if(entity1.get_pickingCollisionVO().rayEntryDistance > entity2.get_pickingCollisionVO().rayEntryDistance) {
			return 1;
		} else {
			return -1;
		}
	}
	,getPickingCollisionVO: function() {
		this._entities.set_length(this._numEntities);
		this._entities.sort($bind(this,this.sortOnNearT));
		var shortestCollisionDistance = Infinity;
		var bestCollisionVO = null;
		var pickingCollisionVO;
		var entity;
		var i;
		var _g1 = 0;
		var _g = this._numEntities;
		while(_g1 < _g) {
			var i1 = _g1++;
			entity = this._entities.get(i1);
			pickingCollisionVO = entity._pickingCollisionVO;
			if(entity.get_pickingCollider() != null) {
				if((bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) && entity.collidesBefore(shortestCollisionDistance,this._findClosestCollision)) {
					shortestCollisionDistance = pickingCollisionVO.rayEntryDistance;
					bestCollisionVO = pickingCollisionVO;
					if(!this._findClosestCollision) {
						this.updateLocalPosition(pickingCollisionVO);
						return pickingCollisionVO;
					}
				}
			} else if(bestCollisionVO == null || pickingCollisionVO.rayEntryDistance < bestCollisionVO.rayEntryDistance) {
				if(!pickingCollisionVO.rayOriginIsInsideBounds) {
					this.updateLocalPosition(pickingCollisionVO);
					return pickingCollisionVO;
				}
			}
		}
		return bestCollisionVO;
	}
	,updateLocalPosition: function(pickingCollisionVO) {
		if(pickingCollisionVO.localPosition == null) {
			pickingCollisionVO.localPosition = new openfl_geom_Vector3D();
		}
		var collisionPos = pickingCollisionVO.localPosition;
		var rayDir = pickingCollisionVO.localRayDirection;
		var rayPos = pickingCollisionVO.localRayPosition;
		var t = pickingCollisionVO.rayEntryDistance;
		collisionPos.x = rayPos.x + t * rayDir.x;
		collisionPos.y = rayPos.y + t * rayDir.y;
		collisionPos.z = rayPos.z + t * rayDir.z;
	}
	,dispose: function() {
	}
	,__class__: away3d_core_pick_RaycastPicker
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
};
var away3d_core_pick_ShaderPicker = function() {
	this._rayDir = new openfl_geom_Vector3D();
	this._rayPos = new openfl_geom_Vector3D();
	this._localHitNormal = new openfl_geom_Vector3D();
	this._hitUV = new openfl_geom_Point();
	this._localHitPosition = new openfl_geom_Vector3D();
	this._interactives = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._onlyMouseEnabled = true;
	this._id = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4,true);
	this._viewportData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4,true);
	this._boundOffsetScale = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,8,true);
	this._boundOffsetScale.set(3,0);
	this._boundOffsetScale.set(7,1);
};
$hxClasses["away3d.core.pick.ShaderPicker"] = away3d_core_pick_ShaderPicker;
away3d_core_pick_ShaderPicker.__name__ = ["away3d","core","pick","ShaderPicker"];
away3d_core_pick_ShaderPicker.__interfaces__ = [away3d_core_pick_IPicker];
away3d_core_pick_ShaderPicker.prototype = {
	_stage3DProxy: null
	,_context: null
	,_onlyMouseEnabled: null
	,_objectProgram3D: null
	,_triangleProgram3D: null
	,_bitmapData: null
	,_viewportData: null
	,_boundOffsetScale: null
	,_id: null
	,_interactives: null
	,_interactiveId: null
	,_hitColor: null
	,_projX: null
	,_projY: null
	,_hitRenderable: null
	,_hitEntity: null
	,_localHitPosition: null
	,_hitUV: null
	,_faceIndex: null
	,_subGeometryIndex: null
	,_localHitNormal: null
	,_rayPos: null
	,_rayDir: null
	,_potentialFound: null
	,get_onlyMouseEnabled: function() {
		return this._onlyMouseEnabled;
	}
	,set_onlyMouseEnabled: function(value) {
		this._onlyMouseEnabled = value;
		return value;
	}
	,getViewCollision: function(x,y,view) {
		var collector = view.get_entityCollector();
		this._stage3DProxy = view.get_stage3DProxy();
		if(this._stage3DProxy == null) {
			return null;
		}
		this._context = this._stage3DProxy._context3D;
		this._viewportData.set(0,view.get_width());
		this._viewportData.set(1,view.get_height());
		this._viewportData.set(2,-(this._projX = 2 * x / view.get_width() - 1));
		this._viewportData.set(3,this._projY = 2 * y / view.get_height() - 1);
		this._potentialFound = false;
		this.draw(collector,null);
		this._context.setVertexBufferAt(0,null);
		if(this._context == null || !this._potentialFound) {
			return null;
		}
		if(this._bitmapData == null) {
			this._bitmapData = new openfl_display_BitmapData(1,1,false,0);
		}
		this._context.drawToBitmapData(this._bitmapData);
		this._hitColor = this._bitmapData.getPixel(0,0);
		if(this._hitColor == 0) {
			this._context.present();
			return null;
		}
		this._hitRenderable = this._interactives.get(this._hitColor - 1);
		this._hitEntity = this._hitRenderable.get_sourceEntity();
		if(this._onlyMouseEnabled && (!this._hitEntity._ancestorsAllowMouseEnabled || !this._hitEntity.get_mouseEnabled())) {
			return null;
		}
		var _collisionVO = this._hitEntity.get_pickingCollisionVO();
		if(this._hitRenderable.get_shaderPickingDetails()) {
			this.getHitDetails(view.get_camera());
			_collisionVO.localPosition = this._localHitPosition;
			_collisionVO.localNormal = this._localHitNormal;
			_collisionVO.uv = this._hitUV;
			_collisionVO.index = this._faceIndex;
			_collisionVO.subGeometryIndex = this._subGeometryIndex;
		} else {
			_collisionVO.localPosition = null;
			_collisionVO.localNormal = null;
			_collisionVO.uv = null;
			_collisionVO.index = 0;
			_collisionVO.subGeometryIndex = 0;
		}
		return _collisionVO;
	}
	,getSceneCollision: function(position,direction,scene) {
		return null;
	}
	,draw: function(entityCollector,target) {
		var camera = entityCollector.get_camera();
		this._context.clear(0,0,0,1);
		this._stage3DProxy.set_scissorRect(away3d_core_pick_ShaderPicker.MOUSE_SCISSOR_RECT);
		this._interactives.set_length(this._interactiveId = 0);
		if(this._objectProgram3D == null) {
			this.initObjectProgram3D();
		}
		this._context.setBlendFactors(2,9);
		this._context.setDepthTest(true,4);
		this._context.setProgram(this._objectProgram3D);
		this._context.setProgramConstantsFromVector(1,4,this._viewportData,1);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),camera);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),camera);
	}
	,drawRenderables: function(item,camera) {
		var matrix = away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX;
		var renderable;
		var viewProjection = camera.get_viewProjection();
		while(item != null) {
			renderable = item.renderable;
			if(renderable.get_sourceEntity().get_scene() == null || !renderable.get_mouseEnabled() && this._onlyMouseEnabled) {
				item = item.next;
				continue;
			}
			this._potentialFound = true;
			this._context.setCulling(renderable.get_material() != null && renderable.get_material().get_bothSides() ? 3 : 0);
			this._interactives.set(this._interactiveId++,renderable);
			this._id.set(1,(this._interactiveId >> 8) / 255);
			this._id.set(2,(this._interactiveId & 255) / 255);
			matrix.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix.append(viewProjection);
			this._context.setProgramConstantsFromMatrix(1,0,matrix,true);
			this._context.setProgramConstantsFromVector(0,0,this._id,1);
			renderable.activateVertexBuffer(0,this._stage3DProxy);
			this._stage3DProxy.drawTriangles(renderable.getIndexBuffer(this._stage3DProxy),0,renderable.get_numTriangles());
			item = item.next;
		}
	}
	,updateRay: function(camera) {
		this._rayPos = camera.get_scenePosition();
		this._rayDir = camera.getRay(this._projX,this._projY,1);
		this._rayDir.normalize();
	}
	,initObjectProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._objectProgram3D = this._context.createProgram();
		vertexCode = "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, fc0";
		this._objectProgram3D.upload(new openfl_utils_AGALMiniAssembler().assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexCode),new openfl_utils_AGALMiniAssembler().assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentCode));
	}
	,initTriangleProgram3D: function() {
		var vertexCode;
		var fragmentCode;
		this._triangleProgram3D = this._context.createProgram();
		vertexCode = "add vt0, va0, vc5 \t\t\t\n" + "mul vt0, vt0, vc6 \t\t\t\n" + "mov v0, vt0\t\t\t\t\n" + "m44 vt0, va0, vc0\t\t\t\n" + "mul vt1.xy, vt0.w, vc4.zw\t\n" + "add vt0.xy, vt0.xy, vt1.xy\t\n" + "mul vt0.xy, vt0.xy, vc4.xy\t\n" + "mov op, vt0\t\n";
		fragmentCode = "mov oc, v0";
		this._triangleProgram3D.upload(new openfl_utils_AGALMiniAssembler().assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),vertexCode),new openfl_utils_AGALMiniAssembler().assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),fragmentCode));
	}
	,getHitDetails: function(camera) {
		this.getApproximatePosition(camera);
		this.getPreciseDetails(camera);
	}
	,getApproximatePosition: function(camera) {
		var entity = this._hitRenderable.get_sourceEntity();
		var col;
		var scX;
		var scY;
		var scZ;
		var offsX;
		var offsY;
		var offsZ;
		var localViewProjection = away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX;
		localViewProjection.copyFrom(this._hitRenderable.getRenderSceneTransform(camera));
		localViewProjection.append(camera.get_viewProjection());
		if(this._triangleProgram3D == null) {
			this.initTriangleProgram3D();
		}
		var this1 = this._boundOffsetScale;
		scX = entity.get_maxX() - entity.get_minX();
		this1.set(4,1 / scX);
		var this2 = this._boundOffsetScale;
		scY = entity.get_maxY() - entity.get_minY();
		this2.set(5,1 / scY);
		var this3 = this._boundOffsetScale;
		scZ = entity.get_maxZ() - entity.get_minZ();
		this3.set(6,1 / scZ);
		var this4 = this._boundOffsetScale;
		offsX = -entity.get_minX();
		this4.set(0,offsX);
		var this5 = this._boundOffsetScale;
		offsY = -entity.get_minY();
		this5.set(1,offsY);
		var this6 = this._boundOffsetScale;
		offsZ = -entity.get_minZ();
		this6.set(2,offsZ);
		this._context.setProgram(this._triangleProgram3D);
		this._context.clear(0,0,0,0,1,0,2);
		this._context.setScissorRectangle(away3d_core_pick_ShaderPicker.MOUSE_SCISSOR_RECT);
		this._context.setProgramConstantsFromMatrix(1,0,localViewProjection,true);
		this._context.setProgramConstantsFromVector(1,5,this._boundOffsetScale,2);
		this._hitRenderable.activateVertexBuffer(0,this._stage3DProxy);
		this._stage3DProxy.drawTriangles(this._hitRenderable.getIndexBuffer(this._stage3DProxy),0,this._hitRenderable.get_numTriangles());
		this._context.drawToBitmapData(this._bitmapData);
		col = this._bitmapData.getPixel(0,0);
		this._localHitPosition.x = (col >> 16 & 255) * scX / 255 - offsX;
		this._localHitPosition.y = (col >> 8 & 255) * scY / 255 - offsY;
		this._localHitPosition.z = (col & 255) * scZ / 255 - offsZ;
	}
	,getPreciseDetails: function(camera) {
		var subGeom = (js_Boot.__cast(this._hitRenderable , away3d_core_base_SubMesh)).get_subGeometry();
		var indices = subGeom.get_indexData();
		var vertices = subGeom.get_vertexData();
		var len = indices.get_length();
		var x1;
		var y1;
		var z1;
		var x2;
		var y2;
		var z2;
		var x3;
		var y3;
		var z3;
		var i = 0;
		var j = 1;
		var k = 2;
		var t1;
		var t2;
		var t3;
		var v0x;
		var v0y;
		var v0z;
		var v1x;
		var v1y;
		var v1z;
		var v2x;
		var v2y;
		var v2z;
		var dot00;
		var dot01;
		var dot02;
		var dot11;
		var dot12;
		var s;
		var t;
		var invDenom;
		var uvs = subGeom.get_UVData();
		var normals = subGeom.get_faceNormals();
		var x = this._localHitPosition.x;
		var y = this._localHitPosition.y;
		var z = this._localHitPosition.z;
		var u;
		var v;
		var ui1;
		var ui2;
		var ui3;
		var s0x;
		var s0y;
		var s0z;
		var s1x;
		var s1y;
		var s1z;
		var nl;
		var stride = subGeom.get_vertexStride();
		var vertexOffset = subGeom.get_vertexOffset();
		this.updateRay(camera);
		while(i < len) {
			t1 = vertexOffset + indices.get(i) * stride;
			t2 = vertexOffset + indices.get(j) * stride;
			t3 = vertexOffset + indices.get(k) * stride;
			x1 = vertices.get(t1);
			y1 = vertices.get(t1 + 1);
			z1 = vertices.get(t1 + 2);
			x2 = vertices.get(t2);
			y2 = vertices.get(t2 + 1);
			z2 = vertices.get(t2 + 2);
			x3 = vertices.get(t3);
			y3 = vertices.get(t3 + 1);
			z3 = vertices.get(t3 + 2);
			if(!(x < x1 && x < x2 && x < x3 || y < y1 && y < y2 && y < y3 || z < z1 && z < z2 && z < z3 || x > x1 && x > x2 && x > x3 || y > y1 && y > y2 && y > y3 || z > z1 && z > z2 && z > z3)) {
				v0x = x3 - x1;
				v0y = y3 - y1;
				v0z = z3 - z1;
				v1x = x2 - x1;
				v1y = y2 - y1;
				v1z = z2 - z1;
				v2x = x - x1;
				v2y = y - y1;
				v2z = z - z1;
				dot00 = v0x * v0x + v0y * v0y + v0z * v0z;
				dot01 = v0x * v1x + v0y * v1y + v0z * v1z;
				dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
				dot11 = v1x * v1x + v1y * v1y + v1z * v1z;
				dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
				invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
				s = (dot11 * dot02 - dot01 * dot12) * invDenom;
				t = (dot00 * dot12 - dot01 * dot02) * invDenom;
				if(s >= 0 && t >= 0 && s + t <= 1) {
					this.getPrecisePosition(this._hitRenderable.get_inverseSceneTransform(),normals.get(i),normals.get(i + 1),normals.get(i + 2),x1,y1,z1);
					v2x = this._localHitPosition.x - x1;
					v2y = this._localHitPosition.y - y1;
					v2z = this._localHitPosition.z - z1;
					s0x = x2 - x1;
					s0y = y2 - y1;
					s0z = z2 - z1;
					s1x = x3 - x1;
					s1y = y3 - y1;
					s1z = z3 - z1;
					this._localHitNormal.x = s0y * s1z - s0z * s1y;
					this._localHitNormal.y = s0z * s1x - s0x * s1z;
					this._localHitNormal.z = s0x * s1y - s0y * s1x;
					nl = 1 / Math.sqrt(this._localHitNormal.x * this._localHitNormal.x + this._localHitNormal.y * this._localHitNormal.y + this._localHitNormal.z * this._localHitNormal.z);
					this._localHitNormal.x *= nl;
					this._localHitNormal.y *= nl;
					this._localHitNormal.z *= nl;
					dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
					dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
					s = (dot11 * dot02 - dot01 * dot12) * invDenom;
					t = (dot00 * dot12 - dot01 * dot02) * invDenom;
					ui1 = indices.get(i) << 1;
					ui2 = indices.get(j) << 1;
					ui3 = indices.get(k) << 1;
					u = uvs.get(ui1);
					v = uvs.get(ui1 + 1);
					var tmp = u + t * (uvs.get(ui2) - u);
					var tmp1 = s * (uvs.get(ui3) - u);
					this._hitUV.x = tmp + tmp1;
					var tmp2 = v + t * (uvs.get(ui2 + 1) - v);
					var tmp3 = s * (uvs.get(ui3 + 1) - v);
					this._hitUV.y = tmp2 + tmp3;
					this._faceIndex = i;
					this._subGeometryIndex = away3d_tools_utils_GeomUtil.getMeshSubMeshIndex(js_Boot.__cast(this._hitRenderable , away3d_core_base_SubMesh));
					return;
				}
			}
			i += 3;
			j += 3;
			k += 3;
		}
	}
	,getPrecisePosition: function(invSceneTransform,nx,ny,nz,px,py,pz) {
		var rx;
		var ry;
		var rz;
		var ox;
		var oy;
		var oz;
		var t;
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var cx = this._rayPos.x;
		var cy = this._rayPos.y;
		var cz = this._rayPos.z;
		ox = this._rayDir.x;
		oy = this._rayDir.y;
		oz = this._rayDir.z;
		invSceneTransform.copyRawDataTo(raw);
		rx = raw.get(0) * ox + raw.get(4) * oy + raw.get(8) * oz;
		ry = raw.get(1) * ox + raw.get(5) * oy + raw.get(9) * oz;
		rz = raw.get(2) * ox + raw.get(6) * oy + raw.get(10) * oz;
		ox = raw.get(0) * cx + raw.get(4) * cy + raw.get(8) * cz + raw.get(12);
		oy = raw.get(1) * cx + raw.get(5) * cy + raw.get(9) * cz + raw.get(13);
		oz = raw.get(2) * cx + raw.get(6) * cy + raw.get(10) * cz + raw.get(14);
		t = ((px - ox) * nx + (py - oy) * ny + (pz - oz) * nz) / (rx * nx + ry * ny + rz * nz);
		this._localHitPosition.x = ox + rx * t;
		this._localHitPosition.y = oy + ry * t;
		this._localHitPosition.z = oz + rz * t;
	}
	,dispose: function() {
		this._bitmapData.dispose();
		if(this._triangleProgram3D != null) {
			this._triangleProgram3D.dispose();
		}
		if(this._objectProgram3D != null) {
			this._objectProgram3D.dispose();
		}
		this._triangleProgram3D = null;
		this._objectProgram3D = null;
		this._bitmapData = null;
		this._hitRenderable = null;
		this._hitEntity = null;
	}
	,__class__: away3d_core_pick_ShaderPicker
};
var away3d_core_pick_PickingType = function() { };
$hxClasses["away3d.core.pick.PickingType"] = away3d_core_pick_PickingType;
away3d_core_pick_PickingType.__name__ = ["away3d","core","pick","PickingType"];
var away3d_core_render_BackgroundImageRenderer = function(stage3DProxy) {
	this.set_stage3DProxy(stage3DProxy);
};
$hxClasses["away3d.core.render.BackgroundImageRenderer"] = away3d_core_render_BackgroundImageRenderer;
away3d_core_render_BackgroundImageRenderer.__name__ = ["away3d","core","render","BackgroundImageRenderer"];
away3d_core_render_BackgroundImageRenderer.prototype = {
	_program3d: null
	,_texture: null
	,_indexBuffer: null
	,_vertexBuffer: null
	,_stage3DProxy: null
	,_context: null
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) {
			return value;
		}
		this._stage3DProxy = value;
		this.removeBuffers();
		return value;
	}
	,removeBuffers: function() {
		if(this._vertexBuffer != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this._vertexBuffer);
			this._vertexBuffer = null;
			this._program3d.dispose();
			this._program3d = null;
			away3d_core_managers_Stage3DProxy.disposeIndexBuffer(this._indexBuffer);
			this._indexBuffer = null;
		}
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1";
	}
	,getFragmentCode: function() {
		var format;
		var _g = this._texture.get_format();
		switch(_g) {
		case 3:
			format = "dxt1,";
			break;
		case 4:
			format = "dxt5,";
			break;
		default:
			format = "";
		}
		return "tex ft0, v0, fs0 <2d, " + format + "linear>\t\n" + "mov oc, ft0";
	}
	,dispose: function() {
		this.removeBuffers();
	}
	,render: function() {
		var context = this._stage3DProxy.get_context3D();
		if(context != this._context) {
			this.removeBuffers();
			this._context = context;
		}
		if(context == null) {
			return;
		}
		if(this._vertexBuffer == null) {
			this.initBuffers(context);
		}
		context.setBlendFactors(2,9);
		context.setProgram(this._program3d);
		context.setTextureAt(0,this._texture.getTextureForStage3D(this._stage3DProxy));
		context.setVertexBufferAt(0,this._vertexBuffer,0,2);
		context.setVertexBufferAt(1,this._vertexBuffer,2,2);
		context.drawTriangles(this._indexBuffer,0,2);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setTextureAt(0,null);
	}
	,initBuffers: function(context) {
		this._vertexBuffer = this._stage3DProxy.createVertexBuffer(4,4);
		this._program3d = context.createProgram();
		this._indexBuffer = this._stage3DProxy.createIndexBuffer(6);
		var a = [2,1,0,3,2,0];
		var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		var v = vector;
		this._indexBuffer.uploadFromVector(v,0,6);
		this._program3d.upload(new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),this.getVertexCode()),new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),this.getFragmentCode()));
		var w = 2;
		var h = 2;
		var x = -1;
		var y = 1;
		if(this._stage3DProxy.get_scissorRect() != null) {
			x = (this._stage3DProxy.get_scissorRect().x * 2 - this._stage3DProxy.get_viewPort().width) / this._stage3DProxy.get_viewPort().width;
			y = (this._stage3DProxy.get_scissorRect().y * 2 - this._stage3DProxy.get_viewPort().height) / this._stage3DProxy.get_viewPort().height * -1;
			w = 2 / (this._stage3DProxy.get_viewPort().width / this._stage3DProxy.get_scissorRect().width);
			h = 2 / (this._stage3DProxy.get_viewPort().height / this._stage3DProxy.get_scissorRect().height);
		}
		var tmp = this._vertexBuffer;
		var a1 = [x,y - h,0,1,x + w,y - h,1,1,x + w,y,1,0,x,y,0,0];
		var vector1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector1.set(i1,a1[i1]);
		}
		tmp.uploadFromVector(vector1,0,4);
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		this._texture = value;
		return value;
	}
	,__class__: away3d_core_render_BackgroundImageRenderer
};
var away3d_core_render_RendererBase = function(renderToTexture) {
	if(renderToTexture == null) {
		renderToTexture = false;
	}
	this._rttViewProjectionMatrix = new openfl_geom_Matrix3D();
	this._clearOnRender = true;
	this._textureRatioY = 1;
	this._textureRatioX = 1;
	this._shareContext = false;
	this._backgroundAlpha = 1;
	this._backgroundB = 0;
	this._backgroundG = 0;
	this._backgroundR = 0;
	this._renderableSorter = new away3d_core_sort_RenderableMergeSort();
	this._renderToTexture = renderToTexture;
};
$hxClasses["away3d.core.render.RendererBase"] = away3d_core_render_RendererBase;
away3d_core_render_RendererBase.__name__ = ["away3d","core","render","RendererBase"];
away3d_core_render_RendererBase.prototype = {
	_context: null
	,_stage3DProxy: null
	,_backgroundR: null
	,_backgroundG: null
	,_backgroundB: null
	,_backgroundAlpha: null
	,_shareContext: null
	,_renderTarget: null
	,_renderTargetSurface: null
	,_viewWidth: null
	,_viewHeight: null
	,_renderableSorter: null
	,_backgroundImageRenderer: null
	,_background: null
	,_renderToTexture: null
	,_antiAlias: null
	,_textureRatioX: null
	,_textureRatioY: null
	,_snapshotBitmapData: null
	,_snapshotRequired: null
	,_clearOnRender: null
	,_rttViewProjectionMatrix: null
	,createEntityCollector: function() {
		return new away3d_core_traverse_EntityCollector();
	}
	,get_viewWidth: function() {
		return this._viewWidth;
	}
	,set_viewWidth: function(value) {
		this._viewWidth = value;
		return value;
	}
	,get_viewHeight: function() {
		return this._viewHeight;
	}
	,set_viewHeight: function(value) {
		this._viewHeight = value;
		return value;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,get_renderableSorter: function() {
		return this._renderableSorter;
	}
	,set_renderableSorter: function(value) {
		this._renderableSorter = value;
		return value;
	}
	,get_clearOnRender: function() {
		return this._clearOnRender;
	}
	,set_clearOnRender: function(value) {
		this._clearOnRender = value;
		return value;
	}
	,get_backgroundR: function() {
		return this._backgroundR;
	}
	,set_backgroundR: function(value) {
		this._backgroundR = value;
		return value;
	}
	,get_backgroundG: function() {
		return this._backgroundG;
	}
	,set_backgroundG: function(value) {
		this._backgroundG = value;
		return value;
	}
	,get_backgroundB: function() {
		return this._backgroundB;
	}
	,set_backgroundB: function(value) {
		this._backgroundB = value;
		return value;
	}
	,get_stage3DProxy: function() {
		return this._stage3DProxy;
	}
	,set_stage3DProxy: function(value) {
		if(value == this._stage3DProxy) {
			return value;
		}
		if(value == null) {
			if(this._stage3DProxy != null) {
				this._stage3DProxy.removeEventListener("Context3DCreated",$bind(this,this.onContextUpdate));
				this._stage3DProxy.removeEventListener("Context3DRecreated",$bind(this,this.onContextUpdate));
			}
			this._stage3DProxy = null;
			this._context = null;
			return null;
		}
		this._stage3DProxy = value;
		this._stage3DProxy.addEventListener("Context3DCreated",$bind(this,this.onContextUpdate));
		this._stage3DProxy.addEventListener("Context3DRecreated",$bind(this,this.onContextUpdate));
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.set_stage3DProxy(value);
		}
		if(value.get_context3D() != null) {
			this._context = value.get_context3D();
		}
		return value;
	}
	,get_shareContext: function() {
		return this._shareContext;
	}
	,set_shareContext: function(value) {
		this._shareContext = value;
		return value;
	}
	,dispose: function() {
		this.set_stage3DProxy(null);
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
	}
	,render: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(this._stage3DProxy == null || this._context == null) {
			return;
		}
		this._rttViewProjectionMatrix.copyFrom(entityCollector.get_camera().get_viewProjection());
		this._rttViewProjectionMatrix.appendScale(this._textureRatioX,this._textureRatioY,1);
		this.executeRender(entityCollector,target,scissorRect,surfaceSelector);
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._context.setVertexBufferAt(i,null);
			this._context.setTextureAt(i,null);
		}
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		this._renderTarget = target;
		this._renderTargetSurface = surfaceSelector;
		if(this._renderableSorter != null) {
			this._renderableSorter.sort(entityCollector);
		}
		if(this._renderToTexture) {
			this.executeRenderToTexturePass(entityCollector);
		}
		this._stage3DProxy.setRenderTarget(target,true,surfaceSelector);
		if((target != null || !this._shareContext) && this._clearOnRender) {
			this._context.clear(this._backgroundR,this._backgroundG,this._backgroundB,this._backgroundAlpha,1,0);
		}
		this._context.setDepthTest(false,0);
		this._stage3DProxy.set_scissorRect(scissorRect);
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.render();
		}
		this.draw(entityCollector,target);
		this._context.setDepthTest(false,5);
		if(!this._shareContext) {
			if(this._snapshotRequired && this._snapshotBitmapData != null) {
				this._context.drawToBitmapData(this._snapshotBitmapData);
				this._snapshotRequired = false;
			}
		}
		this._stage3DProxy.set_scissorRect(null);
	}
	,queueSnapshot: function(bmd) {
		this._snapshotRequired = true;
		this._snapshotBitmapData = bmd;
	}
	,executeRenderToTexturePass: function(entityCollector) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,draw: function(entityCollector,target) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,onContextUpdate: function(event) {
		this._context = this._stage3DProxy.get_context3D();
	}
	,get_backgroundAlpha: function() {
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		this._backgroundAlpha = value;
		return value;
	}
	,get_background: function() {
		return this._background;
	}
	,set_background: function(value) {
		if(this._backgroundImageRenderer != null && value == null) {
			this._backgroundImageRenderer.dispose();
			this._backgroundImageRenderer = null;
		}
		if(this._backgroundImageRenderer == null && value != null) {
			this._backgroundImageRenderer = new away3d_core_render_BackgroundImageRenderer(this._stage3DProxy);
		}
		this._background = value;
		if(this._backgroundImageRenderer != null) {
			this._backgroundImageRenderer.set_texture(value);
		}
		return value;
	}
	,get_backgroundImageRenderer: function() {
		return this._backgroundImageRenderer;
	}
	,get_antiAlias: function() {
		return this._antiAlias;
	}
	,set_antiAlias: function(antiAlias) {
		this._antiAlias = antiAlias;
		return antiAlias;
	}
	,get_textureRatioX: function() {
		return this._textureRatioX;
	}
	,set_textureRatioX: function(value) {
		this._textureRatioX = value;
		return value;
	}
	,get_textureRatioY: function() {
		return this._textureRatioY;
	}
	,set_textureRatioY: function(value) {
		this._textureRatioY = value;
		return value;
	}
	,__class__: away3d_core_render_RendererBase
};
var away3d_core_render_DefaultRenderer = function() {
	this._skyboxTempVector = new openfl_geom_Vector3D();
	this._tempSkyboxMatrix = new openfl_geom_Matrix3D();
	this._skyboxProjection = new openfl_geom_Matrix3D();
	away3d_core_render_RendererBase.call(this);
	this._depthRenderer = new away3d_core_render_DepthRenderer();
	this._distanceRenderer = new away3d_core_render_DepthRenderer(false,true);
};
$hxClasses["away3d.core.render.DefaultRenderer"] = away3d_core_render_DefaultRenderer;
away3d_core_render_DefaultRenderer.__name__ = ["away3d","core","render","DefaultRenderer"];
away3d_core_render_DefaultRenderer.__super__ = away3d_core_render_RendererBase;
away3d_core_render_DefaultRenderer.prototype = $extend(away3d_core_render_RendererBase.prototype,{
	_activeMaterial: null
	,_distanceRenderer: null
	,_depthRenderer: null
	,_skyboxProjection: null
	,_tempSkyboxMatrix: null
	,_skyboxTempVector: null
	,set_stage3DProxy: function(value) {
		away3d_core_render_RendererBase.prototype.set_stage3DProxy.call(this,value);
		this._distanceRenderer.set_stage3DProxy(this._depthRenderer.set_stage3DProxy(value));
		return value;
	}
	,executeRender: function(entityCollector,target,scissorRect,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		this.updateLights(entityCollector);
		if(target != null) {
			this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,away3d_core_render_DefaultRenderer.RTT_PASSES);
			this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,away3d_core_render_DefaultRenderer.RTT_PASSES);
		}
		away3d_core_render_RendererBase.prototype.executeRender.call(this,entityCollector,target,scissorRect,surfaceSelector);
	}
	,updateLights: function(entityCollector) {
		var dirLights = entityCollector.get_directionalLights();
		var pointLights = entityCollector.get_pointLights();
		var len;
		var i;
		var light;
		var shadowMapper;
		len = dirLights.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			light = dirLights.get(i1);
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) {
				shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._depthRenderer);
			}
		}
		len = pointLights.get_length();
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i2 = _g11++;
			light = pointLights.get(i2);
			shadowMapper = light.get_shadowMapper();
			if(light.get_castsShadows() && (shadowMapper.get_autoUpdateShadows() || shadowMapper._shadowsInvalid)) {
				shadowMapper.renderDepthMap(this._stage3DProxy,entityCollector,this._distanceRenderer);
			}
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(2,9);
		if(entityCollector.get_skyBox() != null) {
			if(this._activeMaterial != null) {
				this._activeMaterial.deactivate(this._stage3DProxy);
			}
			this._activeMaterial = null;
			this._context.setDepthTest(false,0);
			this.drawSkyBox(entityCollector);
		}
		this._context.setDepthTest(true,5);
		var which = target != null ? away3d_core_render_DefaultRenderer.SCREEN_PASSES : away3d_core_render_DefaultRenderer.ALL_PASSES;
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector,which);
		this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector,which);
		this._context.setDepthTest(false,5);
		if(this._activeMaterial != null) {
			this._activeMaterial.deactivate(this._stage3DProxy);
		}
		this._activeMaterial = null;
	}
	,drawSkyBox: function(entityCollector) {
		var skyBox = entityCollector.get_skyBox();
		var material = skyBox.get_material();
		var camera = entityCollector.get_camera();
		this.updateSkyBoxProjection(camera);
		material.activatePass(0,this._stage3DProxy,camera);
		material.renderPass(0,skyBox,this._stage3DProxy,entityCollector,this._skyboxProjection);
		material.deactivatePass(0,this._stage3DProxy);
	}
	,updateSkyBoxProjection: function(camera) {
		this._skyboxProjection.copyFrom(this._rttViewProjectionMatrix);
		this._skyboxProjection.copyRowTo(2,this._skyboxTempVector);
		var camPos = camera.get_scenePosition();
		var cx = this._skyboxTempVector.x;
		var cy = this._skyboxTempVector.y;
		var cz = this._skyboxTempVector.z;
		var length = Math.sqrt(cx * cx + cy * cy + cz * cz);
		this._skyboxTempVector.x = 0;
		this._skyboxTempVector.y = 0;
		this._skyboxTempVector.z = 0;
		this._skyboxTempVector.w = 1;
		this._tempSkyboxMatrix.copyFrom(camera.get_sceneTransform());
		this._tempSkyboxMatrix.copyColumnFrom(3,this._skyboxTempVector);
		this._skyboxTempVector.x = 0;
		this._skyboxTempVector.y = 0;
		this._skyboxTempVector.z = 1;
		this._skyboxTempVector.w = 0;
		away3d_core_math_Matrix3DUtils.transformVector(this._tempSkyboxMatrix,this._skyboxTempVector,this._skyboxTempVector);
		this._skyboxTempVector.normalize();
		var angle = Math.acos(this._skyboxTempVector.x * (cx / length) + this._skyboxTempVector.y * (cy / length) + this._skyboxTempVector.z * (cz / length));
		if(Math.abs(angle) > 0.000001) {
			return;
		}
		var cw = -(cx * camPos.x + cy * camPos.y + cz * camPos.z + length);
		var signX = cx >= 0 ? 1 : -1;
		var signY = cy >= 0 ? 1 : -1;
		var p = this._skyboxTempVector;
		p.x = signX;
		p.y = signY;
		p.z = 1;
		p.w = 1;
		this._tempSkyboxMatrix.copyFrom(this._skyboxProjection);
		this._tempSkyboxMatrix.invert();
		var q = away3d_core_math_Matrix3DUtils.transformVector(this._tempSkyboxMatrix,p,away3d_core_math_Matrix3DUtils.CALCULATION_VECTOR3D);
		this._skyboxProjection.copyRowTo(3,p);
		var a = (q.x * p.x + q.y * p.y + q.z * p.z + q.w * p.w) / (cx * q.x + cy * q.y + cz * q.z + cw * q.w);
		this._skyboxTempVector.x = cx * a;
		this._skyboxTempVector.y = cy * a;
		this._skyboxTempVector.z = cz * a;
		this._skyboxTempVector.w = cw * a;
		this._skyboxProjection.copyRowFrom(2,this._skyboxTempVector);
	}
	,drawRenderables: function(item,entityCollector,which) {
		var numPasses;
		var j;
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			this._activeMaterial.updateMaterial(this._context);
			numPasses = this._activeMaterial.get_numPasses();
			j = 0;
			while(true) {
				item2 = item;
				var rttMask = this._activeMaterial.passRendersToTexture(j) ? 1 : 2;
				if((rttMask & which) != 0) {
					this._activeMaterial.activatePass(j,this._stage3DProxy,camera);
					while(true) {
						this._activeMaterial.renderPass(j,item2.renderable,this._stage3DProxy,entityCollector,this._rttViewProjectionMatrix);
						item2 = item2.next;
						if(!(item2 != null && item2.renderable.get_material() == this._activeMaterial)) {
							break;
						}
					}
					this._activeMaterial.deactivatePass(j,this._stage3DProxy);
				} else {
					while(true) {
						item2 = item2.next;
						if(!(item2 != null && item2.renderable.get_material() == this._activeMaterial)) {
							break;
						}
					}
				}
				if(!(++j < numPasses)) {
					break;
				}
			}
			item = item2;
		}
	}
	,dispose: function() {
		away3d_core_render_RendererBase.prototype.dispose.call(this);
		this._depthRenderer.dispose();
		this._distanceRenderer.dispose();
		this._depthRenderer = null;
		this._distanceRenderer = null;
	}
	,__class__: away3d_core_render_DefaultRenderer
});
var away3d_core_render_DepthRenderer = function(renderBlended,distanceBased) {
	if(distanceBased == null) {
		distanceBased = false;
	}
	if(renderBlended == null) {
		renderBlended = false;
	}
	away3d_core_render_RendererBase.call(this);
	this._renderBlended = renderBlended;
	this._distanceBased = distanceBased;
	this._backgroundR = 1;
	this._backgroundG = 1;
	this._backgroundB = 1;
};
$hxClasses["away3d.core.render.DepthRenderer"] = away3d_core_render_DepthRenderer;
away3d_core_render_DepthRenderer.__name__ = ["away3d","core","render","DepthRenderer"];
away3d_core_render_DepthRenderer.__super__ = away3d_core_render_RendererBase;
away3d_core_render_DepthRenderer.prototype = $extend(away3d_core_render_RendererBase.prototype,{
	_activeMaterial: null
	,_renderBlended: null
	,_distanceBased: null
	,_disableColor: null
	,get_disableColor: function() {
		return this._disableColor;
	}
	,set_disableColor: function(value) {
		this._disableColor = value;
		return value;
	}
	,set_backgroundR: function(value) {
		return value;
	}
	,set_backgroundG: function(value) {
		return value;
	}
	,set_backgroundB: function(value) {
		return value;
	}
	,renderCascades: function(entityCollector,target,numCascades,scissorRects,cameras) {
		this._renderTarget = target;
		this._renderTargetSurface = 0;
		this._renderableSorter.sort(entityCollector);
		this._stage3DProxy.setRenderTarget(target,true,0);
		this._context.clear(1,1,1,1,1,0);
		this._context.setBlendFactors(2,9);
		this._context.setDepthTest(true,4);
		var head = entityCollector.get_opaqueRenderableHead();
		var first = true;
		var i = numCascades - 1;
		while(i >= 0) {
			this._stage3DProxy.set_scissorRect(scissorRects.get(i));
			this.drawCascadeRenderables(head,cameras.get(i),first ? null : cameras.get(i).get_frustumPlanes());
			first = false;
			--i;
		}
		if(this._activeMaterial != null) {
			this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		}
		this._activeMaterial = null;
		this._context.setDepthTest(false,5);
		this._stage3DProxy.set_scissorRect(null);
	}
	,drawCascadeRenderables: function(item,camera,cullPlanes) {
		var material;
		while(item != null) {
			if(item.cascaded) {
				item = item.next;
				continue;
			}
			var renderable = item.renderable;
			var entity = renderable.get_sourceEntity();
			if(cullPlanes == null || entity.get_worldBounds().isInFrustum(cullPlanes,4)) {
				material = renderable.get_material();
				if(this._activeMaterial != material) {
					if(this._activeMaterial != null) {
						this._activeMaterial.deactivateForDepth(this._stage3DProxy);
					}
					this._activeMaterial = material;
					this._activeMaterial.activateForDepth(this._stage3DProxy,camera,false);
				}
				this._activeMaterial.renderDepth(renderable,this._stage3DProxy,camera,camera.get_viewProjection());
			} else {
				item.cascaded = true;
			}
			item = item.next;
		}
	}
	,draw: function(entityCollector,target) {
		this._context.setBlendFactors(2,9);
		this._context.setDepthTest(true,4);
		this.drawRenderables(entityCollector.get_opaqueRenderableHead(),entityCollector);
		if(this._disableColor) {
			this._context.setColorMask(false,false,false,false);
		}
		if(this._renderBlended) {
			this.drawRenderables(entityCollector.get_blendedRenderableHead(),entityCollector);
		}
		if(this._activeMaterial != null) {
			this._activeMaterial.deactivateForDepth(this._stage3DProxy);
		}
		if(this._disableColor) {
			this._context.setColorMask(true,true,true,true);
		}
		this._activeMaterial = null;
	}
	,drawRenderables: function(item,entityCollector) {
		var camera = entityCollector.get_camera();
		var item2;
		while(item != null) {
			this._activeMaterial = item.renderable.get_material();
			if(this._disableColor && this._activeMaterial.hasDepthAlphaThreshold()) {
				item2 = item;
				while(true) {
					item2 = item2.next;
					if(!(item2 != null && item2.renderable.get_material() == this._activeMaterial)) {
						break;
					}
				}
			} else {
				this._activeMaterial.activateForDepth(this._stage3DProxy,camera,this._distanceBased);
				item2 = item;
				while(true) {
					this._activeMaterial.renderDepth(item2.renderable,this._stage3DProxy,camera,this._rttViewProjectionMatrix);
					item2 = item2.next;
					if(!(item2 != null && item2.renderable.get_material() == this._activeMaterial)) {
						break;
					}
				}
				this._activeMaterial.deactivateForDepth(this._stage3DProxy);
			}
			item = item2;
		}
	}
	,__class__: away3d_core_render_DepthRenderer
});
var away3d_core_render_Filter3DRenderer = function(stage3DProxy) {
	this._filterSizesInvalid = true;
	this._stage3DProxy = stage3DProxy;
	this._stage3DProxy.addEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
	this._rttManager = away3d_core_managers_RTTBufferManager.getInstance(stage3DProxy);
	this._rttManager.addEventListener("resize",$bind(this,this.onRTTResize));
};
$hxClasses["away3d.core.render.Filter3DRenderer"] = away3d_core_render_Filter3DRenderer;
away3d_core_render_Filter3DRenderer.__name__ = ["away3d","core","render","Filter3DRenderer"];
away3d_core_render_Filter3DRenderer.prototype = {
	_filters: null
	,_tasks: null
	,_filterTasksInvalid: null
	,_mainInputTexture: null
	,_requireDepthRender: null
	,_rttManager: null
	,_stage3DProxy: null
	,_filterSizesInvalid: null
	,onContext3DRecreated: function(event) {
		this._filterSizesInvalid = true;
	}
	,onRTTResize: function(event) {
		this._filterSizesInvalid = true;
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,getMainInputTexture: function(stage3DProxy) {
		if(this._filterTasksInvalid) {
			this.updateFilterTasks(stage3DProxy);
		}
		return this._mainInputTexture;
	}
	,get_filters: function() {
		return this._filters;
	}
	,set_filters: function(value) {
		this._filters = value;
		this._filterTasksInvalid = true;
		this._requireDepthRender = false;
		if(this._filters == null) {
			return null;
		}
		var _g1 = 0;
		var _g = this.get_filters().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this._requireDepthRender) {
				this._requireDepthRender = this._filters[i].get_requireDepthRender();
			}
		}
		this._filterSizesInvalid = true;
		return value;
	}
	,updateFilterTasks: function(stage3DProxy) {
		var len;
		if(this._filterSizesInvalid) {
			this.updateFilterSizes();
		}
		if(this._filters == null) {
			this._tasks = null;
			return;
		}
		this._tasks = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		len = this._filters.length - 1;
		var filter;
		var _g1 = 0;
		var _g = len + 1;
		while(_g1 < _g) {
			var i = _g1++;
			filter = this._filters[i];
			filter.setRenderTargets(i == len ? null : this._filters[i + 1].getMainInputTexture(stage3DProxy),stage3DProxy);
			this._tasks = this._tasks.concat(filter.get_tasks());
		}
		this._mainInputTexture = this._filters[0].getMainInputTexture(stage3DProxy);
	}
	,render: function(stage3DProxy,camera3D,depthTexture) {
		var len;
		var i;
		var task;
		var context = stage3DProxy.get_context3D();
		var indexBuffer = this._rttManager.get_indexBuffer();
		var vertexBuffer = this._rttManager.get_renderToTextureVertexBuffer();
		if(this._filters == null) {
			return;
		}
		if(this._filterSizesInvalid) {
			this.updateFilterSizes();
		}
		if(this._filterTasksInvalid) {
			this.updateFilterTasks(stage3DProxy);
		}
		len = this._filters.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			this._filters[i1].update(stage3DProxy,camera3D);
		}
		len = this._tasks.get_length();
		if(len > 1) {
			context.setVertexBufferAt(0,vertexBuffer,0,2);
			context.setVertexBufferAt(1,vertexBuffer,2,2);
		}
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i2 = _g11++;
			task = this._tasks.get(i2);
			stage3DProxy.setRenderTarget(task.get_target());
			if(task.get_target() == null) {
				stage3DProxy.set_scissorRect(null);
				vertexBuffer = this._rttManager.get_renderToScreenVertexBuffer();
				context.setVertexBufferAt(0,vertexBuffer,0,2);
				context.setVertexBufferAt(1,vertexBuffer,2,2);
			}
			context.setTextureAt(0,task.getMainInputTexture(stage3DProxy));
			context.setProgram(task.getProgram3D(stage3DProxy));
			context.clear(0.0,0.0,0.0,0.0);
			task.activate(stage3DProxy,camera3D,depthTexture);
			context.setBlendFactors(2,9);
			stage3DProxy.drawTriangles(indexBuffer,0,2);
			task.deactivate(stage3DProxy);
		}
		context.setTextureAt(0,null);
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
	}
	,updateFilterSizes: function() {
		var _g1 = 0;
		var _g = this._filters.length;
		while(_g1 < _g) {
			var i = _g1++;
			this._filters[i].set_textureWidth(this._rttManager.get_textureWidth());
			this._filters[i].set_textureHeight(this._rttManager.get_textureHeight());
		}
		this._filterSizesInvalid = true;
	}
	,dispose: function() {
		this._rttManager.removeEventListener("resize",$bind(this,this.onRTTResize));
		this._rttManager = null;
		this._stage3DProxy.removeEventListener("Context3DRecreated",$bind(this,this.onContext3DRecreated));
		this._stage3DProxy = null;
	}
	,__class__: away3d_core_render_Filter3DRenderer
};
var away3d_core_sort_IEntitySorter = function() { };
$hxClasses["away3d.core.sort.IEntitySorter"] = away3d_core_sort_IEntitySorter;
away3d_core_sort_IEntitySorter.__name__ = ["away3d","core","sort","IEntitySorter"];
away3d_core_sort_IEntitySorter.prototype = {
	sort: null
	,__class__: away3d_core_sort_IEntitySorter
};
var away3d_core_sort_RenderableMergeSort = function() {
};
$hxClasses["away3d.core.sort.RenderableMergeSort"] = away3d_core_sort_RenderableMergeSort;
away3d_core_sort_RenderableMergeSort.__name__ = ["away3d","core","sort","RenderableMergeSort"];
away3d_core_sort_RenderableMergeSort.__interfaces__ = [away3d_core_sort_IEntitySorter];
away3d_core_sort_RenderableMergeSort.prototype = {
	sort: function(collector) {
		collector.set_opaqueRenderableHead(this.mergeSortByMaterial(collector.get_opaqueRenderableHead()));
		collector.set_blendedRenderableHead(this.mergeSortByDepth(collector.get_blendedRenderableHead()));
	}
	,mergeSortByDepth: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) {
			return head;
		}
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByDepth(head);
		headB = this.mergeSortByDepth(headB);
		var result = null;
		var curr = null;
		var l = null;
		if(head == null) {
			return headB;
		}
		if(headB == null) {
			return head;
		}
		while(head != null && headB != null) {
			if(head.zIndex < headB.zIndex) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) {
				result = l;
			} else {
				curr.next = l;
			}
			curr = l;
		}
		if(head != null) {
			curr.next = head;
		} else if(headB != null) {
			curr.next = headB;
		}
		return result;
	}
	,mergeSortByMaterial: function(head) {
		var headB;
		var fast;
		var slow;
		if(head == null || head.next == null) {
			return head;
		}
		slow = head;
		fast = head.next;
		while(fast != null) {
			fast = fast.next;
			if(fast != null) {
				slow = slow.next;
				fast = fast.next;
			}
		}
		headB = slow.next;
		slow.next = null;
		head = this.mergeSortByMaterial(head);
		headB = this.mergeSortByMaterial(headB);
		var result = null;
		var curr = null;
		var l = null;
		var cmp;
		if(head == null) {
			return headB;
		}
		if(headB == null) {
			return head;
		}
		while(head != null && headB != null && head != null && headB != null) {
			var aid = head.renderOrderId;
			var bid = headB.renderOrderId;
			if(aid == bid) {
				var ma = head.materialId;
				var mb = headB.materialId;
				if(ma == mb) {
					if(head.zIndex < headB.zIndex) {
						cmp = 1;
					} else {
						cmp = -1;
					}
				} else if(ma > mb) {
					cmp = 1;
				} else {
					cmp = -1;
				}
			} else if(aid > bid) {
				cmp = 1;
			} else {
				cmp = -1;
			}
			if(cmp < 0) {
				l = head;
				head = head.next;
			} else {
				l = headB;
				headB = headB.next;
			}
			if(result == null) {
				result = l;
				curr = l;
			} else {
				curr.next = l;
				curr = l;
			}
		}
		if(head != null) {
			curr.next = head;
		} else if(headB != null) {
			curr.next = headB;
		}
		return result;
	}
	,__class__: away3d_core_sort_RenderableMergeSort
};
var away3d_core_traverse_PartitionTraverser = function() {
};
$hxClasses["away3d.core.traverse.PartitionTraverser"] = away3d_core_traverse_PartitionTraverser;
away3d_core_traverse_PartitionTraverser.__name__ = ["away3d","core","traverse","PartitionTraverser"];
away3d_core_traverse_PartitionTraverser.prototype = {
	scene: null
	,_entryPoint: null
	,enterNode: function(node) {
		return true;
	}
	,applySkyBox: function(renderable) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyRenderable: function(renderable) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyUnknownLight: function(light) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyDirectionalLight: function(light) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyPointLight: function(light) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyLightProbe: function(light) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,applyEntity: function(entity) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_entryPoint: function() {
		return this._entryPoint;
	}
	,__class__: away3d_core_traverse_PartitionTraverser
};
var away3d_core_traverse_EntityCollector = function() {
	away3d_core_traverse_PartitionTraverser.call(this);
	this.init();
};
$hxClasses["away3d.core.traverse.EntityCollector"] = away3d_core_traverse_EntityCollector;
away3d_core_traverse_EntityCollector.__name__ = ["away3d","core","traverse","EntityCollector"];
away3d_core_traverse_EntityCollector.__super__ = away3d_core_traverse_PartitionTraverser;
away3d_core_traverse_EntityCollector.prototype = $extend(away3d_core_traverse_PartitionTraverser.prototype,{
	_skyBox: null
	,_opaqueRenderableHead: null
	,_blendedRenderableHead: null
	,_entityHead: null
	,_renderableListItemPool: null
	,_entityListItemPool: null
	,_lights: null
	,_directionalLights: null
	,_pointLights: null
	,_lightProbes: null
	,_numEntities: null
	,_numLights: null
	,_numTriangles: null
	,_numMouseEnableds: null
	,_camera: null
	,_numDirectionalLights: null
	,_numPointLights: null
	,_numLightProbes: null
	,_cameraForward: null
	,_customCullPlanes: null
	,_cullPlanes: null
	,_numCullPlanes: null
	,init: function() {
		this._lights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._directionalLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._pointLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._lightProbes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._renderableListItemPool = new away3d_core_data_RenderableListItemPool();
		this._entityListItemPool = new away3d_core_data_EntityListItemPool();
		this._numEntities = 0;
		this._numLights = 0;
		this._numTriangles = 0;
		this._numMouseEnableds = 0;
		this._numDirectionalLights = 0;
		this._numPointLights = 0;
		this._numLightProbes = 0;
		this._numCullPlanes = 0;
	}
	,get_camera: function() {
		return this._camera;
	}
	,set_camera: function(value) {
		this._camera = value;
		this._entryPoint = this._camera.get_scenePosition();
		this._cameraForward = away3d_core_math_Matrix3DUtils.getForward(this._camera.get_transform(),this._cameraForward);
		this._cullPlanes = this._camera.get_frustumPlanes();
		return value;
	}
	,get_cullPlanes: function() {
		return this._customCullPlanes;
	}
	,set_cullPlanes: function(value) {
		this._customCullPlanes = value;
		return value;
	}
	,get_numMouseEnableds: function() {
		return this._numMouseEnableds;
	}
	,get_skyBox: function() {
		return this._skyBox;
	}
	,get_opaqueRenderableHead: function() {
		return this._opaqueRenderableHead;
	}
	,set_opaqueRenderableHead: function(value) {
		this._opaqueRenderableHead = value;
		return value;
	}
	,get_blendedRenderableHead: function() {
		return this._blendedRenderableHead;
	}
	,set_blendedRenderableHead: function(value) {
		this._blendedRenderableHead = value;
		return value;
	}
	,get_entityHead: function() {
		return this._entityHead;
	}
	,get_lights: function() {
		return this._lights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,clear: function() {
		if(this._camera != null) {
			this._entryPoint = this._camera.get_scenePosition();
			this._cameraForward = away3d_core_math_Matrix3DUtils.getForward(this._camera.get_transform(),this._cameraForward);
		}
		this._cullPlanes = this._customCullPlanes != null ? this._customCullPlanes : this._camera != null ? this._camera.get_frustumPlanes() : null;
		this._numCullPlanes = this._cullPlanes != null ? this._cullPlanes.get_length() : 0;
		this._numTriangles = this._numMouseEnableds = 0;
		this._blendedRenderableHead = null;
		this._opaqueRenderableHead = null;
		this._entityHead = null;
		this._renderableListItemPool.freeAll();
		this._entityListItemPool.freeAll();
		this._skyBox = null;
		if(this._numLights > 0) {
			this._lights.set_length(this._numLights = 0);
		}
		if(this._numDirectionalLights > 0) {
			this._directionalLights.set_length(this._numDirectionalLights = 0);
		}
		if(this._numPointLights > 0) {
			this._pointLights.set_length(this._numPointLights = 0);
		}
		if(this._numLightProbes > 0) {
			this._lightProbes.set_length(this._numLightProbes = 0);
		}
	}
	,enterNode: function(node) {
		var enter = away3d_core_traverse_PartitionTraverser._collectionMark != node._collectionMark && node.isInFrustum(this._cullPlanes,this._numCullPlanes);
		node._collectionMark = away3d_core_traverse_PartitionTraverser._collectionMark;
		return enter;
	}
	,applySkyBox: function(renderable) {
		this._skyBox = renderable;
	}
	,applyRenderable: function(renderable) {
		var material;
		var entity = renderable.get_sourceEntity();
		if(renderable.get_mouseEnabled()) {
			++this._numMouseEnableds;
		}
		this._numTriangles += renderable.get_numTriangles();
		material = renderable.get_material();
		if(material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.materialId = material._uniqueId;
			item.renderOrderId = material._renderOrderId;
			item.cascaded = false;
			var entityScenePos = entity.get_scenePosition();
			var dx = this._entryPoint.x - entityScenePos.x;
			var dy = this._entryPoint.y - entityScenePos.y;
			var dz = this._entryPoint.z - entityScenePos.z;
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z + entity.get_zOffset();
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			if(material.get_requiresBlending()) {
				item.next = this._blendedRenderableHead;
				this._blendedRenderableHead = item;
			} else {
				item.next = this._opaqueRenderableHead;
				this._opaqueRenderableHead = item;
			}
		}
	}
	,applyEntity: function(entity) {
		++this._numEntities;
		var item = this._entityListItemPool.getItem();
		item.entity = entity;
		item.next = this._entityHead;
		this._entityHead = item;
	}
	,applyUnknownLight: function(light) {
		this._lights.set(this._numLights++,light);
	}
	,applyDirectionalLight: function(light) {
		this._lights.set(this._numLights++,light);
		this._directionalLights.set(this._numDirectionalLights++,light);
	}
	,applyPointLight: function(light) {
		this._lights.set(this._numLights++,light);
		this._pointLights.set(this._numPointLights++,light);
	}
	,applyLightProbe: function(light) {
		this._lights.set(this._numLights++,light);
		this._lightProbes.set(this._numLightProbes++,light);
	}
	,get_numTriangles: function() {
		return this._numTriangles;
	}
	,cleanUp: function() {
	}
	,__class__: away3d_core_traverse_EntityCollector
});
var away3d_core_traverse_RaycastCollector = function() {
	this._rayDirection = new openfl_geom_Vector3D();
	this._rayPosition = new openfl_geom_Vector3D();
	away3d_core_traverse_EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.RaycastCollector"] = away3d_core_traverse_RaycastCollector;
away3d_core_traverse_RaycastCollector.__name__ = ["away3d","core","traverse","RaycastCollector"];
away3d_core_traverse_RaycastCollector.__super__ = away3d_core_traverse_EntityCollector;
away3d_core_traverse_RaycastCollector.prototype = $extend(away3d_core_traverse_EntityCollector.prototype,{
	_rayPosition: null
	,_rayDirection: null
	,get_rayPosition: function() {
		return this._rayPosition;
	}
	,set_rayPosition: function(value) {
		this._rayPosition = value;
		return value;
	}
	,get_rayDirection: function() {
		return this._rayDirection;
	}
	,set_rayDirection: function(value) {
		this._rayDirection = value;
		return value;
	}
	,enterNode: function(node) {
		return node.isIntersectingRay(this._rayPosition,this._rayDirection);
	}
	,applySkyBox: function(renderable) {
	}
	,applyRenderable: function(renderable) {
	}
	,applyUnknownLight: function(light) {
	}
	,__class__: away3d_core_traverse_RaycastCollector
});
var away3d_core_traverse_ShadowCasterCollector = function() {
	away3d_core_traverse_EntityCollector.call(this);
};
$hxClasses["away3d.core.traverse.ShadowCasterCollector"] = away3d_core_traverse_ShadowCasterCollector;
away3d_core_traverse_ShadowCasterCollector.__name__ = ["away3d","core","traverse","ShadowCasterCollector"];
away3d_core_traverse_ShadowCasterCollector.__super__ = away3d_core_traverse_EntityCollector;
away3d_core_traverse_ShadowCasterCollector.prototype = $extend(away3d_core_traverse_EntityCollector.prototype,{
	applyRenderable: function(renderable) {
		var material = renderable.get_material();
		var entity = renderable.get_sourceEntity();
		if(renderable.get_castsShadows() && material != null) {
			var item = this._renderableListItemPool.getItem();
			item.renderable = renderable;
			item.next = this._opaqueRenderableHead;
			item.cascaded = false;
			var entityScenePos = entity.get_scenePosition();
			var dx = this._entryPoint.x - entityScenePos.x;
			var dy = this._entryPoint.y - entityScenePos.y;
			var dz = this._entryPoint.z - entityScenePos.z;
			item.zIndex = dx * this._cameraForward.x + dy * this._cameraForward.y + dz * this._cameraForward.z;
			item.renderSceneTransform = renderable.getRenderSceneTransform(this._camera);
			item.renderOrderId = material._depthPassId;
			this._opaqueRenderableHead = item;
		}
	}
	,applyUnknownLight: function(light) {
	}
	,applyDirectionalLight: function(light) {
	}
	,applyPointLight: function(light) {
	}
	,applyLightProbe: function(light) {
	}
	,applySkyBox: function(renderable) {
	}
	,__class__: away3d_core_traverse_ShadowCasterCollector
});
var away3d_debug_Debug = function() { };
$hxClasses["away3d.debug.Debug"] = away3d_debug_Debug;
away3d_debug_Debug.__name__ = ["away3d","debug","Debug"];
away3d_debug_Debug.clear = function() {
};
away3d_debug_Debug.delimiter = function() {
};
away3d_debug_Debug.trace = function(message) {
	if(away3d_debug_Debug.active) {
		haxe_Log.trace(message,{ fileName : "Debug.hx", lineNumber : 24, className : "away3d.debug.Debug", methodName : "trace"});
	}
};
away3d_debug_Debug.warning = function(message) {
	if(away3d_debug_Debug.warningsAsErrors) {
		away3d_debug_Debug.error(message);
		return;
	}
	haxe_Log.trace("WARNING: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 33, className : "away3d.debug.Debug", methodName : "warning"});
};
away3d_debug_Debug.error = function(message) {
	haxe_Log.trace("ERROR: " + Std.string(message),{ fileName : "Debug.hx", lineNumber : 38, className : "away3d.debug.Debug", methodName : "error"});
	throw new js__$Boot_HaxeError(new openfl_errors_Error(message));
};
var away3d_entities_Mesh = function(geometry,material) {
	this._shareAnimationGeometry = true;
	this._castsShadows = true;
	away3d_entities_Entity.call(this);
	this._subMeshes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.set_geometry(geometry != null ? geometry : new away3d_core_base_Geometry());
	this.set_material(material != null ? material : away3d_materials_utils_DefaultMaterialManager.getDefaultMaterial(this));
};
$hxClasses["away3d.entities.Mesh"] = away3d_entities_Mesh;
away3d_entities_Mesh.__name__ = ["away3d","entities","Mesh"];
away3d_entities_Mesh.__interfaces__ = [away3d_library_assets_IAsset,away3d_core_base_IMaterialOwner];
away3d_entities_Mesh.__super__ = away3d_entities_Entity;
away3d_entities_Mesh.prototype = $extend(away3d_entities_Entity.prototype,{
	_subMeshes: null
	,_geometry: null
	,_material: null
	,_animator: null
	,_castsShadows: null
	,_shareAnimationGeometry: null
	,bakeTransformations: function() {
		this.get_geometry().applyTransformation(this.get_transform());
		this.get_transform().identity();
	}
	,get_assetType: function() {
		return "mesh";
	}
	,onGeometryBoundsInvalid: function(event) {
		this.invalidateBounds();
	}
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		this._castsShadows = value;
		return value;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_animator: function(value) {
		if(this._animator != null) {
			this._animator.removeOwner(this);
		}
		this._animator = value;
		var oldMaterial = this.get_material();
		this.set_material(null);
		this.set_material(oldMaterial);
		var len = this._subMeshes.get_length();
		var subMesh;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			subMesh = this._subMeshes.get(i);
			oldMaterial = subMesh._material;
			if(oldMaterial != null) {
				subMesh.set_material(null);
				subMesh.set_material(oldMaterial);
			}
		}
		if(this._animator != null) {
			this._animator.addOwner(this);
		}
		return value;
	}
	,get_geometry: function() {
		return this._geometry;
	}
	,set_geometry: function(value) {
		var i;
		if(this._geometry != null) {
			this._geometry.removeEventListener("BoundsInvalid",$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.removeEventListener("SubGeometryAdded",$bind(this,this.onSubGeometryAdded));
			this._geometry.removeEventListener("SubGeometryRemoved",$bind(this,this.onSubGeometryRemoved));
			var _g1 = 0;
			var _g = this._subMeshes.get_length();
			while(_g1 < _g) {
				var i1 = _g1++;
				this._subMeshes.get(i1).dispose();
			}
			this._subMeshes.set_length(0);
		}
		this._geometry = value;
		if(this._geometry != null) {
			this._geometry.addEventListener("BoundsInvalid",$bind(this,this.onGeometryBoundsInvalid));
			this._geometry.addEventListener("SubGeometryAdded",$bind(this,this.onSubGeometryAdded));
			this._geometry.addEventListener("SubGeometryRemoved",$bind(this,this.onSubGeometryRemoved));
			var subGeoms = this._geometry.get_subGeometries();
			var _g11 = 0;
			var _g2 = subGeoms.get_length();
			while(_g11 < _g2) {
				var i2 = _g11++;
				this.addSubMesh(subGeoms.get(i2));
			}
		}
		if(this._material != null) {
			this._material.removeOwner(this);
			this._material.addOwner(this);
		}
		return value;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		if(value == this._material) {
			return value;
		}
		if(this._material != null) {
			this._material.removeOwner(this);
		}
		this._material = value;
		if(this._material != null) {
			this._material.addOwner(this);
		}
		return value;
	}
	,get_subMeshes: function() {
		this._geometry.validate();
		return this._subMeshes;
	}
	,get_shareAnimationGeometry: function() {
		return this._shareAnimationGeometry;
	}
	,set_shareAnimationGeometry: function(value) {
		this._shareAnimationGeometry = value;
		return value;
	}
	,clearAnimationGeometry: function() {
		var len = this._subMeshes.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._subMeshes.get(i).animationSubGeometry = null;
		}
	}
	,dispose: function() {
		away3d_entities_Entity.prototype.dispose.call(this);
		this.set_material(null);
		this.set_geometry(null);
	}
	,disposeWithAnimatorAndChildren: function() {
		this.disposeWithChildren();
		if(this._animator != null) {
			this._animator.dispose();
		}
	}
	,clone: function() {
		var clone = new away3d_entities_Mesh(this._geometry,this._material);
		clone.set_transform(this.get_transform());
		clone.set_pivotPoint(this.get_pivotPoint());
		clone.set_partition(this.get_partition());
		clone.set_bounds(this._bounds.clone());
		clone.set_name(this.get_name());
		clone.set_castsShadows(this.get_castsShadows());
		clone.set_shareAnimationGeometry(this.get_shareAnimationGeometry());
		clone.set_mouseEnabled(this.get_mouseEnabled());
		clone.set_mouseChildren(this.get_mouseChildren());
		clone.extra = this.extra;
		var len = this._subMeshes.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			clone._subMeshes.get(i)._material = this._subMeshes.get(i)._material;
		}
		len = this.get_numChildren();
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			clone.addChild(js_Boot.__cast(this.getChildAt(i1).clone() , away3d_containers_ObjectContainer3D));
		}
		if(this._animator != null) {
			clone.set_animator(this._animator.clone());
		}
		return clone;
	}
	,updateBounds: function() {
		this._bounds.fromGeometry(this._geometry);
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_MeshNode(this);
	}
	,onSubGeometryAdded: function(event) {
		this.addSubMesh(event.get_subGeometry());
	}
	,onSubGeometryRemoved: function(event) {
		var subMesh;
		var subGeom = event.get_subGeometry();
		var len = this._subMeshes.get_length();
		var i = 0;
		while(i < len) {
			subMesh = this._subMeshes.get(i);
			if(subMesh.get_subGeometry() == subGeom) {
				subMesh.dispose();
				this._subMeshes.splice(i,1);
				break;
			}
			++i;
		}
		--len;
		while(i < len) {
			this._subMeshes.get(i)._index = i;
			++i;
		}
	}
	,addSubMesh: function(subGeometry) {
		var subMesh = new away3d_core_base_SubMesh(subGeometry,this,null);
		var len = this._subMeshes.get_length();
		subMesh._index = len;
		this._subMeshes.set(len,subMesh);
		this.invalidateBounds();
		return subMesh;
	}
	,getSubMeshForSubGeometry: function(subGeometry) {
		return this._subMeshes.get(this._geometry.get_subGeometries().indexOf(subGeometry,0));
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		this._pickingCollider.setLocalRay(this._pickingCollisionVO.localRayPosition,this._pickingCollisionVO.localRayDirection);
		this._pickingCollisionVO.renderable = null;
		var len = this._subMeshes.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var subMesh = this._subMeshes.get(i);
			if(this._pickingCollider.testSubMeshCollision(subMesh,this._pickingCollisionVO,shortestCollisionDistance)) {
				shortestCollisionDistance = this._pickingCollisionVO.rayEntryDistance;
				this._pickingCollisionVO.renderable = subMesh;
				if(!findClosest) {
					return true;
				}
			}
		}
		return this._pickingCollisionVO.renderable != null;
	}
	,__class__: away3d_entities_Mesh
});
var away3d_entities_SegmentSet = function() {
	this._indexSegments = 0;
	this._numIndices = 0;
	this._subSetCount = 0;
	away3d_entities_Entity.call(this);
	this._subSetCount = 0;
	this._subSets = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.addSubSet();
	this._segments = new haxe_ds_IntMap();
	this.set_material(new away3d_materials_SegmentMaterial());
};
$hxClasses["away3d.entities.SegmentSet"] = away3d_entities_SegmentSet;
away3d_entities_SegmentSet.__name__ = ["away3d","entities","SegmentSet"];
away3d_entities_SegmentSet.__interfaces__ = [away3d_core_base_IRenderable];
away3d_entities_SegmentSet.__super__ = away3d_entities_Entity;
away3d_entities_SegmentSet.prototype = $extend(away3d_entities_Entity.prototype,{
	_activeSubSet: null
	,_subSets: null
	,_subSetCount: null
	,_numIndices: null
	,_material: null
	,_animator: null
	,_hasData: null
	,_segments: null
	,_indexSegments: null
	,addSegment: function(segment) {
		segment.set_segmentsBase(this);
		this._hasData = true;
		var subSetIndex = this._subSets.get_length() - 1;
		var subSet = this._subSets.get(subSetIndex);
		if(subSet.vertices.get_length() + 44 > away3d_entities_SegmentSet.LIMIT) {
			subSet = this.addSubSet();
			++subSetIndex;
		}
		segment.set_index(subSet.vertices.get_length());
		segment.set_subSetIndex(subSetIndex);
		this.updateSegment(segment);
		var index = subSet.lineCount << 2;
		subSet.indices.push(index);
		subSet.indices.push(index + 1);
		subSet.indices.push(index + 2);
		subSet.indices.push(index + 3);
		subSet.indices.push(index + 2);
		subSet.indices.push(index + 1);
		subSet.numVertices = subSet.vertices.get_length() / 11 | 0;
		subSet.numIndices = subSet.indices.get_length();
		subSet.lineCount++;
		subSet.indexBufferDirty = true;
		var segRef = new away3d_entities_SegRef();
		segRef.index = index;
		segRef.subSetIndex = subSetIndex;
		segRef.segment = segment;
		this._segments.h[this._indexSegments] = segRef;
		this._indexSegments++;
	}
	,removeSegmentByIndex: function(index,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		var segRef;
		if(index >= this._indexSegments) {
			return;
		}
		if(this._segments.h.hasOwnProperty(index)) {
			segRef = this._segments.h[index];
		} else {
			return;
		}
		var subSet;
		if(this._subSets.get(segRef.subSetIndex) == null) {
			return;
		}
		var subSetIndex = segRef.subSetIndex;
		subSet = this._subSets.get(segRef.subSetIndex);
		var segment = segRef.segment;
		var indices = subSet.indices;
		var ind = index * 6;
		var _g1 = ind;
		var _g = indices.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = i;
			var _g3 = indices;
			_g3.set(_g2,_g3.get(_g2) - 4);
		}
		subSet.indices.splice(index * 6,6);
		subSet.vertices.splice(index * 44,44);
		subSet.numVertices = subSet.vertices.get_length() / 11 | 0;
		subSet.numIndices = indices.get_length();
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount--;
		if(dispose) {
			segment.dispose();
			segment = null;
		} else {
			segment.set_index(-1);
			segment.set_segmentsBase(null);
		}
		if(subSet.lineCount == 0) {
			if(subSetIndex == 0) {
				this._hasData = false;
			} else {
				subSet.dispose();
				this._subSets.set(subSetIndex,null);
				this._subSets.splice(subSetIndex,1);
			}
		}
		this.reOrderIndices(subSetIndex,index);
		segRef = null;
		this._segments.remove(this._indexSegments);
		this._indexSegments--;
	}
	,removeSegment: function(segment,dispose) {
		if(dispose == null) {
			dispose = false;
		}
		if(segment.get_index() == -1) {
			return;
		}
		this.removeSegmentByIndex(segment.get_index() / 44 | 0);
	}
	,removeAllSegments: function() {
		var subSet;
		var _g1 = 0;
		var _g = this._subSetCount;
		while(_g1 < _g) {
			var i = _g1++;
			subSet = this._subSets.get(i);
			subSet.vertices = null;
			subSet.indices = null;
			if(subSet.vertexBuffer != null) {
				away3d_core_managers_Stage3DProxy.disposeVertexBuffer(subSet.vertexBuffer);
			}
			if(subSet.indexBuffer != null) {
				away3d_core_managers_Stage3DProxy.disposeIndexBuffer(subSet.indexBuffer);
			}
			subSet = null;
		}
		var segReg = this._segments.iterator();
		while(segReg.hasNext()) {
			var segReg1 = segReg.next();
			segReg1 = null;
		}
		this._segments = null;
		this._subSetCount = 0;
		this._activeSubSet = null;
		this._indexSegments = 0;
		this._subSets = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._segments = new haxe_ds_IntMap();
		this.addSubSet();
		this._hasData = false;
	}
	,getSegment: function(index) {
		if(index > this._indexSegments - 1) {
			return null;
		}
		return this._segments.h[index].segment;
	}
	,get_segmentCount: function() {
		return this._indexSegments;
	}
	,get_subSetCount: function() {
		return this._subSetCount;
	}
	,updateSegment: function(segment) {
		var start = segment._start;
		var end = segment._end;
		var startX = start.x;
		var startY = start.y;
		var startZ = start.z;
		var endX = end.x;
		var endY = end.y;
		var endZ = end.z;
		var startR = segment._startR;
		var startG = segment._startG;
		var startB = segment._startB;
		var endR = segment._endR;
		var endG = segment._endG;
		var endB = segment._endB;
		var index = segment.get_index();
		var t = segment.get_thickness();
		var subSet = this._subSets.get(segment.get_subSetIndex());
		var vertices = subSet.vertices;
		vertices.set(index++,startX);
		vertices.set(index++,startY);
		vertices.set(index++,startZ);
		vertices.set(index++,endX);
		vertices.set(index++,endY);
		vertices.set(index++,endZ);
		vertices.set(index++,t);
		vertices.set(index++,startR);
		vertices.set(index++,startG);
		vertices.set(index++,startB);
		vertices.set(index++,1);
		vertices.set(index++,endX);
		vertices.set(index++,endY);
		vertices.set(index++,endZ);
		vertices.set(index++,startX);
		vertices.set(index++,startY);
		vertices.set(index++,startZ);
		vertices.set(index++,-t);
		vertices.set(index++,endR);
		vertices.set(index++,endG);
		vertices.set(index++,endB);
		vertices.set(index++,1);
		vertices.set(index++,startX);
		vertices.set(index++,startY);
		vertices.set(index++,startZ);
		vertices.set(index++,endX);
		vertices.set(index++,endY);
		vertices.set(index++,endZ);
		vertices.set(index++,-t);
		vertices.set(index++,startR);
		vertices.set(index++,startG);
		vertices.set(index++,startB);
		vertices.set(index++,1);
		vertices.set(index++,endX);
		vertices.set(index++,endY);
		vertices.set(index++,endZ);
		vertices.set(index++,startX);
		vertices.set(index++,startY);
		vertices.set(index++,startZ);
		vertices.set(index++,t);
		vertices.set(index++,endR);
		vertices.set(index++,endG);
		vertices.set(index++,endB);
		vertices.set(index++,1);
		subSet.vertexBufferDirty = true;
		this.invalidateBounds();
	}
	,get_hasData: function() {
		return this._hasData;
	}
	,getIndexBuffer: function(stage3DProxy) {
		if(this._activeSubSet.indexContext3D != stage3DProxy.get_context3D() || this._activeSubSet.indexBufferDirty) {
			this._activeSubSet.indexBuffer = stage3DProxy.createIndexBuffer(this._activeSubSet.numIndices);
			this._activeSubSet.indexBuffer.uploadFromVector(this._activeSubSet.indices,0,this._activeSubSet.numIndices);
			this._activeSubSet.indexBufferDirty = false;
			this._activeSubSet.indexContext3D = stage3DProxy.get_context3D();
		}
		return this._activeSubSet.indexBuffer;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		var subSet = this._subSets.get(index);
		this._activeSubSet = subSet;
		this._numIndices = subSet.numIndices;
		if(subSet.vertexContext3D != stage3DProxy.get_context3D() || subSet.vertexBufferDirty) {
			if(subSet.vertexBuffer != null) {
				away3d_core_managers_Stage3DProxy.disposeVertexBuffer(subSet.vertexBuffer);
			}
			subSet.vertexBuffer = stage3DProxy.createVertexBuffer(subSet.numVertices,11);
			subSet.vertexBuffer.uploadFromVector(subSet.vertices,0,subSet.numVertices);
			subSet.vertexBufferDirty = false;
			subSet.vertexContext3D = stage3DProxy.get_context3D();
		}
		var vertexBuffer = subSet.vertexBuffer;
		var context3d = stage3DProxy._context3D;
		context3d.setVertexBufferAt(0,vertexBuffer,0,3);
		context3d.setVertexBufferAt(1,vertexBuffer,3,3);
		context3d.setVertexBufferAt(2,vertexBuffer,6,1);
		context3d.setVertexBufferAt(3,vertexBuffer,7,4);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
	}
	,reOrderIndices: function(subSetIndex,index) {
		var segRef;
		var _g1 = index;
		var _g = this._indexSegments - 1;
		while(_g1 < _g) {
			var i = _g1++;
			segRef = this._segments.h[i + 1];
			segRef.index = i;
			if(segRef.subSetIndex == subSetIndex) {
				var _g2 = segRef.segment;
				_g2.set_index(_g2.get_index() - 44);
			}
			this._segments.h[i] = segRef;
		}
	}
	,addSubSet: function() {
		var subSet = new away3d_entities_SubSet();
		this._subSets.push(subSet);
		subSet.vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		subSet.numVertices = 0;
		subSet.indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		subSet.numIndices = 0;
		subSet.vertexBufferDirty = true;
		subSet.indexBufferDirty = true;
		subSet.lineCount = 0;
		this._subSetCount++;
		return subSet;
	}
	,dispose: function() {
		away3d_entities_Entity.prototype.dispose.call(this);
		this.removeAllSegments();
		this._segments = null;
		this._material = null;
		var subSet = this._subSets.get(0);
		subSet.vertices = null;
		subSet.indices = null;
		this._subSets = null;
	}
	,get_mouseEnabled: function() {
		return false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_BoundingSphere();
	}
	,updateBounds: function() {
		var subSet;
		var len;
		var v;
		var index;
		var minX = Infinity;
		var minY = Infinity;
		var minZ = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var maxZ = -Infinity;
		var vertices;
		var i = 0;
		while(i < this._subSetCount) {
			subSet = this._subSets.get(i);
			index = 0;
			vertices = subSet.vertices;
			len = vertices.get_length();
			if(len == 0) {
				++i;
				continue;
			}
			while(index < len) {
				v = vertices.get(index++);
				if(v < minX) {
					minX = v;
				} else if(v > maxX) {
					maxX = v;
				}
				v = vertices.get(index++);
				if(v < minY) {
					minY = v;
				} else if(v > maxY) {
					maxY = v;
				}
				v = vertices.get(index++);
				if(v < minZ) {
					minZ = v;
				} else if(v > maxZ) {
					maxZ = v;
				}
				index += 8;
			}
			++i;
		}
		if(minX != Infinity) {
			this._bounds.fromExtremes(minX,minY,minZ,maxX,maxY,maxZ);
		} else {
			var min = .5;
			this._bounds.fromExtremes(-min,-min,-min,min,min,min);
		}
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_RenderableNode(this);
	}
	,get_numTriangles: function() {
		return this._numIndices / 3 | 0;
	}
	,get_sourceEntity: function() {
		return this;
	}
	,get_castsShadows: function() {
		return false;
	}
	,get_material: function() {
		return this._material;
	}
	,get_animator: function() {
		return this._animator;
	}
	,set_material: function(value) {
		if(value == this._material) {
			return value;
		}
		if(this._material != null) {
			this._material.removeOwner(this);
		}
		this._material = value;
		if(this._material != null) {
			this._material.addOwner(this);
		}
		return value;
	}
	,get_uvTransform: function() {
		return null;
	}
	,get_uvTransform2: function() {
		return null;
	}
	,get_vertexData: function() {
		return null;
	}
	,get_indexData: function() {
		return null;
	}
	,get_UVData: function() {
		return null;
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_vertexStride: function() {
		return 11;
	}
	,get_vertexNormalData: function() {
		return null;
	}
	,get_vertexTangentData: function() {
		return null;
	}
	,get_vertexOffset: function() {
		return 0;
	}
	,get_vertexNormalOffset: function() {
		return 0;
	}
	,get_vertexTangentOffset: function() {
		return 0;
	}
	,get_assetType: function() {
		return "segmentSet";
	}
	,getRenderSceneTransform: function(camera) {
		return this._sceneTransform;
	}
	,__class__: away3d_entities_SegmentSet
});
var away3d_entities_SegRef = function() {
};
$hxClasses["away3d.entities.SegRef"] = away3d_entities_SegRef;
away3d_entities_SegRef.__name__ = ["away3d","entities","SegRef"];
away3d_entities_SegRef.prototype = {
	index: null
	,subSetIndex: null
	,segment: null
	,__class__: away3d_entities_SegRef
};
var away3d_entities_SubSet = function() {
};
$hxClasses["away3d.entities.SubSet"] = away3d_entities_SubSet;
away3d_entities_SubSet.__name__ = ["away3d","entities","SubSet"];
away3d_entities_SubSet.prototype = {
	vertices: null
	,numVertices: null
	,indices: null
	,numIndices: null
	,vertexBufferDirty: null
	,indexBufferDirty: null
	,vertexContext3D: null
	,indexContext3D: null
	,vertexBuffer: null
	,indexBuffer: null
	,lineCount: null
	,dispose: function() {
		this.vertices = null;
		if(this.vertexBuffer != null) {
			away3d_core_managers_Stage3DProxy.disposeVertexBuffer(this.vertexBuffer);
		}
		if(this.indexBuffer != null) {
			away3d_core_managers_Stage3DProxy.disposeIndexBuffer(this.indexBuffer);
		}
	}
	,__class__: away3d_entities_SubSet
};
var away3d_entities_Sprite3D = function(material,width,height) {
	this._shadowCaster = false;
	away3d_entities_Entity.call(this);
	this.set_material(material);
	this._width = width;
	this._height = height;
	this._spriteMatrix = new openfl_geom_Matrix3D();
	if(away3d_entities_Sprite3D._geometry == null) {
		away3d_entities_Sprite3D._geometry = new away3d_core_base_SubGeometry();
		var tmp = away3d_entities_Sprite3D._geometry;
		var a = [-.5,.5,.0,.5,.5,.0,.5,-.5,.0,-.5,-.5,.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		tmp.updateVertexData(vector);
		var tmp1 = away3d_entities_Sprite3D._geometry;
		var a1 = [.0,.0,1.0,.0,1.0,1.0,.0,1.0];
		var vector1 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector1.set(i1,a1[i1]);
		}
		tmp1.updateUVData(vector1);
		var tmp2 = away3d_entities_Sprite3D._geometry;
		var a2 = [0,1,2,0,2,3];
		var vector2 = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var _g12 = 0;
		var _g3 = a2.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			vector2.set(i2,a2[i2]);
		}
		tmp2.updateIndexData(vector2);
		var tmp3 = away3d_entities_Sprite3D._geometry;
		var a3 = [1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0,1.0,0.0,0.0];
		var vector3 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g13 = 0;
		var _g4 = a3.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			vector3.set(i3,a3[i3]);
		}
		tmp3.updateVertexTangentData(vector3);
		var tmp4 = away3d_entities_Sprite3D._geometry;
		var a4 = [.0,.0,-1.0,.0,.0,-1.0,.0,.0,-1.0,.0,.0,-1.0];
		var vector4 = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g14 = 0;
		var _g5 = a4.length;
		while(_g14 < _g5) {
			var i4 = _g14++;
			vector4.set(i4,a4[i4]);
		}
		tmp4.updateVertexNormalData(vector4);
	}
};
$hxClasses["away3d.entities.Sprite3D"] = away3d_entities_Sprite3D;
away3d_entities_Sprite3D.__name__ = ["away3d","entities","Sprite3D"];
away3d_entities_Sprite3D.__interfaces__ = [away3d_core_base_IRenderable];
away3d_entities_Sprite3D.__super__ = away3d_entities_Entity;
away3d_entities_Sprite3D.prototype = $extend(away3d_entities_Entity.prototype,{
	_material: null
	,_spriteMatrix: null
	,_animator: null
	,_pickingSubMesh: null
	,_pickingTransform: null
	,_camera: null
	,_width: null
	,_height: null
	,_shadowCaster: null
	,set_pickingCollider: function(value) {
		away3d_entities_Entity.prototype.set_pickingCollider.call(this,value);
		if(value != null) {
			this._pickingSubMesh = new away3d_core_base_SubMesh(away3d_entities_Sprite3D._geometry,null);
			this._pickingTransform = new openfl_geom_Matrix3D();
		}
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._width == value) {
			return value;
		}
		this._width = value;
		this.invalidateTransform();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._height == value) {
			return value;
		}
		this._height = value;
		this.invalidateTransform();
		return value;
	}
	,activateVertexBuffer: function(index,stage3DProxy) {
		away3d_entities_Sprite3D._geometry.activateVertexBuffer(index,stage3DProxy);
	}
	,activateUVBuffer: function(index,stage3DProxy) {
		away3d_entities_Sprite3D._geometry.activateUVBuffer(index,stage3DProxy);
	}
	,activateSecondaryUVBuffer: function(index,stage3DProxy) {
		away3d_entities_Sprite3D._geometry.activateSecondaryUVBuffer(index,stage3DProxy);
	}
	,activateVertexNormalBuffer: function(index,stage3DProxy) {
		away3d_entities_Sprite3D._geometry.activateVertexNormalBuffer(index,stage3DProxy);
	}
	,activateVertexTangentBuffer: function(index,stage3DProxy) {
		away3d_entities_Sprite3D._geometry.activateVertexTangentBuffer(index,stage3DProxy);
	}
	,getIndexBuffer: function(stage3DProxy) {
		return away3d_entities_Sprite3D._geometry.getIndexBuffer(stage3DProxy);
	}
	,get_numTriangles: function() {
		return 2;
	}
	,get_sourceEntity: function() {
		return this;
	}
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		if(value == this._material) {
			return value;
		}
		if(this._material != null) {
			this._material.removeOwner(this);
		}
		this._material = value;
		if(this._material != null) {
			this._material.addOwner(this);
		}
		return value;
	}
	,get_animator: function() {
		return this._animator;
	}
	,get_castsShadows: function() {
		return this._shadowCaster;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_AxisAlignedBoundingBox();
	}
	,updateBounds: function() {
		this._bounds.fromExtremes(-.5 * this._scaleX,-.5 * this._scaleY,-.5 * this._scaleZ,.5 * this._scaleX,.5 * this._scaleY,.5 * this._scaleZ);
		this._boundsInvalid = false;
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_RenderableNode(this);
	}
	,updateTransform: function() {
		away3d_entities_Entity.prototype.updateTransform.call(this);
		this._transform.prependScale(this._width,this._height,Math.max(this._width,this._height));
	}
	,get_uvTransform: function() {
		return null;
	}
	,get_uvTransform2: function() {
		return null;
	}
	,get_vertexData: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexData();
	}
	,get_indexData: function() {
		return away3d_entities_Sprite3D._geometry.get_indexData();
	}
	,get_UVData: function() {
		return away3d_entities_Sprite3D._geometry.get_UVData();
	}
	,get_numVertices: function() {
		return away3d_entities_Sprite3D._geometry.get_numVertices();
	}
	,get_vertexStride: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexStride();
	}
	,get_vertexNormalData: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexNormalData();
	}
	,get_vertexTangentData: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexTangentData();
	}
	,get_vertexOffset: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexOffset();
	}
	,get_vertexNormalOffset: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexNormalOffset();
	}
	,get_vertexTangentOffset: function() {
		return away3d_entities_Sprite3D._geometry.get_vertexTangentOffset();
	}
	,collidesBefore: function(shortestCollisionDistance,findClosest) {
		var viewTransform = this._camera.get_inverseSceneTransform().clone();
		viewTransform.transpose();
		var rawViewTransform = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		viewTransform.copyRawDataTo(rawViewTransform);
		rawViewTransform.set(3,0);
		rawViewTransform.set(7,0);
		rawViewTransform.set(11,0);
		rawViewTransform.set(12,0);
		rawViewTransform.set(13,0);
		rawViewTransform.set(14,0);
		this._pickingTransform.copyRawDataFrom(rawViewTransform);
		this._pickingTransform.prependScale(this._width,this._height,Math.max(this._width,this._height));
		this._pickingTransform.appendTranslation(this.get_scenePosition().x,this.get_scenePosition().y,this.get_scenePosition().z);
		this._pickingTransform.invert();
		var localRayPosition = this._pickingTransform.transformVector(this._pickingCollisionVO.rayPosition);
		var localRayDirection = this._pickingTransform.deltaTransformVector(this._pickingCollisionVO.rayDirection);
		this._pickingCollider.setLocalRay(localRayPosition,localRayDirection);
		this._pickingCollisionVO.renderable = null;
		if(this._pickingCollider.testSubMeshCollision(this._pickingSubMesh,this._pickingCollisionVO,shortestCollisionDistance)) {
			this._pickingCollisionVO.renderable = this._pickingSubMesh;
		}
		return this._pickingCollisionVO.renderable != null;
	}
	,getRenderSceneTransform: function(camera) {
		var comps = away3d_core_math_Matrix3DUtils.decompose(camera.get_sceneTransform());
		var scale = comps.get(2);
		comps.get(0).x = this.get_scenePosition().x;
		comps.get(0).y = this.get_scenePosition().y;
		comps.get(0).z = this.get_scenePosition().z;
		scale.x = this._width * this._scaleX;
		scale.y = this._height * this._scaleY;
		this._spriteMatrix.recompose(comps);
		return this._spriteMatrix;
	}
	,__class__: away3d_entities_Sprite3D
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var away3d_errors_AbstractMethodError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "An abstract method was called! Either an instance of an abstract class was created, or an abstract method was not overridden by the subclass.";
	}
	openfl_errors_Error.call(this,message,id);
};
$hxClasses["away3d.errors.AbstractMethodError"] = away3d_errors_AbstractMethodError;
away3d_errors_AbstractMethodError.__name__ = ["away3d","errors","AbstractMethodError"];
away3d_errors_AbstractMethodError.__super__ = openfl_errors_Error;
away3d_errors_AbstractMethodError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: away3d_errors_AbstractMethodError
});
var away3d_errors_AnimationSetError = function(message) {
	openfl_errors_Error.call(this,message);
};
$hxClasses["away3d.errors.AnimationSetError"] = away3d_errors_AnimationSetError;
away3d_errors_AnimationSetError.__name__ = ["away3d","errors","AnimationSetError"];
away3d_errors_AnimationSetError.__super__ = openfl_errors_Error;
away3d_errors_AnimationSetError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: away3d_errors_AnimationSetError
});
var away3d_events_AnimatorEvent = function(type,animator) {
	openfl_events_Event.call(this,type,false,false);
	this._animator = animator;
};
$hxClasses["away3d.events.AnimatorEvent"] = away3d_events_AnimatorEvent;
away3d_events_AnimatorEvent.__name__ = ["away3d","events","AnimatorEvent"];
away3d_events_AnimatorEvent.__super__ = openfl_events_Event;
away3d_events_AnimatorEvent.prototype = $extend(openfl_events_Event.prototype,{
	_animator: null
	,get_animator: function() {
		return this._animator;
	}
	,clone: function() {
		return new away3d_events_AnimatorEvent(this.type,this._animator);
	}
	,__class__: away3d_events_AnimatorEvent
});
var away3d_events_Asset3DEvent = function(type,asset,prevName) {
	openfl_events_Event.call(this,type);
	this._asset = asset;
	if(prevName != null) {
		this._prevName = prevName;
	} else {
		this._prevName = this._asset != null ? this._asset.get_name() : null;
	}
};
$hxClasses["away3d.events.Asset3DEvent"] = away3d_events_Asset3DEvent;
away3d_events_Asset3DEvent.__name__ = ["away3d","events","Asset3DEvent"];
away3d_events_Asset3DEvent.__super__ = openfl_events_Event;
away3d_events_Asset3DEvent.prototype = $extend(openfl_events_Event.prototype,{
	_asset: null
	,_prevName: null
	,get_asset: function() {
		return this._asset;
	}
	,get_assetPrevName: function() {
		return this._prevName;
	}
	,clone: function() {
		return new away3d_events_Asset3DEvent(this.type,this.get_asset(),this.get_assetPrevName());
	}
	,__class__: away3d_events_Asset3DEvent
});
var away3d_events_CameraEvent = function(type,camera,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this._camera = camera;
};
$hxClasses["away3d.events.CameraEvent"] = away3d_events_CameraEvent;
away3d_events_CameraEvent.__name__ = ["away3d","events","CameraEvent"];
away3d_events_CameraEvent.__super__ = openfl_events_Event;
away3d_events_CameraEvent.prototype = $extend(openfl_events_Event.prototype,{
	_camera: null
	,get_camera: function() {
		return this._camera;
	}
	,clone: function() {
		return new away3d_events_CameraEvent(this.type,this._camera,this.bubbles,this.cancelable);
	}
	,__class__: away3d_events_CameraEvent
});
var away3d_events_GeometryEvent = function(type,subGeometry) {
	openfl_events_Event.call(this,type,false,false);
	this._subGeometry = subGeometry;
};
$hxClasses["away3d.events.GeometryEvent"] = away3d_events_GeometryEvent;
away3d_events_GeometryEvent.__name__ = ["away3d","events","GeometryEvent"];
away3d_events_GeometryEvent.__super__ = openfl_events_Event;
away3d_events_GeometryEvent.prototype = $extend(openfl_events_Event.prototype,{
	_subGeometry: null
	,get_subGeometry: function() {
		return this._subGeometry;
	}
	,clone: function() {
		return new away3d_events_GeometryEvent(this.type,this._subGeometry);
	}
	,__class__: away3d_events_GeometryEvent
});
var away3d_events_LensEvent = function(type,lens,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this._lens = lens;
};
$hxClasses["away3d.events.LensEvent"] = away3d_events_LensEvent;
away3d_events_LensEvent.__name__ = ["away3d","events","LensEvent"];
away3d_events_LensEvent.__super__ = openfl_events_Event;
away3d_events_LensEvent.prototype = $extend(openfl_events_Event.prototype,{
	_lens: null
	,get_lens: function() {
		return this._lens;
	}
	,clone: function() {
		return new away3d_events_LensEvent(this.type,this._lens,this.bubbles,this.cancelable);
	}
	,__class__: away3d_events_LensEvent
});
var away3d_events_LightEvent = function(type) {
	openfl_events_Event.call(this,type);
};
$hxClasses["away3d.events.LightEvent"] = away3d_events_LightEvent;
away3d_events_LightEvent.__name__ = ["away3d","events","LightEvent"];
away3d_events_LightEvent.__super__ = openfl_events_Event;
away3d_events_LightEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		return new away3d_events_LightEvent(this.type);
	}
	,__class__: away3d_events_LightEvent
});
var away3d_events_Object3DEvent = function(type,object) {
	openfl_events_Event.call(this,type);
	this.object = object;
};
$hxClasses["away3d.events.Object3DEvent"] = away3d_events_Object3DEvent;
away3d_events_Object3DEvent.__name__ = ["away3d","events","Object3DEvent"];
away3d_events_Object3DEvent.__super__ = openfl_events_Event;
away3d_events_Object3DEvent.prototype = $extend(openfl_events_Event.prototype,{
	object: null
	,clone: function() {
		return new away3d_events_Object3DEvent(this.type,this.object);
	}
	,__class__: away3d_events_Object3DEvent
});
var away3d_events_Scene3DEvent = function(type,objectContainer) {
	this.objectContainer3D = objectContainer;
	openfl_events_Event.call(this,type);
};
$hxClasses["away3d.events.Scene3DEvent"] = away3d_events_Scene3DEvent;
away3d_events_Scene3DEvent.__name__ = ["away3d","events","Scene3DEvent"];
away3d_events_Scene3DEvent.__super__ = openfl_events_Event;
away3d_events_Scene3DEvent.prototype = $extend(openfl_events_Event.prototype,{
	objectContainer3D: null
	,clone: function() {
		return new away3d_events_Scene3DEvent(this.type,this.objectContainer3D);
	}
	,__class__: away3d_events_Scene3DEvent
});
var away3d_events_ShadingMethodEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.ShadingMethodEvent"] = away3d_events_ShadingMethodEvent;
away3d_events_ShadingMethodEvent.__name__ = ["away3d","events","ShadingMethodEvent"];
away3d_events_ShadingMethodEvent.__super__ = openfl_events_Event;
away3d_events_ShadingMethodEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: away3d_events_ShadingMethodEvent
});
var away3d_events_Stage3DEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["away3d.events.Stage3DEvent"] = away3d_events_Stage3DEvent;
away3d_events_Stage3DEvent.__name__ = ["away3d","events","Stage3DEvent"];
away3d_events_Stage3DEvent.__super__ = openfl_events_Event;
away3d_events_Stage3DEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: away3d_events_Stage3DEvent
});
var away3d_events_TouchEvent3D = function(type) {
	this._allowedToPropagate = true;
	openfl_events_Event.call(this,type,true,true);
};
$hxClasses["away3d.events.TouchEvent3D"] = away3d_events_TouchEvent3D;
away3d_events_TouchEvent3D.__name__ = ["away3d","events","TouchEvent3D"];
away3d_events_TouchEvent3D.__super__ = openfl_events_Event;
away3d_events_TouchEvent3D.prototype = $extend(openfl_events_Event.prototype,{
	_allowedToPropagate: null
	,_parentEvent: null
	,screenX: null
	,screenY: null
	,view: null
	,object: null
	,renderable: null
	,material: null
	,uv: null
	,index: null
	,subGeometryIndex: null
	,localPosition: null
	,localNormal: null
	,ctrlKey: null
	,altKey: null
	,shiftKey: null
	,touchPointID: null
	,stopPropagation: function() {
		openfl_events_Event.prototype.stopPropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) {
			this._parentEvent._allowedToPropagate = false;
		}
	}
	,stopImmediatePropagation: function() {
		openfl_events_Event.prototype.stopImmediatePropagation.call(this);
		this._allowedToPropagate = false;
		if(this._parentEvent != null) {
			this._parentEvent._allowedToPropagate = false;
		}
	}
	,clone: function() {
		var result = new away3d_events_TouchEvent3D(this.type);
		result.screenX = this.screenX;
		result.screenY = this.screenY;
		result.view = this.view;
		result.object = this.object;
		result.renderable = this.renderable;
		result.material = this.material;
		result.uv = this.uv;
		result.localPosition = this.localPosition;
		result.localNormal = this.localNormal;
		result.index = this.index;
		result.subGeometryIndex = this.subGeometryIndex;
		result.ctrlKey = this.ctrlKey;
		result.shiftKey = this.shiftKey;
		result._parentEvent = this;
		return result;
	}
	,get_scenePosition: function() {
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			return (js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform().transformVector(this.localPosition);
		} else {
			return this.localPosition;
		}
	}
	,get_sceneNormal: function() {
		if(js_Boot.__instanceof(this.object,away3d_containers_ObjectContainer3D)) {
			var sceneNormal = (js_Boot.__cast(this.object , away3d_containers_ObjectContainer3D)).get_sceneTransform().deltaTransformVector(this.localNormal);
			sceneNormal.normalize();
			return sceneNormal;
		} else {
			return this.localNormal;
		}
	}
	,__class__: away3d_events_TouchEvent3D
});
var away3d_extrusions_LatheExtrude = function(material,profile,axis,revolutions,subdivision,coverall,centerMesh,flip,thickness,preciseThickness,offsetRadius,materials,ignoreSides,tweek,smoothSurface) {
	if(smoothSurface == null) {
		smoothSurface = true;
	}
	if(ignoreSides == null) {
		ignoreSides = "";
	}
	if(offsetRadius == null) {
		offsetRadius = 0;
	}
	if(preciseThickness == null) {
		preciseThickness = true;
	}
	if(thickness == null) {
		thickness = 0;
	}
	if(flip == null) {
		flip = false;
	}
	if(centerMesh == null) {
		centerMesh = false;
	}
	if(coverall == null) {
		coverall = true;
	}
	if(subdivision == null) {
		subdivision = 10;
	}
	if(revolutions == null) {
		revolutions = 1;
	}
	if(axis == null) {
		axis = "y";
	}
	this._MaterialsSubGeometries = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._geomDirty = true;
	this._startRotationOffset = 0;
	this._prevOffsetRadius = 0;
	var geom = new away3d_core_base_Geometry();
	this._subGeometry = new away3d_core_base_SubGeometry();
	if(material == null && materials != null && materials.get_front() != null) {
		material = materials.get_front();
	}
	away3d_entities_Mesh.call(this,geom,material);
	this._profile = profile;
	this._axis = axis;
	this._revolutions = revolutions;
	this._subdivision = subdivision < 3 ? 3 : subdivision;
	this._offsetRadius = offsetRadius;
	this._materials = materials;
	this._coverAll = coverall;
	this._flip = flip;
	this._centerMesh = centerMesh;
	this._thickness = Math.abs(thickness);
	this._preciseThickness = preciseThickness;
	this._ignoreSides = ignoreSides;
	this._tweek = tweek;
	this._smoothSurface = smoothSurface;
};
$hxClasses["away3d.extrusions.LatheExtrude"] = away3d_extrusions_LatheExtrude;
away3d_extrusions_LatheExtrude.__name__ = ["away3d","extrusions","LatheExtrude"];
away3d_extrusions_LatheExtrude.__super__ = away3d_entities_Mesh;
away3d_extrusions_LatheExtrude.prototype = $extend(away3d_entities_Mesh.prototype,{
	_profile: null
	,_lastProfile: null
	,_keepLastProfile: null
	,_axis: null
	,_revolutions: null
	,_subdivision: null
	,_offsetRadius: null
	,_prevOffsetRadius: null
	,_materials: null
	,_coverAll: null
	,_flip: null
	,_centerMesh: null
	,_thickness: null
	,_preciseThickness: null
	,_ignoreSides: null
	,_smoothSurface: null
	,_tweek: null
	,_varr: null
	,_varr2: null
	,_uvarr: null
	,_startRotationOffset: null
	,_geomDirty: null
	,_subGeometry: null
	,_MaterialsSubGeometries: null
	,_maxIndProfile: null
	,_uva: null
	,_uvb: null
	,_uvc: null
	,_uvd: null
	,_va: null
	,_vb: null
	,_vc: null
	,_vd: null
	,_uvs: null
	,_vertices: null
	,_indices: null
	,_normals: null
	,_normalTmp: null
	,_normal0: null
	,_normal1: null
	,_normal2: null
	,get_profile: function() {
		return this._profile;
	}
	,set_profile: function(val) {
		if(val.get_length() > 1) {
			this._profile = val;
			this.invalidateGeometry();
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("LatheExtrude error: the profile Vector.<Vector3D> must hold a mimimun of 2 vector3D's"));
		}
		return val;
	}
	,get_startRotationOffset: function() {
		return this._startRotationOffset;
	}
	,set_startRotationOffset: function(val) {
		this._startRotationOffset = val;
		return val;
	}
	,get_axis: function() {
		return this._axis;
	}
	,set_axis: function(val) {
		if(this._axis == val) {
			return val;
		}
		this._axis = val;
		this.invalidateGeometry();
		return val;
	}
	,get_revolutions: function() {
		return this._revolutions;
	}
	,set_revolutions: function(val) {
		if(this._revolutions == val) {
			return val;
		}
		this._revolutions = this._revolutions > .001 ? this._revolutions : .001;
		this._revolutions = val;
		this.invalidateGeometry();
		return val;
	}
	,get_subdivision: function() {
		return this._subdivision;
	}
	,set_subdivision: function(val) {
		if(val < 3) {
			val = 3;
		} else {
			val = val;
		}
		if(this._subdivision == val) {
			return val;
		}
		this._subdivision = val;
		this.invalidateGeometry();
		return val;
	}
	,get_offsetRadius: function() {
		return this._offsetRadius;
	}
	,set_offsetRadius: function(val) {
		if(this._offsetRadius == val) {
			return val;
		}
		this._offsetRadius = val;
		this.invalidateGeometry();
		return val;
	}
	,get_materials: function() {
		return this._materials;
	}
	,set_materials: function(val) {
		this._materials = val;
		if(this._materials.get_front() != null && this.get_material() != this._materials.get_front()) {
			this.set_material(this._materials.get_front());
		}
		this.invalidateGeometry();
		return val;
	}
	,get_coverAll: function() {
		return this._coverAll;
	}
	,set_coverAll: function(val) {
		if(this._coverAll == val) {
			return val;
		}
		this._coverAll = val;
		this.invalidateGeometry();
		return val;
	}
	,get_flip: function() {
		return this._flip;
	}
	,set_flip: function(val) {
		if(this._flip == val) {
			return val;
		}
		this._flip = val;
		this.invalidateGeometry();
		return val;
	}
	,get_smoothSurface: function() {
		return this._smoothSurface;
	}
	,set_smoothSurface: function(val) {
		if(this._smoothSurface == val) {
			return val;
		}
		this._smoothSurface = val;
		this._geomDirty = true;
		return val;
	}
	,get_keepLastProfile: function() {
		return this._keepLastProfile;
	}
	,set_keepLastProfile: function(val) {
		if(this._keepLastProfile == val) {
			return val;
		}
		this._keepLastProfile = val;
		return val;
	}
	,get_lastProfile: function() {
		if(this.get_keepLastProfile() && this._lastProfile == null) {
			this.buildExtrude();
		}
		return this._lastProfile;
	}
	,get_preciseThickness: function() {
		return this._preciseThickness;
	}
	,set_preciseThickness: function(val) {
		if(this._preciseThickness == val) {
			return val;
		}
		this._preciseThickness = val;
		this.invalidateGeometry();
		return val;
	}
	,get_centerMesh: function() {
		return this._centerMesh;
	}
	,set_centerMesh: function(val) {
		if(this._centerMesh == val) {
			return val;
		}
		this._centerMesh = val;
		if(this._centerMesh && this._subGeometry.get_vertexData().get_length() > 0) {
			away3d_tools_helpers_MeshHelper.recenter(this);
		} else {
			this.invalidateGeometry();
		}
		return val;
	}
	,get_thickness: function() {
		return this._thickness;
	}
	,set_thickness: function(val) {
		if(this._thickness == val) {
			return val;
		}
		this._thickness = val > 0 ? val : this._thickness;
		this.invalidateGeometry();
		return val;
	}
	,get_ignoreSides: function() {
		return this._ignoreSides;
	}
	,set_ignoreSides: function(val) {
		this._ignoreSides = val;
		this.invalidateGeometry();
		return val;
	}
	,get_tweek: function() {
		return this._tweek;
	}
	,set_tweek: function(val) {
		this._tweek = val;
		this.invalidateGeometry();
		return val;
	}
	,get_bounds: function() {
		if(this._geomDirty) {
			this.buildExtrude();
		}
		return away3d_entities_Mesh.prototype.get_bounds.call(this);
	}
	,get_geometry: function() {
		if(this._geomDirty) {
			this.buildExtrude();
		}
		return away3d_entities_Mesh.prototype.get_geometry.call(this);
	}
	,get_subMeshes: function() {
		if(this._geomDirty) {
			this.buildExtrude();
		}
		return away3d_entities_Mesh.prototype.get_subMeshes.call(this);
	}
	,closeTopBottom: function(ptLength,renderSide) {
		var va;
		var vb;
		var vc;
		var vd;
		var i;
		var j;
		var a;
		var b;
		var total = this._varr.get_length() - ptLength;
		this._uva.set_u(this._uvb.set_u(0));
		this._uvc.set_u(this._uvd.set_u(1));
		i = 0;
		while(i < total) {
			if(i != 0) {
				if(this._coverAll) {
					a = i / total;
					b = (i + ptLength) / total;
					this._uva.set_v(a);
					this._uvb.set_v(b);
					this._uvc.set_v(b);
					this._uvd.set_v(a);
				} else {
					this._uva.set_v(0);
					this._uvb.set_v(1);
					this._uvc.set_v(1);
					this._uvd.set_v(0);
				}
				if(renderSide.top) {
					va = this._varr.get(i);
					vb = this._varr.get(i + ptLength);
					vc = this._varr2.get(i + ptLength);
					vd = this._varr2.get(i);
					if(this._flip) {
						this.addFace(vb,va,vc,this._uvb,this._uva,this._uvc,4);
						this.addFace(vc,va,vd,this._uvc,this._uva,this._uvd,4);
					} else {
						this.addFace(va,vb,vc,this._uva,this._uvb,this._uvc,4);
						this.addFace(va,vc,vd,this._uva,this._uvc,this._uvd,4);
					}
				}
				if(renderSide.bottom) {
					j = i + ptLength - 1;
					va = this._varr.get(j);
					vb = this._varr.get(j + ptLength);
					vc = this._varr2.get(j + ptLength);
					vd = this._varr2.get(j);
					if(this._flip) {
						this.addFace(va,vb,vc,this._uva,this._uvb,this._uvc,5);
						this.addFace(va,vc,vd,this._uva,this._uvc,this._uvd,5);
					} else {
						this.addFace(vb,va,vc,this._uvb,this._uva,this._uvc,5);
						this.addFace(vc,va,vd,this._uvc,this._uva,this._uvd,5);
					}
				}
			}
			i += ptLength;
		}
	}
	,closeSides: function(ptLength,renderSide) {
		var va;
		var vb;
		var vc;
		var vd;
		var total = this._varr.get_length() - ptLength;
		var i;
		var j;
		var a;
		var b;
		var iter = ptLength - 1;
		var step = this._preciseThickness && ptLength % 2 == 0 ? 1 / iter : 1 / ptLength;
		i = 0;
		while(i < iter) {
			if(this._coverAll) {
				a = i * step;
				b = a + step;
				this._uva.set_v(1 - a);
				this._uvb.set_v(1 - b);
				this._uvc.set_v(1 - b);
				this._uvd.set_v(1 - a);
			} else {
				this._uva.set_v(0);
				this._uvb.set_v(1);
				this._uvc.set_v(1);
				this._uvd.set_v(0);
			}
			if(renderSide.left) {
				va = this._varr.get(i + 1);
				vb = this._varr.get(i);
				vc = this._varr2.get(i);
				vd = this._varr2.get(i + 1);
				this._uva.set_u(this._uvb.set_u(0));
				this._uvc.set_u(this._uvd.set_u(1));
				if(this._flip) {
					this.addFace(vb,va,vc,this._uvb,this._uva,this._uvc,2);
					this.addFace(vc,va,vd,this._uvc,this._uva,this._uvd,2);
				} else {
					this.addFace(va,vb,vc,this._uva,this._uvb,this._uvc,2);
					this.addFace(va,vc,vd,this._uva,this._uvc,this._uvd,2);
				}
			}
			if(renderSide.right) {
				j = total + i;
				va = this._varr.get(j + 1);
				vb = this._varr.get(j);
				vc = this._varr2.get(j);
				vd = this._varr2.get(j + 1);
				this._uva.set_u(this._uvb.set_u(1));
				this._uvc.set_u(this._uvd.set_u(0));
				if(this._flip) {
					this.addFace(va,vb,vc,this._uva,this._uvb,this._uvc,3);
					this.addFace(va,vc,vd,this._uva,this._uvc,this._uvd,3);
				} else {
					this.addFace(vb,va,vc,this._uvb,this._uva,this._uvc,3);
					this.addFace(vc,va,vd,this._uvc,this._uva,this._uvd,3);
				}
			}
			++i;
		}
	}
	,generate: function(vectors,axis,tweek,render,id) {
		if(id == null) {
			id = 0;
		}
		if(render == null) {
			render = true;
		}
		if(tweek == null) {
			tweek = { };
		}
		if(isNaN(Reflect.field(tweek,"x")) || !Reflect.field(tweek,"x")) {
			tweek["x"] = 0;
		}
		if(isNaN(Reflect.field(tweek,"y")) || !Reflect.field(tweek,"y")) {
			tweek["y"] = 0;
		}
		if(isNaN(Reflect.field(tweek,"z")) || !Reflect.field(tweek,"z")) {
			tweek["z"] = 0;
		}
		if(isNaN(Reflect.field(tweek,"radius")) || !Reflect.field(tweek,"radius")) {
			tweek["radius"] = 0;
		}
		var angle = this._startRotationOffset;
		var step = 360 / this._subdivision;
		var j;
		var tweekX = 0;
		var tweekY = 0;
		var tweekZ = 0;
		var tweekradius = 0;
		var tweekrotation = 0;
		var tmpVecs;
		var aRads = [];
		var uvu;
		var uvv;
		var i;
		if(this._varr == null) {
			this._varr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(this._uvarr == null) {
			this._uvarr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var _g1 = 0;
		var _g = vectors.get_length();
		while(_g1 < _g) {
			var i1 = _g1++;
			this._varr.push(new openfl_geom_Vector3D(vectors.get(i1).x,vectors.get(i1).y,vectors.get(i1).z));
			this._uvarr.push(new away3d_core_base_data_UV(0,0));
		}
		var offsetradius = -this._offsetRadius;
		offsetradius += this._prevOffsetRadius;
		var factor = 0;
		var stepm = 360 * this._revolutions;
		var lsub = (this._revolutions < 1 ? this._subdivision : this._subdivision * this._revolutions) | 0;
		if(this._revolutions < 1) {
			step *= this._revolutions;
		}
		var _g11 = 0;
		var _g2 = lsub + 1;
		while(_g11 < _g2) {
			var i2 = _g11++;
			tmpVecs = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
			tmpVecs = vectors.concat(null);
			var _g3 = 0;
			var _g21 = tmpVecs.get_length();
			while(_g3 < _g21) {
				var j1 = _g3++;
				factor = (this._revolutions - 1) / (this._varr.get_length() + 1);
				if(Reflect.field(tweek,"x") != 0) {
					tweekX += Reflect.field(tweek,"x") * factor / this._revolutions;
				}
				if(Reflect.field(tweek,"y") != 0) {
					tweekY += Reflect.field(tweek,"y") * factor / this._revolutions;
				}
				if(Reflect.field(tweek,"z") != 0) {
					tweekZ += Reflect.field(tweek,"z") * factor / this._revolutions;
				}
				if(tweek.radius != null && tweek.radius != 0) {
					tweekradius += tweek.radius / (this._varr.get_length() + 1);
				}
				if(tweek.rotation != null && tweek.rotation != 0) {
					tweekrotation += 360 / (tweek.rotation * this._subdivision);
				}
				if(this._axis == "x") {
					if(i2 == 0) {
						aRads[j1] = offsetradius - Math.abs(tmpVecs.get(j1).z);
					}
					var tmp = Math.cos(-angle / 180 * Math.PI);
					var tmp1 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).z = tmp * tmp1;
					var tmp2 = Math.sin(angle / 180 * Math.PI);
					var tmp3 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).y = tmp2 * tmp3;
					if(i2 == 0) {
						this._varr.get(j1).z += tmpVecs.get(j1).z;
						this._varr.get(j1).y += tmpVecs.get(j1).y;
					}
				} else if(this._axis == "y") {
					if(i2 == 0) {
						aRads[j1] = offsetradius - Math.abs(tmpVecs.get(j1).x);
					}
					var tmp4 = Math.cos(-angle / 180 * Math.PI);
					var tmp5 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).x = tmp4 * tmp5;
					var tmp6 = Math.sin(angle / 180 * Math.PI);
					var tmp7 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).z = tmp6 * tmp7;
					if(i2 == 0) {
						this._varr.get(j1).x = tmpVecs.get(j1).x;
						this._varr.get(j1).z = tmpVecs.get(j1).z;
					}
				} else {
					if(i2 == 0) {
						aRads[j1] = offsetradius - Math.abs(tmpVecs.get(j1).y);
					}
					var tmp8 = Math.cos(-angle / 180 * Math.PI);
					var tmp9 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).x = tmp8 * tmp9;
					var tmp10 = Math.sin(angle / 180 * Math.PI);
					var tmp11 = aRads[j1] + tweekradius;
					tmpVecs.get(j1).y = tmp10 * tmp11;
					if(i2 == 0) {
						this._varr.get(j1).x = tmpVecs.get(j1).x;
						this._varr.get(j1).y = tmpVecs.get(j1).y;
					}
				}
				tmpVecs.get(j1).x += tweekX;
				tmpVecs.get(j1).y += tweekY;
				tmpVecs.get(j1).z += tweekZ;
				this._varr.push(new openfl_geom_Vector3D(tmpVecs.get(j1).x,tmpVecs.get(j1).y,tmpVecs.get(j1).z));
				if(this._coverAll) {
					uvu = angle / stepm;
				} else if(i2 % 2 == 0) {
					uvu = 0;
				} else {
					uvu = 1;
				}
				uvv = j1 / (this._profile.get_length() - 1);
				this._uvarr.push(new away3d_core_base_data_UV(uvu,uvv));
			}
			angle += step;
		}
		this._prevOffsetRadius = this._offsetRadius;
		if(render) {
			var index;
			var inc = vectors.get_length();
			var loop = this._varr.get_length() - inc;
			var va;
			var vb;
			var vc;
			var vd;
			var uva;
			var uvb;
			var uvc;
			var uvd;
			var uvind;
			var vind;
			var iter = inc - 1;
			i = 0;
			while(i < loop) {
				index = 0;
				j = 0;
				while(j < iter) {
					if(i > 0) {
						uvind = i + index;
						vind = uvind;
						uva = this._uvarr.get(uvind + 1);
						uvb = this._uvarr.get(uvind);
						uvc = this._uvarr.get(uvind + inc);
						uvd = this._uvarr.get(uvind + inc + 1);
						if(this._revolutions == 1 && i + inc == loop && this._tweek == null) {
							va = this._varr.get(vind + 1);
							vb = this._varr.get(vind);
							vc = this._varr.get(vind + inc);
							vd = this._varr.get(vind + inc + 1);
						} else {
							va = this._varr.get(vind + 1);
							vb = this._varr.get(vind);
							vc = this._varr.get(vind + inc);
							vd = this._varr.get(vind + inc + 1);
						}
						if(this._flip) {
							if(id == 1) {
								this._uva.set_u(1 - uva.get_u());
								this._uva.set_v(uva.get_v());
								this._uvb.set_u(1 - uvb.get_u());
								this._uvb.set_v(uvb.get_v());
								this._uvc.set_u(1 - uvc.get_u());
								this._uvc.set_v(uvc.get_v());
								this._uvd.set_u(1 - uvd.get_u());
								this._uvd.set_v(uvd.get_v());
								this.addFace(va,vb,vc,this._uva,this._uvb,this._uvc,id);
								this.addFace(va,vc,vd,this._uva,this._uvc,this._uvd,id);
							} else {
								this.addFace(vb,va,vc,uvb,uva,uvc,id);
								this.addFace(vc,va,vd,uvc,uva,uvd,id);
							}
						} else if(id == 1) {
							this._uva.set_u(uva.get_u());
							this._uva.set_v(1 - uva.get_v());
							this._uvb.set_u(uvb.get_u());
							this._uvb.set_v(1 - uvb.get_v());
							this._uvc.set_u(uvc.get_u());
							this._uvc.set_v(1 - uvc.get_v());
							this._uvd.set_u(uvd.get_u());
							this._uvd.set_v(1 - uvd.get_v());
							this.addFace(vb,va,vc,this._uvb,this._uva,this._uvc,id);
							this.addFace(vc,va,vd,this._uvc,this._uva,this._uvd,id);
						} else {
							this.addFace(va,vb,vc,uva,uvb,uvc,id);
							this.addFace(va,vc,vd,uva,uvc,uvd,id);
						}
					}
					++index;
					++j;
				}
				i += inc;
			}
		}
	}
	,buildExtrude: function() {
		if(this._profile == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("LatheExtrude error: No profile Vector.<Vector3D> set"));
		}
		this._MaterialsSubGeometries = null;
		this._geomDirty = false;
		this.initHolders();
		this._maxIndProfile = this._profile.get_length() * 9;
		if(this._profile.get_length() > 1) {
			if(this._thickness != 0) {
				var aListsides = ["top","bottom","right","left","front","back"];
				var renderSide = new away3d_extrusions_data_RenderSide();
				var _g1 = 0;
				var _g = aListsides.length;
				while(_g1 < _g) {
					var i = _g1++;
					var value = this._ignoreSides.indexOf(aListsides[i]) == -1;
					renderSide[aListsides[i]] = value;
				}
				this._varr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
				this._varr2 = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
				if(this._preciseThickness) {
					var prop1 = "";
					var prop2 = "";
					var prop3 = "";
					var _g2 = this._axis;
					switch(_g2) {
					case "x":
						prop1 = "x";
						prop2 = "z";
						prop3 = "y";
						break;
					case "y":
						prop1 = "y";
						prop2 = "x";
						prop3 = "z";
						break;
					case "z":
						prop1 = "z";
						prop2 = "y";
						prop3 = "x";
						break;
					}
					var lines = this.buildThicknessPoints(this._profile,this.get_thickness(),prop1,prop2);
					var points;
					var vector;
					var vector2;
					var vector3;
					var vector4;
					var profileFront = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					var profileBack = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					var _g21 = 0;
					var _g11 = lines.length;
					while(_g21 < _g11) {
						var i1 = _g21++;
						points = lines[i1];
						vector = new openfl_geom_Vector3D();
						vector2 = new openfl_geom_Vector3D();
						if(i1 == 0) {
							vector[prop1] = points.pt2.x;
							vector[prop2] = points.pt2.y;
							vector[prop3] = Reflect.field(this._profile.get(0),prop3);
							profileFront.push(vector);
							vector2[prop1] = points.pt1.x;
							vector2[prop2] = points.pt1.y;
							vector2[prop3] = Reflect.field(this._profile.get(0),prop3);
							profileBack.push(vector2);
							if(lines.length == 1) {
								vector3 = new openfl_geom_Vector3D();
								vector4 = new openfl_geom_Vector3D();
								vector3[prop1] = points.pt4.x;
								vector3[prop2] = points.pt4.y;
								vector3[prop3] = Reflect.field(this._profile.get(0),prop3);
								profileFront.push(vector3);
								vector4[prop1] = points.pt3.x;
								vector4[prop2] = points.pt3.y;
								vector4[prop3] = Reflect.field(this._profile.get(0),prop3);
								profileBack.push(vector4);
							}
						} else if(i1 == lines.length - 1) {
							vector[prop1] = points.pt2.x;
							vector[prop2] = points.pt2.y;
							vector[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileFront.push(vector);
							vector2[prop1] = points.pt1.x;
							vector2[prop2] = points.pt1.y;
							vector2[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileBack.push(vector2);
							vector3 = new openfl_geom_Vector3D();
							vector4 = new openfl_geom_Vector3D();
							vector3[prop1] = points.pt4.x;
							vector3[prop2] = points.pt4.y;
							vector3[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileFront.push(vector3);
							vector4[prop1] = points.pt3.x;
							vector4[prop2] = points.pt3.y;
							vector4[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileBack.push(vector4);
						} else {
							vector[prop1] = points.pt2.x;
							vector[prop2] = points.pt2.y;
							vector[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileFront.push(vector);
							vector2[prop1] = points.pt1.x;
							vector2[prop2] = points.pt1.y;
							vector2[prop3] = Reflect.field(this._profile.get(i1),prop3);
							profileBack.push(vector2);
						}
					}
					this.generate(profileFront,this._axis,this._tweek,renderSide.front,0);
					this._varr2 = this._varr2.concat(this._varr);
					this._varr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					this.generate(profileBack,this._axis,this._tweek,renderSide.back,1);
				} else {
					var tmprofile1 = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					var tmprofile2 = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					var halft = this._thickness * .5;
					var val;
					var _g12 = 0;
					var _g3 = this._profile.get_length();
					while(_g12 < _g3) {
						var i2 = _g12++;
						var _g22 = this._axis;
						switch(_g22) {
						case "x":
							if(this._profile.get(i2).z < 0) {
								val = halft;
							} else {
								val = -halft;
							}
							tmprofile1.push(new openfl_geom_Vector3D(this._profile.get(i2).x,this._profile.get(i2).y,this._profile.get(i2).z - val));
							tmprofile2.push(new openfl_geom_Vector3D(this._profile.get(i2).x,this._profile.get(i2).y,this._profile.get(i2).z + val));
							break;
						case "y":
							if(this._profile.get(i2).x < 0) {
								val = halft;
							} else {
								val = -halft;
							}
							tmprofile1.push(new openfl_geom_Vector3D(this._profile.get(i2).x - val,this._profile.get(i2).y,this._profile.get(i2).z));
							tmprofile2.push(new openfl_geom_Vector3D(this._profile.get(i2).x + val,this._profile.get(i2).y,this._profile.get(i2).z));
							break;
						case "z":
							if(this._profile.get(i2).y < 0) {
								val = halft;
							} else {
								val = -halft;
							}
							tmprofile1.push(new openfl_geom_Vector3D(this._profile.get(i2).x,this._profile.get(i2).y - val,this._profile.get(i2).z));
							tmprofile2.push(new openfl_geom_Vector3D(this._profile.get(i2).x,this._profile.get(i2).y + val,this._profile.get(i2).z));
							break;
						}
					}
					this.generate(tmprofile1,this._axis,this._tweek,renderSide.front,0);
					this._varr2 = this._varr2.concat(this._varr);
					this._varr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
					this.generate(tmprofile2,this._axis,this._tweek,renderSide.back,1);
				}
				this.closeTopBottom(this._profile.get_length(),renderSide);
				if(this._revolutions != 1) {
					this.closeSides(this._profile.get_length(),renderSide);
				}
			} else {
				this.generate(this._profile,this._axis,this._tweek);
			}
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("LatheExtrude error: the profile Vector.<Vector3D> must hold a mimimun of 2 vector3D's"));
		}
		if(this._vertices.get_length() > 0) {
			this._subGeometry.updateVertexData(this._vertices);
			this._subGeometry.updateIndexData(this._indices);
			this._subGeometry.updateUVData(this._uvs);
			if(this._smoothSurface) {
				this._subGeometry.updateVertexNormalData(this._normals);
			}
			this.get_geometry().addSubGeometry(this._subGeometry);
		}
		if(this._MaterialsSubGeometries != null && this._MaterialsSubGeometries.get_length() > 0) {
			var sglist;
			var sg;
			var _g4 = 0;
			while(_g4 < 6) {
				var i3 = _g4++;
				sglist = this._MaterialsSubGeometries.get(i3);
				sg = sglist.subGeometry;
				if(sg != null && sglist.vertices.get_length() > 0) {
					this.get_geometry().addSubGeometry(sg);
					this.get_subMeshes().get(this.get_subMeshes().get_length() - 1).set_material(sglist.material);
					sg.updateVertexData(sglist.vertices);
					sg.updateIndexData(sglist.indices);
					sg.updateUVData(sglist.uvs);
					if(this._smoothSurface) {
						sg.updateVertexNormalData(sglist.normals);
					}
				}
			}
		}
		if(this._keepLastProfile) {
			this._lastProfile = this._varr.splice(this._varr.get_length() - this._profile.get_length(),this._profile.get_length());
		} else {
			this._lastProfile = null;
		}
		this._varr = this._varr2 = null;
		this._uvarr = null;
		if(this._centerMesh) {
			away3d_tools_helpers_MeshHelper.recenter(this);
		}
	}
	,calcNormal: function(v0,v1,v2) {
		var dx1 = v2.x - v0.x;
		var dy1 = v2.y - v0.y;
		var dz1 = v2.z - v0.z;
		var dx2 = v1.x - v0.x;
		var dy2 = v1.y - v0.y;
		var dz2 = v1.z - v0.z;
		var cx = dz1 * dy2 - dy1 * dz2;
		var cy = dx1 * dz2 - dz1 * dx2;
		var cz = dy1 * dx2 - dx1 * dy2;
		var d = 1 / Math.sqrt(cx * cx + cy * cy + cz * cz);
		this._normal0.x = this._normal1.x = this._normal2.x = cx * d;
		this._normal0.y = this._normal1.y = this._normal2.y = cy * d;
		this._normal0.z = this._normal1.z = this._normal2.z = cz * d;
	}
	,addFace: function(v0,v1,v2,uv0,uv1,uv2,subGeomInd) {
		var subGeom;
		var uvs;
		var normals;
		var vertices;
		var indices;
		if(subGeomInd > 0 && this._MaterialsSubGeometries != null && this._MaterialsSubGeometries.get_length() > 0) {
			subGeom = this._MaterialsSubGeometries.get(subGeomInd).subGeometry;
			uvs = this._MaterialsSubGeometries.get(subGeomInd).uvs;
			vertices = this._MaterialsSubGeometries.get(subGeomInd).vertices;
			indices = this._MaterialsSubGeometries.get(subGeomInd).indices;
			normals = this._MaterialsSubGeometries.get(subGeomInd).normals;
		} else {
			subGeom = this._subGeometry;
			uvs = this._uvs;
			vertices = this._vertices;
			indices = this._indices;
			normals = this._normals;
		}
		if(vertices.get_length() + 9 > 196605) {
			subGeom.updateVertexData(vertices);
			subGeom.updateIndexData(indices);
			subGeom.updateUVData(uvs);
			if(this._smoothSurface) {
				subGeom.updateVertexNormalData(normals);
			}
			this.get_geometry().addSubGeometry(subGeom);
			if(subGeomInd > 0 && this._MaterialsSubGeometries != null && this._MaterialsSubGeometries.get(subGeomInd).subGeometry != null) {
				this.get_subMeshes().get(this.get_subMeshes().get_length() - 1).set_material(this._MaterialsSubGeometries.get(subGeomInd).material);
			}
			subGeom = new away3d_core_base_SubGeometry();
			subGeom.set_autoDeriveVertexTangents(true);
			if(this._MaterialsSubGeometries != null && this._MaterialsSubGeometries.get_length() > 0) {
				this._MaterialsSubGeometries.get(subGeomInd).subGeometry = subGeom;
				uvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
				normals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				this._MaterialsSubGeometries.get(subGeomInd).uvs = uvs;
				this._MaterialsSubGeometries.get(subGeomInd).indices = indices;
				if(this._smoothSurface) {
					this._MaterialsSubGeometries.get(subGeomInd).normals = normals;
				} else {
					subGeom.set_autoDeriveVertexNormals(true);
				}
				if(subGeomInd == 0) {
					this._subGeometry = subGeom;
					this._uvs = uvs;
					this._vertices = vertices;
					this._indices = indices;
					this._normals = normals;
				}
			} else {
				this._subGeometry = subGeom;
				this._uvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				this._vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				this._indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
				this._normals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				uvs = this._uvs;
				vertices = this._vertices;
				indices = this._indices;
				normals = this._normals;
			}
		}
		var bv0 = false;
		var bv1 = false;
		var bv2 = false;
		var ind0 = 0;
		var ind1 = 0;
		var ind2 = 0;
		if(this._smoothSurface) {
			var uvind;
			var uvindV;
			var vind;
			var vindy;
			var vindz;
			var ind;
			var indlength = indices.get_length();
			this.calcNormal(v0,v1,v2);
			var ab;
			if(indlength > 0) {
				var back = indlength - this._maxIndProfile;
				var limitBack = (back < 0 ? 0 : back) | 0;
				var i = indlength - 1;
				while(i > limitBack) {
					ind = indices.get(i);
					vind = ind * 3;
					vindy = vind + 1;
					vindz = vind + 2;
					uvind = ind * 2;
					uvindV = uvind + 1;
					if(bv0 && bv1 && bv2) {
						break;
					}
					if(!bv0 && vertices.get(vind) == v0.x && vertices.get(vindy) == v0.y && vertices.get(vindz) == v0.z) {
						this._normalTmp.x = normals.get(vind);
						this._normalTmp.y = normals.get(vindy);
						this._normalTmp.z = normals.get(vindz);
						ab = openfl_geom_Vector3D.angleBetween(this._normalTmp,this._normal0);
						if(ab < 1.2) {
							this._normal0.x = (this._normalTmp.x + this._normal0.x) * .5;
							this._normal0.y = (this._normalTmp.y + this._normal0.y) * .5;
							this._normal0.z = (this._normalTmp.z + this._normal0.z) * .5;
							if(uvs.get(uvind) == uv0.get_u() && uvs.get(uvindV) == uv0.get_v()) {
								bv0 = true;
								ind0 = ind;
								--i;
								continue;
							}
						}
					}
					if(!bv1 && vertices.get(vind) == v1.x && vertices.get(vindy) == v1.y && vertices.get(vindz) == v1.z) {
						this._normalTmp.x = normals.get(vind);
						this._normalTmp.y = normals.get(vindy);
						this._normalTmp.z = normals.get(vindz);
						ab = openfl_geom_Vector3D.angleBetween(this._normalTmp,this._normal1);
						if(ab < 1.2) {
							this._normal1.x = (this._normalTmp.x + this._normal1.x) * .5;
							this._normal1.y = (this._normalTmp.y + this._normal1.y) * .5;
							this._normal1.z = (this._normalTmp.z + this._normal1.z) * .5;
							if(uvs.get(uvind) == uv1.get_u() && uvs.get(uvindV) == uv1.get_v()) {
								bv1 = true;
								ind1 = ind;
								--i;
								continue;
							}
						}
					}
					if(!bv2 && vertices.get(vind) == v2.x && vertices.get(vindy) == v2.y && vertices.get(vindz) == v2.z) {
						this._normalTmp.x = normals.get(vind);
						this._normalTmp.y = normals.get(vindy);
						this._normalTmp.z = normals.get(vindz);
						ab = openfl_geom_Vector3D.angleBetween(this._normalTmp,this._normal2);
						if(ab < 1.2) {
							this._normal2.x = (this._normalTmp.x + this._normal2.x) * .5;
							this._normal2.y = (this._normalTmp.y + this._normal2.y) * .5;
							this._normal2.z = (this._normalTmp.z + this._normal2.z) * .5;
							if(uvs.get(uvind) == uv2.get_u() && uvs.get(uvindV) == uv2.get_v()) {
								bv2 = true;
								ind2 = ind;
								--i;
								continue;
							}
						}
					}
					--i;
				}
			}
		}
		if(!bv0) {
			ind0 = vertices.get_length() / 3 | 0;
			vertices.push(v0.x);
			vertices.push(v0.y);
			vertices.push(v0.z);
			uvs.push(uv0.get_u());
			uvs.push(uv0.get_v());
			if(this._smoothSurface) {
				normals.push(this._normal0.x);
				normals.push(this._normal0.y);
				normals.push(this._normal0.z);
			}
		}
		if(!bv1) {
			ind1 = vertices.get_length() / 3 | 0;
			vertices.push(v1.x);
			vertices.push(v1.y);
			vertices.push(v1.z);
			uvs.push(uv1.get_u());
			uvs.push(uv1.get_v());
			if(this._smoothSurface) {
				normals.push(this._normal1.x);
				normals.push(this._normal1.y);
				normals.push(this._normal1.z);
			}
		}
		if(!bv2) {
			ind2 = vertices.get_length() / 3 | 0;
			vertices.push(v2.x);
			vertices.push(v2.y);
			vertices.push(v2.z);
			uvs.push(uv2.get_u());
			uvs.push(uv2.get_v());
			if(this._smoothSurface) {
				normals.push(this._normal2.x);
				normals.push(this._normal2.y);
				normals.push(this._normal2.z);
			}
		}
		indices.push(ind0);
		indices.push(ind1);
		indices.push(ind2);
	}
	,initHolders: function() {
		this._uvarr = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._uva = new away3d_core_base_data_UV(0,0);
		this._uvb = new away3d_core_base_data_UV(0,0);
		this._uvc = new away3d_core_base_data_UV(0,0);
		this._uvd = new away3d_core_base_data_UV(0,0);
		this._va = new openfl_geom_Vector3D(0,0,0);
		this._vb = new openfl_geom_Vector3D(0,0,0);
		this._vc = new openfl_geom_Vector3D(0,0,0);
		this._vd = new openfl_geom_Vector3D(0,0,0);
		this._uvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this._vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this._indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		this._normals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		if(this._smoothSurface) {
			this._normal0 = new openfl_geom_Vector3D(0.0,0.0,0.0);
			this._normal1 = new openfl_geom_Vector3D(0.0,0.0,0.0);
			this._normal2 = new openfl_geom_Vector3D(0.0,0.0,0.0);
			this._normalTmp = new openfl_geom_Vector3D(0.0,0.0,0.0);
		} else {
			this._subGeometry.set_autoDeriveVertexNormals(true);
		}
		this._subGeometry.set_autoDeriveVertexTangents(true);
		if(this._materials != null && this._thickness > 0) {
			this.initSubGeometryList();
		}
	}
	,buildThicknessPoints: function(aPoints,thickness,prop1,prop2) {
		var anchors = [];
		var lines = [];
		var i;
		var _g1 = 0;
		var _g = aPoints.get_length() - 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(Reflect.field(aPoints.get(i1),prop1) == 0 && Reflect.field(aPoints.get(i1),prop2) == 0) {
				aPoints.get(i1)[prop1] = .0001;
			}
			if(Reflect.field(aPoints.get(i1 + 1),prop2) != null && Reflect.field(aPoints.get(i1),prop2) == Reflect.field(aPoints.get(i1 + 1),prop2)) {
				aPoints.get(i1 + 1)[prop2] = Reflect.field(aPoints.get(i1 + 1),prop2) + .0001;
			}
			if(Reflect.field(aPoints.get(i1),prop1) != null && Reflect.field(aPoints.get(i1),prop1) == Reflect.field(aPoints.get(i1 + 1),prop1)) {
				aPoints.get(i1 + 1)[prop1] = Reflect.field(aPoints.get(i1 + 1),prop1) + .0001;
			}
			anchors.push(this.defineAnchors(aPoints.get(i1),aPoints.get(i1 + 1),thickness,prop1,prop2));
		}
		var totallength = anchors.length;
		var pointResult;
		if(totallength > 1) {
			var _g11 = 0;
			var _g2 = totallength;
			while(_g11 < _g2) {
				var i2 = _g11++;
				if(i2 < totallength) {
					pointResult = this.defineLines(i2,anchors[i2],anchors[i2 + 1],lines);
				} else {
					pointResult = this.defineLines(i2,anchors[i2],anchors[i2 - 1],lines);
				}
				if(pointResult != null) {
					lines.push(pointResult);
				}
			}
		} else {
			var fourPoints = new away3d_extrusions_data_FourPoints();
			var anchorFP = anchors[0];
			fourPoints.pt1 = anchorFP.pt1;
			fourPoints.pt2 = anchorFP.pt2;
			fourPoints.pt3 = anchorFP.pt3;
			fourPoints.pt4 = anchorFP.pt4;
			lines = [fourPoints];
		}
		return lines;
	}
	,defineLines: function(index,point1,point2,lines) {
		var tmppt;
		var fourPoints = new away3d_extrusions_data_FourPoints();
		if(point2 == null) {
			tmppt = lines[index - 1];
			fourPoints.pt1 = tmppt.pt3;
			fourPoints.pt2 = tmppt.pt4;
			fourPoints.pt3 = point1.pt3;
			fourPoints.pt4 = point1.pt4;
			return fourPoints;
		}
		var line1 = this.buildObjectLine(point1.pt1.x,point1.pt1.y,point1.pt3.x,point1.pt3.y);
		var line2 = this.buildObjectLine(point1.pt2.x,point1.pt2.y,point1.pt4.x,point1.pt4.y);
		var line3 = this.buildObjectLine(point2.pt1.x,point2.pt1.y,point2.pt3.x,point2.pt3.y);
		var line4 = this.buildObjectLine(point2.pt2.x,point2.pt2.y,point2.pt4.x,point2.pt4.y);
		var cross1 = this.lineIntersect(line3,line1);
		var cross2 = this.lineIntersect(line2,line4);
		if(cross1 != null && cross2 != null) {
			if(index == 0) {
				fourPoints.pt1 = point1.pt1;
				fourPoints.pt2 = point1.pt2;
				fourPoints.pt3 = cross1;
				fourPoints.pt4 = cross2;
				return fourPoints;
			}
			tmppt = lines[index - 1];
			fourPoints.pt1 = tmppt.pt3;
			fourPoints.pt2 = tmppt.pt4;
			fourPoints.pt3 = cross1;
			fourPoints.pt4 = cross2;
			return fourPoints;
		} else {
			return null;
		}
	}
	,defineAnchors: function(base,baseEnd,thickness,prop1,prop2) {
		var angle = Math.atan2(Reflect.field(base,prop2) - Reflect.field(baseEnd,prop2),Reflect.field(base,prop1) - Reflect.field(baseEnd,prop1)) * 180 / Math.PI;
		angle -= 270;
		var angle2 = angle + 180;
		var fourPoints = new away3d_extrusions_data_FourPoints();
		fourPoints.pt1 = new openfl_geom_Point(Reflect.field(base,prop1),Reflect.field(base,prop2));
		fourPoints.pt2 = new openfl_geom_Point(Reflect.field(base,prop1),Reflect.field(base,prop2));
		fourPoints.pt3 = new openfl_geom_Point(Reflect.field(baseEnd,prop1),Reflect.field(baseEnd,prop2));
		fourPoints.pt4 = new openfl_geom_Point(Reflect.field(baseEnd,prop1),Reflect.field(baseEnd,prop2));
		var radius = thickness * .5;
		fourPoints.pt1.x += Math.cos(-angle / 180 * Math.PI) * radius;
		fourPoints.pt1.y += Math.sin(angle / 180 * Math.PI) * radius;
		fourPoints.pt2.x += Math.cos(-angle2 / 180 * Math.PI) * radius;
		fourPoints.pt2.y += Math.sin(angle2 / 180 * Math.PI) * radius;
		fourPoints.pt3.x += Math.cos(-angle / 180 * Math.PI) * radius;
		fourPoints.pt3.y += Math.sin(angle / 180 * Math.PI) * radius;
		fourPoints.pt4.x += Math.cos(-angle2 / 180 * Math.PI) * radius;
		fourPoints.pt4.y += Math.sin(angle2 / 180 * Math.PI) * radius;
		return fourPoints;
	}
	,buildObjectLine: function(origX,origY,endX,endY) {
		var line = new away3d_extrusions_data_Line();
		line.ax = origX;
		line.ay = origY;
		line.bx = endX - origX;
		line.by = endY - origY;
		return line;
	}
	,isFinite: function(ptx) {
		if(Infinity != ptx) {
			return Infinity == ptx;
		} else {
			return true;
		}
	}
	,lineIntersect: function(Line1,Line2) {
		Line1.bx = Line1.bx == 0 ? .0001 : Line1.bx;
		Line2.bx = Line2.bx == 0 ? .0001 : Line2.bx;
		var a1 = Line1.by / Line1.bx;
		var b1 = Line1.ay - a1 * Line1.ax;
		var a2 = Line2.by / Line2.bx;
		var b2 = Line2.ay - a2 * Line2.ax;
		var nzero = a1 - a2 == 0 ? .0001 : a1 - a2;
		var ptx = (b2 - b1) / nzero;
		var pty = a1 * ptx + b1;
		if(this.isFinite(ptx) && this.isFinite(pty)) {
			return new openfl_geom_Point(ptx,pty);
		} else {
			haxe_Log.trace("infinity",{ fileName : "LatheExtrude.hx", lineNumber : 1484, className : "away3d.extrusions.LatheExtrude", methodName : "lineIntersect"});
			return null;
		}
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
		this.invalidateBounds();
	}
	,initSubGeometryList: function() {
		var i;
		var sglist;
		if(this._MaterialsSubGeometries == null) {
			this._MaterialsSubGeometries = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		var _g = 0;
		while(_g < 6) {
			var i1 = _g++;
			sglist = new away3d_extrusions_data_SubGeometryList();
			this._MaterialsSubGeometries.push(sglist);
			sglist.id = i1;
			if(i1 == 0) {
				sglist.subGeometry = this._subGeometry;
				sglist.uvs = this._uvs;
				sglist.vertices = this._vertices;
				sglist.indices = this._indices;
				sglist.normals = this._normals;
			} else {
				sglist.uvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				sglist.vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				sglist.indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
				sglist.normals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			}
		}
		var sg;
		var prop;
		var _g1 = 0;
		while(_g1 < 6) {
			var i2 = _g1++;
			switch(i2) {
			case 1:
				prop = "back";
				break;
			case 2:
				prop = "left";
				break;
			case 3:
				prop = "right";
				break;
			case 4:
				prop = "top";
				break;
			case 5:
				prop = "bottom";
				break;
			default:
				prop = "front";
			}
			if(Reflect.field(this._materials,prop) != null && this._MaterialsSubGeometries.get(i2).subGeometry == null) {
				sglist = this._MaterialsSubGeometries.get(i2);
				sg = new away3d_core_base_SubGeometry();
				sglist.material = Reflect.field(this._materials,prop);
				sglist.subGeometry = sg;
				sg.set_autoDeriveVertexNormals(true);
				sg.set_autoDeriveVertexTangents(true);
			}
		}
	}
	,__class__: away3d_extrusions_LatheExtrude
});
var away3d_extrusions_data_FourPoints = function() {
};
$hxClasses["away3d.extrusions.data.FourPoints"] = away3d_extrusions_data_FourPoints;
away3d_extrusions_data_FourPoints.__name__ = ["away3d","extrusions","data","FourPoints"];
away3d_extrusions_data_FourPoints.prototype = {
	pt1: null
	,pt2: null
	,pt3: null
	,pt4: null
	,__class__: away3d_extrusions_data_FourPoints
};
var away3d_extrusions_data_Line = function() {
};
$hxClasses["away3d.extrusions.data.Line"] = away3d_extrusions_data_Line;
away3d_extrusions_data_Line.__name__ = ["away3d","extrusions","data","Line"];
away3d_extrusions_data_Line.prototype = {
	ax: null
	,ay: null
	,bx: null
	,by: null
	,__class__: away3d_extrusions_data_Line
};
var away3d_extrusions_data_RenderSide = function() {
};
$hxClasses["away3d.extrusions.data.RenderSide"] = away3d_extrusions_data_RenderSide;
away3d_extrusions_data_RenderSide.__name__ = ["away3d","extrusions","data","RenderSide"];
away3d_extrusions_data_RenderSide.prototype = {
	top: null
	,bottom: null
	,right: null
	,left: null
	,front: null
	,back: null
	,__class__: away3d_extrusions_data_RenderSide
};
var away3d_extrusions_data_SubGeometryList = function() {
};
$hxClasses["away3d.extrusions.data.SubGeometryList"] = away3d_extrusions_data_SubGeometryList;
away3d_extrusions_data_SubGeometryList.__name__ = ["away3d","extrusions","data","SubGeometryList"];
away3d_extrusions_data_SubGeometryList.prototype = {
	id: null
	,uvs: null
	,vertices: null
	,normals: null
	,indices: null
	,subGeometry: null
	,material: null
	,__class__: away3d_extrusions_data_SubGeometryList
};
var away3d_filters_Filter3DBase = function() {
	this._tasks = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["away3d.filters.Filter3DBase"] = away3d_filters_Filter3DBase;
away3d_filters_Filter3DBase.__name__ = ["away3d","filters","Filter3DBase"];
away3d_filters_Filter3DBase.prototype = {
	_tasks: null
	,_requireDepthRender: null
	,_textureWidth: null
	,_textureHeight: null
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,addTask: function(filter) {
		this._tasks.push(filter);
		if(!this._requireDepthRender) {
			this._requireDepthRender = filter.get_requireDepthRender();
		}
	}
	,get_tasks: function() {
		return this._tasks;
	}
	,getMainInputTexture: function(stage3DProxy) {
		return this._tasks.get(0).getMainInputTexture(stage3DProxy);
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		this._textureWidth = value;
		var _g1 = 0;
		var _g = this._tasks.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this._tasks.get(i).set_textureWidth(value);
		}
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		this._textureHeight = value;
		var _g1 = 0;
		var _g = this._tasks.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this._tasks.get(i).set_textureHeight(value);
		}
		return value;
	}
	,setRenderTargets: function(mainTarget,stage3DProxy) {
		this._tasks.get(this._tasks.get_length() - 1).set_target(mainTarget);
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this._tasks.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this._tasks.get(i).dispose();
		}
	}
	,update: function(stage,camera) {
	}
	,__class__: away3d_filters_Filter3DBase
};
var away3d_filters_tasks_Filter3DTaskBase = function(requireDepthRender) {
	if(requireDepthRender == null) {
		requireDepthRender = false;
	}
	this._textureScale = 0;
	this._program3DInvalid = true;
	this._textureDimensionsInvalid = true;
	this._textureHeight = -1;
	this._textureWidth = -1;
	this._scaledTextureHeight = -1;
	this._scaledTextureWidth = -1;
	this._requireDepthRender = requireDepthRender;
};
$hxClasses["away3d.filters.tasks.Filter3DTaskBase"] = away3d_filters_tasks_Filter3DTaskBase;
away3d_filters_tasks_Filter3DTaskBase.__name__ = ["away3d","filters","tasks","Filter3DTaskBase"];
away3d_filters_tasks_Filter3DTaskBase.prototype = {
	_mainInputTexture: null
	,_mainInputTextureContext: null
	,_scaledTextureWidth: null
	,_scaledTextureHeight: null
	,_textureWidth: null
	,_textureHeight: null
	,_textureDimensionsInvalid: null
	,_program3DInvalid: null
	,_program3D: null
	,_program3DContext: null
	,_target: null
	,_requireDepthRender: null
	,_textureScale: null
	,get_textureScale: function() {
		return this._textureScale;
	}
	,set_textureScale: function(value) {
		if(this._textureScale == value) {
			return value;
		}
		this._textureScale = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		return value;
	}
	,get_textureWidth: function() {
		return this._textureWidth;
	}
	,set_textureWidth: function(value) {
		if(this._textureWidth == value) {
			return value;
		}
		this._textureWidth = value;
		this._scaledTextureWidth = this._textureWidth >> this._textureScale;
		if(this._scaledTextureWidth < 1) {
			this._scaledTextureWidth = 1;
		}
		this._textureDimensionsInvalid = true;
		return value;
	}
	,get_textureHeight: function() {
		return this._textureHeight;
	}
	,set_textureHeight: function(value) {
		if(this._textureHeight == value) {
			return value;
		}
		this._textureHeight = value;
		this._scaledTextureHeight = this._textureHeight >> this._textureScale;
		if(this._scaledTextureHeight < 1) {
			this._scaledTextureHeight = 1;
		}
		this._textureDimensionsInvalid = true;
		return value;
	}
	,getMainInputTexture: function(stage) {
		if(stage.get_context3D() != this._mainInputTextureContext) {
			this._textureDimensionsInvalid = true;
		}
		if(this._textureDimensionsInvalid) {
			this.updateTextures(stage);
		}
		return this._mainInputTexture;
	}
	,dispose: function() {
		if(this._mainInputTexture != null) {
			this._mainInputTexture.dispose();
		}
		if(this._program3D != null) {
			this._program3D.dispose();
		}
		this._program3DContext = null;
	}
	,invalidateProgram3D: function() {
		this._program3DInvalid = true;
	}
	,updateProgram3D: function(stage) {
		if(this._program3D != null) {
			this._program3D.dispose();
		}
		this._program3DContext = stage.get_context3D();
		this._program3D = this._program3DContext.createProgram();
		this._program3D.upload(new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),this.getVertexCode()),new openfl_utils_AGALMiniAssembler(away3d_debug_Debug.active).assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),this.getFragmentCode()));
		this._program3DInvalid = false;
	}
	,getVertexCode: function() {
		return "mov op, va0\n" + "mov v0, va1\n";
	}
	,getFragmentCode: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,updateTextures: function(stage) {
		if(this._mainInputTexture != null) {
			this._mainInputTexture.dispose();
		}
		this._mainInputTextureContext = stage.get_context3D();
		this._mainInputTexture = this._mainInputTextureContext.createTexture(this._scaledTextureWidth,this._scaledTextureHeight,1,true);
		this._textureDimensionsInvalid = false;
	}
	,getProgram3D: function(stage3DProxy) {
		if(this._program3DContext != stage3DProxy.get_context3D()) {
			this._program3DInvalid = true;
		}
		if(this._program3DInvalid) {
			this.updateProgram3D(stage3DProxy);
		}
		return this._program3D;
	}
	,activate: function(stage3DProxy,camera,depthTexture) {
	}
	,deactivate: function(stage3DProxy) {
	}
	,get_requireDepthRender: function() {
		return this._requireDepthRender;
	}
	,__class__: away3d_filters_tasks_Filter3DTaskBase
};
var away3d_library_assets_Asset3DType = function() { };
$hxClasses["away3d.library.assets.Asset3DType"] = away3d_library_assets_Asset3DType;
away3d_library_assets_Asset3DType.__name__ = ["away3d","library","assets","Asset3DType"];
var away3d_lights_LightBase = function() {
	this._diffuseB = 1;
	this._diffuseG = 1;
	this._diffuseR = 1;
	this._diffuse = 1;
	this._specularB = 1;
	this._specularG = 1;
	this._specularR = 1;
	this._specular = 1;
	this._ambientB = 0;
	this._ambientG = 0;
	this._ambientR = 0;
	this._ambient = 0;
	this._ambientColor = 16777215;
	this._colorB = 1;
	this._colorG = 1;
	this._colorR = 1;
	this._color = 16777215;
	away3d_entities_Entity.call(this);
};
$hxClasses["away3d.lights.LightBase"] = away3d_lights_LightBase;
away3d_lights_LightBase.__name__ = ["away3d","lights","LightBase"];
away3d_lights_LightBase.__super__ = away3d_entities_Entity;
away3d_lights_LightBase.prototype = $extend(away3d_entities_Entity.prototype,{
	_color: null
	,_colorR: null
	,_colorG: null
	,_colorB: null
	,_ambientColor: null
	,_ambient: null
	,_ambientR: null
	,_ambientG: null
	,_ambientB: null
	,_specular: null
	,_specularR: null
	,_specularG: null
	,_specularB: null
	,_diffuse: null
	,_diffuseR: null
	,_diffuseG: null
	,_diffuseB: null
	,_castsShadows: null
	,_shadowMapper: null
	,get_castsShadows: function() {
		return this._castsShadows;
	}
	,set_castsShadows: function(value) {
		if(this._castsShadows == value) {
			return value;
		}
		this._castsShadows = value;
		if(value) {
			if(this._shadowMapper == null) {
				this._shadowMapper = this.createShadowMapper();
			}
			this._shadowMapper.set_light(this);
		} else {
			if(this._shadowMapper != null) {
				this._shadowMapper.dispose();
			}
			this._shadowMapper = null;
		}
		this.dispatchEvent(new away3d_events_LightEvent("castsShadowChange"));
		return value;
	}
	,createShadowMapper: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_diffuse: function() {
		return this._diffuse;
	}
	,set_diffuse: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._diffuse = value;
		this.updateDiffuse();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		this._colorR = (this._color >> 16 & 255) / 255;
		this._colorG = (this._color >> 8 & 255) / 255;
		this._colorB = (this._color & 255) / 255;
		this.updateDiffuse();
		this.updateSpecular();
		return value;
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		if(value < 0) {
			value = 0;
		} else if(value > 1) {
			value = 1;
		}
		this._ambient = value;
		this.updateAmbient();
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		this.updateAmbient();
		return value;
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient;
	}
	,getObjectProjectionMatrix: function(renderable,camera,target) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_LightNode(this);
	}
	,get_assetType: function() {
		return "light";
	}
	,updateSpecular: function() {
		this._specularR = this._colorR * this._specular;
		this._specularG = this._colorG * this._specular;
		this._specularB = this._colorB * this._specular;
	}
	,updateDiffuse: function() {
		this._diffuseR = this._colorR * this._diffuse;
		this._diffuseG = this._colorG * this._diffuse;
		this._diffuseB = this._colorB * this._diffuse;
	}
	,get_shadowMapper: function() {
		return this._shadowMapper;
	}
	,set_shadowMapper: function(value) {
		this._shadowMapper = value;
		this._shadowMapper.set_light(this);
		return value;
	}
	,__class__: away3d_lights_LightBase
});
var away3d_lights_DirectionalLight = function(xDir,yDir,zDir) {
	if(zDir == null) {
		zDir = 1;
	}
	if(yDir == null) {
		yDir = -1;
	}
	if(xDir == null) {
		xDir = 0;
	}
	away3d_lights_LightBase.call(this);
	this.set_direction(new openfl_geom_Vector3D(xDir,yDir,zDir));
	this._sceneDirection = new openfl_geom_Vector3D();
};
$hxClasses["away3d.lights.DirectionalLight"] = away3d_lights_DirectionalLight;
away3d_lights_DirectionalLight.__name__ = ["away3d","lights","DirectionalLight"];
away3d_lights_DirectionalLight.__super__ = away3d_lights_LightBase;
away3d_lights_DirectionalLight.prototype = $extend(away3d_lights_LightBase.prototype,{
	_direction: null
	,_tmpLookAt: null
	,_sceneDirection: null
	,_projAABBPoints: null
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_DirectionalLightNode(this);
	}
	,get_sceneDirection: function() {
		if(this._sceneTransformDirty) {
			this.updateSceneTransform();
		}
		return this._sceneDirection;
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(this._tmpLookAt == null) {
			this._tmpLookAt = new openfl_geom_Vector3D();
		}
		var tmp = this.get_x();
		this._tmpLookAt.x = tmp + this._direction.x;
		var tmp1 = this.get_y();
		this._tmpLookAt.y = tmp1 + this._direction.y;
		var tmp2 = this.get_z();
		this._tmpLookAt.z = tmp2 + this._direction.z;
		this.lookAt(this._tmpLookAt);
		return value;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_NullBounds();
	}
	,updateBounds: function() {
	}
	,updateSceneTransform: function() {
		away3d_lights_LightBase.prototype.updateSceneTransform.call(this);
		this.get_sceneTransform().copyColumnTo(2,this._sceneDirection);
		this._sceneDirection.normalize();
	}
	,createShadowMapper: function() {
		return new away3d_lights_shadowmaps_DirectionalShadowMapper();
	}
	,getObjectProjectionMatrix: function(renderable,camera,target) {
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl_geom_Matrix3D();
		m.copyFrom(renderable.getRenderSceneTransform(camera));
		m.append(this.get_inverseSceneTransform());
		if(this._projAABBPoints == null) {
			this._projAABBPoints = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		m.transformVectors(bounds.get_aabbPoints(),this._projAABBPoints);
		var xMin = Infinity;
		var xMax = -Infinity;
		var yMin = Infinity;
		var yMax = -Infinity;
		var zMin = Infinity;
		var zMax = -Infinity;
		var d;
		var i = 0;
		while(i < 24) {
			d = this._projAABBPoints.get(i++);
			if(d < xMin) {
				xMin = d;
			}
			if(d > xMax) {
				xMax = d;
			}
			d = this._projAABBPoints.get(i++);
			if(d < yMin) {
				yMin = d;
			}
			if(d > yMax) {
				yMax = d;
			}
			d = this._projAABBPoints.get(i++);
			if(d < zMin) {
				zMin = d;
			}
			if(d > zMax) {
				zMax = d;
			}
		}
		var invXRange = 1 / (xMax - xMin);
		var invYRange = 1 / (yMax - yMin);
		var invZRange = 1 / (zMax - zMin);
		raw.set(0,2 * invXRange);
		raw.set(5,2 * invYRange);
		raw.set(10,invZRange);
		raw.set(12,-(xMax + xMin) * invXRange);
		raw.set(13,-(yMax + yMin) * invYRange);
		raw.set(14,-zMin * invZRange);
		raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(11,0)))))))));
		raw.set(15,1);
		if(target == null) {
			target = new openfl_geom_Matrix3D();
		}
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d_lights_DirectionalLight
});
var away3d_lights_LightProbe = function(diffuseMap,specularMap) {
	away3d_lights_LightBase.call(this);
	this._diffuseMap = diffuseMap;
	this._specularMap = specularMap;
};
$hxClasses["away3d.lights.LightProbe"] = away3d_lights_LightProbe;
away3d_lights_LightProbe.__name__ = ["away3d","lights","LightProbe"];
away3d_lights_LightProbe.__super__ = away3d_lights_LightBase;
away3d_lights_LightProbe.prototype = $extend(away3d_lights_LightBase.prototype,{
	_diffuseMap: null
	,_specularMap: null
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_LightProbeNode(this);
	}
	,get_diffuseMap: function() {
		return this._diffuseMap;
	}
	,set_diffuseMap: function(value) {
		this._diffuseMap = value;
		return value;
	}
	,get_specularMap: function() {
		return this._specularMap;
	}
	,set_specularMap: function(value) {
		this._specularMap = value;
		return value;
	}
	,updateBounds: function() {
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_NullBounds();
	}
	,getObjectProjectionMatrix: function(renderable,camera,target) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Object projection matrices are not supported for LightProbe objects!"));
	}
	,__class__: away3d_lights_LightProbe
});
var away3d_lights_PointLight = function() {
	this._fallOff = 100000;
	this._radius = 90000;
	away3d_lights_LightBase.call(this);
	this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
};
$hxClasses["away3d.lights.PointLight"] = away3d_lights_PointLight;
away3d_lights_PointLight.__name__ = ["away3d","lights","PointLight"];
away3d_lights_PointLight.__super__ = away3d_lights_LightBase;
away3d_lights_PointLight.prototype = $extend(away3d_lights_LightBase.prototype,{
	_radius: null
	,_fallOff: null
	,_fallOffFactor: null
	,createShadowMapper: function() {
		return new away3d_lights_shadowmaps_CubeMapShadowMapper();
	}
	,createEntityPartitionNode: function() {
		return new away3d_core_partition_PointLightNode(this);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		if(this._radius < 0) {
			this._radius = 0;
		} else if(this._radius > this._fallOff) {
			this._fallOff = this._radius;
			this.invalidateBounds();
		}
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		return value;
	}
	,fallOffFactor: function() {
		return this._fallOffFactor;
	}
	,get_fallOff: function() {
		return this._fallOff;
	}
	,set_fallOff: function(value) {
		this._fallOff = value;
		if(this._fallOff < 0) {
			this._fallOff = 0;
		}
		if(this._fallOff < this._radius) {
			this._radius = this._fallOff;
		}
		this._fallOffFactor = 1 / (this._fallOff * this._fallOff - this._radius * this._radius);
		this.invalidateBounds();
		return value;
	}
	,updateBounds: function() {
		this._bounds.fromSphere(new openfl_geom_Vector3D(),this._fallOff);
		this._boundsInvalid = false;
	}
	,getDefaultBoundingVolume: function() {
		return new away3d_bounds_BoundingSphere();
	}
	,getObjectProjectionMatrix: function(renderable,camera,target) {
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var bounds = renderable.get_sourceEntity().get_bounds();
		var m = new openfl_geom_Matrix3D();
		m.copyFrom(renderable.getRenderSceneTransform(camera));
		m.append(this._parent.get_inverseSceneTransform());
		this.lookAt(m.get_position());
		m.copyFrom(renderable.getRenderSceneTransform(camera));
		m.append(this.get_inverseSceneTransform());
		m.copyColumnTo(3,this._pos);
		var v1 = m.deltaTransformVector(bounds.get_min());
		var v2 = m.deltaTransformVector(bounds.get_max());
		var z = this._pos.z;
		var d1 = v1.x * v1.x + v1.y * v1.y + v1.z * v1.z;
		var d2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
		var d = Math.sqrt(d1 > d2 ? d1 : d2);
		var zMin;
		var zMax;
		zMin = z - d;
		zMax = z + d;
		raw.set(5,raw.set(0,zMin / d));
		raw.set(10,zMax / (zMax - zMin));
		raw.set(11,1);
		raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(12,raw.set(13,raw.set(15,0)))))))))));
		raw.set(14,-zMin * raw.get(10));
		if(target == null) {
			target = new openfl_geom_Matrix3D();
		}
		target.copyRawDataFrom(raw);
		target.prepend(m);
		return target;
	}
	,__class__: away3d_lights_PointLight
});
var away3d_lights_shadowmaps_ShadowMapperBase = function() {
	this._autoUpdateShadows = true;
	this._depthMapSize = 2048;
	this._casterCollector = this.createCasterCollector();
};
$hxClasses["away3d.lights.shadowmaps.ShadowMapperBase"] = away3d_lights_shadowmaps_ShadowMapperBase;
away3d_lights_shadowmaps_ShadowMapperBase.__name__ = ["away3d","lights","shadowmaps","ShadowMapperBase"];
away3d_lights_shadowmaps_ShadowMapperBase.prototype = {
	_casterCollector: null
	,_depthMap: null
	,_depthMapSize: null
	,_light: null
	,_explicitDepthMap: null
	,_autoUpdateShadows: null
	,_shadowsInvalid: null
	,createCasterCollector: function() {
		return new away3d_core_traverse_ShadowCasterCollector();
	}
	,get_autoUpdateShadows: function() {
		return this._autoUpdateShadows;
	}
	,set_autoUpdateShadows: function(value) {
		this._autoUpdateShadows = value;
		return value;
	}
	,updateShadows: function() {
		this._shadowsInvalid = true;
	}
	,setDepthMap: function(depthMap) {
		if(this._depthMap == depthMap) {
			return;
		}
		if(this._depthMap != null && !this._explicitDepthMap) {
			this._depthMap.dispose();
		}
		this._depthMap = depthMap;
		if(this._depthMap != null) {
			this._explicitDepthMap = true;
			this._depthMapSize = this._depthMap.get_width();
		} else {
			this._explicitDepthMap = false;
		}
	}
	,get_light: function() {
		return this._light;
	}
	,set_light: function(value) {
		this._light = value;
		return value;
	}
	,get_depthMap: function() {
		if(this._depthMap == null) {
			this._depthMap = this.createDepthTexture();
		}
		return this._depthMap;
	}
	,get_depthMapSize: function() {
		return this._depthMapSize;
	}
	,set_depthMapSize: function(value) {
		if(value == this._depthMapSize) {
			return value;
		}
		this._depthMapSize = value;
		if(this._explicitDepthMap) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Cannot set depth map size for the current renderer."));
		} else if(this._depthMap != null) {
			this._depthMap.dispose();
			this._depthMap = null;
		}
		return value;
	}
	,dispose: function() {
		this._casterCollector = null;
		if(this._depthMap != null && !this._explicitDepthMap) {
			this._depthMap.dispose();
		}
		this._depthMap = null;
	}
	,createDepthTexture: function() {
		return new away3d_textures_RenderTexture(this._depthMapSize,this._depthMapSize);
	}
	,renderDepthMap: function(stage3DProxy,entityCollector,renderer) {
		this._shadowsInvalid = false;
		this.updateDepthProjection(entityCollector.get_camera());
		if(this._depthMap == null) {
			this._depthMap = this.createDepthTexture();
		}
		this.drawDepthMap(this._depthMap.getTextureForStage3D(stage3DProxy),entityCollector.scene,renderer);
	}
	,updateDepthProjection: function(viewCamera) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,drawDepthMap: function(target,scene,renderer) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,__class__: away3d_lights_shadowmaps_ShadowMapperBase
};
var away3d_lights_shadowmaps_CubeMapShadowMapper = function() {
	away3d_lights_shadowmaps_ShadowMapperBase.call(this);
	this._depthMapSize = 512;
	this._needsRender = openfl__$Vector_Vector_$Impl_$.toBoolVector(null,6,true);
	this.initCameras();
};
$hxClasses["away3d.lights.shadowmaps.CubeMapShadowMapper"] = away3d_lights_shadowmaps_CubeMapShadowMapper;
away3d_lights_shadowmaps_CubeMapShadowMapper.__name__ = ["away3d","lights","shadowmaps","CubeMapShadowMapper"];
away3d_lights_shadowmaps_CubeMapShadowMapper.__super__ = away3d_lights_shadowmaps_ShadowMapperBase;
away3d_lights_shadowmaps_CubeMapShadowMapper.prototype = $extend(away3d_lights_shadowmaps_ShadowMapperBase.prototype,{
	_depthCameras: null
	,_lenses: null
	,_needsRender: null
	,initCameras: function() {
		this._depthCameras = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._lenses = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.addCamera(0,90,0);
		this.addCamera(0,-90,0);
		this.addCamera(-90,0,0);
		this.addCamera(90,0,0);
		this.addCamera(0,0,0);
		this.addCamera(0,180,0);
	}
	,addCamera: function(rotationX,rotationY,rotationZ) {
		var cam = new away3d_cameras_Camera3D();
		cam.set_rotationX(rotationX);
		cam.set_rotationY(rotationY);
		cam.set_rotationZ(rotationZ);
		cam.get_lens().set_near(.01);
		(js_Boot.__cast(cam.get_lens() , away3d_cameras_lenses_PerspectiveLens)).set_fieldOfView(90);
		this._lenses.push(js_Boot.__cast(cam.get_lens() , away3d_cameras_lenses_PerspectiveLens));
		cam.get_lens().set_aspectRatio(1);
		this._depthCameras.push(cam);
	}
	,createDepthTexture: function() {
		return new away3d_textures_RenderCubeTexture(this._depthMapSize);
	}
	,updateDepthProjection: function(viewCamera) {
		var maxDistance = (js_Boot.__cast(this._light , away3d_lights_PointLight))._fallOff;
		var pos = this._light.get_scenePosition();
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			this._lenses.get(i).set_far(maxDistance);
			this._depthCameras.get(i).set_position(pos);
			this._needsRender.set(i,true);
		}
	}
	,drawDepthMap: function(target,scene,renderer) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			if(this._needsRender.get(i)) {
				this._casterCollector.set_camera(this._depthCameras.get(i));
				this._casterCollector.clear();
				scene.traversePartitions(this._casterCollector);
				renderer.render(this._casterCollector,target,null,i);
				this._casterCollector.cleanUp();
			}
		}
	}
	,__class__: away3d_lights_shadowmaps_CubeMapShadowMapper
});
var away3d_lights_shadowmaps_DirectionalShadowMapper = function() {
	this._snap = 64;
	this._lightOffset = 10000;
	away3d_lights_shadowmaps_ShadowMapperBase.call(this);
	this._cullPlanes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._overallDepthLens = new away3d_cameras_lenses_FreeMatrixLens();
	this._overallDepthCamera = new away3d_cameras_Camera3D(this._overallDepthLens);
	this._localFrustum = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,24);
	this._matrix = new openfl_geom_Matrix3D();
};
$hxClasses["away3d.lights.shadowmaps.DirectionalShadowMapper"] = away3d_lights_shadowmaps_DirectionalShadowMapper;
away3d_lights_shadowmaps_DirectionalShadowMapper.__name__ = ["away3d","lights","shadowmaps","DirectionalShadowMapper"];
away3d_lights_shadowmaps_DirectionalShadowMapper.__super__ = away3d_lights_shadowmaps_ShadowMapperBase;
away3d_lights_shadowmaps_DirectionalShadowMapper.prototype = $extend(away3d_lights_shadowmaps_ShadowMapperBase.prototype,{
	_overallDepthCamera: null
	,_localFrustum: null
	,_lightOffset: null
	,_matrix: null
	,_overallDepthLens: null
	,_snap: null
	,_cullPlanes: null
	,_minZ: null
	,_maxZ: null
	,get_snap: function() {
		return this._snap;
	}
	,set_snap: function(value) {
		this._snap = value;
		return value;
	}
	,get_lightOffset: function() {
		return this._lightOffset;
	}
	,set_lightOffset: function(value) {
		this._lightOffset = value;
		return value;
	}
	,get_depthProjection: function() {
		return this._overallDepthCamera.get_viewProjection();
	}
	,get_depth: function() {
		return this._maxZ - this._minZ;
	}
	,drawDepthMap: function(target,scene,renderer) {
		this._casterCollector.set_camera(this._overallDepthCamera);
		this._casterCollector.set_cullPlanes(this._cullPlanes);
		this._casterCollector.clear();
		scene.traversePartitions(this._casterCollector);
		renderer.render(this._casterCollector,target);
		this._casterCollector.cleanUp();
	}
	,updateCullPlanes: function(viewCamera) {
		var lightFrustumPlanes = this._overallDepthCamera.get_frustumPlanes();
		var viewFrustumPlanes = viewCamera.get_frustumPlanes();
		this._cullPlanes.set_length(4);
		this._cullPlanes.set(0,lightFrustumPlanes.get(0));
		this._cullPlanes.set(1,lightFrustumPlanes.get(1));
		this._cullPlanes.set(2,lightFrustumPlanes.get(2));
		this._cullPlanes.set(3,lightFrustumPlanes.get(3));
		var dir = (js_Boot.__cast(this._light , away3d_lights_DirectionalLight)).get_sceneDirection();
		var dirX = dir.x;
		var dirY = dir.y;
		var dirZ = dir.z;
		var j = 4;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var plane = viewFrustumPlanes.get(i);
			if(plane.a * dirX + plane.b * dirY + plane.c * dirZ < 0) {
				this._cullPlanes.set(j++,plane);
			}
		}
	}
	,updateDepthProjection: function(viewCamera) {
		this.updateProjectionFromFrustumCorners(viewCamera,viewCamera.get_lens().get_frustumCorners(),this._matrix);
		this._overallDepthLens.set_matrix(this._matrix);
		this.updateCullPlanes(viewCamera);
	}
	,updateProjectionFromFrustumCorners: function(viewCamera,corners,matrix) {
		var raw = away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER;
		var dir;
		var x;
		var y;
		var z;
		var minX;
		var minY;
		var maxX;
		var maxY;
		var i;
		dir = (js_Boot.__cast(this._light , away3d_lights_DirectionalLight)).get_sceneDirection();
		this._overallDepthCamera.set_transform(this._light.get_sceneTransform());
		x = ((viewCamera.get_x() - dir.x * this._lightOffset) / this._snap | 0) * this._snap;
		y = ((viewCamera.get_y() - dir.y * this._lightOffset) / this._snap | 0) * this._snap;
		z = ((viewCamera.get_z() - dir.z * this._lightOffset) / this._snap | 0) * this._snap;
		this._overallDepthCamera.set_x(x);
		this._overallDepthCamera.set_y(y);
		this._overallDepthCamera.set_z(z);
		this._matrix.copyFrom(this._overallDepthCamera.get_inverseSceneTransform());
		this._matrix.prepend(viewCamera.get_sceneTransform());
		this._matrix.transformVectors(corners,this._localFrustum);
		maxX = this._localFrustum.get(0);
		minX = maxX;
		maxY = this._localFrustum.get(1);
		minY = maxY;
		this._maxZ = this._localFrustum.get(2);
		i = 3;
		while(i < 24) {
			x = this._localFrustum.get(i);
			y = this._localFrustum.get(i + 1);
			z = this._localFrustum.get(i + 2);
			if(x < minX) {
				minX = x;
			}
			if(x > maxX) {
				maxX = x;
			}
			if(y < minY) {
				minY = y;
			}
			if(y > maxY) {
				maxY = y;
			}
			if(z > this._maxZ) {
				this._maxZ = z;
			}
			i += 3;
		}
		this._minZ = 1;
		var w = maxX - minX;
		var h = maxY - minY;
		var d = 1 / (this._maxZ - this._minZ);
		if(minX < 0) {
			minX -= this._snap;
		}
		if(minY < 0) {
			minY -= this._snap;
		}
		minX = (minX / this._snap | 0) * this._snap;
		minY = (minY / this._snap | 0) * this._snap;
		var snap2 = 2 * this._snap;
		w = (w / snap2 + 2 | 0) * snap2;
		h = (h / snap2 + 2 | 0) * snap2;
		maxX = minX + w;
		maxY = minY + h;
		w = 1 / w;
		h = 1 / h;
		raw.set(0,2 * w);
		raw.set(5,2 * h);
		raw.set(10,d);
		raw.set(12,-(maxX + minX) * w);
		raw.set(13,-(maxY + minY) * h);
		raw.set(14,-this._minZ * d);
		raw.set(15,1);
		raw.set(1,raw.set(2,raw.set(3,raw.set(4,raw.set(6,raw.set(7,raw.set(8,raw.set(9,raw.set(11,0)))))))));
		matrix.copyRawDataFrom(raw);
	}
	,__class__: away3d_lights_shadowmaps_DirectionalShadowMapper
});
var away3d_materials_MaterialBase = function() {
	this._depthCompareMode = 5;
	this._anisotropy = 1;
	this._smooth = true;
	this._mipmap = true;
	this._numPasses = 0;
	this._blendMode = 10;
	this._owners = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._passes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._depthPass = new away3d_materials_passes_DepthMapPass();
	this._distancePass = new away3d_materials_passes_DistanceMapPass();
	this._depthPass.addEventListener("change",$bind(this,this.onDepthPassChange));
	this._distancePass.addEventListener("change",$bind(this,this.onDistancePassChange));
	this.set_alphaPremultiplied(true);
	this._uniqueId = away3d_materials_MaterialBase.MATERIAL_ID_COUNT++;
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.MaterialBase"] = away3d_materials_MaterialBase;
away3d_materials_MaterialBase.__name__ = ["away3d","materials","MaterialBase"];
away3d_materials_MaterialBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_materials_MaterialBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_materials_MaterialBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	extra: null
	,_classification: null
	,_uniqueId: null
	,_renderOrderId: null
	,_depthPassId: null
	,_bothSides: null
	,_animationSet: null
	,_owners: null
	,_alphaPremultiplied: null
	,_blendMode: null
	,_numPasses: null
	,_passes: null
	,_mipmap: null
	,_smooth: null
	,_repeat: null
	,_anisotropy: null
	,_depthPass: null
	,_distancePass: null
	,_lightPicker: null
	,_distanceBasedDepthRender: null
	,_depthCompareMode: null
	,get_assetType: function() {
		return "material";
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(value != this._lightPicker) {
			this._lightPicker = value;
			var len = this._passes.get_length();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this._passes.get(i).set_lightPicker(this._lightPicker);
			}
		}
		return value;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		this._mipmap = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_mipmap(value);
		}
		return value;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		this._smooth = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_smooth(value);
		}
		return value;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return value;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		this._repeat = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_repeat(value);
		}
		return value;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		this._anisotropy = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_anisotropy(this._anisotropy);
		}
		return value;
	}
	,dispose: function() {
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).dispose();
		}
		this._depthPass.dispose();
		this._distancePass.dispose();
		this._depthPass.removeEventListener("change",$bind(this,this.onDepthPassChange));
		this._distancePass.removeEventListener("change",$bind(this,this.onDistancePassChange));
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_bothSides(value);
		}
		this._depthPass.set_bothSides(value);
		this._distancePass.set_bothSides(value);
		return value;
	}
	,get_blendMode: function() {
		return this._blendMode;
	}
	,set_blendMode: function(value) {
		this._blendMode = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).set_alphaPremultiplied(value);
		}
		return value;
	}
	,get_requiresBlending: function() {
		return this._blendMode != 10;
	}
	,get_uniqueId: function() {
		return this._uniqueId;
	}
	,get_numPasses: function() {
		return this._numPasses;
	}
	,hasDepthAlphaThreshold: function() {
		return this._depthPass.get_alphaThreshold() > 0;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) {
			distanceBased = false;
		}
		this._distanceBasedDepthRender = distanceBased;
		if(distanceBased) {
			this._distancePass.activate(stage3DProxy,camera);
		} else {
			this._depthPass.activate(stage3DProxy,camera);
		}
	}
	,deactivateForDepth: function(stage3DProxy) {
		if(this._distanceBasedDepthRender) {
			this._distancePass.deactivate(stage3DProxy);
		} else {
			this._depthPass.deactivate(stage3DProxy);
		}
	}
	,renderDepth: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._distanceBasedDepthRender) {
			if(renderable.get_animator() != null) {
				this._distancePass.updateAnimationState(renderable,stage3DProxy,camera);
			}
			this._distancePass.render(renderable,stage3DProxy,camera,viewProjection);
		} else {
			if(renderable.get_animator() != null) {
				this._depthPass.updateAnimationState(renderable,stage3DProxy,camera);
			}
			this._depthPass.render(renderable,stage3DProxy,camera,viewProjection);
		}
	}
	,passRendersToTexture: function(index) {
		return this._passes.get(index).get_renderToTexture();
	}
	,activatePass: function(index,stage3DProxy,camera) {
		this._passes.get(index).activate(stage3DProxy,camera);
	}
	,deactivatePass: function(index,stage3DProxy) {
		this._passes.get(index).deactivate(stage3DProxy);
	}
	,renderPass: function(index,renderable,stage3DProxy,entityCollector,viewProjection) {
		if(this._lightPicker != null) {
			this._lightPicker.collectLights(renderable,entityCollector);
		}
		var pass = this._passes.get(index);
		if(renderable.get_animator() != null) {
			pass.updateAnimationState(renderable,stage3DProxy,entityCollector.get_camera());
		}
		pass.render(renderable,stage3DProxy,entityCollector.get_camera(),viewProjection);
	}
	,addOwner: function(owner) {
		this._owners.push(owner);
		if(owner.get_animator() != null) {
			if(this._animationSet != null && owner.get_animator().get_animationSet() != this._animationSet) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("A Material instance cannot be shared across renderables with different animator libraries"));
			} else if(this._animationSet != owner.get_animator().get_animationSet()) {
				this._animationSet = owner.get_animator().get_animationSet();
				var _g1 = 0;
				var _g = this._numPasses;
				while(_g1 < _g) {
					var i = _g1++;
					this._passes.get(i).set_animationSet(this._animationSet);
				}
				this._depthPass.set_animationSet(this._animationSet);
				this._distancePass.set_animationSet(this._animationSet);
				this.invalidatePasses(null);
			}
		}
	}
	,removeOwner: function(owner) {
		this._owners.splice(this._owners.indexOf(owner,0),1);
		if(this._owners.get_length() == 0) {
			this._animationSet = null;
			var _g1 = 0;
			var _g = this._numPasses;
			while(_g1 < _g) {
				var i = _g1++;
				this._passes.get(i).set_animationSet(this._animationSet);
			}
			this._depthPass.set_animationSet(this._animationSet);
			this._distancePass.set_animationSet(this._animationSet);
			this.invalidatePasses(null);
		}
	}
	,get_owners: function() {
		return this._owners;
	}
	,updateMaterial: function(context) {
	}
	,deactivate: function(stage3DProxy) {
		this._passes.get(this._numPasses - 1).deactivate(stage3DProxy);
	}
	,invalidatePasses: function(triggerPass) {
		var owner;
		this._depthPass.invalidateShaderProgram();
		this._distancePass.invalidateShaderProgram();
		if(this._animationSet != null) {
			this._animationSet.resetGPUCompatibility();
			var _g = 0;
			var _g1 = this._owners;
			while(_g < _g1.get_length()) {
				var owner1 = _g1.get(_g);
				++_g;
				if(owner1.get_animator() != null) {
					owner1.get_animator().testGPUCompatibility(this._depthPass);
					owner1.get_animator().testGPUCompatibility(this._distancePass);
				}
			}
		}
		var _g11 = 0;
		var _g2 = this._numPasses;
		while(_g11 < _g2) {
			var i = _g11++;
			if(this._passes.get(i) != triggerPass) {
				this._passes.get(i).invalidateShaderProgram(false);
			}
			if(this._animationSet != null) {
				var _g21 = 0;
				var _g3 = this._owners;
				while(_g21 < _g3.get_length()) {
					var owner2 = _g3.get(_g21);
					++_g21;
					if(owner2.get_animator() != null) {
						owner2.get_animator().testGPUCompatibility(this._passes.get(i));
					}
				}
			}
		}
	}
	,removePass: function(pass) {
		this._passes.splice(this._passes.indexOf(pass,0),1);
		--this._numPasses;
	}
	,clearPasses: function() {
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			this._passes.get(i).removeEventListener("change",$bind(this,this.onPassChange));
		}
		this._passes.set_length(0);
		this._numPasses = 0;
	}
	,addPass: function(pass) {
		this._passes.set(this._numPasses++,pass);
		pass.set_animationSet(this._animationSet);
		pass.set_alphaPremultiplied(this._alphaPremultiplied);
		pass.set_mipmap(this._mipmap);
		pass.set_smooth(this._smooth);
		pass.set_repeat(this._repeat);
		pass.set_anisotropy(this._anisotropy);
		pass.set_lightPicker(this._lightPicker);
		pass.set_bothSides(this._bothSides);
		pass.addEventListener("change",$bind(this,this.onPassChange));
		this.invalidatePasses(null);
	}
	,onPassChange: function(event) {
		var mult = 1;
		var ids;
		var len;
		this._renderOrderId = 0;
		var _g1 = 0;
		var _g = this._numPasses;
		while(_g1 < _g) {
			var i = _g1++;
			ids = this._passes.get(i)._program3Dids;
			len = ids.get_length();
			var _g3 = 0;
			var _g2 = len;
			while(_g3 < _g2) {
				var j = _g3++;
				if(ids.get(j) != -1) {
					this._renderOrderId += mult * ids.get(j) | 0;
					break;
				}
			}
			mult *= 1000;
		}
	}
	,onDistancePassChange: function(event) {
		var ids = this._distancePass._program3Dids;
		var len = ids.get_length();
		this._depthPassId = 0;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var j = _g1++;
			if(ids.get(j) != -1) {
				this._depthPassId += ids.get(j);
				break;
			}
		}
	}
	,onDepthPassChange: function(event) {
		var ids = this._depthPass._program3Dids;
		var len = ids.get_length();
		this._depthPassId = 0;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var j = _g1++;
			if(ids.get(j) != -1) {
				this._depthPassId += ids.get(j);
				break;
			}
		}
	}
	,__class__: away3d_materials_MaterialBase
});
var away3d_materials_SinglePassMaterialBase = function() {
	away3d_materials_MaterialBase.call(this);
	this.addPass(this._screenPass = new away3d_materials_passes_SuperShaderPass(this));
};
$hxClasses["away3d.materials.SinglePassMaterialBase"] = away3d_materials_SinglePassMaterialBase;
away3d_materials_SinglePassMaterialBase.__name__ = ["away3d","materials","SinglePassMaterialBase"];
away3d_materials_SinglePassMaterialBase.__super__ = away3d_materials_MaterialBase;
away3d_materials_SinglePassMaterialBase.prototype = $extend(away3d_materials_MaterialBase.prototype,{
	_screenPass: null
	,_alphaBlending: null
	,get_enableLightFallOff: function() {
		return this._screenPass.get_enableLightFallOff();
	}
	,set_enableLightFallOff: function(value) {
		this._screenPass.set_enableLightFallOff(value);
		return value;
	}
	,get_alphaThreshold: function() {
		return this._screenPass.get_diffuseMethod().get_alphaThreshold();
	}
	,set_alphaThreshold: function(value) {
		this._screenPass.get_diffuseMethod().set_alphaThreshold(value);
		this._depthPass.set_alphaThreshold(value);
		this._distancePass.set_alphaThreshold(value);
		return value;
	}
	,set_blendMode: function(value) {
		away3d_materials_MaterialBase.prototype.set_blendMode.call(this,value);
		this._screenPass.setBlendMode(this.get_blendMode() == 10 && this.get_requiresBlending() ? 7 : this.get_blendMode());
		return value;
	}
	,set_depthCompareMode: function(value) {
		away3d_materials_MaterialBase.prototype.set_depthCompareMode.call(this,value);
		this._screenPass.set_depthCompareMode(value);
		return value;
	}
	,activateForDepth: function(stage3DProxy,camera,distanceBased) {
		if(distanceBased == null) {
			distanceBased = false;
		}
		if(distanceBased) {
			this._distancePass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture());
		} else {
			this._depthPass.set_alphaMask(this._screenPass.get_diffuseMethod().get_texture());
		}
		away3d_materials_MaterialBase.prototype.activateForDepth.call(this,stage3DProxy,camera,distanceBased);
	}
	,get_specularLightSources: function() {
		return this._screenPass.get_specularLightSources();
	}
	,set_specularLightSources: function(value) {
		this._screenPass.set_specularLightSources(value);
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._screenPass.get_diffuseLightSources();
	}
	,set_diffuseLightSources: function(value) {
		this._screenPass.set_diffuseLightSources(value);
		return value;
	}
	,get_requiresBlending: function() {
		if(!(away3d_materials_MaterialBase.prototype.get_requiresBlending.call(this) || this._alphaBlending)) {
			if(this._screenPass.get_colorTransform() != null) {
				return this._screenPass.get_colorTransform().alphaMultiplier < 1;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_colorTransform: function() {
		return this._screenPass.get_colorTransform();
	}
	,set_colorTransform: function(value) {
		this._screenPass.set_colorTransform(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._screenPass.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._screenPass.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._screenPass.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._screenPass.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._screenPass.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._screenPass.set_diffuseMethod(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._screenPass.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._screenPass.set_normalMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._screenPass.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._screenPass.set_specularMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._screenPass.addMethod(method);
	}
	,get_numMethods: function() {
		return this._screenPass.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._screenPass.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._screenPass.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._screenPass.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._screenPass.removeMethod(method);
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) {
			return value;
		}
		away3d_materials_MaterialBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._screenPass.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._screenPass.set_normalMap(value);
		return value;
	}
	,get_specularMap: function() {
		return this._screenPass.get_specularMethod().get_texture();
	}
	,set_specularMap: function(value) {
		if(this._screenPass.get_specularMethod() != null) {
			this._screenPass.get_specularMethod().set_texture(value);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("No specular method was set to assign the specularGlossMap to"));
		}
		return value;
	}
	,get_gloss: function() {
		if(this._screenPass.get_specularMethod() != null) {
			return this._screenPass.get_specularMethod().get_gloss();
		} else {
			return 0;
		}
	}
	,set_gloss: function(value) {
		if(this._screenPass.get_specularMethod() != null) {
			this._screenPass.get_specularMethod().set_gloss(value);
		}
		return value;
	}
	,get_ambient: function() {
		return this._screenPass.get_ambientMethod().get_ambient();
	}
	,set_ambient: function(value) {
		this._screenPass.get_ambientMethod().set_ambient(value);
		return value;
	}
	,get_specular: function() {
		if(this._screenPass.get_specularMethod() != null) {
			return this._screenPass.get_specularMethod().get_specular();
		} else {
			return 0;
		}
	}
	,set_specular: function(value) {
		if(this._screenPass.get_specularMethod() != null) {
			this._screenPass.get_specularMethod().set_specular(value);
		}
		return value;
	}
	,get_ambientColor: function() {
		return this._screenPass.get_ambientMethod().get_ambientColor();
	}
	,set_ambientColor: function(value) {
		this._screenPass.get_ambientMethod().set_ambientColor(value);
		return value;
	}
	,get_specularColor: function() {
		return this._screenPass.get_specularMethod().get_specularColor();
	}
	,set_specularColor: function(value) {
		this._screenPass.get_specularMethod().set_specularColor(value);
		return value;
	}
	,get_alphaBlending: function() {
		return this._alphaBlending;
	}
	,set_alphaBlending: function(value) {
		this._alphaBlending = value;
		this._screenPass.setBlendMode(this.get_blendMode() == 10 && this.get_requiresBlending() ? 7 : this.get_blendMode());
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		return value;
	}
	,updateMaterial: function(context) {
		if(this._screenPass._passesDirty) {
			this.clearPasses();
			if(this._screenPass._passes != null) {
				var len = this._screenPass._passes.get_length();
				var _g1 = 0;
				var _g = len;
				while(_g1 < _g) {
					var i = _g1++;
					this.addPass(this._screenPass._passes.get(i));
				}
			}
			this.addPass(this._screenPass);
			this._screenPass._passesDirty = false;
		}
	}
	,set_lightPicker: function(value) {
		away3d_materials_MaterialBase.prototype.set_lightPicker.call(this,value);
		this._screenPass.set_lightPicker(value);
		return value;
	}
	,__class__: away3d_materials_SinglePassMaterialBase
});
var away3d_materials_ColorMaterial = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 13421772;
	}
	this._diffuseAlpha = 1;
	away3d_materials_SinglePassMaterialBase.call(this);
	this.set_color(color);
	this.set_alpha(alpha);
};
$hxClasses["away3d.materials.ColorMaterial"] = away3d_materials_ColorMaterial;
away3d_materials_ColorMaterial.__name__ = ["away3d","materials","ColorMaterial"];
away3d_materials_ColorMaterial.__super__ = away3d_materials_SinglePassMaterialBase;
away3d_materials_ColorMaterial.prototype = $extend(away3d_materials_SinglePassMaterialBase.prototype,{
	_diffuseAlpha: null
	,get_alpha: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseAlpha();
	}
	,set_alpha: function(value) {
		if(value > 1) {
			value = 1;
		} else if(value < 0) {
			value = 0;
		}
		this._screenPass.get_diffuseMethod().set_diffuseAlpha(this._diffuseAlpha = value);
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == 10 && this.get_requiresBlending() ? 7 : this.get_blendMode());
		return value;
	}
	,get_color: function() {
		return this._screenPass.get_diffuseMethod().get_diffuseColor();
	}
	,set_color: function(value) {
		this._screenPass.get_diffuseMethod().set_diffuseColor(value);
		return value;
	}
	,get_requiresBlending: function() {
		if(!away3d_materials_SinglePassMaterialBase.prototype.get_requiresBlending.call(this)) {
			return this._diffuseAlpha < 1;
		} else {
			return true;
		}
	}
	,__class__: away3d_materials_ColorMaterial
});
var away3d_materials_LightSources = function() { };
$hxClasses["away3d.materials.LightSources"] = away3d_materials_LightSources;
away3d_materials_LightSources.__name__ = ["away3d","materials","LightSources"];
var away3d_materials_SegmentMaterial = function(thickness) {
	if(thickness == null) {
		thickness = 1.25;
	}
	away3d_materials_MaterialBase.call(this);
	this.set_bothSides(true);
	this.addPass(this._screenPass = new away3d_materials_passes_SegmentPass(thickness));
	this._screenPass.set_material(this);
};
$hxClasses["away3d.materials.SegmentMaterial"] = away3d_materials_SegmentMaterial;
away3d_materials_SegmentMaterial.__name__ = ["away3d","materials","SegmentMaterial"];
away3d_materials_SegmentMaterial.__super__ = away3d_materials_MaterialBase;
away3d_materials_SegmentMaterial.prototype = $extend(away3d_materials_MaterialBase.prototype,{
	_screenPass: null
	,__class__: away3d_materials_SegmentMaterial
});
var away3d_materials_TextureMaterial = function(texture,smooth,repeat,mipmap,anisotropy) {
	if(anisotropy == null) {
		anisotropy = 1;
	}
	if(mipmap == null) {
		mipmap = true;
	}
	if(repeat == null) {
		repeat = false;
	}
	if(smooth == null) {
		smooth = true;
	}
	away3d_materials_SinglePassMaterialBase.call(this);
	this.set_texture(texture);
	this.set_smooth(smooth);
	this.set_repeat(repeat);
	this.set_mipmap(mipmap);
	this.set_anisotropy(anisotropy);
};
$hxClasses["away3d.materials.TextureMaterial"] = away3d_materials_TextureMaterial;
away3d_materials_TextureMaterial.__name__ = ["away3d","materials","TextureMaterial"];
away3d_materials_TextureMaterial.__super__ = away3d_materials_SinglePassMaterialBase;
away3d_materials_TextureMaterial.prototype = $extend(away3d_materials_SinglePassMaterialBase.prototype,{
	get_animateUVs: function() {
		return this._screenPass.get_animateUVs();
	}
	,set_animateUVs: function(value) {
		this._screenPass.set_animateUVs(value);
		return value;
	}
	,get_animateUVs2: function() {
		return this._screenPass.get_animateUVs2();
	}
	,set_animateUVs2: function(value) {
		this._screenPass.set_animateUVs2(value);
		return value;
	}
	,get_alpha: function() {
		if(this._screenPass.get_colorTransform() != null) {
			return this._screenPass.get_colorTransform().alphaMultiplier;
		} else {
			return 1;
		}
	}
	,set_alpha: function(value) {
		if(value > 1) {
			value = 1;
		} else if(value < 0) {
			value = 0;
		}
		if(this.get_colorTransform() == null) {
			this.set_colorTransform(new openfl_geom_ColorTransform());
		}
		this.get_colorTransform().alphaMultiplier = value;
		this._screenPass.set_preserveAlpha(this.get_requiresBlending());
		this._screenPass.setBlendMode(this.get_blendMode() == 10 && this.get_requiresBlending() ? 7 : this.get_blendMode());
		return value;
	}
	,get_texture: function() {
		return this._screenPass.get_diffuseMethod().get_texture();
	}
	,set_texture: function(value) {
		this._screenPass.get_diffuseMethod().set_texture(value);
		return value;
	}
	,get_ambientTexture: function() {
		return this._screenPass.get_ambientMethod().get_texture();
	}
	,set_ambientTexture: function(value) {
		this._screenPass.get_ambientMethod().set_texture(value);
		this._screenPass.get_diffuseMethod().set_useAmbientTexture(value != null);
		return value;
	}
	,__class__: away3d_materials_TextureMaterial
});
var away3d_materials_compilation_MethodDependencyCounter = function() {
	this._usesGlobalPosFragment = false;
};
$hxClasses["away3d.materials.compilation.MethodDependencyCounter"] = away3d_materials_compilation_MethodDependencyCounter;
away3d_materials_compilation_MethodDependencyCounter.__name__ = ["away3d","materials","compilation","MethodDependencyCounter"];
away3d_materials_compilation_MethodDependencyCounter.prototype = {
	_projectionDependencies: null
	,_normalDependencies: null
	,_viewDirDependencies: null
	,_uvDependencies: null
	,_secondaryUVDependencies: null
	,_globalPosDependencies: null
	,_tangentDependencies: null
	,_usesGlobalPosFragment: null
	,_numPointLights: null
	,_lightSourceMask: null
	,reset: function() {
		this._projectionDependencies = 0;
		this._normalDependencies = 0;
		this._viewDirDependencies = 0;
		this._uvDependencies = 0;
		this._secondaryUVDependencies = 0;
		this._globalPosDependencies = 0;
		this._tangentDependencies = 0;
		this._usesGlobalPosFragment = false;
	}
	,setPositionedLights: function(numPointLights,lightSourceMask) {
		this._numPointLights = numPointLights;
		this._lightSourceMask = lightSourceMask;
	}
	,includeMethodVO: function(methodVO) {
		if(methodVO.needsProjection) {
			++this._projectionDependencies;
		}
		if(methodVO.needsGlobalVertexPos) {
			++this._globalPosDependencies;
			if(methodVO.needsGlobalFragmentPos) {
				this._usesGlobalPosFragment = true;
			}
		} else if(methodVO.needsGlobalFragmentPos) {
			++this._globalPosDependencies;
			this._usesGlobalPosFragment = true;
		}
		if(methodVO.needsNormals) {
			++this._normalDependencies;
		}
		if(methodVO.needsTangents) {
			++this._tangentDependencies;
		}
		if(methodVO.needsView) {
			++this._viewDirDependencies;
		}
		if(methodVO.needsUV) {
			++this._uvDependencies;
		}
		if(methodVO.needsSecondaryUV) {
			++this._secondaryUVDependencies;
		}
	}
	,get_tangentDependencies: function() {
		return this._tangentDependencies;
	}
	,get_usesGlobalPosFragment: function() {
		return this._usesGlobalPosFragment;
	}
	,get_projectionDependencies: function() {
		return this._projectionDependencies;
	}
	,get_normalDependencies: function() {
		return this._normalDependencies;
	}
	,get_viewDirDependencies: function() {
		return this._viewDirDependencies;
	}
	,get_uvDependencies: function() {
		return this._uvDependencies;
	}
	,get_secondaryUVDependencies: function() {
		return this._secondaryUVDependencies;
	}
	,get_globalPosDependencies: function() {
		return this._globalPosDependencies;
	}
	,addWorldSpaceDependencies: function(fragmentLights) {
		if(this._viewDirDependencies > 0) {
			++this._globalPosDependencies;
		}
		if(this._numPointLights > 0 && (this._lightSourceMask & 1) != 0) {
			++this._globalPosDependencies;
			if(fragmentLights) {
				this._usesGlobalPosFragment = true;
			}
		}
	}
	,__class__: away3d_materials_compilation_MethodDependencyCounter
};
var away3d_materials_compilation_RegisterPool = function(regName,regCount,persistent) {
	if(persistent == null) {
		persistent = true;
	}
	this._regName = regName;
	this._regCount = regCount;
	this._persistent = persistent;
	this.initRegisters(regName,regCount);
};
$hxClasses["away3d.materials.compilation.RegisterPool"] = away3d_materials_compilation_RegisterPool;
away3d_materials_compilation_RegisterPool.__name__ = ["away3d","materials","compilation","RegisterPool"];
away3d_materials_compilation_RegisterPool._initPool = function(regName,regCount) {
	var hash = regName + regCount;
	var _this = away3d_materials_compilation_RegisterPool._regPool;
	if(__map_reserved[hash] != null ? _this.existsReserved(hash) : _this.h.hasOwnProperty(hash)) {
		return hash;
	}
	var vectorRegisters = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,regCount,true);
	var _this1 = away3d_materials_compilation_RegisterPool._regPool;
	if(__map_reserved[hash] != null) {
		_this1.setReserved(hash,vectorRegisters);
	} else {
		_this1.h[hash] = vectorRegisters;
	}
	var registerComponents = [[],[],[],[]];
	var _this2 = away3d_materials_compilation_RegisterPool._regCompsPool;
	if(__map_reserved[hash] != null) {
		_this2.setReserved(hash,registerComponents);
	} else {
		_this2.h[hash] = registerComponents;
	}
	var _g1 = 0;
	var _g = regCount;
	while(_g1 < _g) {
		var i = _g1++;
		vectorRegisters.set(i,new away3d_materials_compilation_ShaderRegisterElement(regName,i));
		var _g2 = 0;
		while(_g2 < 4) {
			var j = _g2++;
			registerComponents[j][i] = new away3d_materials_compilation_ShaderRegisterElement(regName,i,j);
		}
	}
	return hash;
};
away3d_materials_compilation_RegisterPool.prototype = {
	_vectorRegisters: null
	,_registerComponents: null
	,_regName: null
	,_usedSingleCount: null
	,_usedVectorCount: null
	,_regCount: null
	,_persistent: null
	,requestFreeVectorReg: function() {
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i = _g1++;
			if(!this.isRegisterUsed(i)) {
				if(this._persistent) {
					var _g2 = i;
					var _g3 = this._usedVectorCount;
					_g3.set(_g2,_g3.get(_g2) + 1);
				}
				return this._vectorRegisters.get(i);
			}
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Register overflow!"));
	}
	,requestFreeRegComponent: function() {
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i = _g1++;
			if(_$UInt_UInt_$Impl_$.gt(this._usedVectorCount.get(i),0)) {
				continue;
			}
			var _g2 = 0;
			while(_g2 < 4) {
				var j = _g2++;
				if(this._usedSingleCount.get(j).get(i) == 0) {
					if(this._persistent) {
						var _g3 = i;
						var _g4 = this._usedSingleCount.get(j);
						_g4.set(_g3,_g4.get(_g3) + 1);
					}
					return this._registerComponents[j][i];
				}
			}
		}
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Register overflow!"));
	}
	,addUsage: function(register,usageCount) {
		if(register._component > -1) {
			var _g = register.get_index();
			var _g1 = this._usedSingleCount.get(register._component);
			_g1.set(_g,_g1.get(_g) + usageCount);
		} else {
			var _g2 = register.get_index();
			var _g11 = this._usedVectorCount;
			_g11.set(_g2,_g11.get(_g2) + usageCount);
		}
	}
	,removeUsage: function(register) {
		if(register._component > -1) {
			var _g = register.get_index();
			var _g1 = this._usedSingleCount.get(register._component);
			var count = _g1.set(_g,_g1.get(_g) - 1);
			if(_$UInt_UInt_$Impl_$.gt(0,count)) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("More usages removed than exist!"));
			}
		} else {
			var _g2 = register.get_index();
			var _g11 = this._usedVectorCount;
			var count1 = _g11.set(_g2,_g11.get(_g2) - 1);
			if(_$UInt_UInt_$Impl_$.gt(0,count1)) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("More usages removed than exist!"));
			}
		}
	}
	,dispose: function() {
		this._vectorRegisters = null;
		this._registerComponents = null;
		this._usedSingleCount = null;
		this._usedVectorCount = null;
	}
	,hasRegisteredRegs: function() {
		var _g1 = 0;
		var _g = this._regCount;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.isRegisterUsed(i)) {
				return true;
			}
		}
		return false;
	}
	,initRegisters: function(regName,regCount) {
		var hash = away3d_materials_compilation_RegisterPool._initPool(regName,regCount);
		var _this = away3d_materials_compilation_RegisterPool._regPool;
		this._vectorRegisters = __map_reserved[hash] != null ? _this.getReserved(hash) : _this.h[hash];
		var _this1 = away3d_materials_compilation_RegisterPool._regCompsPool;
		this._registerComponents = __map_reserved[hash] != null ? _this1.getReserved(hash) : _this1.h[hash];
		this._usedVectorCount = openfl__$Vector_Vector_$Impl_$.toIntVector(null,regCount,true);
		this._usedSingleCount = openfl__$Vector_Vector_$Impl_$.toNullVector(null,4,true);
		this._usedSingleCount.set(0,openfl__$Vector_Vector_$Impl_$.toIntVector(null,regCount,true));
		this._usedSingleCount.set(1,openfl__$Vector_Vector_$Impl_$.toIntVector(null,regCount,true));
		this._usedSingleCount.set(2,openfl__$Vector_Vector_$Impl_$.toIntVector(null,regCount,true));
		this._usedSingleCount.set(3,openfl__$Vector_Vector_$Impl_$.toIntVector(null,regCount,true));
	}
	,isRegisterUsed: function(index) {
		if(_$UInt_UInt_$Impl_$.gt(this._usedVectorCount.get(index),0)) {
			return true;
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			if(_$UInt_UInt_$Impl_$.gt(this._usedSingleCount.get(i).get(index),0)) {
				return true;
			}
		}
		return false;
	}
	,__class__: away3d_materials_compilation_RegisterPool
};
var away3d_materials_compilation_ShaderCompiler = function(profile) {
	this._probeWeightsIndex = -1;
	this._cameraPositionIndex = -1;
	this._sceneNormalMatrixIndex = -1;
	this._sceneMatrixIndex = -1;
	this._lightFragmentConstantIndex = -1;
	this._tangentBufferIndex = -1;
	this._normalBufferIndex = -1;
	this._secondaryUVBufferIndex = -1;
	this._uvTransformIndex2 = -1;
	this._uvTransformIndex = -1;
	this._uvBufferIndex = -1;
	this._commonsDataIndex = -1;
	this._preserveAlpha = true;
	this._sharedRegisters = new away3d_materials_compilation_ShaderRegisterData();
	this._dependencyCounter = new away3d_materials_compilation_MethodDependencyCounter();
	this._profile = profile;
	this.initRegisterCache(profile);
};
$hxClasses["away3d.materials.compilation.ShaderCompiler"] = away3d_materials_compilation_ShaderCompiler;
away3d_materials_compilation_ShaderCompiler.__name__ = ["away3d","materials","compilation","ShaderCompiler"];
away3d_materials_compilation_ShaderCompiler.prototype = {
	_sharedRegisters: null
	,_registerCache: null
	,_dependencyCounter: null
	,_methodSetup: null
	,_smooth: null
	,_repeat: null
	,_mipmap: null
	,_anisotropy: null
	,_enableLightFallOff: null
	,_preserveAlpha: null
	,_animateUVs: null
	,_animateUVs2: null
	,_alphaPremultiplied: null
	,_vertexConstantData: null
	,_fragmentConstantData: null
	,_vertexCode: null
	,_fragmentCode: null
	,_fragmentLightCode: null
	,_fragmentPostLightCode: null
	,_commonsDataIndex: null
	,_animatableAttributes: null
	,_animationTargetRegisters: null
	,_lightProbeDiffuseIndices: null
	,_lightProbeSpecularIndices: null
	,_uvBufferIndex: null
	,_uvTransformIndex: null
	,_uvTransformIndex2: null
	,_secondaryUVBufferIndex: null
	,_normalBufferIndex: null
	,_tangentBufferIndex: null
	,_lightFragmentConstantIndex: null
	,_sceneMatrixIndex: null
	,_sceneNormalMatrixIndex: null
	,_cameraPositionIndex: null
	,_probeWeightsIndex: null
	,_specularLightSources: null
	,_diffuseLightSources: null
	,_numLights: null
	,_numLightProbes: null
	,_numPointLights: null
	,_numDirectionalLights: null
	,_numProbeRegisters: null
	,_combinedLightSources: null
	,_usingSpecularMethod: null
	,_needUVAnimation: null
	,_UVTarget: null
	,_UVSource: null
	,_profile: null
	,_forceSeperateMVP: null
	,get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		this._enableLightFallOff = value;
		return value;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,get_UVTarget: function() {
		return this._UVTarget;
	}
	,get_UVSource: function() {
		return this._UVSource;
	}
	,get_forceSeperateMVP: function() {
		return this._forceSeperateMVP;
	}
	,set_forceSeperateMVP: function(value) {
		this._forceSeperateMVP = value;
		return value;
	}
	,initRegisterCache: function(profile) {
		this._registerCache = new away3d_materials_compilation_ShaderRegisterCache(profile);
		this._registerCache.set_vertexAttributesOffset(1);
		this._registerCache.reset();
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		this._animateUVs = value;
		return value;
	}
	,get_animateUVs2: function() {
		return this._animateUVs2;
	}
	,set_animateUVs2: function(value) {
		this._animateUVs2 = value;
		return value;
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		return value;
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		this._preserveAlpha = value;
		return value;
	}
	,setTextureSampling: function(smooth,repeat,mipmap,anisotropy) {
		this._smooth = smooth;
		this._repeat = repeat;
		this._mipmap = mipmap;
		this._anisotropy = anisotropy;
	}
	,setConstantDataBuffers: function(vertexConstantData,fragmentConstantData) {
		this._vertexConstantData = vertexConstantData;
		this._fragmentConstantData = fragmentConstantData;
	}
	,get_methodSetup: function() {
		return this._methodSetup;
	}
	,set_methodSetup: function(value) {
		this._methodSetup = value;
		return value;
	}
	,compile: function() {
		this.initRegisterIndices();
		this.initLightData();
		var a = ["va0"];
		var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this._animatableAttributes = vector;
		var a1 = ["vt0"];
		var vector1 = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector1.set(i1,a1[i1]);
		}
		this._animationTargetRegisters = vector1;
		this._vertexCode = "";
		this._fragmentCode = "";
		this._sharedRegisters.localPosition = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.localPosition,1);
		this.createCommons();
		this.calculateDependencies();
		this.updateMethodRegisters();
		var _g3 = 0;
		while(_g3 < 4) {
			var i2 = _g3++;
			this._registerCache.getFreeVertexConstant();
		}
		this.createNormalRegisters();
		if(this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP) {
			this.compileGlobalPositionCode();
		}
		this.compileProjectionCode();
		this.compileMethodsCode();
		this.compileFragmentOutput();
		this._fragmentPostLightCode = this.get_fragmentCode();
	}
	,createNormalRegisters: function() {
	}
	,compileMethodsCode: function() {
		if(this._dependencyCounter.get_uvDependencies() > 0) {
			this.compileUVCode();
		}
		if(this._dependencyCounter.get_secondaryUVDependencies() > 0) {
			this.compileSecondaryUVCode();
		}
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			this.compileNormalCode();
		}
		if(this._dependencyCounter.get_viewDirDependencies() > 0) {
			this.compileViewDirCode();
		}
		this.compileLightingCode();
		this._fragmentLightCode = this._fragmentCode;
		this._fragmentCode = "";
		this.compileMethods();
	}
	,compileLightingCode: function() {
	}
	,compileViewDirCode: function() {
	}
	,compileNormalCode: function() {
	}
	,compileUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._uvBufferIndex = uvAttributeReg.get_index();
		var varying = this._registerCache.getFreeVarying();
		this._sharedRegisters.uvVarying = varying;
		if(this.get_animateUVs()) {
			var uvTransform1 = this._registerCache.getFreeVertexConstant();
			var uvTransform2 = this._registerCache.getFreeVertexConstant();
			this._uvTransformIndex = uvTransform1.get_index() * 4;
			this._vertexCode += "dp4 " + Std.string(varying) + ".x, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform1) + "\n" + "dp4 " + Std.string(varying) + ".y, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransform2) + "\n" + "mov " + Std.string(varying) + ".zw, " + Std.string(uvAttributeReg) + ".zw \n";
		} else {
			this._uvTransformIndex = -1;
			this._needUVAnimation = true;
			this._UVTarget = varying.toString();
			this._UVSource = uvAttributeReg.toString();
		}
	}
	,compileSecondaryUVCode: function() {
		var uvAttributeReg = this._registerCache.getFreeVertexAttribute();
		this._secondaryUVBufferIndex = uvAttributeReg.get_index();
		var varying = this._registerCache.getFreeVarying();
		this._sharedRegisters.secondaryUVVarying = varying;
		if(this.get_animateUVs2()) {
			var uvTransformX = this._registerCache.getFreeVertexConstant();
			var uvTransformY = this._registerCache.getFreeVertexConstant();
			this._uvTransformIndex2 = uvTransformX.get_index() * 4;
			this._vertexCode += "dp4 " + Std.string(varying) + ".x, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransformX) + "\n";
			this._vertexCode += "dp4 " + Std.string(varying) + ".y, " + Std.string(uvAttributeReg) + ", " + Std.string(uvTransformY) + "\n";
			this._vertexCode += "mov " + Std.string(varying) + ".zw, " + Std.string(uvAttributeReg) + ".zw" + "\n";
		} else {
			this._uvTransformIndex2 = -1;
			this._vertexCode += "mov " + Std.string(varying) + ", " + Std.string(uvAttributeReg) + "\n";
		}
	}
	,compileGlobalPositionCode: function() {
		this._sharedRegisters.globalPositionVertex = this._registerCache.getFreeVertexVectorTemp();
		this._registerCache.addVertexTempUsages(this._sharedRegisters.globalPositionVertex,this._dependencyCounter.get_globalPosDependencies());
		var positionMatrixReg = this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._registerCache.getFreeVertexConstant();
		this._sceneMatrixIndex = positionMatrixReg.get_index() * 4;
		this._vertexCode += "m44 " + Std.string(this._sharedRegisters.globalPositionVertex) + ", " + Std.string(this._sharedRegisters.localPosition) + ", " + Std.string(positionMatrixReg) + "\n";
		if(this._dependencyCounter.get_usesGlobalPosFragment()) {
			this._sharedRegisters.globalPositionVarying = this._registerCache.getFreeVarying();
			this._vertexCode += "mov " + Std.string(this._sharedRegisters.globalPositionVarying) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		}
	}
	,compileProjectionCode: function() {
		var pos = this._dependencyCounter.get_globalPosDependencies() > 0 || this._forceSeperateMVP ? this._sharedRegisters.globalPositionVertex.toString() : this._animationTargetRegisters.get(0);
		var code;
		if(this._dependencyCounter.get_projectionDependencies() > 0) {
			this._sharedRegisters.projectionFragment = this._registerCache.getFreeVarying();
			code = "m44 vt5, " + pos + ", vc0\t\t\n" + "mov " + Std.string(this._sharedRegisters.projectionFragment) + ", vt5\n" + "mov op, vt5\n";
		} else {
			code = "m44 op, " + pos + ", vc0\t\t\n";
		}
		this._vertexCode += code;
	}
	,compileFragmentOutput: function() {
		this._fragmentCode += "mov " + Std.string(this._registerCache.get_fragmentOutputRegister()) + ", " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		this._registerCache.removeFragmentTempUsage(this._sharedRegisters.shadedTarget);
	}
	,initRegisterIndices: function() {
		this._commonsDataIndex = -1;
		this._cameraPositionIndex = -1;
		this._uvBufferIndex = -1;
		this._uvTransformIndex = -1;
		this._uvTransformIndex2 = -1;
		this._secondaryUVBufferIndex = -1;
		this._normalBufferIndex = -1;
		this._tangentBufferIndex = -1;
		this._lightFragmentConstantIndex = -1;
		this._sceneMatrixIndex = -1;
		this._sceneNormalMatrixIndex = -1;
		this._probeWeightsIndex = -1;
	}
	,initLightData: function() {
		this._numLights = this._numPointLights + this._numDirectionalLights;
		this._numProbeRegisters = Math.ceil(this._numLightProbes / 4);
		if(this._methodSetup._specularMethod != null) {
			this._combinedLightSources = this._specularLightSources | this._diffuseLightSources;
		} else {
			this._combinedLightSources = this._diffuseLightSources;
		}
		this._usingSpecularMethod = this._methodSetup._specularMethod != null && (this.usesLightsForSpecular() || this.usesProbesForSpecular());
	}
	,createCommons: function() {
		this._sharedRegisters.commons = this._registerCache.getFreeFragmentConstant();
		this._commonsDataIndex = this._sharedRegisters.commons.get_index() * 4;
	}
	,calculateDependencies: function() {
		this._dependencyCounter.reset();
		var methods = this._methodSetup._methods;
		var len;
		this.setupAndCountMethodDependencies(this._methodSetup._diffuseMethod,this._methodSetup._diffuseMethodVO);
		if(this._methodSetup._shadowMethod != null) {
			this.setupAndCountMethodDependencies(this._methodSetup._shadowMethod,this._methodSetup._shadowMethodVO);
		}
		this.setupAndCountMethodDependencies(this._methodSetup._ambientMethod,this._methodSetup._ambientMethodVO);
		if(this._usingSpecularMethod) {
			this.setupAndCountMethodDependencies(this._methodSetup._specularMethod,this._methodSetup._specularMethodVO);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this.setupAndCountMethodDependencies(this._methodSetup._colorTransformMethod,this._methodSetup._colorTransformMethodVO);
		}
		len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.setupAndCountMethodDependencies(methods.get(i).method,methods.get(i).data);
		}
		if(this.get_usesNormals()) {
			this.setupAndCountMethodDependencies(this._methodSetup._normalMethod,this._methodSetup._normalMethodVO);
		}
		this._dependencyCounter.setPositionedLights(this._numPointLights,this._combinedLightSources);
	}
	,setupAndCountMethodDependencies: function(method,methodVO) {
		this.setupMethod(method,methodVO);
		this._dependencyCounter.includeMethodVO(methodVO);
	}
	,setupMethod: function(method,methodVO) {
		method.reset();
		methodVO.reset();
		methodVO.vertexData = this._vertexConstantData;
		methodVO.fragmentData = this._fragmentConstantData;
		methodVO.useSmoothTextures = this._smooth;
		methodVO.repeatTextures = this._repeat;
		methodVO.useMipmapping = this._mipmap;
		methodVO.anisotropy = this._anisotropy;
		methodVO.useLightFallOff = this._enableLightFallOff && this._profile != "baselineConstrained";
		methodVO.numLights = this._numLights + this._numLightProbes;
		method.initVO(methodVO);
	}
	,get_commonsDataIndex: function() {
		return this._commonsDataIndex;
	}
	,updateMethodRegisters: function() {
		this._methodSetup._normalMethod.set_sharedRegisters(this._sharedRegisters);
		this._methodSetup._diffuseMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.set_sharedRegisters(this._sharedRegisters);
		}
		this._methodSetup._ambientMethod.set_sharedRegisters(this._sharedRegisters);
		if(this._methodSetup._specularMethod != null) {
			this._methodSetup._specularMethod.set_sharedRegisters(this._sharedRegisters);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.set_sharedRegisters(this._sharedRegisters);
		}
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			methods.get(i).method.set_sharedRegisters(this._sharedRegisters);
		}
	}
	,get_numUsedVertexConstants: function() {
		return this._registerCache.get_numUsedVertexConstants();
	}
	,get_numUsedFragmentConstants: function() {
		return this._registerCache.get_numUsedFragmentConstants();
	}
	,get_numUsedStreams: function() {
		return this._registerCache.get_numUsedStreams();
	}
	,get_numUsedTextures: function() {
		return this._registerCache.get_numUsedTextures();
	}
	,get_numUsedVaryings: function() {
		return this._registerCache.get_numUsedVaryings();
	}
	,usesLightsForSpecular: function() {
		if(this._numLights > 0) {
			return (this._specularLightSources & 1) != 0;
		} else {
			return false;
		}
	}
	,usesLightsForDiffuse: function() {
		if(this._numLights > 0) {
			return (this._diffuseLightSources & 1) != 0;
		} else {
			return false;
		}
	}
	,dispose: function() {
		this.cleanUpMethods();
		this._registerCache.dispose();
		this._registerCache = null;
		this._sharedRegisters = null;
	}
	,cleanUpMethods: function() {
		if(this._methodSetup._normalMethod != null) {
			this._methodSetup._normalMethod.cleanCompilationData();
		}
		if(this._methodSetup._diffuseMethod != null) {
			this._methodSetup._diffuseMethod.cleanCompilationData();
		}
		if(this._methodSetup._ambientMethod != null) {
			this._methodSetup._ambientMethod.cleanCompilationData();
		}
		if(this._methodSetup._specularMethod != null) {
			this._methodSetup._specularMethod.cleanCompilationData();
		}
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.cleanCompilationData();
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.cleanCompilationData();
		}
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			methods.get(i).method.cleanCompilationData();
		}
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,usesProbesForSpecular: function() {
		if(this._numLightProbes > 0) {
			return (this._specularLightSources & 2) != 0;
		} else {
			return false;
		}
	}
	,usesProbesForDiffuse: function() {
		if(this._numLightProbes > 0) {
			return (this._diffuseLightSources & 2) != 0;
		} else {
			return false;
		}
	}
	,usesProbes: function() {
		if(this._numLightProbes > 0) {
			return ((this._diffuseLightSources | this._specularLightSources) & 2) != 0;
		} else {
			return false;
		}
	}
	,get_uvBufferIndex: function() {
		return this._uvBufferIndex;
	}
	,get_uvTransformIndex: function() {
		return this._uvTransformIndex;
	}
	,get_uvTransformIndex2: function() {
		return this._uvTransformIndex2;
	}
	,get_secondaryUVBufferIndex: function() {
		return this._secondaryUVBufferIndex;
	}
	,get_normalBufferIndex: function() {
		return this._normalBufferIndex;
	}
	,get_tangentBufferIndex: function() {
		return this._tangentBufferIndex;
	}
	,get_lightFragmentConstantIndex: function() {
		return this._lightFragmentConstantIndex;
	}
	,get_cameraPositionIndex: function() {
		return this._cameraPositionIndex;
	}
	,get_sceneMatrixIndex: function() {
		return this._sceneMatrixIndex;
	}
	,get_sceneNormalMatrixIndex: function() {
		return this._sceneNormalMatrixIndex;
	}
	,get_probeWeightsIndex: function() {
		return this._probeWeightsIndex;
	}
	,get_vertexCode: function() {
		return this._vertexCode;
	}
	,get_fragmentCode: function() {
		return this._fragmentCode;
	}
	,get_fragmentLightCode: function() {
		return this._fragmentLightCode;
	}
	,get_fragmentPostLightCode: function() {
		return this._fragmentPostLightCode;
	}
	,get_shadedTarget: function() {
		return this._sharedRegisters.shadedTarget.toString();
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,set_numPointLights: function(numPointLights) {
		this._numPointLights = numPointLights;
		return numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,set_numDirectionalLights: function(value) {
		this._numDirectionalLights = value;
		return value;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,set_numLightProbes: function(value) {
		this._numLightProbes = value;
		return value;
	}
	,get_usingSpecularMethod: function() {
		return this._usingSpecularMethod;
	}
	,get_animatableAttributes: function() {
		return this._animatableAttributes;
	}
	,get_animationTargetRegisters: function() {
		return this._animationTargetRegisters;
	}
	,get_usesNormals: function() {
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			return this._methodSetup._normalMethod.get_hasOutput();
		} else {
			return false;
		}
	}
	,usesLights: function() {
		if(this._numLights > 0) {
			return (this._combinedLightSources & 1) != 0;
		} else {
			return false;
		}
	}
	,compileMethods: function() {
		var methods = this._methodSetup._methods;
		var numMethods = methods.get_length();
		var method;
		var data;
		var alphaReg = null;
		if(this._preserveAlpha) {
			alphaReg = this._registerCache.getFreeFragmentSingleTemp();
			this._registerCache.addFragmentTempUsages(alphaReg,1);
			this._fragmentCode += "mov " + Std.string(alphaReg) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n";
		}
		var _g1 = 0;
		var _g = numMethods;
		while(_g1 < _g) {
			var i = _g1++;
			method = methods.get(i).method;
			data = methods.get(i).data;
			this._vertexCode += method.getVertexCode(data,this._registerCache);
			if(data.needsGlobalVertexPos || data.needsGlobalFragmentPos) {
				this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
			}
			this._fragmentCode += method.getFragmentCode(data,this._registerCache,this._sharedRegisters.shadedTarget);
			if(data.needsNormals) {
				this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			}
			if(data.needsView) {
				this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
			}
		}
		if(this._preserveAlpha) {
			this._fragmentCode += "mov " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(alphaReg) + "\n";
			this._registerCache.removeFragmentTempUsage(alphaReg);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._vertexCode += this._methodSetup._colorTransformMethod.getVertexCode(this._methodSetup._colorTransformMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._colorTransformMethod.getFragmentCode(this._methodSetup._colorTransformMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		}
	}
	,get_lightProbeDiffuseIndices: function() {
		return this._lightProbeDiffuseIndices;
	}
	,get_lightProbeSpecularIndices: function() {
		return this._lightProbeSpecularIndices;
	}
	,__class__: away3d_materials_compilation_ShaderCompiler
};
var away3d_materials_compilation_ShaderRegisterData = function() {
};
$hxClasses["away3d.materials.compilation.ShaderRegisterData"] = away3d_materials_compilation_ShaderRegisterData;
away3d_materials_compilation_ShaderRegisterData.__name__ = ["away3d","materials","compilation","ShaderRegisterData"];
away3d_materials_compilation_ShaderRegisterData.prototype = {
	normalVarying: null
	,tangentVarying: null
	,bitangentVarying: null
	,uvVarying: null
	,secondaryUVVarying: null
	,viewDirVarying: null
	,shadedTarget: null
	,globalPositionVertex: null
	,globalPositionVarying: null
	,localPosition: null
	,normalInput: null
	,tangentInput: null
	,animatedNormal: null
	,animatedTangent: null
	,commons: null
	,projectionFragment: null
	,normalFragment: null
	,viewDirFragment: null
	,bitangent: null
	,__class__: away3d_materials_compilation_ShaderRegisterData
};
var away3d_materials_compilation_ShaderRegisterElement = function(regName,index,component) {
	if(component == null) {
		component = -1;
	}
	this._component = component;
	this._regName = regName;
	this._index = index;
	this._toStr = this._regName;
	if(this._index >= 0) {
		this._toStr += this._index;
	}
	if(component > -1) {
		this._toStr += "." + away3d_materials_compilation_ShaderRegisterElement.COMPONENTS[component];
	}
};
$hxClasses["away3d.materials.compilation.ShaderRegisterElement"] = away3d_materials_compilation_ShaderRegisterElement;
away3d_materials_compilation_ShaderRegisterElement.__name__ = ["away3d","materials","compilation","ShaderRegisterElement"];
away3d_materials_compilation_ShaderRegisterElement.prototype = {
	_regName: null
	,_index: null
	,_toStr: null
	,_component: null
	,toString: function() {
		return this._toStr;
	}
	,get_regName: function() {
		return this._regName;
	}
	,get_index: function() {
		return this._index;
	}
	,__class__: away3d_materials_compilation_ShaderRegisterElement
};
var away3d_materials_compilation_SuperShaderCompiler = function(profile) {
	away3d_materials_compilation_ShaderCompiler.call(this,profile);
};
$hxClasses["away3d.materials.compilation.SuperShaderCompiler"] = away3d_materials_compilation_SuperShaderCompiler;
away3d_materials_compilation_SuperShaderCompiler.__name__ = ["away3d","materials","compilation","SuperShaderCompiler"];
away3d_materials_compilation_SuperShaderCompiler.__super__ = away3d_materials_compilation_ShaderCompiler;
away3d_materials_compilation_SuperShaderCompiler.prototype = $extend(away3d_materials_compilation_ShaderCompiler.prototype,{
	_pointLightRegisters: null
	,_dirLightRegisters: null
	,initLightData: function() {
		away3d_materials_compilation_ShaderCompiler.prototype.initLightData.call(this);
		this._pointLightRegisters = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,this._numPointLights * 3,true);
		this._dirLightRegisters = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,this._numDirectionalLights * 3,true);
	}
	,calculateDependencies: function() {
		away3d_materials_compilation_ShaderCompiler.prototype.calculateDependencies.call(this);
		this._dependencyCounter.addWorldSpaceDependencies(true);
	}
	,compileNormalCode: function() {
		var normalMatrix = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,3,true);
		this._sharedRegisters.normalFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.normalFragment,this._dependencyCounter.get_normalDependencies());
		if(this._methodSetup._normalMethod.get_hasOutput() && !this._methodSetup._normalMethod.get_tangentSpace()) {
			this._vertexCode += this._methodSetup._normalMethod.getVertexCode(this._methodSetup._normalMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,this._sharedRegisters.normalFragment);
			return;
		}
		this._sharedRegisters.normalVarying = this._registerCache.getFreeVarying();
		normalMatrix.set(0,this._registerCache.getFreeVertexConstant());
		normalMatrix.set(1,this._registerCache.getFreeVertexConstant());
		normalMatrix.set(2,this._registerCache.getFreeVertexConstant());
		this._registerCache.getFreeVertexConstant();
		this._sceneNormalMatrixIndex = normalMatrix.get(0).get_index() * 4;
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this.compileTangentVertexCode(normalMatrix);
			this.compileTangentNormalMapFragmentCode();
		} else {
			this._vertexCode += "m33 " + Std.string(this._sharedRegisters.normalVarying) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(normalMatrix.get(0)) + "\n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.animatedNormal) + ".w\t\n";
			this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w, " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\n";
			if(this._dependencyCounter.get_tangentDependencies() > 0) {
				this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
				this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
				this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
				this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ", " + Std.string(this._sharedRegisters.tangentInput) + "\n";
			}
		}
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedNormal);
	}
	,createNormalRegisters: function() {
		if(this._dependencyCounter.get_normalDependencies() > 0) {
			this._sharedRegisters.normalInput = this._registerCache.getFreeVertexAttribute();
			this._normalBufferIndex = this._sharedRegisters.normalInput.get_index();
			this._sharedRegisters.animatedNormal = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedNormal,1);
			this._animatableAttributes.push(this._sharedRegisters.normalInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedNormal.toString());
		}
		if(this._methodSetup._normalMethod.get_hasOutput()) {
			this._sharedRegisters.tangentInput = this._registerCache.getFreeVertexAttribute();
			this._tangentBufferIndex = this._sharedRegisters.tangentInput.get_index();
			this._sharedRegisters.animatedTangent = this._registerCache.getFreeVertexVectorTemp();
			this._registerCache.addVertexTempUsages(this._sharedRegisters.animatedTangent,1);
			this._animatableAttributes.push(this._sharedRegisters.tangentInput.toString());
			this._animationTargetRegisters.push(this._sharedRegisters.animatedTangent.toString());
		}
	}
	,compileTangentVertexCode: function(matrix) {
		this._sharedRegisters.tangentVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.bitangentVarying = this._registerCache.getFreeVarying();
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(matrix.get(0)) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedNormal) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + "\n";
		this._vertexCode += "m33 " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + ", " + Std.string(matrix.get(0)) + "\n" + "nrm " + Std.string(this._sharedRegisters.animatedTangent) + ".xyz, " + Std.string(this._sharedRegisters.animatedTangent) + "\n";
		var bitanTemp = this._registerCache.getFreeVertexVectorTemp();
		this._vertexCode += "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".x  \n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".x, " + Std.string(this._sharedRegisters.animatedTangent) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".z, " + Std.string(this._sharedRegisters.animatedNormal) + ".z  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".w, " + Std.string(this._sharedRegisters.normalInput) + ".w  \n" + "crs " + Std.string(bitanTemp) + ".xyz, " + Std.string(this._sharedRegisters.animatedNormal) + ", " + Std.string(this._sharedRegisters.animatedTangent) + "\n" + "mov " + Std.string(this._sharedRegisters.tangentVarying) + ".y, " + Std.string(bitanTemp) + ".x    \n" + "mov " + Std.string(this._sharedRegisters.bitangentVarying) + ".y, " + Std.string(bitanTemp) + ".y  \n" + "mov " + Std.string(this._sharedRegisters.normalVarying) + ".y, " + Std.string(bitanTemp) + ".z    \n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.animatedTangent);
	}
	,compileTangentNormalMapFragmentCode: function() {
		var t;
		var b;
		var n;
		t = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(t,1);
		b = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(b,1);
		n = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(n,1);
		this._fragmentCode += "nrm " + Std.string(t) + ".xyz, " + Std.string(this._sharedRegisters.tangentVarying) + "\n" + "mov " + Std.string(t) + ".w, " + Std.string(this._sharedRegisters.tangentVarying) + ".w\t\n" + "nrm " + Std.string(b) + ".xyz, " + Std.string(this._sharedRegisters.bitangentVarying) + "\n" + "nrm " + Std.string(n) + ".xyz, " + Std.string(this._sharedRegisters.normalVarying) + "\n";
		var temp = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(temp,1);
		this._fragmentCode += this._methodSetup._normalMethod.getFragmentCode(this._methodSetup._normalMethodVO,this._registerCache,temp) + "m33 " + Std.string(this._sharedRegisters.normalFragment) + ".xyz, " + Std.string(temp) + ", " + Std.string(t) + "\t\n" + "mov " + Std.string(this._sharedRegisters.normalFragment) + ".w,   " + Std.string(this._sharedRegisters.normalVarying) + ".w\t\t\t\n";
		this._registerCache.removeFragmentTempUsage(temp);
		if(this._methodSetup._normalMethodVO.needsView) {
			this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
		if(this._methodSetup._normalMethodVO.needsGlobalVertexPos || this._methodSetup._normalMethodVO.needsGlobalFragmentPos) {
			this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
		}
		this._registerCache.removeFragmentTempUsage(b);
		this._registerCache.removeFragmentTempUsage(t);
		this._registerCache.removeFragmentTempUsage(n);
	}
	,compileViewDirCode: function() {
		var cameraPositionReg = this._registerCache.getFreeVertexConstant();
		this._sharedRegisters.viewDirVarying = this._registerCache.getFreeVarying();
		this._sharedRegisters.viewDirFragment = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.viewDirFragment,this._dependencyCounter.get_viewDirDependencies());
		this._cameraPositionIndex = cameraPositionReg.get_index() * 4;
		this._vertexCode += "sub " + Std.string(this._sharedRegisters.viewDirVarying) + ", " + Std.string(cameraPositionReg) + ", " + Std.string(this._sharedRegisters.globalPositionVertex) + "\n";
		this._fragmentCode += "nrm " + Std.string(this._sharedRegisters.viewDirFragment) + ".xyz, " + Std.string(this._sharedRegisters.viewDirVarying) + "\n" + "mov " + Std.string(this._sharedRegisters.viewDirFragment) + ".w,   " + Std.string(this._sharedRegisters.viewDirVarying) + ".w \t\t\n";
		this._registerCache.removeVertexTempUsage(this._sharedRegisters.globalPositionVertex);
	}
	,compileLightingCode: function() {
		var shadowReg = null;
		this._sharedRegisters.shadedTarget = this._registerCache.getFreeFragmentVectorTemp();
		this._registerCache.addFragmentTempUsages(this._sharedRegisters.shadedTarget,1);
		this._vertexCode += this._methodSetup._diffuseMethod.getVertexCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPreLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache);
		if(this._usingSpecularMethod) {
			this._vertexCode += this._methodSetup._specularMethod.getVertexCode(this._methodSetup._specularMethodVO,this._registerCache);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPreLightingCode(this._methodSetup._specularMethodVO,this._registerCache);
		}
		if(this.usesLights()) {
			this.initLightRegisters();
			this.compileDirectionalLightCode();
			this.compilePointLightCode();
		}
		if(this.usesProbes()) {
			this.compileLightProbeCode();
		}
		this._vertexCode += this._methodSetup._ambientMethod.getVertexCode(this._methodSetup._ambientMethodVO,this._registerCache);
		this._fragmentCode += this._methodSetup._ambientMethod.getFragmentCode(this._methodSetup._ambientMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._methodSetup._ambientMethodVO.needsNormals) {
			this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		}
		if(this._methodSetup._ambientMethodVO.needsView) {
			this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
		if(this._methodSetup._shadowMethod != null) {
			this._vertexCode += this._methodSetup._shadowMethod.getVertexCode(this._methodSetup._shadowMethodVO,this._registerCache);
			if(this._dependencyCounter.get_normalDependencies() == 0) {
				shadowReg = this._registerCache.getFreeFragmentVectorTemp();
				this._registerCache.addFragmentTempUsages(shadowReg,1);
			} else {
				shadowReg = this._sharedRegisters.normalFragment;
			}
			this._methodSetup._diffuseMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._shadowMethod.getFragmentCode(this._methodSetup._shadowMethodVO,this._registerCache,shadowReg);
		}
		this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentPostLightingCode(this._methodSetup._diffuseMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
		if(this._alphaPremultiplied) {
			this._fragmentCode += "add " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "div " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + ", " + Std.string(this._sharedRegisters.shadedTarget) + ".w\n" + "sub " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.shadedTarget) + ".w, " + Std.string(this._sharedRegisters.commons) + ".z\n" + "sat " + Std.string(this._sharedRegisters.shadedTarget) + ".xyz, " + Std.string(this._sharedRegisters.shadedTarget) + "\n";
		}
		if(this._methodSetup._diffuseMethodVO.needsNormals) {
			this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
		}
		if(this._methodSetup._diffuseMethodVO.needsView) {
			this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
		}
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.set_shadowRegister(shadowReg);
			this._fragmentCode += this._methodSetup._specularMethod.getFragmentPostLightingCode(this._methodSetup._specularMethodVO,this._registerCache,this._sharedRegisters.shadedTarget);
			if(this._methodSetup._specularMethodVO.needsNormals) {
				this._registerCache.removeFragmentTempUsage(this._sharedRegisters.normalFragment);
			}
			if(this._methodSetup._specularMethodVO.needsView) {
				this._registerCache.removeFragmentTempUsage(this._sharedRegisters.viewDirFragment);
			}
		}
	}
	,initLightRegisters: function() {
		var len = this._dirLightRegisters.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._dirLightRegisters.set(i,this._registerCache.getFreeFragmentConstant());
			if(this._lightFragmentConstantIndex == -1) {
				this._lightFragmentConstantIndex = this._dirLightRegisters.get(i).get_index() * 4;
			}
		}
		len = this._pointLightRegisters.get_length();
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this._pointLightRegisters.set(i1,this._registerCache.getFreeFragmentConstant());
			if(this._lightFragmentConstantIndex == -1) {
				this._lightFragmentConstantIndex = this._pointLightRegisters.get(i1).get_index() * 4;
			}
		}
	}
	,compileDirectionalLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) {
			return;
		}
		var _g1 = 0;
		var _g = this._numDirectionalLights;
		while(_g1 < _g) {
			var i = _g1++;
			lightDirReg = this._dirLightRegisters.get(regIndex++);
			diffuseColorReg = this._dirLightRegisters.get(regIndex++);
			specularColorReg = this._dirLightRegisters.get(regIndex++);
			if(addDiff) {
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			}
			if(addSpec) {
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			}
		}
	}
	,compilePointLightCode: function() {
		var diffuseColorReg;
		var specularColorReg;
		var lightPosReg;
		var lightDirReg;
		var regIndex = 0;
		var addSpec = this._usingSpecularMethod && this.usesLightsForSpecular();
		var addDiff = this.usesLightsForDiffuse();
		if(!(addSpec || addDiff)) {
			return;
		}
		var _g1 = 0;
		var _g = this._numPointLights;
		while(_g1 < _g) {
			var i = _g1++;
			lightPosReg = this._pointLightRegisters.get(regIndex++);
			diffuseColorReg = this._pointLightRegisters.get(regIndex++);
			specularColorReg = this._pointLightRegisters.get(regIndex++);
			lightDirReg = this._registerCache.getFreeFragmentVectorTemp();
			this._registerCache.addFragmentTempUsages(lightDirReg,1);
			this._fragmentCode += "sub " + Std.string(lightDirReg) + ", " + Std.string(lightPosReg) + ", " + Std.string(this._sharedRegisters.globalPositionVarying) + "\n" + "dp3 " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ", " + Std.string(lightDirReg) + "\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(diffuseColorReg) + ".w\n" + "mul " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w, " + Std.string(specularColorReg) + ".w\n" + "sat " + Std.string(lightDirReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "sub " + Std.string(lightDirReg) + ".w, " + Std.string(lightPosReg) + ".w, " + Std.string(lightDirReg) + ".w\n" + "nrm " + Std.string(lightDirReg) + ".xyz, " + Std.string(lightDirReg) + "\n";
			if(this._lightFragmentConstantIndex == -1) {
				this._lightFragmentConstantIndex = lightPosReg.get_index() * 4;
			}
			if(addDiff) {
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerLight(this._methodSetup._diffuseMethodVO,lightDirReg,diffuseColorReg,this._registerCache);
			}
			if(addSpec) {
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerLight(this._methodSetup._specularMethodVO,lightDirReg,specularColorReg,this._registerCache);
			}
			this._registerCache.removeFragmentTempUsage(lightDirReg);
		}
	}
	,compileLightProbeCode: function() {
		var weightReg;
		var weightComponents = [".x",".y",".z",".w"];
		var weightRegisters = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var i = 0;
		var texReg;
		var addSpec = this._usingSpecularMethod && this.usesProbesForSpecular();
		var addDiff = this.usesProbesForDiffuse();
		if(!(addSpec || addDiff)) {
			return;
		}
		if(addDiff) {
			this._lightProbeDiffuseIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(addSpec) {
			this._lightProbeSpecularIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		var _g1 = 0;
		var _g = this._numProbeRegisters;
		while(_g1 < _g) {
			var i1 = _g1++;
			weightRegisters.set(i1,this._registerCache.getFreeFragmentConstant());
			if(i1 == 0) {
				this._probeWeightsIndex = weightRegisters.get(i1).get_index() * 4;
			}
		}
		var _g11 = 0;
		var _g2 = this._numLightProbes;
		while(_g11 < _g2) {
			var i2 = _g11++;
			weightReg = weightRegisters.get(Math.floor(i2 / 4)).toString() + weightComponents[i2 % 4];
			if(addDiff) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeDiffuseIndices.set(i2,texReg.get_index());
				this._fragmentCode += this._methodSetup._diffuseMethod.getFragmentCodePerProbe(this._methodSetup._diffuseMethodVO,texReg,weightReg,this._registerCache);
			}
			if(addSpec) {
				texReg = this._registerCache.getFreeTextureReg();
				this._lightProbeSpecularIndices.set(i2,texReg.get_index());
				this._fragmentCode += this._methodSetup._specularMethod.getFragmentCodePerProbe(this._methodSetup._specularMethodVO,texReg,weightReg,this._registerCache);
			}
		}
	}
	,__class__: away3d_materials_compilation_SuperShaderCompiler
});
var away3d_materials_lightpickers_LightPickerBase = function() {
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.LightPickerBase"] = away3d_materials_lightpickers_LightPickerBase;
away3d_materials_lightpickers_LightPickerBase.__name__ = ["away3d","materials","lightpickers","LightPickerBase"];
away3d_materials_lightpickers_LightPickerBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_materials_lightpickers_LightPickerBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_materials_lightpickers_LightPickerBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_numPointLights: null
	,_numDirectionalLights: null
	,_numCastingPointLights: null
	,_numCastingDirectionalLights: null
	,_numLightProbes: null
	,_allPickedLights: null
	,_pointLights: null
	,_castingPointLights: null
	,_directionalLights: null
	,_castingDirectionalLights: null
	,_lightProbes: null
	,_lightProbeWeights: null
	,dispose: function() {
	}
	,get_assetType: function() {
		return "lightPicker";
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numCastingDirectionalLights: function() {
		return this._numCastingDirectionalLights;
	}
	,get_numCastingPointLights: function() {
		return this._numCastingPointLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,get_pointLights: function() {
		return this._pointLights;
	}
	,get_directionalLights: function() {
		return this._directionalLights;
	}
	,get_castingPointLights: function() {
		return this._castingPointLights;
	}
	,get_castingDirectionalLights: function() {
		return this._castingDirectionalLights;
	}
	,get_lightProbes: function() {
		return this._lightProbes;
	}
	,get_lightProbeWeights: function() {
		return this._lightProbeWeights;
	}
	,get_allPickedLights: function() {
		return this._allPickedLights;
	}
	,collectLights: function(renderable,entityCollector) {
		this.updateProbeWeights(renderable);
	}
	,updateProbeWeights: function(renderable) {
		var objectPos = renderable.get_sourceEntity().get_scenePosition();
		var lightPos;
		var rx = objectPos.x;
		var ry = objectPos.y;
		var rz = objectPos.z;
		var dx;
		var dy;
		var dz;
		var w;
		var total = 0;
		var _g1 = 0;
		var _g = this._numLightProbes;
		while(_g1 < _g) {
			var i = _g1++;
			lightPos = this._lightProbes.get(i).get_scenePosition();
			dx = rx - lightPos.x;
			dy = ry - lightPos.y;
			dz = rz - lightPos.z;
			w = dx * dx + dy * dy + dz * dz;
			if(w > .00001) {
				w = 1 / w;
			} else {
				w = 50000000;
			}
			this._lightProbeWeights.set(i,w);
			total += w;
		}
		total = 1 / total;
		var _g11 = 0;
		var _g2 = this._numLightProbes;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _g21 = i1;
			var _g3 = this._lightProbeWeights;
			_g3.set(_g21,_g3.get(_g21) * total);
		}
	}
	,__class__: away3d_materials_lightpickers_LightPickerBase
});
var away3d_materials_lightpickers_StaticLightPicker = function(lights) {
	this.set_lights(lights);
	away3d_materials_lightpickers_LightPickerBase.call(this);
};
$hxClasses["away3d.materials.lightpickers.StaticLightPicker"] = away3d_materials_lightpickers_StaticLightPicker;
away3d_materials_lightpickers_StaticLightPicker.__name__ = ["away3d","materials","lightpickers","StaticLightPicker"];
away3d_materials_lightpickers_StaticLightPicker.__super__ = away3d_materials_lightpickers_LightPickerBase;
away3d_materials_lightpickers_StaticLightPicker.prototype = $extend(away3d_materials_lightpickers_LightPickerBase.prototype,{
	_lights: null
	,get_lights: function() {
		return this._lights;
	}
	,set_lights: function(value) {
		var numPointLights = 0;
		var numDirectionalLights = 0;
		var numCastingPointLights = 0;
		var numCastingDirectionalLights = 0;
		var numLightProbes = 0;
		var light;
		if(this._lights != null) {
			this.clearListeners();
		}
		this._lights = value;
		var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,value[i]);
		}
		this._allPickedLights = vector;
		this._pointLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._castingPointLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._directionalLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._castingDirectionalLights = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this._lightProbes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var len = value.length;
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			light = value[i1];
			light.addEventListener("castsShadowChange",$bind(this,this.onCastShadowChange));
			if(js_Boot.__instanceof(light,away3d_lights_PointLight)) {
				if(light.get_castsShadows()) {
					this._castingPointLights.set(numCastingPointLights++,js_Boot.__cast(light , away3d_lights_PointLight));
				} else {
					this._pointLights.set(numPointLights++,js_Boot.__cast(light , away3d_lights_PointLight));
				}
			} else if(js_Boot.__instanceof(light,away3d_lights_DirectionalLight)) {
				if(light.get_castsShadows()) {
					this._castingDirectionalLights.set(numCastingDirectionalLights++,js_Boot.__cast(light , away3d_lights_DirectionalLight));
				} else {
					this._directionalLights.set(numDirectionalLights++,js_Boot.__cast(light , away3d_lights_DirectionalLight));
				}
			} else if(js_Boot.__instanceof(light,away3d_lights_LightProbe)) {
				this._lightProbes.set(numLightProbes++,js_Boot.__cast(light , away3d_lights_LightProbe));
			}
		}
		if(this._numDirectionalLights == numDirectionalLights && this._numPointLights == numPointLights && this._numLightProbes == numLightProbes && this._numCastingPointLights == numCastingPointLights && this._numCastingDirectionalLights == numCastingDirectionalLights) {
			return value;
		}
		this._numDirectionalLights = numDirectionalLights;
		this._numCastingDirectionalLights = numCastingDirectionalLights;
		this._numPointLights = numPointLights;
		this._numCastingPointLights = numCastingPointLights;
		this._numLightProbes = numLightProbes;
		this._lightProbeWeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,Math.ceil(numLightProbes / 4) * 4,true);
		this.dispatchEvent(new openfl_events_Event("change"));
		return value;
	}
	,clearListeners: function() {
		var len = this._lights.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._lights[i].removeEventListener("castsShadowChange",$bind(this,this.onCastShadowChange));
		}
	}
	,onCastShadowChange: function(event) {
		var light = js_Boot.__cast(event.target , away3d_lights_LightBase);
		if(js_Boot.__instanceof(light,away3d_lights_PointLight)) {
			this.updatePointCasting(js_Boot.__cast(light , away3d_lights_PointLight));
		} else if(js_Boot.__instanceof(light,away3d_lights_DirectionalLight)) {
			this.updateDirectionalCasting(js_Boot.__cast(light , away3d_lights_DirectionalLight));
		}
		this.dispatchEvent(new openfl_events_Event("change"));
	}
	,updateDirectionalCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numDirectionalLights;
			++this._numCastingDirectionalLights;
			this._directionalLights.splice(this._directionalLights.indexOf(js_Boot.__cast(light , away3d_lights_DirectionalLight),0),1);
			this._castingDirectionalLights.push(light);
		} else {
			++this._numDirectionalLights;
			--this._numCastingDirectionalLights;
			this._castingDirectionalLights.splice(this._castingDirectionalLights.indexOf(js_Boot.__cast(light , away3d_lights_DirectionalLight),0),1);
			this._directionalLights.push(light);
		}
	}
	,updatePointCasting: function(light) {
		if(light.get_castsShadows()) {
			--this._numPointLights;
			++this._numCastingPointLights;
			this._pointLights.splice(this._pointLights.indexOf(js_Boot.__cast(light , away3d_lights_PointLight),0),1);
			this._castingPointLights.push(light);
		} else {
			++this._numPointLights;
			--this._numCastingPointLights;
			this._castingPointLights.splice(this._castingPointLights.indexOf(js_Boot.__cast(light , away3d_lights_PointLight),0),1);
			this._pointLights.push(light);
		}
	}
	,__class__: away3d_materials_lightpickers_StaticLightPicker
});
var away3d_materials_methods_ShadingMethodBase = function() {
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.materials.methods.ShadingMethodBase"] = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_ShadingMethodBase.__name__ = ["away3d","materials","methods","ShadingMethodBase"];
away3d_materials_methods_ShadingMethodBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_materials_methods_ShadingMethodBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_sharedRegisters: null
	,_passes: null
	,initVO: function(vo) {
	}
	,initConstants: function(vo) {
	}
	,get_sharedRegisters: function() {
		return this._sharedRegisters;
	}
	,set_sharedRegisters: function(value) {
		this._sharedRegisters = value;
		return value;
	}
	,get_passes: function() {
		return this._passes;
	}
	,dispose: function() {
	}
	,createMethodVO: function() {
		return new away3d_materials_methods_MethodVO();
	}
	,reset: function() {
		this.cleanCompilationData();
	}
	,cleanCompilationData: function() {
	}
	,getVertexCode: function(vo,regCache) {
		return "";
	}
	,activate: function(vo,stage3DProxy) {
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
	}
	,deactivate: function(vo,stage3DProxy) {
	}
	,getTex2DSampleCode: function(vo,targetReg,inputReg,texture,uvReg,forceWrap) {
		var wrap = vo.repeatTextures ? "wrap" : "clamp";
		if(forceWrap != null) {
			wrap = forceWrap;
		}
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) {
			if(enableMipMaps) {
				filter = "linear,miplinear";
			} else {
				filter = "linear";
			}
		} else if(enableMipMaps) {
			filter = "nearest,mipnearest";
		} else {
			filter = "nearest";
		}
		if(uvReg == null) {
			uvReg = this._sharedRegisters.uvVarying;
		}
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <2d," + filter + "," + format + wrap + ">\n";
	}
	,getTexCubeSampleCode: function(vo,targetReg,inputReg,texture,uvReg) {
		var filter;
		var format = this.getFormatStringForTexture(texture);
		var enableMipMaps = vo.useMipmapping && texture.get_hasMipMaps();
		if(vo.useSmoothTextures) {
			if(enableMipMaps) {
				filter = "linear,miplinear";
			} else {
				filter = "linear";
			}
		} else if(enableMipMaps) {
			filter = "nearest,mipnearest";
		} else {
			filter = "nearest";
		}
		return "tex " + Std.string(targetReg) + ", " + Std.string(uvReg) + ", " + Std.string(inputReg) + " <cube," + format + filter + ">\n";
	}
	,getFormatStringForTexture: function(texture) {
		var _g = texture.get_format();
		switch(_g) {
		case 3:
			return "dxt1,";
		case 4:
			return "dxt5,";
		default:
			return "";
		}
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d_events_ShadingMethodEvent("ShaderInvalidated"));
	}
	,copyFrom: function(method) {
	}
	,getSmoothingFilter: function(smooth,anisotropy) {
		if(smooth) {
			switch(anisotropy) {
			case 0:
				return 4;
			case 1:
				return 1;
			case 2:
				return 2;
			case 3:
				return 3;
			case 4:
				return 0;
			}
		} else {
			return 5;
		}
	}
	,__class__: away3d_materials_methods_ShadingMethodBase
});
var away3d_materials_methods_BasicAmbientMethod = function() {
	this._lightAmbientB = 0;
	this._lightAmbientG = 0;
	this._lightAmbientR = 0;
	this._ambient = 1;
	this._ambientB = 0;
	this._ambientG = 0;
	this._ambientR = 0;
	this._ambientColor = 16777215;
	away3d_materials_methods_ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicAmbientMethod"] = away3d_materials_methods_BasicAmbientMethod;
away3d_materials_methods_BasicAmbientMethod.__name__ = ["away3d","materials","methods","BasicAmbientMethod"];
away3d_materials_methods_BasicAmbientMethod.__super__ = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_BasicAmbientMethod.prototype = $extend(away3d_materials_methods_ShadingMethodBase.prototype,{
	_useTexture: null
	,_texture: null
	,_ambientInputRegister: null
	,_ambientColor: null
	,_ambientR: null
	,_ambientG: null
	,_ambientB: null
	,_ambient: null
	,_lightAmbientR: null
	,_lightAmbientG: null
	,_lightAmbientB: null
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
	}
	,initConstants: function(vo) {
		vo.fragmentData.set(vo.fragmentConstantsIndex + 3,1);
	}
	,get_ambient: function() {
		return this._ambient;
	}
	,set_ambient: function(value) {
		this._ambient = value;
		return value;
	}
	,get_ambientColor: function() {
		return this._ambientColor;
	}
	,set_ambientColor: function(value) {
		this._ambientColor = value;
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(value != null != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) {
			this.invalidateShaderProgram();
		}
		this._useTexture = value != null;
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var diff = js_Boot.__cast(method , away3d_materials_methods_BasicAmbientMethod);
		this.set_ambient(diff.get_ambient());
		this.set_ambientColor(diff.get_ambientColor());
	}
	,cleanCompilationData: function() {
		away3d_materials_methods_ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._ambientInputRegister = null;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		if(this._useTexture) {
			this._ambientInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._ambientInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,targetReg,this._ambientInputRegister,this._texture) + "div " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".w\n";
		} else {
			this._ambientInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._ambientInputRegister.get_index() * 4;
			code += "mov " + Std.string(targetReg) + ", " + Std.string(this._ambientInputRegister) + "\n";
		}
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy.get_context3D().setSamplerStateAt(vo.texturesIndex,vo.repeatTextures ? 2 : 0,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping ? 0 : 2);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,updateAmbient: function() {
		this._ambientR = (this._ambientColor >> 16 & 255) / 255 * this._ambient * this._lightAmbientR;
		this._ambientG = (this._ambientColor >> 8 & 255) / 255 * this._ambient * this._lightAmbientG;
		this._ambientB = (this._ambientColor & 255) / 255 * this._ambient * this._lightAmbientB;
	}
	,setRenderState: function(vo,renderable,stage3DProxy,camera) {
		this.updateAmbient();
		if(!this._useTexture) {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			data.set(index,this._ambientR);
			data.set(index + 1,this._ambientG);
			data.set(index + 2,this._ambientB);
		}
	}
	,__class__: away3d_materials_methods_BasicAmbientMethod
});
var away3d_materials_methods_LightingMethodBase = function() {
	away3d_materials_methods_ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.LightingMethodBase"] = away3d_materials_methods_LightingMethodBase;
away3d_materials_methods_LightingMethodBase.__name__ = ["away3d","materials","methods","LightingMethodBase"];
away3d_materials_methods_LightingMethodBase.__super__ = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_LightingMethodBase.prototype = $extend(away3d_materials_methods_ShadingMethodBase.prototype,{
	_modulateMethod: null
	,getFragmentPreLightingCode: function(vo,regCache) {
		return "";
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		return "";
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		return "";
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		return "";
	}
	,__class__: away3d_materials_methods_LightingMethodBase
});
var away3d_materials_methods_BasicDiffuseMethod = function() {
	this._alphaThreshold = 0;
	this._diffuseA = 1;
	this._diffuseB = 1;
	this._diffuseG = 1;
	this._diffuseR = 1;
	this._diffuseColor = 16777215;
	away3d_materials_methods_LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicDiffuseMethod"] = away3d_materials_methods_BasicDiffuseMethod;
away3d_materials_methods_BasicDiffuseMethod.__name__ = ["away3d","materials","methods","BasicDiffuseMethod"];
away3d_materials_methods_BasicDiffuseMethod.__super__ = away3d_materials_methods_LightingMethodBase;
away3d_materials_methods_BasicDiffuseMethod.prototype = $extend(away3d_materials_methods_LightingMethodBase.prototype,{
	_useAmbientTexture: null
	,_useTexture: null
	,_totalLightColorReg: null
	,_diffuseInputRegister: null
	,_texture: null
	,_diffuseColor: null
	,_diffuseR: null
	,_diffuseG: null
	,_diffuseB: null
	,_diffuseA: null
	,_shadowRegister: null
	,_alphaThreshold: null
	,_isFirstLight: null
	,get_useAmbientTexture: function() {
		return this._useAmbientTexture;
	}
	,set_useAmbientTexture: function(value) {
		if(this._useAmbientTexture == value) {
			return value;
		}
		this._useAmbientTexture = value;
		this.invalidateShaderProgram();
		return value;
	}
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
	}
	,generateMip: function(stage3DProxy) {
		if(this._useTexture) {
			this._texture.getTextureForStage3D(stage3DProxy);
		}
	}
	,get_diffuseAlpha: function() {
		return this._diffuseA;
	}
	,set_diffuseAlpha: function(value) {
		this._diffuseA = value;
		return value;
	}
	,get_diffuseColor: function() {
		return this._diffuseColor;
	}
	,set_diffuseColor: function(diffuseColor) {
		this._diffuseColor = diffuseColor;
		this.updateDiffuse();
		return diffuseColor;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(value != null != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) {
			this.invalidateShaderProgram();
		}
		this._useTexture = value != null;
		this._texture = value;
		return value;
	}
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) {
			value = 0;
		} else if(value > 1) {
			value = 1;
		}
		if(value == this._alphaThreshold) {
			return value;
		}
		if(value == 0 || this._alphaThreshold == 0) {
			this.invalidateShaderProgram();
		}
		this._alphaThreshold = value;
		return value;
	}
	,dispose: function() {
		this._texture = null;
	}
	,copyFrom: function(method) {
		var diff = js_Boot.__cast(method , away3d_materials_methods_BasicDiffuseMethod);
		this.set_alphaThreshold(diff.get_alphaThreshold());
		this.set_texture(diff.get_texture());
		this.set_useAmbientTexture(diff.get_useAmbientTexture());
		this.set_diffuseAlpha(diff.get_diffuseAlpha());
		this.set_diffuseColor(diff.get_diffuseColor());
	}
	,cleanCompilationData: function() {
		away3d_materials_methods_LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._diffuseInputRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) {
			t = this._totalLightColorReg;
		} else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "dp3 " + Std.string(t) + ".x, " + Std.string(lightDirReg) + ", " + Std.string(this._sharedRegisters.normalFragment) + "\n" + "max " + Std.string(t) + ".w, " + Std.string(t) + ".x, " + Std.string(this._sharedRegisters.commons) + ".y\n";
		if(vo.useLightFallOff) {
			code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		}
		if(this._modulateMethod != null) {
			code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		}
		code += "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(lightColReg) + "\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) {
			t = this._totalLightColorReg;
		} else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		code += "tex " + Std.string(t) + ", " + Std.string(this._sharedRegisters.normalFragment) + ", " + Std.string(cubeMapReg) + " <cube,linear,miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ".xyz, " + weightRegister + "\n";
		if(this._modulateMethod != null) {
			code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		}
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		var albedo;
		var cutOffReg;
		if(vo.numLights > 0) {
			if(this._shadowRegister != null) {
				code += this.applyShadow(vo,regCache);
			}
			albedo = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(albedo,1);
		} else {
			albedo = targetReg;
		}
		if(this._useTexture) {
			this._diffuseInputRegister = regCache.getFreeTextureReg();
			vo.texturesIndex = this._diffuseInputRegister.get_index();
			code += this.getTex2DSampleCode(vo,albedo,this._diffuseInputRegister,this._texture);
			if(this._alphaThreshold > 0) {
				cutOffReg = regCache.getFreeFragmentConstant();
				vo.fragmentConstantsIndex = cutOffReg.get_index() * 4;
				code += "sub " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n" + "kil " + Std.string(albedo) + ".w\n" + "add " + Std.string(albedo) + ".w, " + Std.string(albedo) + ".w, " + Std.string(cutOffReg) + ".x\n";
			}
		} else {
			this._diffuseInputRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._diffuseInputRegister.get_index() * 4;
			code += "mov " + Std.string(albedo) + ", " + Std.string(this._diffuseInputRegister) + "\n";
		}
		if(vo.numLights == 0) {
			return code;
		}
		code += "sat " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		if(this._useAmbientTexture) {
			code += "mul " + Std.string(albedo) + ".xyz, " + Std.string(albedo) + ", " + Std.string(this._totalLightColorReg) + "\n" + "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n";
		} else {
			code += "add " + Std.string(targetReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(targetReg) + "\n";
			if(this._useTexture) {
				code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(albedo) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(albedo) + ".w\n";
			} else {
				code += "mul " + Std.string(targetReg) + ".xyz, " + Std.string(this._diffuseInputRegister) + ", " + Std.string(targetReg) + "\n" + "mov " + Std.string(targetReg) + ".w, " + Std.string(this._diffuseInputRegister) + ".w\n";
			}
		}
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		regCache.removeFragmentTempUsage(albedo);
		return code;
	}
	,applyShadow: function(vo,regCache) {
		return "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
	}
	,activate: function(vo,stage3DProxy) {
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures ? 2 : 0,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping ? 0 : 2);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
			if(this._alphaThreshold > 0) {
				vo.fragmentData.set(vo.fragmentConstantsIndex,this._alphaThreshold);
			}
		} else {
			var index = vo.fragmentConstantsIndex;
			var data = vo.fragmentData;
			data.set(index,this._diffuseR);
			data.set(index + 1,this._diffuseG);
			data.set(index + 2,this._diffuseB);
			data.set(index + 3,this._diffuseA);
		}
	}
	,updateDiffuse: function() {
		this._diffuseR = (this._diffuseColor >> 16 & 255) / 255;
		this._diffuseG = (this._diffuseColor >> 8 & 255) / 255;
		this._diffuseB = (this._diffuseColor & 255) / 255;
	}
	,set_shadowRegister: function(value) {
		this._shadowRegister = value;
		return value;
	}
	,__class__: away3d_materials_methods_BasicDiffuseMethod
});
var away3d_materials_methods_BasicNormalMethod = function() {
	away3d_materials_methods_ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicNormalMethod"] = away3d_materials_methods_BasicNormalMethod;
away3d_materials_methods_BasicNormalMethod.__name__ = ["away3d","materials","methods","BasicNormalMethod"];
away3d_materials_methods_BasicNormalMethod.__super__ = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_BasicNormalMethod.prototype = $extend(away3d_materials_methods_ShadingMethodBase.prototype,{
	_texture: null
	,_useTexture: null
	,_normalTextureRegister: null
	,initVO: function(vo) {
		vo.needsUV = this._texture != null;
	}
	,get_tangentSpace: function() {
		return true;
	}
	,get_hasOutput: function() {
		return this._useTexture;
	}
	,copyFrom: function(method) {
		this.set_normalMap((js_Boot.__cast(method , away3d_materials_methods_BasicNormalMethod)).get_normalMap());
	}
	,get_normalMap: function() {
		return this._texture;
	}
	,set_normalMap: function(value) {
		if(value != null != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) {
			this.invalidateShaderProgram();
		}
		this._useTexture = value != null;
		this._texture = value;
		return value;
	}
	,cleanCompilationData: function() {
		away3d_materials_methods_ShadingMethodBase.prototype.cleanCompilationData.call(this);
		this._normalTextureRegister = null;
	}
	,dispose: function() {
		if(this._texture != null) {
			this._texture = null;
		}
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.texturesIndex >= 0) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures ? 2 : 0,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping ? 0 : 2);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		this._normalTextureRegister = regCache.getFreeTextureReg();
		vo.texturesIndex = this._normalTextureRegister.get_index();
		return this.getTex2DSampleCode(vo,targetReg,this._normalTextureRegister,this._texture) + "sub " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(this._sharedRegisters.commons) + ".xxx\t\n" + "nrm " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz\t\t\t\t\t\t\t\n";
	}
	,__class__: away3d_materials_methods_BasicNormalMethod
});
var away3d_materials_methods_BasicSpecularMethod = function() {
	this._specularB = 1;
	this._specularG = 1;
	this._specularR = 1;
	this._specularColor = 16777215;
	this._specular = 1;
	this._gloss = 50;
	away3d_materials_methods_LightingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.BasicSpecularMethod"] = away3d_materials_methods_BasicSpecularMethod;
away3d_materials_methods_BasicSpecularMethod.__name__ = ["away3d","materials","methods","BasicSpecularMethod"];
away3d_materials_methods_BasicSpecularMethod.__super__ = away3d_materials_methods_LightingMethodBase;
away3d_materials_methods_BasicSpecularMethod.prototype = $extend(away3d_materials_methods_LightingMethodBase.prototype,{
	_useTexture: null
	,_totalLightColorReg: null
	,_specularTextureRegister: null
	,_specularTexData: null
	,_specularDataRegister: null
	,_texture: null
	,_gloss: null
	,_specular: null
	,_specularColor: null
	,_specularR: null
	,_specularG: null
	,_specularB: null
	,_shadowRegister: null
	,_isFirstLight: null
	,initVO: function(vo) {
		vo.needsUV = this._useTexture;
		vo.needsNormals = vo.numLights > 0;
		vo.needsView = vo.numLights > 0;
	}
	,get_gloss: function() {
		return this._gloss;
	}
	,set_gloss: function(value) {
		this._gloss = value;
		return value;
	}
	,get_specular: function() {
		return this._specular;
	}
	,set_specular: function(value) {
		if(value == this._specular) {
			return value;
		}
		this._specular = value;
		this.updateSpecular();
		return value;
	}
	,get_specularColor: function() {
		return this._specularColor;
	}
	,set_specularColor: function(value) {
		if(this._specularColor == value) {
			return value;
		}
		if(this._specularColor == 0 || value == 0) {
			this.invalidateShaderProgram();
		}
		this._specularColor = value;
		this.updateSpecular();
		return value;
	}
	,get_texture: function() {
		return this._texture;
	}
	,set_texture: function(value) {
		if(value != null != this._useTexture || value != null && this._texture != null && (value.get_hasMipMaps() != this._texture.get_hasMipMaps() || value.get_format() != this._texture.get_format())) {
			this.invalidateShaderProgram();
		}
		this._useTexture = value != null;
		this._texture = value;
		return value;
	}
	,copyFrom: function(method) {
		var spec = js_Boot.__cast(method , away3d_materials_methods_BasicSpecularMethod);
		this.set_texture(spec.get_texture());
		this.set_specular(spec.get_specular());
		this.set_specularColor(spec.get_specularColor());
		this.set_gloss(spec.get_gloss());
	}
	,cleanCompilationData: function() {
		away3d_materials_methods_LightingMethodBase.prototype.cleanCompilationData.call(this);
		this._shadowRegister = null;
		this._totalLightColorReg = null;
		this._specularTextureRegister = null;
		this._specularTexData = null;
		this._specularDataRegister = null;
	}
	,getFragmentPreLightingCode: function(vo,regCache) {
		var code = "";
		this._isFirstLight = true;
		if(vo.numLights > 0) {
			this._specularDataRegister = regCache.getFreeFragmentConstant();
			vo.fragmentConstantsIndex = this._specularDataRegister.get_index() * 4;
			if(this._useTexture) {
				this._specularTexData = regCache.getFreeFragmentVectorTemp();
				regCache.addFragmentTempUsages(this._specularTexData,1);
				this._specularTextureRegister = regCache.getFreeTextureReg();
				vo.texturesIndex = this._specularTextureRegister.get_index();
				code = this.getTex2DSampleCode(vo,this._specularTexData,this._specularTextureRegister,this._texture);
			} else {
				this._specularTextureRegister = null;
			}
			this._totalLightColorReg = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(this._totalLightColorReg,1);
		}
		return code;
	}
	,getFragmentCodePerLight: function(vo,lightDirReg,lightColReg,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) {
			t = this._totalLightColorReg;
		} else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		var normalReg = this._sharedRegisters.normalFragment;
		code += "add " + Std.string(t) + ", " + Std.string(lightDirReg) + ", " + Std.string(viewDirReg) + "\n" + "nrm " + Std.string(t) + ".xyz, " + Std.string(t) + "\n" + "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(t) + "\n" + "sat " + Std.string(t) + ".w, " + Std.string(t) + ".w\n";
		if(this._useTexture) {
			code += "mul " + Std.string(this._specularTexData) + ".w, " + Std.string(this._specularTexData) + ".y, " + Std.string(this._specularDataRegister) + ".w\n" + "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularTexData) + ".w\n";
		} else {
			code += "pow " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(this._specularDataRegister) + ".w\n";
		}
		if(vo.useLightFallOff) {
			code += "mul " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(lightDirReg) + ".w\n";
		}
		if(this._modulateMethod != null) {
			code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		}
		code += "mul " + Std.string(t) + ".xyz, " + Std.string(lightColReg) + ", " + Std.string(t) + ".w\n";
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentCodePerProbe: function(vo,cubeMapReg,weightRegister,regCache) {
		var code = "";
		var t;
		if(this._isFirstLight) {
			t = this._totalLightColorReg;
		} else {
			t = regCache.getFreeFragmentVectorTemp();
			regCache.addFragmentTempUsages(t,1);
		}
		var normalReg = this._sharedRegisters.normalFragment;
		var viewDirReg = this._sharedRegisters.viewDirFragment;
		code += "dp3 " + Std.string(t) + ".w, " + Std.string(normalReg) + ", " + Std.string(viewDirReg) + "\n" + "add " + Std.string(t) + ".w, " + Std.string(t) + ".w, " + Std.string(t) + ".w\n" + "mul " + Std.string(t) + ", " + Std.string(t) + ".w, " + Std.string(normalReg) + "\n" + "sub " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(viewDirReg) + "\n" + "tex " + Std.string(t) + ", " + Std.string(t) + ", " + Std.string(cubeMapReg) + " <cube," + (vo.useSmoothTextures ? "linear" : "nearest") + ",miplinear>\n" + "mul " + Std.string(t) + ".xyz, " + Std.string(t) + ", " + weightRegister + "\n";
		if(this._modulateMethod != null) {
			code += Std.string(this._modulateMethod(vo,t,regCache,this._sharedRegisters));
		}
		if(!this._isFirstLight) {
			code += "add " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(t) + "\n";
			regCache.removeFragmentTempUsage(t);
		}
		this._isFirstLight = false;
		return code;
	}
	,getFragmentPostLightingCode: function(vo,regCache,targetReg) {
		var code = "";
		if(vo.numLights == 0) {
			return code;
		}
		if(this._shadowRegister != null) {
			code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._shadowRegister) + ".w\n";
		}
		if(this._useTexture) {
			code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularTexData) + ".x\n";
			regCache.removeFragmentTempUsage(this._specularTexData);
		}
		code += "mul " + Std.string(this._totalLightColorReg) + ".xyz, " + Std.string(this._totalLightColorReg) + ", " + Std.string(this._specularDataRegister) + "\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ", " + Std.string(this._totalLightColorReg) + "\n";
		regCache.removeFragmentTempUsage(this._totalLightColorReg);
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		if(vo.numLights == 0) {
			return;
		}
		if(this._useTexture) {
			stage3DProxy._context3D.setSamplerStateAt(vo.texturesIndex,vo.repeatTextures ? 2 : 0,this.getSmoothingFilter(vo.useSmoothTextures,vo.anisotropy),vo.useMipmapping ? 0 : 2);
			stage3DProxy._context3D.setTextureAt(vo.texturesIndex,this._texture.getTextureForStage3D(stage3DProxy));
		}
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		data.set(index,this._specularR);
		data.set(index + 1,this._specularG);
		data.set(index + 2,this._specularB);
		data.set(index + 3,this._gloss);
	}
	,updateSpecular: function() {
		this._specularR = _$UInt_UInt_$Impl_$.toFloat(this._specularColor >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * this._specular;
		this._specularG = _$UInt_UInt_$Impl_$.toFloat(this._specularColor >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * this._specular;
		this._specularB = _$UInt_UInt_$Impl_$.toFloat(this._specularColor & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * this._specular;
	}
	,set_shadowRegister: function(shadowReg) {
		this._shadowRegister = shadowReg;
		return shadowReg;
	}
	,__class__: away3d_materials_methods_BasicSpecularMethod
});
var away3d_materials_methods_EffectMethodBase = function() {
	away3d_materials_methods_ShadingMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.EffectMethodBase"] = away3d_materials_methods_EffectMethodBase;
away3d_materials_methods_EffectMethodBase.__name__ = ["away3d","materials","methods","EffectMethodBase"];
away3d_materials_methods_EffectMethodBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_materials_methods_EffectMethodBase.__super__ = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_EffectMethodBase.prototype = $extend(away3d_materials_methods_ShadingMethodBase.prototype,{
	get_assetType: function() {
		return "effectsMethod";
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,__class__: away3d_materials_methods_EffectMethodBase
});
var away3d_materials_methods_ColorTransformMethod = function() {
	away3d_materials_methods_EffectMethodBase.call(this);
};
$hxClasses["away3d.materials.methods.ColorTransformMethod"] = away3d_materials_methods_ColorTransformMethod;
away3d_materials_methods_ColorTransformMethod.__name__ = ["away3d","materials","methods","ColorTransformMethod"];
away3d_materials_methods_ColorTransformMethod.__super__ = away3d_materials_methods_EffectMethodBase;
away3d_materials_methods_ColorTransformMethod.prototype = $extend(away3d_materials_methods_EffectMethodBase.prototype,{
	_colorTransform: null
	,get_colorTransform: function() {
		return this._colorTransform;
	}
	,set_colorTransform: function(value) {
		this._colorTransform = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var code = "";
		var colorMultReg = regCache.getFreeFragmentConstant();
		var colorOffsReg = regCache.getFreeFragmentConstant();
		vo.fragmentConstantsIndex = colorMultReg.get_index() * 4;
		code += "mul " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorMultReg) + "\n" + "add " + Std.string(targetReg) + ", " + targetReg.toString() + ", " + Std.string(colorOffsReg) + "\n";
		return code;
	}
	,activate: function(vo,stage3DProxy) {
		var inv = 0.00392156862745098;
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		data.set(index,this._colorTransform.redMultiplier);
		data.set(index + 1,this._colorTransform.greenMultiplier);
		data.set(index + 2,this._colorTransform.blueMultiplier);
		data.set(index + 3,this._colorTransform.alphaMultiplier);
		data.set(index + 4,this._colorTransform.redOffset * inv);
		data.set(index + 5,this._colorTransform.greenOffset * inv);
		data.set(index + 6,this._colorTransform.blueOffset * inv);
		data.set(index + 7,this._colorTransform.alphaOffset * inv);
	}
	,__class__: away3d_materials_methods_ColorTransformMethod
});
var away3d_materials_methods_FogMethod = function(minDistance,maxDistance,fogColor) {
	if(fogColor == null) {
		fogColor = 8421504;
	}
	this._maxDistance = 1000;
	this._minDistance = 0;
	away3d_materials_methods_EffectMethodBase.call(this);
	this.set_minDistance(minDistance);
	this.set_maxDistance(maxDistance);
	this.set_fogColor(fogColor);
};
$hxClasses["away3d.materials.methods.FogMethod"] = away3d_materials_methods_FogMethod;
away3d_materials_methods_FogMethod.__name__ = ["away3d","materials","methods","FogMethod"];
away3d_materials_methods_FogMethod.__super__ = away3d_materials_methods_EffectMethodBase;
away3d_materials_methods_FogMethod.prototype = $extend(away3d_materials_methods_EffectMethodBase.prototype,{
	_minDistance: null
	,_maxDistance: null
	,_fogColor: null
	,_fogR: null
	,_fogG: null
	,_fogB: null
	,initVO: function(vo) {
		vo.needsProjection = true;
	}
	,initConstants: function(vo) {
		var data = vo.fragmentData;
		var index = vo.fragmentConstantsIndex;
		data.set(index + 3,1);
		data.set(index + 6,0);
		data.set(index + 7,0);
	}
	,get_minDistance: function() {
		return this._minDistance;
	}
	,set_minDistance: function(value) {
		this._minDistance = value;
		return value;
	}
	,get_maxDistance: function() {
		return this._maxDistance;
	}
	,set_maxDistance: function(value) {
		this._maxDistance = value;
		return value;
	}
	,get_fogColor: function() {
		return this._fogColor;
	}
	,set_fogColor: function(value) {
		this._fogColor = value;
		this._fogR = (value >> 16 & 255) / 255;
		this._fogG = (value >> 8 & 255) / 255;
		this._fogB = (value & 255) / 255;
		return value;
	}
	,activate: function(vo,stage3DProxy) {
		var data = vo.fragmentData;
		var index = vo.fragmentConstantsIndex;
		data.set(index,this._fogR);
		data.set(index + 1,this._fogG);
		data.set(index + 2,this._fogB);
		data.set(index + 4,this._minDistance);
		data.set(index + 5,1 / (this._maxDistance - this._minDistance));
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var fogColor = regCache.getFreeFragmentConstant();
		var fogData = regCache.getFreeFragmentConstant();
		var temp = regCache.getFreeFragmentVectorTemp();
		regCache.addFragmentTempUsages(temp,1);
		var temp2 = regCache.getFreeFragmentVectorTemp();
		var code = "";
		vo.fragmentConstantsIndex = fogColor.get_index() * 4;
		code += "sub " + Std.string(temp2) + ".w, " + Std.string(this._sharedRegisters.projectionFragment) + ".z, " + Std.string(fogData) + ".x          \n" + "mul " + Std.string(temp2) + ".w, " + Std.string(temp2) + ".w, " + Std.string(fogData) + ".y\t\t\t\t\t\n" + "sat " + Std.string(temp2) + ".w, " + Std.string(temp2) + ".w\t\t\t\t\t\t\t\t\t\t\n" + "sub " + Std.string(temp) + ", " + Std.string(fogColor) + ", " + Std.string(targetReg) + "\n" + "mul " + Std.string(temp) + ", " + Std.string(temp) + ", " + Std.string(temp2) + ".w\t\t\t\t\t\n" + "add " + Std.string(targetReg) + ", " + Std.string(targetReg) + ", " + Std.string(temp) + "\n";
		regCache.removeFragmentTempUsage(temp);
		return code;
	}
	,__class__: away3d_materials_methods_FogMethod
});
var away3d_materials_methods_MethodVO = function() {
	this.useLightFallOff = true;
};
$hxClasses["away3d.materials.methods.MethodVO"] = away3d_materials_methods_MethodVO;
away3d_materials_methods_MethodVO.__name__ = ["away3d","materials","methods","MethodVO"];
away3d_materials_methods_MethodVO.prototype = {
	vertexData: null
	,fragmentData: null
	,texturesIndex: null
	,secondaryTexturesIndex: null
	,vertexConstantsIndex: null
	,secondaryVertexConstantsIndex: null
	,fragmentConstantsIndex: null
	,secondaryFragmentConstantsIndex: null
	,useMipmapping: null
	,useSmoothTextures: null
	,repeatTextures: null
	,anisotropy: null
	,needsProjection: null
	,needsView: null
	,needsNormals: null
	,needsTangents: null
	,needsUV: null
	,needsSecondaryUV: null
	,needsGlobalVertexPos: null
	,needsGlobalFragmentPos: null
	,numLights: null
	,useLightFallOff: null
	,reset: function() {
		this.texturesIndex = -1;
		this.vertexConstantsIndex = -1;
		this.fragmentConstantsIndex = -1;
		this.useMipmapping = true;
		this.anisotropy = 1;
		this.useSmoothTextures = true;
		this.repeatTextures = false;
		this.needsProjection = false;
		this.needsView = false;
		this.needsNormals = false;
		this.needsTangents = false;
		this.needsUV = false;
		this.needsSecondaryUV = false;
		this.needsGlobalVertexPos = false;
		this.needsGlobalFragmentPos = false;
		this.numLights = 0;
		this.useLightFallOff = true;
	}
	,__class__: away3d_materials_methods_MethodVO
};
var away3d_materials_methods_MethodVOSet = function(method) {
	this.method = method;
	this.data = method.createMethodVO();
};
$hxClasses["away3d.materials.methods.MethodVOSet"] = away3d_materials_methods_MethodVOSet;
away3d_materials_methods_MethodVOSet.__name__ = ["away3d","materials","methods","MethodVOSet"];
away3d_materials_methods_MethodVOSet.prototype = {
	method: null
	,data: null
	,__class__: away3d_materials_methods_MethodVOSet
};
var away3d_materials_methods_RimLightMethod = function(color,strength,power,blend) {
	if(blend == null) {
		blend = "mix";
	}
	if(power == null) {
		power = 2;
	}
	if(strength == null) {
		strength = .4;
	}
	if(color == null) {
		color = 16777215;
	}
	away3d_materials_methods_EffectMethodBase.call(this);
	this._blendMode = blend;
	this._strength = strength;
	this._power = power;
	this.set_color(color);
};
$hxClasses["away3d.materials.methods.RimLightMethod"] = away3d_materials_methods_RimLightMethod;
away3d_materials_methods_RimLightMethod.__name__ = ["away3d","materials","methods","RimLightMethod"];
away3d_materials_methods_RimLightMethod.__super__ = away3d_materials_methods_EffectMethodBase;
away3d_materials_methods_RimLightMethod.prototype = $extend(away3d_materials_methods_EffectMethodBase.prototype,{
	_color: null
	,_blendMode: null
	,_colorR: null
	,_colorG: null
	,_colorB: null
	,_strength: null
	,_power: null
	,initConstants: function(vo) {
		vo.fragmentData.set(vo.fragmentConstantsIndex + 3,1);
	}
	,initVO: function(vo) {
		vo.needsNormals = true;
		vo.needsView = true;
	}
	,get_blendMode: function() {
		return this._blendMode;
	}
	,set_blendMode: function(value) {
		if(this._blendMode == value) {
			return value;
		}
		this._blendMode = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		this._colorR = (value >> 16 & 255) / 255;
		this._colorG = (value >> 8 & 255) / 255;
		this._colorB = (value & 255) / 255;
		return value;
	}
	,get_strength: function() {
		return this._strength;
	}
	,set_strength: function(value) {
		this._strength = value;
		return value;
	}
	,get_power: function() {
		return this._power;
	}
	,set_power: function(value) {
		this._power = value;
		return value;
	}
	,activate: function(vo,stage3DProxy) {
		var index = vo.fragmentConstantsIndex;
		var data = vo.fragmentData;
		data.set(index,this._colorR);
		data.set(index + 1,this._colorG);
		data.set(index + 2,this._colorB);
		data.set(index + 4,this._strength);
		data.set(index + 5,this._power);
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		var dataRegister = regCache.getFreeFragmentConstant();
		var dataRegister2 = regCache.getFreeFragmentConstant();
		var temp = regCache.getFreeFragmentVectorTemp();
		var code = "";
		vo.fragmentConstantsIndex = dataRegister.get_index() * 4;
		code += "dp3 " + Std.string(temp) + ".x, " + Std.string(this._sharedRegisters.viewDirFragment) + ".xyz, " + Std.string(this._sharedRegisters.normalFragment) + ".xyz\t\n" + "sat " + Std.string(temp) + ".x, " + Std.string(temp) + ".x\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n" + "sub " + Std.string(temp) + ".x, " + Std.string(dataRegister) + ".w, " + Std.string(temp) + ".x\t\t\t\t\t\t\t\t\n" + "pow " + Std.string(temp) + ".x, " + Std.string(temp) + ".x, " + Std.string(dataRegister2) + ".y\t\t\t\t\t\t\t\n" + "mul " + Std.string(temp) + ".x, " + Std.string(temp) + ".x, " + Std.string(dataRegister2) + ".x\t\t\t\t\t\t\t\n" + "sub " + Std.string(temp) + ".x, " + Std.string(dataRegister) + ".w, " + Std.string(temp) + ".x\t\t\t\t\t\t\t\t\n" + "mul " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(temp) + ".x\t\t\t\t\t\t\n" + "sub " + Std.string(temp) + ".w, " + Std.string(dataRegister) + ".w, " + Std.string(temp) + ".x\t\t\t\t\t\t\t\t\n";
		if(this._blendMode == "add") {
			code += "mul " + Std.string(temp) + ".xyz, " + Std.string(temp) + ".w, " + Std.string(dataRegister) + ".xyz\t\t\t\t\t\t\t\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(temp) + ".xyz\t\t\t\t\t\t\n";
		} else if(this._blendMode == "multiply") {
			code += "mul " + Std.string(temp) + ".xyz, " + Std.string(temp) + ".w, " + Std.string(dataRegister) + ".xyz\t\t\t\t\t\t\t\n" + "mul " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(temp) + ".xyz\t\t\t\t\t\t\n";
		} else {
			code += "sub " + Std.string(temp) + ".xyz, " + Std.string(dataRegister) + ".xyz, " + Std.string(targetReg) + ".xyz\t\t\t\t\n" + "mul " + Std.string(temp) + ".xyz, " + Std.string(temp) + ".xyz, " + Std.string(temp) + ".w\t\t\t\t\t\t\t\t\n" + "add " + Std.string(targetReg) + ".xyz, " + Std.string(targetReg) + ".xyz, " + Std.string(temp) + ".xyz\t\t\t\t\t\n";
		}
		return code;
	}
	,__class__: away3d_materials_methods_RimLightMethod
});
var away3d_materials_methods_ShaderMethodSetup = function() {
	this._methods = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this._normalMethod = new away3d_materials_methods_BasicNormalMethod();
	this._ambientMethod = new away3d_materials_methods_BasicAmbientMethod();
	this._diffuseMethod = new away3d_materials_methods_BasicDiffuseMethod();
	this._specularMethod = new away3d_materials_methods_BasicSpecularMethod();
	this._normalMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
	this._diffuseMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
	this._specularMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
	this._ambientMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
	this._normalMethodVO = this._normalMethod.createMethodVO();
	this._ambientMethodVO = this._ambientMethod.createMethodVO();
	this._diffuseMethodVO = this._diffuseMethod.createMethodVO();
	this._specularMethodVO = this._specularMethod.createMethodVO();
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["away3d.materials.methods.ShaderMethodSetup"] = away3d_materials_methods_ShaderMethodSetup;
away3d_materials_methods_ShaderMethodSetup.__name__ = ["away3d","materials","methods","ShaderMethodSetup"];
away3d_materials_methods_ShaderMethodSetup.__super__ = openfl_events_EventDispatcher;
away3d_materials_methods_ShaderMethodSetup.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_colorTransformMethod: null
	,_colorTransformMethodVO: null
	,_normalMethod: null
	,_normalMethodVO: null
	,_ambientMethod: null
	,_ambientMethodVO: null
	,_shadowMethod: null
	,_shadowMethodVO: null
	,_diffuseMethod: null
	,_diffuseMethodVO: null
	,_specularMethod: null
	,_specularMethodVO: null
	,_methods: null
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,invalidateShaderProgram: function() {
		this.dispatchEvent(new away3d_events_ShadingMethodEvent("ShaderInvalidated"));
	}
	,get_normalMethod: function() {
		return this._normalMethod;
	}
	,set_normalMethod: function(value) {
		if(this._normalMethod != null) {
			this._normalMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		if(value != null) {
			if(this._normalMethod != null) {
				value.copyFrom(this._normalMethod);
			}
			this._normalMethodVO = value.createMethodVO();
			value.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		this._normalMethod = value;
		if(value != null) {
			this.invalidateShaderProgram();
		}
		return value;
	}
	,get_ambientMethod: function() {
		return this._ambientMethod;
	}
	,set_ambientMethod: function(value) {
		if(this._ambientMethod != null) {
			this._ambientMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		if(value != null) {
			if(this._ambientMethod != null) {
				value.copyFrom(this._ambientMethod);
			}
			value.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this._ambientMethodVO = value.createMethodVO();
		}
		this._ambientMethod = value;
		if(value != null) {
			this.invalidateShaderProgram();
		}
		return value;
	}
	,get_shadowMethod: function() {
		return this._shadowMethod;
	}
	,set_shadowMethod: function(value) {
		if(this._shadowMethod != null) {
			this._shadowMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		this._shadowMethod = value;
		if(this._shadowMethod != null) {
			this._shadowMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this._shadowMethodVO = this._shadowMethod.createMethodVO();
		} else {
			this._shadowMethodVO = null;
		}
		this.invalidateShaderProgram();
		return value;
	}
	,get_diffuseMethod: function() {
		return this._diffuseMethod;
	}
	,set_diffuseMethod: function(value) {
		if(this._diffuseMethod != null) {
			this._diffuseMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		if(value != null) {
			if(this._diffuseMethod != null) {
				value.copyFrom(this._diffuseMethod);
			}
			value.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this._diffuseMethodVO = value.createMethodVO();
		}
		this._diffuseMethod = value;
		if(value != null) {
			this.invalidateShaderProgram();
		}
		return value;
	}
	,get_specularMethod: function() {
		return this._specularMethod;
	}
	,set_specularMethod: function(value) {
		if(this._specularMethod != null) {
			this._specularMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			if(value != null) {
				value.copyFrom(this._specularMethod);
			}
		}
		this._specularMethod = value;
		if(this._specularMethod != null) {
			this._specularMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this._specularMethodVO = this._specularMethod.createMethodVO();
		} else {
			this._specularMethodVO = null;
		}
		this.invalidateShaderProgram();
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._colorTransformMethod;
	}
	,set_colorTransformMethod: function(value) {
		if(this._colorTransformMethod == value) {
			return value;
		}
		if(this._colorTransformMethod != null) {
			this._colorTransformMethod.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
		if(this._colorTransformMethod == null || value == null) {
			this.invalidateShaderProgram();
		}
		this._colorTransformMethod = value;
		if(this._colorTransformMethod != null) {
			this._colorTransformMethod.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this._colorTransformMethodVO = this._colorTransformMethod.createMethodVO();
		} else {
			this._colorTransformMethodVO = null;
		}
		return value;
	}
	,dispose: function() {
		this.clearListeners(this._normalMethod);
		this.clearListeners(this._diffuseMethod);
		this.clearListeners(this._shadowMethod);
		this.clearListeners(this._ambientMethod);
		this.clearListeners(this._specularMethod);
		var _g1 = 0;
		var _g = this._methods.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this.clearListeners(this._methods.get(i).method);
		}
		this._methods = null;
	}
	,clearListeners: function(method) {
		if(method != null) {
			method.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		}
	}
	,addMethod: function(method) {
		this._methods.push(new away3d_materials_methods_MethodVOSet(method));
		method.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,hasMethod: function(method) {
		return this.getMethodSetForMethod(method) != null;
	}
	,addMethodAt: function(method,index) {
		this._methods.insertAt(index,new away3d_materials_methods_MethodVOSet(method));
		method.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		this.invalidateShaderProgram();
	}
	,getMethodAt: function(index) {
		if(index > this._methods.get_length() - 1) {
			return null;
		}
		return this._methods.get(index).method;
	}
	,get_numMethods: function() {
		return this._methods.get_length();
	}
	,removeMethod: function(method) {
		var methodSet = this.getMethodSetForMethod(method);
		if(methodSet != null) {
			var index = this._methods.indexOf(methodSet,0);
			this._methods.splice(index,1);
			method.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
			this.invalidateShaderProgram();
		}
	}
	,getMethodSetForMethod: function(method) {
		var len = this._methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._methods.get(i).method == method) {
				return this._methods.get(i);
			}
		}
		return null;
	}
	,__class__: away3d_materials_methods_ShaderMethodSetup
});
var away3d_materials_methods_ShadowMapMethodBase = function(castingLight) {
	this._alpha = 1;
	this._epsilon = .02;
	away3d_materials_methods_ShadingMethodBase.call(this);
	this._castingLight = castingLight;
	castingLight.set_castsShadows(true);
	this._shadowMapper = castingLight.get_shadowMapper();
};
$hxClasses["away3d.materials.methods.ShadowMapMethodBase"] = away3d_materials_methods_ShadowMapMethodBase;
away3d_materials_methods_ShadowMapMethodBase.__name__ = ["away3d","materials","methods","ShadowMapMethodBase"];
away3d_materials_methods_ShadowMapMethodBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_materials_methods_ShadowMapMethodBase.__super__ = away3d_materials_methods_ShadingMethodBase;
away3d_materials_methods_ShadowMapMethodBase.prototype = $extend(away3d_materials_methods_ShadingMethodBase.prototype,{
	_castingLight: null
	,_shadowMapper: null
	,_epsilon: null
	,_alpha: null
	,get_assetType: function() {
		return "shadowMapMethod";
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		this._alpha = value;
		return value;
	}
	,get_castingLight: function() {
		return this._castingLight;
	}
	,get_epsilon: function() {
		return this._epsilon;
	}
	,set_epsilon: function(value) {
		this._epsilon = value;
		return value;
	}
	,getFragmentCode: function(vo,regCache,targetReg) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,__class__: away3d_materials_methods_ShadowMapMethodBase
});
var away3d_materials_passes_MaterialPassBase = function(renderToTexture) {
	if(renderToTexture == null) {
		renderToTexture = false;
	}
	this._writeDepth = true;
	this._defaultCulling = 0;
	this._shadedTarget = "ft0";
	var a = ["vt0"];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this._animationTargetRegisters = vector;
	var a1 = ["va0"];
	var vector1 = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g11 = 0;
	var _g2 = a1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector1.set(i1,a1[i1]);
	}
	this._animatableAttributes = vector1;
	this._blendFactorDest = 9;
	this._blendFactorSource = 2;
	this._depthCompareMode = 5;
	this._anisotropy = 1;
	this._mipmap = true;
	this._repeat = false;
	this._smooth = true;
	this._numUsedVaryings = 0;
	this._numUsedFragmentConstants = 0;
	this._numUsedVertexConstants = 0;
	this._numUsedTextures = 0;
	this._numUsedStreams = 0;
	this._context3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	var a2 = [-1,-1,-1,-1,-1,-1,-1,-1];
	var vector2 = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var _g12 = 0;
	var _g3 = a2.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		vector2.set(i2,a2[i2]);
	}
	this._program3Dids = vector2;
	this._program3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	openfl_events_EventDispatcher.call(this);
	this._renderToTexture = renderToTexture;
	this._numUsedStreams = 1;
	this._numUsedVertexConstants = 5;
};
$hxClasses["away3d.materials.passes.MaterialPassBase"] = away3d_materials_passes_MaterialPassBase;
away3d_materials_passes_MaterialPassBase.__name__ = ["away3d","materials","passes","MaterialPassBase"];
away3d_materials_passes_MaterialPassBase.__super__ = openfl_events_EventDispatcher;
away3d_materials_passes_MaterialPassBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	_material: null
	,_animationSet: null
	,_program3Ds: null
	,_program3Dids: null
	,_context3Ds: null
	,_numUsedStreams: null
	,_numUsedTextures: null
	,_numUsedVertexConstants: null
	,_numUsedFragmentConstants: null
	,_numUsedVaryings: null
	,_smooth: null
	,_repeat: null
	,_mipmap: null
	,_anisotropy: null
	,_depthCompareMode: null
	,_blendFactorSource: null
	,_blendFactorDest: null
	,_enableBlending: null
	,_bothSides: null
	,_lightPicker: null
	,_animatableAttributes: null
	,_animationTargetRegisters: null
	,_shadedTarget: null
	,_defaultCulling: null
	,_renderToTexture: null
	,_oldTarget: null
	,_oldSurface: null
	,_oldDepthStencil: null
	,_oldRect: null
	,_alphaPremultiplied: null
	,_needFragmentAnimation: null
	,_needUVAnimation: null
	,_UVTarget: null
	,_UVSource: null
	,_writeDepth: null
	,animationRegisterCache: null
	,get_material: function() {
		return this._material;
	}
	,set_material: function(value) {
		this._material = value;
		return this._material;
	}
	,get_writeDepth: function() {
		return this._writeDepth;
	}
	,set_writeDepth: function(value) {
		this._writeDepth = value;
		return this._writeDepth;
	}
	,get_mipmap: function() {
		return this._mipmap;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) {
			return this._mipmap;
		}
		this._mipmap = value;
		this.invalidateShaderProgram();
		return this._mipmap;
	}
	,get_anisotropy: function() {
		return this._anisotropy;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) {
			return value;
		}
		this._anisotropy = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_smooth: function() {
		return this._smooth;
	}
	,set_smooth: function(value) {
		if(this._smooth == value) {
			return this._smooth;
		}
		this._smooth = value;
		this.invalidateShaderProgram();
		return this._smooth;
	}
	,get_repeat: function() {
		return this._repeat;
	}
	,set_repeat: function(value) {
		if(this._repeat == value) {
			return this._repeat;
		}
		this._repeat = value;
		this.invalidateShaderProgram();
		return this._repeat;
	}
	,get_bothSides: function() {
		return this._bothSides;
	}
	,set_bothSides: function(value) {
		this._bothSides = value;
		return this._bothSides;
	}
	,get_depthCompareMode: function() {
		return this._depthCompareMode;
	}
	,set_depthCompareMode: function(value) {
		this._depthCompareMode = value;
		return value;
	}
	,get_animationSet: function() {
		return this._animationSet;
	}
	,set_animationSet: function(value) {
		if(this._animationSet == value) {
			return this._animationSet;
		}
		this._animationSet = value;
		this.invalidateShaderProgram();
		return this._animationSet;
	}
	,get_renderToTexture: function() {
		return this._renderToTexture;
	}
	,dispose: function() {
		if(this._lightPicker != null) {
			this._lightPicker.removeEventListener("change",$bind(this,this.onLightsChange));
		}
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			if(this._program3Ds.get(i) != null) {
				away3d_core_managers_AGALProgram3DCache.getInstanceFromIndex(i).freeProgram3D(this._program3Dids.get(i));
				this._program3Ds.set(i,null);
			}
		}
	}
	,get_numUsedStreams: function() {
		return this._numUsedStreams;
	}
	,get_numUsedVertexConstants: function() {
		return this._numUsedVertexConstants;
	}
	,get_numUsedVaryings: function() {
		return this._numUsedVaryings;
	}
	,get_numUsedFragmentConstants: function() {
		return this._numUsedFragmentConstants;
	}
	,get_needFragmentAnimation: function() {
		return this._needFragmentAnimation;
	}
	,get_needUVAnimation: function() {
		return this._needUVAnimation;
	}
	,updateAnimationState: function(renderable,stage3DProxy,camera) {
		renderable.get_animator().setRenderState(stage3DProxy,renderable,this._numUsedVertexConstants,this._numUsedStreams,camera);
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,getVertexCode: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,getFragmentCode: function(fragmentAnimatorCode) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,setBlendMode: function(value) {
		switch(value) {
		case 0:
			this._blendFactorSource = 7;
			this._blendFactorDest = 2;
			this._enableBlending = true;
			break;
		case 1:
			this._blendFactorSource = 9;
			this._blendFactorDest = 7;
			this._enableBlending = true;
			break;
		case 7:
			this._blendFactorSource = 7;
			this._blendFactorDest = 5;
			this._enableBlending = true;
			break;
		case 9:
			this._blendFactorSource = 9;
			this._blendFactorDest = 8;
			this._enableBlending = true;
			break;
		case 10:
			this._blendFactorSource = 2;
			this._blendFactorDest = 9;
			this._enableBlending = false;
			break;
		case 12:
			this._blendFactorSource = 2;
			this._blendFactorDest = 6;
			this._enableBlending = true;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Unsupported blend mode!"));
		}
	}
	,activate: function(stage3DProxy,camera) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var context = stage3DProxy._context3D;
		context.setDepthTest(this._writeDepth && !this._enableBlending,this._depthCompareMode);
		if(this._enableBlending) {
			context.setBlendFactors(this._blendFactorSource,this._blendFactorDest);
		}
		if(this._context3Ds.get(contextIndex) != context || this._program3Ds.get(contextIndex) == null) {
			this._context3Ds.set(contextIndex,context);
			this.updateProgram(stage3DProxy);
			this.dispatchEvent(new openfl_events_Event("change"));
		}
		var prevUsed = away3d_materials_passes_MaterialPassBase._previousUsedStreams.get(contextIndex);
		var _g1 = this._numUsedStreams;
		var _g = prevUsed;
		while(_g1 < _g) {
			var i = _g1++;
			context.setVertexBufferAt(i,null);
		}
		prevUsed = away3d_materials_passes_MaterialPassBase._previousUsedTexs.get(contextIndex);
		var _g11 = this._numUsedTextures;
		var _g2 = prevUsed;
		while(_g11 < _g2) {
			var i1 = _g11++;
			context.setTextureAt(i1,null);
		}
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			this._animationSet.activate(stage3DProxy,this);
		}
		context.setProgram(this._program3Ds.get(contextIndex));
		context.setCulling(this._bothSides ? 3 : this._defaultCulling);
		if(this._renderToTexture) {
			this._oldTarget = stage3DProxy.get_renderTarget();
			this._oldSurface = stage3DProxy.get_renderSurfaceSelector();
			this._oldDepthStencil = stage3DProxy.get_enableDepthAndStencil();
			this._oldRect = stage3DProxy.get_scissorRect();
		}
	}
	,deactivate: function(stage3DProxy) {
		var index = stage3DProxy._stage3DIndex;
		away3d_materials_passes_MaterialPassBase._previousUsedStreams.set(index,this._numUsedStreams);
		away3d_materials_passes_MaterialPassBase._previousUsedTexs.set(index,this._numUsedTextures);
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			this._animationSet.deactivate(stage3DProxy,this);
		}
		if(this._renderToTexture) {
			stage3DProxy.setRenderTarget(this._oldTarget,this._oldDepthStencil,this._oldSurface);
			stage3DProxy.set_scissorRect(this._oldRect);
		}
		if(this._enableBlending) {
			stage3DProxy._context3D.setBlendFactors(2,9);
		}
		stage3DProxy._context3D.setDepthTest(true,5);
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) {
			updateMaterial = true;
		}
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._program3Ds.set(i,null);
		}
		if(this._material != null && updateMaterial) {
			this._material.invalidatePasses(this);
		}
	}
	,updateProgram: function(stage3DProxy) {
		var animatorCode = "";
		var UVAnimatorCode = "";
		var fragmentAnimatorCode = "";
		var vertexCode = this.getVertexCode();
		if(this._animationSet != null && !this._animationSet.get_usesCPU()) {
			animatorCode = this._animationSet.getAGALVertexCode(this,this._animatableAttributes,this._animationTargetRegisters,stage3DProxy.get_profile());
			if(this._needFragmentAnimation) {
				fragmentAnimatorCode = this._animationSet.getAGALFragmentCode(this,this._shadedTarget,stage3DProxy.get_profile());
			}
			if(this._needUVAnimation) {
				UVAnimatorCode = this._animationSet.getAGALUVCode(this,this._UVSource,this._UVTarget);
			}
			this._animationSet.doneAGALCode(this);
		} else {
			var len = this._animatableAttributes.get_length();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				animatorCode += "mov " + this._animationTargetRegisters.get(i) + ", " + this._animatableAttributes.get(i) + "\n";
			}
			if(this._needUVAnimation) {
				UVAnimatorCode = "mov " + this._UVTarget + "," + this._UVSource + "\n";
			}
		}
		vertexCode = animatorCode + UVAnimatorCode + vertexCode;
		var fragmentCode = this.getFragmentCode(fragmentAnimatorCode);
		if(away3d_debug_Debug.active) {
			haxe_Log.trace("Compiling AGAL Code:",{ fileName : "MaterialPassBase.hx", lineNumber : 536, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe_Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 537, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe_Log.trace(vertexCode,{ fileName : "MaterialPassBase.hx", lineNumber : 538, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe_Log.trace("--------------------",{ fileName : "MaterialPassBase.hx", lineNumber : 539, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
			haxe_Log.trace(fragmentCode,{ fileName : "MaterialPassBase.hx", lineNumber : 540, className : "away3d.materials.passes.MaterialPassBase", methodName : "updateProgram"});
		}
		away3d_core_managers_AGALProgram3DCache.getInstance(stage3DProxy).setProgram3D(this,vertexCode,fragmentCode);
	}
	,get_lightPicker: function() {
		return this._lightPicker;
	}
	,set_lightPicker: function(value) {
		if(this._lightPicker != null) {
			this._lightPicker.removeEventListener("change",$bind(this,this.onLightsChange));
		}
		this._lightPicker = value;
		if(this._lightPicker != null) {
			this._lightPicker.addEventListener("change",$bind(this,this.onLightsChange));
		}
		this.updateLights();
		return this._lightPicker;
	}
	,onLightsChange: function(event) {
		this.updateLights();
	}
	,updateLights: function() {
	}
	,get_alphaPremultiplied: function() {
		return this._alphaPremultiplied;
	}
	,set_alphaPremultiplied: function(value) {
		this._alphaPremultiplied = value;
		this.invalidateShaderProgram(false);
		return this._alphaPremultiplied;
	}
	,__class__: away3d_materials_passes_MaterialPassBase
});
var away3d_materials_passes_CompiledPass = function(material) {
	this._enableLightFallOff = true;
	this._preserveAlpha = true;
	this._fragmentConstantData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this._vertexConstantData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this._diffuseLightSources = 3;
	this._specularLightSources = 1;
	this._material = material;
	this.init();
	away3d_materials_passes_MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.CompiledPass"] = away3d_materials_passes_CompiledPass;
away3d_materials_passes_CompiledPass.__name__ = ["away3d","materials","passes","CompiledPass"];
away3d_materials_passes_CompiledPass.__super__ = away3d_materials_passes_MaterialPassBase;
away3d_materials_passes_CompiledPass.prototype = $extend(away3d_materials_passes_MaterialPassBase.prototype,{
	_passes: null
	,_passesDirty: null
	,_specularLightSources: null
	,_diffuseLightSources: null
	,_vertexCode: null
	,_fragmentLightCode: null
	,_framentPostLightCode: null
	,_vertexConstantData: null
	,_fragmentConstantData: null
	,_commonsDataIndex: null
	,_probeWeightsIndex: null
	,_uvBufferIndex: null
	,_secondaryUVBufferIndex: null
	,_normalBufferIndex: null
	,_tangentBufferIndex: null
	,_sceneMatrixIndex: null
	,_sceneNormalMatrixIndex: null
	,_lightFragmentConstantIndex: null
	,_cameraPositionIndex: null
	,_uvTransformIndex: null
	,_uvTransformIndex2: null
	,_lightProbeDiffuseIndices: null
	,_lightProbeSpecularIndices: null
	,_ambientLightR: null
	,_ambientLightG: null
	,_ambientLightB: null
	,_compiler: null
	,_methodSetup: null
	,_usingSpecularMethod: null
	,_usesNormals: null
	,_preserveAlpha: null
	,_animateUVs: null
	,_animateUVs2: null
	,_numPointLights: null
	,_numDirectionalLights: null
	,_numLightProbes: null
	,_enableLightFallOff: null
	,_forceSeparateMVP: null
	,get_enableLightFallOff: function() {
		return this._enableLightFallOff;
	}
	,set_enableLightFallOff: function(value) {
		if(value != this._enableLightFallOff) {
			this.invalidateShaderProgram(true);
		}
		this._enableLightFallOff = value;
		return value;
	}
	,get_forceSeparateMVP: function() {
		return this._forceSeparateMVP;
	}
	,set_forceSeparateMVP: function(value) {
		this._forceSeparateMVP = value;
		return value;
	}
	,get_numPointLights: function() {
		return this._numPointLights;
	}
	,get_numDirectionalLights: function() {
		return this._numDirectionalLights;
	}
	,get_numLightProbes: function() {
		return this._numLightProbes;
	}
	,updateProgram: function(stage3DProxy) {
		this.reset(stage3DProxy.get_profile());
		away3d_materials_passes_MaterialPassBase.prototype.updateProgram.call(this,stage3DProxy);
	}
	,reset: function(profile) {
		this.initCompiler(profile);
		this.updateShaderProperties();
		this.initConstantData();
		this.cleanUp();
	}
	,updateUsedOffsets: function() {
		this._numUsedVertexConstants = this._compiler.get_numUsedVertexConstants();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
		this._numUsedStreams = this._compiler.get_numUsedStreams();
		this._numUsedTextures = this._compiler.get_numUsedTextures();
		this._numUsedVaryings = this._compiler.get_numUsedVaryings();
		this._numUsedFragmentConstants = this._compiler.get_numUsedFragmentConstants();
	}
	,initConstantData: function() {
		this._vertexConstantData.set_length(this._numUsedVertexConstants * 4);
		this._fragmentConstantData.set_length(this._numUsedFragmentConstants * 4);
		this.initCommonsData();
		if(this._uvTransformIndex >= 0) {
			this.initUVTransformData();
		}
		if(this._cameraPositionIndex >= 0) {
			this._vertexConstantData.set(this._cameraPositionIndex + 3,1);
		}
		this.updateMethodConstants();
	}
	,initCompiler: function(profile) {
		this._compiler = this.createCompiler(profile);
		this._compiler.set_forceSeperateMVP(this._forceSeparateMVP);
		this._compiler.set_numPointLights(this._numPointLights);
		this._compiler.set_numDirectionalLights(this._numDirectionalLights);
		this._compiler.set_numLightProbes(this._numLightProbes);
		this._compiler.set_methodSetup(this._methodSetup);
		this._compiler.set_diffuseLightSources(this._diffuseLightSources);
		this._compiler.set_specularLightSources(this._specularLightSources);
		this._compiler.setTextureSampling(this._smooth,this._repeat,this._mipmap,this._anisotropy);
		this._compiler.setConstantDataBuffers(this._vertexConstantData,this._fragmentConstantData);
		this._compiler.set_animateUVs(this._animateUVs);
		this._compiler.set_animateUVs2(this._animateUVs2);
		this._compiler.set_alphaPremultiplied(this._alphaPremultiplied && this._enableBlending);
		this._compiler.set_preserveAlpha(this._preserveAlpha && this._enableBlending);
		this._compiler.set_enableLightFallOff(this._enableLightFallOff);
		this._compiler.compile();
	}
	,createCompiler: function(profile) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,updateShaderProperties: function() {
		this._animatableAttributes = this._compiler.get_animatableAttributes();
		this._animationTargetRegisters = this._compiler.get_animationTargetRegisters();
		this._vertexCode = this._compiler.get_vertexCode();
		this._fragmentLightCode = this._compiler.get_fragmentLightCode();
		this._framentPostLightCode = this._compiler.get_fragmentPostLightCode();
		this._shadedTarget = this._compiler.get_shadedTarget();
		this._usingSpecularMethod = this._compiler.get_usingSpecularMethod();
		this._usesNormals = this._compiler.get_usesNormals();
		this._needUVAnimation = this._compiler.get_needUVAnimation();
		this._UVSource = this._compiler.get_UVSource();
		this._UVTarget = this._compiler.get_UVTarget();
		this.updateRegisterIndices();
		this.updateUsedOffsets();
	}
	,updateRegisterIndices: function() {
		this._uvBufferIndex = this._compiler.get_uvBufferIndex();
		this._uvTransformIndex = this._compiler.get_uvTransformIndex();
		this._uvTransformIndex2 = this._compiler.get_uvTransformIndex2();
		this._secondaryUVBufferIndex = this._compiler.get_secondaryUVBufferIndex();
		this._normalBufferIndex = this._compiler.get_normalBufferIndex();
		this._tangentBufferIndex = this._compiler.get_tangentBufferIndex();
		this._lightFragmentConstantIndex = this._compiler.get_lightFragmentConstantIndex();
		this._cameraPositionIndex = this._compiler.get_cameraPositionIndex();
		this._commonsDataIndex = this._compiler.get_commonsDataIndex();
		this._sceneMatrixIndex = this._compiler.get_sceneMatrixIndex();
		this._sceneNormalMatrixIndex = this._compiler.get_sceneNormalMatrixIndex();
		this._probeWeightsIndex = this._compiler.get_probeWeightsIndex();
		this._lightProbeDiffuseIndices = this._compiler.get_lightProbeDiffuseIndices();
		this._lightProbeSpecularIndices = this._compiler.get_lightProbeSpecularIndices();
	}
	,get_preserveAlpha: function() {
		return this._preserveAlpha;
	}
	,set_preserveAlpha: function(value) {
		if(this._preserveAlpha == value) {
			return value;
		}
		this._preserveAlpha = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_animateUVs: function() {
		return this._animateUVs;
	}
	,set_animateUVs: function(value) {
		if(this._animateUVs == value) {
			return value;
		}
		this._animateUVs = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_animateUVs2: function() {
		return this._animateUVs2;
	}
	,set_animateUVs2: function(value) {
		if(this._animateUVs2 == value) {
			return value;
		}
		this._animateUVs2 = value;
		this.invalidateShaderProgram();
		return value;
	}
	,set_mipmap: function(value) {
		if(this._mipmap == value) {
			return value;
		}
		away3d_materials_passes_MaterialPassBase.prototype.set_mipmap.call(this,value);
		return value;
	}
	,set_anisotropy: function(value) {
		if(this._anisotropy == value) {
			return value;
		}
		away3d_materials_passes_MaterialPassBase.prototype.set_anisotropy.call(this,value);
		return value;
	}
	,get_normalMap: function() {
		return this._methodSetup._normalMethod.get_normalMap();
	}
	,set_normalMap: function(value) {
		this._methodSetup._normalMethod.set_normalMap(value);
		return value;
	}
	,get_normalMethod: function() {
		return this._methodSetup.get_normalMethod();
	}
	,set_normalMethod: function(value) {
		this._methodSetup.set_normalMethod(value);
		return value;
	}
	,get_ambientMethod: function() {
		return this._methodSetup.get_ambientMethod();
	}
	,set_ambientMethod: function(value) {
		this._methodSetup.set_ambientMethod(value);
		return value;
	}
	,get_shadowMethod: function() {
		return this._methodSetup.get_shadowMethod();
	}
	,set_shadowMethod: function(value) {
		this._methodSetup.set_shadowMethod(value);
		return value;
	}
	,get_diffuseMethod: function() {
		return this._methodSetup.get_diffuseMethod();
	}
	,set_diffuseMethod: function(value) {
		this._methodSetup.set_diffuseMethod(value);
		return value;
	}
	,get_specularMethod: function() {
		return this._methodSetup.get_specularMethod();
	}
	,set_specularMethod: function(value) {
		this._methodSetup.set_specularMethod(value);
		return value;
	}
	,init: function() {
		this._methodSetup = new away3d_materials_methods_ShaderMethodSetup();
		this._methodSetup.addEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
	}
	,dispose: function() {
		away3d_materials_passes_MaterialPassBase.prototype.dispose.call(this);
		this._methodSetup.removeEventListener("ShaderInvalidated",$bind(this,this.onShaderInvalidated));
		this._methodSetup.dispose();
		this._methodSetup = null;
	}
	,invalidateShaderProgram: function(updateMaterial) {
		if(updateMaterial == null) {
			updateMaterial = true;
		}
		var oldPasses = this._passes;
		this._passes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		if(this._methodSetup != null) {
			this.addPassesFromMethods();
		}
		if(oldPasses == null || this._passes.get_length() != oldPasses.get_length()) {
			this._passesDirty = true;
			return;
		}
		var _g1 = 0;
		var _g = this._passes.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			if(this._passes.get(i) != oldPasses.get(i)) {
				this._passesDirty = true;
				return;
			}
		}
		away3d_materials_passes_MaterialPassBase.prototype.invalidateShaderProgram.call(this,updateMaterial);
	}
	,addPassesFromMethods: function() {
		if(this._methodSetup._normalMethod != null && this._methodSetup._normalMethod.get_hasOutput()) {
			this.addPasses(this._methodSetup._normalMethod.get_passes());
		}
		if(this._methodSetup._ambientMethod != null) {
			this.addPasses(this._methodSetup._ambientMethod.get_passes());
		}
		if(this._methodSetup._shadowMethod != null) {
			this.addPasses(this._methodSetup._shadowMethod.get_passes());
		}
		if(this._methodSetup._diffuseMethod != null) {
			this.addPasses(this._methodSetup._diffuseMethod.get_passes());
		}
		if(this._methodSetup._specularMethod != null) {
			this.addPasses(this._methodSetup._specularMethod.get_passes());
		}
	}
	,addPasses: function(passes) {
		if(passes == null) {
			return;
		}
		var len = passes.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			passes.get(i).set_material(this.get_material());
			passes.get(i).set_lightPicker(this._lightPicker);
			this._passes.push(passes.get(i));
		}
	}
	,initUVTransformData: function() {
		this._vertexConstantData.set(this._uvTransformIndex,1);
		this._vertexConstantData.set(this._uvTransformIndex + 1,0);
		this._vertexConstantData.set(this._uvTransformIndex + 2,0);
		this._vertexConstantData.set(this._uvTransformIndex + 3,0);
		this._vertexConstantData.set(this._uvTransformIndex + 4,0);
		this._vertexConstantData.set(this._uvTransformIndex + 5,1);
		this._vertexConstantData.set(this._uvTransformIndex + 6,0);
		this._vertexConstantData.set(this._uvTransformIndex + 7,0);
	}
	,initUVTransformData2: function() {
		this._vertexConstantData.set(this._uvTransformIndex2,1);
		this._vertexConstantData.set(this._uvTransformIndex2 + 1,0);
		this._vertexConstantData.set(this._uvTransformIndex2 + 2,0);
		this._vertexConstantData.set(this._uvTransformIndex2 + 3,0);
		this._vertexConstantData.set(this._uvTransformIndex2 + 4,0);
		this._vertexConstantData.set(this._uvTransformIndex2 + 5,1);
		this._vertexConstantData.set(this._uvTransformIndex2 + 6,0);
		this._vertexConstantData.set(this._uvTransformIndex2 + 7,0);
	}
	,initCommonsData: function() {
		this._fragmentConstantData.set(this._commonsDataIndex,.5);
		this._fragmentConstantData.set(this._commonsDataIndex + 1,0);
		this._fragmentConstantData.set(this._commonsDataIndex + 2,0.00392156862745098);
		this._fragmentConstantData.set(this._commonsDataIndex + 3,1);
	}
	,cleanUp: function() {
		this._compiler.dispose();
		this._compiler = null;
	}
	,updateMethodConstants: function() {
		if(this._methodSetup._normalMethod != null) {
			this._methodSetup._normalMethod.initConstants(this._methodSetup._normalMethodVO);
		}
		if(this._methodSetup._diffuseMethod != null) {
			this._methodSetup._diffuseMethod.initConstants(this._methodSetup._diffuseMethodVO);
		}
		if(this._methodSetup._ambientMethod != null) {
			this._methodSetup._ambientMethod.initConstants(this._methodSetup._ambientMethodVO);
		}
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.initConstants(this._methodSetup._specularMethodVO);
		}
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.initConstants(this._methodSetup._shadowMethodVO);
		}
	}
	,updateLightConstants: function() {
	}
	,updateProbes: function(stage3DProxy) {
	}
	,onShaderInvalidated: function(event) {
		this.invalidateShaderProgram();
	}
	,getVertexCode: function() {
		return this._vertexCode;
	}
	,getFragmentCode: function(animatorCode) {
		return this._fragmentLightCode + animatorCode + this._framentPostLightCode;
	}
	,activate: function(stage3DProxy,camera) {
		away3d_materials_passes_MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._usesNormals) {
			this._methodSetup._normalMethod.activate(this._methodSetup._normalMethodVO,stage3DProxy);
		}
		this._methodSetup._ambientMethod.activate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.activate(this._methodSetup._shadowMethodVO,stage3DProxy);
		}
		this._methodSetup._diffuseMethod.activate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.activate(this._methodSetup._specularMethodVO,stage3DProxy);
		}
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var i = 0;
		var context = stage3DProxy._context3D;
		if(this._uvBufferIndex >= 0) {
			renderable.activateUVBuffer(this._uvBufferIndex,stage3DProxy);
		}
		if(this._secondaryUVBufferIndex >= 0) {
			renderable.activateSecondaryUVBuffer(this._secondaryUVBufferIndex,stage3DProxy);
		}
		if(this._normalBufferIndex >= 0) {
			renderable.activateVertexNormalBuffer(this._normalBufferIndex,stage3DProxy);
		}
		if(this._tangentBufferIndex >= 0) {
			renderable.activateVertexTangentBuffer(this._tangentBufferIndex,stage3DProxy);
		}
		if(this._animateUVs) {
			var uvTransform = renderable.get_uvTransform();
			if(uvTransform != null) {
				this._vertexConstantData.set(this._uvTransformIndex,uvTransform.a);
				this._vertexConstantData.set(this._uvTransformIndex + 1,uvTransform.b);
				this._vertexConstantData.set(this._uvTransformIndex + 3,uvTransform.tx);
				this._vertexConstantData.set(this._uvTransformIndex + 4,uvTransform.c);
				this._vertexConstantData.set(this._uvTransformIndex + 5,uvTransform.d);
				this._vertexConstantData.set(this._uvTransformIndex + 7,uvTransform.ty);
			} else {
				this._vertexConstantData.set(this._uvTransformIndex,1);
				this._vertexConstantData.set(this._uvTransformIndex + 1,0);
				this._vertexConstantData.set(this._uvTransformIndex + 3,0);
				this._vertexConstantData.set(this._uvTransformIndex + 4,0);
				this._vertexConstantData.set(this._uvTransformIndex + 5,1);
				this._vertexConstantData.set(this._uvTransformIndex + 7,0);
			}
		}
		if(this._animateUVs2) {
			var uvTransform2 = renderable.get_uvTransform2();
			if(uvTransform2 != null) {
				this._vertexConstantData.set(this._uvTransformIndex2,uvTransform2.a);
				this._vertexConstantData.set(this._uvTransformIndex2 + 1,uvTransform2.b);
				this._vertexConstantData.set(this._uvTransformIndex2 + 3,uvTransform2.tx);
				this._vertexConstantData.set(this._uvTransformIndex2 + 4,uvTransform2.c);
				this._vertexConstantData.set(this._uvTransformIndex2 + 5,uvTransform2.d);
				this._vertexConstantData.set(this._uvTransformIndex2 + 7,uvTransform2.ty);
			} else {
				this._vertexConstantData.set(this._uvTransformIndex2,1);
				this._vertexConstantData.set(this._uvTransformIndex2 + 1,0);
				this._vertexConstantData.set(this._uvTransformIndex2 + 3,0);
				this._vertexConstantData.set(this._uvTransformIndex2 + 4,0);
				this._vertexConstantData.set(this._uvTransformIndex2 + 5,1);
				this._vertexConstantData.set(this._uvTransformIndex2 + 7,0);
			}
		}
		this._ambientLightR = this._ambientLightG = this._ambientLightB = 0;
		if(this.usesLights()) {
			this.updateLightConstants();
		}
		if(this.usesProbes()) {
			this.updateProbes(stage3DProxy);
		}
		if(this._sceneMatrixIndex >= 0) {
			renderable.getRenderSceneTransform(camera).copyRawDataTo(this._vertexConstantData,this._sceneMatrixIndex,true);
			viewProjection.copyRawDataTo(this._vertexConstantData,0,true);
		} else {
			var matrix3D = away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX;
			matrix3D.copyFrom(renderable.getRenderSceneTransform(camera));
			matrix3D.append(viewProjection);
			matrix3D.copyRawDataTo(this._vertexConstantData,0,true);
		}
		if(this._sceneNormalMatrixIndex >= 0) {
			renderable.get_inverseSceneTransform().copyRawDataTo(this._vertexConstantData,this._sceneNormalMatrixIndex,false);
		}
		if(this._usesNormals) {
			this._methodSetup._normalMethod.setRenderState(this._methodSetup._normalMethodVO,renderable,stage3DProxy,camera);
		}
		var ambientMethod = this._methodSetup._ambientMethod;
		ambientMethod._lightAmbientR = this._ambientLightR;
		ambientMethod._lightAmbientG = this._ambientLightG;
		ambientMethod._lightAmbientB = this._ambientLightB;
		ambientMethod.setRenderState(this._methodSetup._ambientMethodVO,renderable,stage3DProxy,camera);
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.setRenderState(this._methodSetup._shadowMethodVO,renderable,stage3DProxy,camera);
		}
		this._methodSetup._diffuseMethod.setRenderState(this._methodSetup._diffuseMethodVO,renderable,stage3DProxy,camera);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.setRenderState(this._methodSetup._specularMethodVO,renderable,stage3DProxy,camera);
		}
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.setRenderState(this._methodSetup._colorTransformMethodVO,renderable,stage3DProxy,camera);
		}
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			var set = methods.get(i1);
			set.method.setRenderState(set.data,renderable,stage3DProxy,camera);
		}
		context.setProgramConstantsFromVector(1,0,this._vertexConstantData,this._numUsedVertexConstants);
		context.setProgramConstantsFromVector(0,0,this._fragmentConstantData,this._numUsedFragmentConstants);
		renderable.activateVertexBuffer(0,stage3DProxy);
		stage3DProxy.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,usesProbes: function() {
		if(this._numLightProbes > 0) {
			return ((this._diffuseLightSources | this._specularLightSources) & 2) != 0;
		} else {
			return false;
		}
	}
	,usesLights: function() {
		if(this._numPointLights > 0 || this._numDirectionalLights > 0) {
			return ((this._diffuseLightSources | this._specularLightSources) & 1) != 0;
		} else {
			return false;
		}
	}
	,deactivate: function(stage3DProxy) {
		away3d_materials_passes_MaterialPassBase.prototype.deactivate.call(this,stage3DProxy);
		if(this._usesNormals) {
			this._methodSetup._normalMethod.deactivate(this._methodSetup._normalMethodVO,stage3DProxy);
		}
		this._methodSetup._ambientMethod.deactivate(this._methodSetup._ambientMethodVO,stage3DProxy);
		if(this._methodSetup._shadowMethod != null) {
			this._methodSetup._shadowMethod.deactivate(this._methodSetup._shadowMethodVO,stage3DProxy);
		}
		this._methodSetup._diffuseMethod.deactivate(this._methodSetup._diffuseMethodVO,stage3DProxy);
		if(this._usingSpecularMethod) {
			this._methodSetup._specularMethod.deactivate(this._methodSetup._specularMethodVO,stage3DProxy);
		}
	}
	,get_specularLightSources: function() {
		return this._specularLightSources;
	}
	,set_specularLightSources: function(value) {
		this._specularLightSources = value;
		return value;
	}
	,get_diffuseLightSources: function() {
		return this._diffuseLightSources;
	}
	,set_diffuseLightSources: function(value) {
		this._diffuseLightSources = value;
		return value;
	}
	,__class__: away3d_materials_passes_CompiledPass
});
var away3d_materials_passes_DepthMapPass = function() {
	this._alphaThreshold = 0;
	away3d_materials_passes_MaterialPassBase.call(this);
	var a = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this._data = vector;
};
$hxClasses["away3d.materials.passes.DepthMapPass"] = away3d_materials_passes_DepthMapPass;
away3d_materials_passes_DepthMapPass.__name__ = ["away3d","materials","passes","DepthMapPass"];
away3d_materials_passes_DepthMapPass.__super__ = away3d_materials_passes_MaterialPassBase;
away3d_materials_passes_DepthMapPass.prototype = $extend(away3d_materials_passes_MaterialPassBase.prototype,{
	_data: null
	,_alphaThreshold: null
	,_alphaMask: null
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) {
			value = 0;
		} else if(value > 1) {
			value = 1;
		}
		if(value == this._alphaThreshold) {
			return value;
		}
		if(value == 0 || this._alphaThreshold == 0) {
			this.invalidateShaderProgram();
		}
		this._alphaThreshold = value;
		this._data.set(8,this._alphaThreshold);
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code = "m44 vt1, vt0, vc0\t\t\n" + "mov op, vt1\t\n";
		if(this._alphaThreshold > 0) {
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
			code += "mov v0, vt1\n" + "mov v1, va1\n";
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
			code += "mov v0, vt1\n";
		}
		return code;
	}
	,getFragmentCode: function(code) {
		var codeF = "div ft2, v0, v0.w\t\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var wrap = this._repeat ? "wrap" : "clamp";
			var filter;
			var format;
			var enableMipMaps = this._mipmap && this._alphaMask.get_hasMipMaps();
			if(this._smooth) {
				if(enableMipMaps) {
					filter = "linear,miplinear";
				} else {
					filter = "linear";
				}
			} else if(enableMipMaps) {
				filter = "nearest,mipnearest";
			} else {
				filter = "nearest";
			}
			var _g = this._alphaMask.get_format();
			switch(_g) {
			case 3:
				format = "dxt1,";
				break;
			case 4:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			codeF += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		codeF += "sub oc, ft0, ft1\t\t\n";
		return codeF;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		if(this._alphaThreshold > 0) {
			renderable.activateUVBuffer(1,stage3DProxy);
		}
		var context = stage3DProxy._context3D;
		var matrix = away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX;
		matrix.copyFrom(renderable.getRenderSceneTransform(camera));
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(1,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		stage3DProxy.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d_materials_passes_MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(0,0,this._data,3);
		} else {
			context.setProgramConstantsFromVector(0,0,this._data,2);
		}
	}
	,__class__: away3d_materials_passes_DepthMapPass
});
var away3d_materials_passes_DistanceMapPass = function() {
	away3d_materials_passes_MaterialPassBase.call(this);
	var a = [1.0,255.0,65025.0,16581375.0,0.00392156862745098,0.00392156862745098,0.00392156862745098,0.0,0.0,0.0,0.0,0.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	this._fragmentData = vector;
	this._vertexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4,true);
	this._vertexData.set(3,1);
	this._numUsedVertexConstants = 9;
};
$hxClasses["away3d.materials.passes.DistanceMapPass"] = away3d_materials_passes_DistanceMapPass;
away3d_materials_passes_DistanceMapPass.__name__ = ["away3d","materials","passes","DistanceMapPass"];
away3d_materials_passes_DistanceMapPass.__super__ = away3d_materials_passes_MaterialPassBase;
away3d_materials_passes_DistanceMapPass.prototype = $extend(away3d_materials_passes_MaterialPassBase.prototype,{
	_fragmentData: null
	,_vertexData: null
	,_alphaThreshold: null
	,_alphaMask: null
	,get_alphaThreshold: function() {
		return this._alphaThreshold;
	}
	,set_alphaThreshold: function(value) {
		if(value < 0) {
			value = 0;
		} else if(value > 1) {
			value = 1;
		}
		if(value == this._alphaThreshold) {
			return value;
		}
		if(value == 0 || this._alphaThreshold == 0) {
			this.invalidateShaderProgram();
		}
		this._alphaThreshold = value;
		this._fragmentData.set(8,this._alphaThreshold);
		return value;
	}
	,get_alphaMask: function() {
		return this._alphaMask;
	}
	,set_alphaMask: function(value) {
		this._alphaMask = value;
		return value;
	}
	,getVertexCode: function() {
		var code = "m44 op, vt0, vc0\t\t\n" + "m44 vt1, vt0, vc5\t\t\n" + "sub v0, vt1, vc9\t\t\n";
		if(this._alphaThreshold > 0) {
			code += "mov v1, va1\n";
			this._numUsedTextures = 1;
			this._numUsedStreams = 2;
		} else {
			this._numUsedTextures = 0;
			this._numUsedStreams = 1;
		}
		return code;
	}
	,getFragmentCode: function(animationCode) {
		var code;
		var wrap = this._repeat ? "wrap" : "clamp";
		var filter;
		if(this._smooth) {
			if(this._mipmap) {
				filter = "linear,miplinear";
			} else {
				filter = "linear";
			}
		} else if(this._mipmap) {
			filter = "nearest,mipnearest";
		} else {
			filter = "nearest";
		}
		code = "dp3 ft2.z, v0.xyz, v0.xyz\t\n" + "mul ft0, fc0, ft2.z\t\n" + "frc ft0, ft0\t\t\t\n" + "mul ft1, ft0.yzww, fc1\t\n";
		if(this._alphaThreshold > 0) {
			var format;
			var _g = this._alphaMask.get_format();
			switch(_g) {
			case 3:
				format = "dxt1,";
				break;
			case 4:
				format = "dxt5,";
				break;
			default:
				format = "";
			}
			code += "tex ft3, v1, fs0 <2d," + filter + "," + format + wrap + ">\n" + "sub ft3.w, ft3.w, fc2.x\n" + "kil ft3.w\n";
		}
		code += "sub oc, ft0, ft1\t\t\n";
		return code;
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		var pos = camera.get_scenePosition();
		this._vertexData.set(0,pos.x);
		this._vertexData.set(1,pos.y);
		this._vertexData.set(2,pos.z);
		this._vertexData.set(3,1);
		var sceneTransform = renderable.getRenderSceneTransform(camera);
		context.setProgramConstantsFromMatrix(1,5,sceneTransform,true);
		context.setProgramConstantsFromVector(1,9,this._vertexData,1);
		if(this._alphaThreshold > 0) {
			renderable.activateUVBuffer(1,stage3DProxy);
		}
		var matrix = away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX;
		matrix.copyFrom(sceneTransform);
		matrix.append(viewProjection);
		context.setProgramConstantsFromMatrix(1,0,matrix,true);
		renderable.activateVertexBuffer(0,stage3DProxy);
		stage3DProxy.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d_materials_passes_MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		var f = camera.get_lens().get_far();
		f = 1 / (2 * f * f);
		this._fragmentData.set(0,f);
		this._fragmentData.set(1,255.0 * f);
		this._fragmentData.set(2,65025.0 * f);
		this._fragmentData.set(3,16581375.0 * f);
		if(this._alphaThreshold > 0) {
			context.setTextureAt(0,this._alphaMask.getTextureForStage3D(stage3DProxy));
			context.setProgramConstantsFromVector(0,0,this._fragmentData,3);
		} else {
			context.setProgramConstantsFromVector(0,0,this._fragmentData,2);
		}
	}
	,__class__: away3d_materials_passes_DistanceMapPass
});
var away3d_materials_passes_SegmentPass = function(thickness) {
	this._constants = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4,true);
	this._calcMatrix = new openfl_geom_Matrix3D();
	this._thickness = thickness;
	this._constants.set(1,0.00392156862745098);
	away3d_materials_passes_MaterialPassBase.call(this);
};
$hxClasses["away3d.materials.passes.SegmentPass"] = away3d_materials_passes_SegmentPass;
away3d_materials_passes_SegmentPass.__name__ = ["away3d","materials","passes","SegmentPass"];
away3d_materials_passes_SegmentPass.__super__ = away3d_materials_passes_MaterialPassBase;
away3d_materials_passes_SegmentPass.prototype = $extend(away3d_materials_passes_MaterialPassBase.prototype,{
	_constants: null
	,_calcMatrix: null
	,_thickness: null
	,getVertexCode: function() {
		return "m44 vt0, va0, vc8\t\t\t\n" + "m44 vt1, va1, vc8\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "slt vt5.x, vt0.z, vc7.z\t\t\t\n" + "sub vt5.y, vc5.x, vt5.x\t\t\t\n" + "add vt4.x, vt0.z, vc7.z\t\t\t\n" + "sub vt4.y, vt0.z, vt1.z\t\t\t\n" + "seq vt4.z, vt4.y vc6.x\t\t\t\n" + "add vt4.y, vt4.y, vt4.z\t\t\t\n" + "div vt4.z, vt4.x, vt4.y\t\t\t\n" + "mul vt4.xyz, vt4.zzz, vt2.xyz\t\n" + "add vt3.xyz, vt0.xyz, vt4.xyz\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "mul vt0, vt0, vt5.yyyy\t\t\t\n" + "mul vt3, vt3, vt5.xxxx\t\t\t\n" + "add vt0, vt0, vt3\t\t\t\t\n" + "sub vt2, vt1, vt0 \t\t\t\n" + "nrm vt2.xyz, vt2.xyz\t\t\t\n" + "nrm vt5.xyz, vt0.xyz\t\t\t\n" + "mov vt5.w, vc5.x\t\t\t\t\n" + "crs vt3.xyz, vt2, vt5\t\t\t\n" + "nrm vt3.xyz, vt3.xyz\t\t\t\n" + "mul vt3.xyz, vt3.xyz, va2.xxx\t\n" + "mov vt3.w, vc5.x\t\t\t\n" + "dp3 vt4.x, vt0, vc6\t\t\t\n" + "mul vt4.x, vt4.x, vc7.x\t\t\t\n" + "mul vt3.xyz, vt3.xyz, vt4.xxx\t\n" + "add vt0.xyz, vt0.xyz, vt3.xyz\t\n" + "m44 op, vt0, vc0\t\t\t\n" + "mov v0, va3\t\t\t\t\n";
	}
	,getFragmentCode: function(animationCode) {
		return "mov oc, v0\n";
	}
	,render: function(renderable,stage3DProxy,camera,viewProjection) {
		var context = stage3DProxy._context3D;
		this._calcMatrix.copyFrom(renderable.get_sourceEntity().get_sceneTransform());
		this._calcMatrix.append(camera.get_inverseSceneTransform());
		var subSetCount = (js_Boot.__cast(renderable , away3d_entities_SegmentSet)).get_subSetCount();
		if((js_Boot.__cast(renderable , away3d_entities_SegmentSet)).get_hasData()) {
			var _g1 = 0;
			var _g = subSetCount;
			while(_g1 < _g) {
				var i = _g1++;
				renderable.activateVertexBuffer(i,stage3DProxy);
				context.setProgramConstantsFromMatrix(1,8,this._calcMatrix,true);
				stage3DProxy.drawTriangles(renderable.getIndexBuffer(stage3DProxy),0,renderable.get_numTriangles());
			}
		}
	}
	,activate: function(stage3DProxy,camera) {
		var context = stage3DProxy._context3D;
		away3d_materials_passes_MaterialPassBase.prototype.activate.call(this,stage3DProxy,camera);
		if(stage3DProxy.get_scissorRect() != null) {
			this._constants.set(0,this._thickness / Math.min(stage3DProxy.get_scissorRect().width,stage3DProxy.get_scissorRect().height));
		} else {
			this._constants.set(0,this._thickness / Math.min(stage3DProxy.get_width(),stage3DProxy.get_height()));
		}
		this._constants.set(2,camera.get_lens().get_near());
		context.setProgramConstantsFromVector(1,5,away3d_materials_passes_SegmentPass.ONE_VECTOR);
		context.setProgramConstantsFromVector(1,6,away3d_materials_passes_SegmentPass.FRONT_VECTOR);
		context.setProgramConstantsFromVector(1,7,this._constants);
		if(stage3DProxy.get_renderTarget() == null) {
			context.setProgramConstantsFromMatrix(1,0,camera.get_lens().get_matrix(),true);
		} else {
			this._calcMatrix.copyFrom(camera.get_lens().get_matrix());
			var rttBufferManager = away3d_core_managers_RTTBufferManager.getInstance(stage3DProxy);
			this._calcMatrix.appendScale(rttBufferManager.get_textureRatioX(),rttBufferManager.get_textureRatioY(),1);
			context.setProgramConstantsFromMatrix(1,0,this._calcMatrix,true);
		}
	}
	,deactivate: function(stage3DProxy) {
		var context = stage3DProxy._context3D;
		context.setVertexBufferAt(0,null);
		context.setVertexBufferAt(1,null);
		context.setVertexBufferAt(2,null);
		context.setVertexBufferAt(3,null);
	}
	,__class__: away3d_materials_passes_SegmentPass
});
var away3d_materials_passes_SuperShaderPass = function(material) {
	this._includeCasters = true;
	away3d_materials_passes_CompiledPass.call(this,material);
	this._needFragmentAnimation = true;
};
$hxClasses["away3d.materials.passes.SuperShaderPass"] = away3d_materials_passes_SuperShaderPass;
away3d_materials_passes_SuperShaderPass.__name__ = ["away3d","materials","passes","SuperShaderPass"];
away3d_materials_passes_SuperShaderPass.__super__ = away3d_materials_passes_CompiledPass;
away3d_materials_passes_SuperShaderPass.prototype = $extend(away3d_materials_passes_CompiledPass.prototype,{
	_includeCasters: null
	,_ignoreLights: null
	,createCompiler: function(profile) {
		return new away3d_materials_compilation_SuperShaderCompiler(profile);
	}
	,get_includeCasters: function() {
		return this._includeCasters;
	}
	,set_includeCasters: function(value) {
		if(this._includeCasters == value) {
			return value;
		}
		this._includeCasters = value;
		this.invalidateShaderProgram();
		return value;
	}
	,get_colorTransform: function() {
		if(this._methodSetup.get_colorTransformMethod() != null) {
			return this._methodSetup._colorTransformMethod.get_colorTransform();
		} else {
			return null;
		}
	}
	,set_colorTransform: function(value) {
		if(value != null) {
			if(this.get_colorTransformMethod() == null) {
				this.set_colorTransformMethod(new away3d_materials_methods_ColorTransformMethod());
			}
			this._methodSetup._colorTransformMethod.set_colorTransform(value);
		} else if(value == null) {
			if(this._methodSetup._colorTransformMethod != null) {
				this.set_colorTransformMethod(null);
			}
			this.set_colorTransformMethod(this._methodSetup._colorTransformMethod = null);
		}
		return value;
	}
	,get_colorTransformMethod: function() {
		return this._methodSetup.get_colorTransformMethod();
	}
	,set_colorTransformMethod: function(value) {
		this._methodSetup.set_colorTransformMethod(value);
		return value;
	}
	,addMethod: function(method) {
		this._methodSetup.addMethod(method);
	}
	,numMethods: null
	,get_numMethods: function() {
		return this._methodSetup.get_numMethods();
	}
	,hasMethod: function(method) {
		return this._methodSetup.hasMethod(method);
	}
	,getMethodAt: function(index) {
		return this._methodSetup.getMethodAt(index);
	}
	,addMethodAt: function(method,index) {
		this._methodSetup.addMethodAt(method,index);
	}
	,removeMethod: function(method) {
		this._methodSetup.removeMethod(method);
	}
	,updateLights: function() {
		if(this._lightPicker != null && !this._ignoreLights) {
			this._numPointLights = this._lightPicker.get_numPointLights();
			this._numDirectionalLights = this._lightPicker.get_numDirectionalLights();
			this._numLightProbes = this._lightPicker.get_numLightProbes();
			if(this._includeCasters) {
				this._numPointLights += this._lightPicker.get_numCastingPointLights();
				this._numDirectionalLights += this._lightPicker.get_numCastingDirectionalLights();
			}
		} else {
			this._numPointLights = 0;
			this._numDirectionalLights = 0;
			this._numLightProbes = 0;
		}
		this.invalidateShaderProgram();
	}
	,activate: function(stage3DProxy,camera) {
		away3d_materials_passes_CompiledPass.prototype.activate.call(this,stage3DProxy,camera);
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.activate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		}
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var set = methods.get(i);
			set.method.activate(set.data,stage3DProxy);
		}
		if(this._cameraPositionIndex >= 0) {
			var pos = camera.get_scenePosition();
			this._vertexConstantData.set(this._cameraPositionIndex,pos.x);
			this._vertexConstantData.set(this._cameraPositionIndex + 1,pos.y);
			this._vertexConstantData.set(this._cameraPositionIndex + 2,pos.z);
		}
	}
	,deactivate: function(stage3DProxy) {
		away3d_materials_passes_CompiledPass.prototype.deactivate.call(this,stage3DProxy);
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.deactivate(this._methodSetup._colorTransformMethodVO,stage3DProxy);
		}
		var set;
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			set = methods.get(i);
			set.method.deactivate(set.data,stage3DProxy);
		}
	}
	,addPassesFromMethods: function() {
		away3d_materials_passes_CompiledPass.prototype.addPassesFromMethods.call(this);
		if(this._methodSetup._colorTransformMethod != null) {
			this.addPasses(this._methodSetup._colorTransformMethod.get_passes());
		}
		var methods = this._methodSetup._methods;
		var _g1 = 0;
		var _g = methods.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			this.addPasses(methods.get(i).method.get_passes());
		}
	}
	,usesProbesForSpecular: function() {
		if(this._numLightProbes > 0) {
			return (this._specularLightSources & 2) != 0;
		} else {
			return false;
		}
	}
	,usesProbesForDiffuse: function() {
		if(this._numLightProbes > 0) {
			return (this._diffuseLightSources & 2) != 0;
		} else {
			return false;
		}
	}
	,updateMethodConstants: function() {
		away3d_materials_passes_CompiledPass.prototype.updateMethodConstants.call(this);
		if(this._methodSetup._colorTransformMethod != null) {
			this._methodSetup._colorTransformMethod.initConstants(this._methodSetup._colorTransformMethodVO);
		}
		var methods = this._methodSetup._methods;
		var len = methods.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			methods.get(i).method.initConstants(methods.get(i).data);
		}
	}
	,updateLightConstants: function() {
		var dirLight;
		var pointLight;
		var i;
		var k;
		var len;
		var dirPos;
		var total = 0;
		var numLightTypes = this._includeCasters ? 2 : 1;
		k = this._lightFragmentConstantIndex;
		var _g1 = 0;
		var _g = numLightTypes;
		while(_g1 < _g) {
			var caster = _g1++;
			var dirLights = caster != 0 ? this._lightPicker.get_castingDirectionalLights() : this._lightPicker.get_directionalLights();
			len = dirLights.get_length();
			total += len;
			var _g3 = 0;
			var _g2 = len;
			while(_g3 < _g2) {
				var i1 = _g3++;
				dirLight = dirLights.get(i1);
				dirPos = dirLight.get_sceneDirection();
				this._ambientLightR += dirLight._ambientR;
				this._ambientLightG += dirLight._ambientG;
				this._ambientLightB += dirLight._ambientB;
				this._fragmentConstantData.set(k++,-dirPos.x);
				this._fragmentConstantData.set(k++,-dirPos.y);
				this._fragmentConstantData.set(k++,-dirPos.z);
				this._fragmentConstantData.set(k++,1);
				this._fragmentConstantData.set(k++,dirLight._diffuseR);
				this._fragmentConstantData.set(k++,dirLight._diffuseG);
				this._fragmentConstantData.set(k++,dirLight._diffuseB);
				this._fragmentConstantData.set(k++,1);
				this._fragmentConstantData.set(k++,dirLight._specularR);
				this._fragmentConstantData.set(k++,dirLight._specularG);
				this._fragmentConstantData.set(k++,dirLight._specularB);
				this._fragmentConstantData.set(k++,1);
			}
		}
		if(this._numDirectionalLights > total) {
			i = k + (this._numDirectionalLights - total) * 12;
			while(_$UInt_UInt_$Impl_$.gt(i,k)) this._fragmentConstantData.set(k++,0);
		}
		total = 0;
		var _g11 = 0;
		var _g4 = numLightTypes;
		while(_g11 < _g4) {
			var caster1 = _g11++;
			var pointLights = caster1 != 0 ? this._lightPicker.get_castingPointLights() : this._lightPicker.get_pointLights();
			len = pointLights.get_length();
			var _g31 = 0;
			var _g21 = len;
			while(_g31 < _g21) {
				var i2 = _g31++;
				pointLight = pointLights.get(i2);
				dirPos = pointLight.get_scenePosition();
				this._ambientLightR += pointLight._ambientR;
				this._ambientLightG += pointLight._ambientG;
				this._ambientLightB += pointLight._ambientB;
				this._fragmentConstantData.set(k++,dirPos.x);
				this._fragmentConstantData.set(k++,dirPos.y);
				this._fragmentConstantData.set(k++,dirPos.z);
				this._fragmentConstantData.set(k++,1);
				this._fragmentConstantData.set(k++,pointLight._diffuseR);
				this._fragmentConstantData.set(k++,pointLight._diffuseG);
				this._fragmentConstantData.set(k++,pointLight._diffuseB);
				this._fragmentConstantData.set(k++,pointLight._radius * pointLight._radius);
				this._fragmentConstantData.set(k++,pointLight._specularR);
				this._fragmentConstantData.set(k++,pointLight._specularG);
				this._fragmentConstantData.set(k++,pointLight._specularB);
				this._fragmentConstantData.set(k++,pointLight._fallOffFactor);
			}
		}
		if(this._numPointLights > total) {
			i = k + (total - this._numPointLights) * 12;
			while(_$UInt_UInt_$Impl_$.gt(i,k)) {
				this._fragmentConstantData.set(k,0);
				++k;
			}
		}
	}
	,updateProbes: function(stage3DProxy) {
		var probe;
		var lightProbes = this._lightPicker.get_lightProbes();
		var weights = this._lightPicker.get_lightProbeWeights();
		var len = lightProbes.get_length();
		var addDiff = this.usesProbesForDiffuse();
		var addSpec = this._methodSetup._specularMethod != null && this.usesProbesForSpecular();
		var context = stage3DProxy._context3D;
		if(!(addDiff || addSpec)) {
			return;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			probe = lightProbes.get(i);
			if(addDiff) {
				context.setTextureAt(this._lightProbeDiffuseIndices.get(i),probe.get_diffuseMap().getTextureForStage3D(stage3DProxy));
			}
			if(addSpec) {
				context.setTextureAt(this._lightProbeSpecularIndices.get(i),probe.get_specularMap().getTextureForStage3D(stage3DProxy));
			}
		}
		this._fragmentConstantData.set(this._probeWeightsIndex,weights.get(0));
		this._fragmentConstantData.set(this._probeWeightsIndex + 1,weights.get(1));
		this._fragmentConstantData.set(this._probeWeightsIndex + 2,weights.get(2));
		this._fragmentConstantData.set(this._probeWeightsIndex + 3,weights.get(3));
	}
	,set_ignoreLights: function(ignoreLights) {
		this._ignoreLights = ignoreLights;
		return this._ignoreLights;
	}
	,get_ignoreLights: function() {
		return this._ignoreLights;
	}
	,__class__: away3d_materials_passes_SuperShaderPass
});
var away3d_materials_utils_DefaultMaterialManager = function() { };
$hxClasses["away3d.materials.utils.DefaultMaterialManager"] = away3d_materials_utils_DefaultMaterialManager;
away3d_materials_utils_DefaultMaterialManager.__name__ = ["away3d","materials","utils","DefaultMaterialManager"];
away3d_materials_utils_DefaultMaterialManager.getDefaultMaterial = function(renderable) {
	if(away3d_materials_utils_DefaultMaterialManager._defaultTexture == null) {
		away3d_materials_utils_DefaultMaterialManager.createDefaultTexture();
	}
	if(away3d_materials_utils_DefaultMaterialManager._defaultMaterial == null) {
		away3d_materials_utils_DefaultMaterialManager.createDefaultMaterial();
	}
	return away3d_materials_utils_DefaultMaterialManager._defaultMaterial;
};
away3d_materials_utils_DefaultMaterialManager.getDefaultTexture = function(renderable) {
	if(away3d_materials_utils_DefaultMaterialManager._defaultTexture == null) {
		away3d_materials_utils_DefaultMaterialManager.createDefaultTexture();
	}
	return away3d_materials_utils_DefaultMaterialManager._defaultTexture;
};
away3d_materials_utils_DefaultMaterialManager.createDefaultTexture = function() {
	away3d_materials_utils_DefaultMaterialManager._defaultTextureBitmapData = new openfl_display_BitmapData(8,8,false,0);
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < 8) {
			var j = _g1++;
			if((j & 1 ^ i & 1) != 0) {
				away3d_materials_utils_DefaultMaterialManager._defaultTextureBitmapData.setPixel(i,j,16777215);
			}
		}
	}
	away3d_materials_utils_DefaultMaterialManager._defaultTexture = new away3d_textures_BitmapTexture(away3d_materials_utils_DefaultMaterialManager._defaultTextureBitmapData);
	away3d_materials_utils_DefaultMaterialManager._defaultTexture.set_name("defaultTexture");
};
away3d_materials_utils_DefaultMaterialManager.createDefaultMaterial = function() {
	away3d_materials_utils_DefaultMaterialManager._defaultMaterial = new away3d_materials_TextureMaterial(away3d_materials_utils_DefaultMaterialManager._defaultTexture);
	away3d_materials_utils_DefaultMaterialManager._defaultMaterial.set_mipmap(false);
	away3d_materials_utils_DefaultMaterialManager._defaultMaterial.set_smooth(false);
	away3d_materials_utils_DefaultMaterialManager._defaultMaterial.set_name("defaultMaterial");
};
var away3d_materials_utils_MipmapGenerator = function() { };
$hxClasses["away3d.materials.utils.MipmapGenerator"] = away3d_materials_utils_MipmapGenerator;
away3d_materials_utils_MipmapGenerator.__name__ = ["away3d","materials","utils","MipmapGenerator"];
away3d_materials_utils_MipmapGenerator.generateMipMaps = function(source,target,mipmap,alpha,side) {
	if(side == null) {
		side = -1;
	}
	if(alpha == null) {
		alpha = false;
	}
	var w = source.width;
	var h = source.height;
	var i = 0;
	var regen = mipmap != null;
	if(mipmap == null) {
		mipmap = new openfl_display_BitmapData(w,h,alpha);
	}
	away3d_materials_utils_MipmapGenerator._rect.width = _$UInt_UInt_$Impl_$.toFloat(w);
	away3d_materials_utils_MipmapGenerator._rect.height = _$UInt_UInt_$Impl_$.toFloat(h);
	while(_$UInt_UInt_$Impl_$.gte(w,1) || _$UInt_UInt_$Impl_$.gte(h,1)) {
		if(alpha) {
			mipmap.fillRect(away3d_materials_utils_MipmapGenerator._rect,0);
		}
		away3d_materials_utils_MipmapGenerator._matrix.a = away3d_materials_utils_MipmapGenerator._rect.width / source.width;
		away3d_materials_utils_MipmapGenerator._matrix.d = away3d_materials_utils_MipmapGenerator._rect.height / source.height;
		mipmap.draw(source,away3d_materials_utils_MipmapGenerator._matrix,null,null,null,true);
		if(js_Boot.__instanceof(target,openfl_display3D_textures_Texture)) {
			(js_Boot.__cast(target , openfl_display3D_textures_Texture)).uploadFromBitmapData(mipmap,i++);
		} else {
			(js_Boot.__cast(target , openfl_display3D_textures_CubeTexture)).uploadFromBitmapData(mipmap,side,i++);
		}
		w = w >>> 1;
		h = h >>> 1;
		var tmp = _$UInt_UInt_$Impl_$.gt(w,1) ? _$UInt_UInt_$Impl_$.toFloat(w) : 1;
		away3d_materials_utils_MipmapGenerator._rect.width = tmp;
		var tmp1 = _$UInt_UInt_$Impl_$.gt(h,1) ? _$UInt_UInt_$Impl_$.toFloat(h) : 1;
		away3d_materials_utils_MipmapGenerator._rect.height = tmp1;
	}
	if(!regen) {
		mipmap.dispose();
	}
};
var away3d_materials_utils_MultipleMaterials = function(front,back,left,right,top) {
	this._left = left;
	this._right = right;
	this._bottom = this.get_bottom();
	this._top = top;
	this._front = front;
	this._back = back;
};
$hxClasses["away3d.materials.utils.MultipleMaterials"] = away3d_materials_utils_MultipleMaterials;
away3d_materials_utils_MultipleMaterials.__name__ = ["away3d","materials","utils","MultipleMaterials"];
away3d_materials_utils_MultipleMaterials.prototype = {
	_left: null
	,_right: null
	,_bottom: null
	,_top: null
	,_front: null
	,_back: null
	,get_left: function() {
		return this._left;
	}
	,set_left: function(val) {
		if(this._left == val) {
			return val;
		}
		this._left = val;
		return val;
	}
	,get_right: function() {
		return this._right;
	}
	,set_right: function(val) {
		if(this._right == val) {
			return val;
		}
		this._right = val;
		return val;
	}
	,get_bottom: function() {
		return this._bottom;
	}
	,set_bottom: function(val) {
		if(this._bottom == val) {
			return val;
		}
		this._bottom = val;
		return val;
	}
	,get_top: function() {
		return this._top;
	}
	,set_top: function(val) {
		if(this._top == val) {
			return val;
		}
		this._top = val;
		return val;
	}
	,get_front: function() {
		return this._front;
	}
	,set_front: function(val) {
		if(this._front == val) {
			return val;
		}
		this._front = val;
		return val;
	}
	,get_back: function() {
		return this._back;
	}
	,set_back: function(val) {
		if(this._back == val) {
			return val;
		}
		this._back = val;
		return val;
	}
	,__class__: away3d_materials_utils_MultipleMaterials
};
var away3d_primitives_PrimitiveBase = function() {
	this._uvDirty = true;
	this._geomDirty = true;
	away3d_core_base_Geometry.call(this);
	this._subGeometry = new away3d_core_base_CompactSubGeometry();
	this._subGeometry.set_autoGenerateDummyUVs(false);
	this.addSubGeometry(this._subGeometry);
};
$hxClasses["away3d.primitives.PrimitiveBase"] = away3d_primitives_PrimitiveBase;
away3d_primitives_PrimitiveBase.__name__ = ["away3d","primitives","PrimitiveBase"];
away3d_primitives_PrimitiveBase.__super__ = away3d_core_base_Geometry;
away3d_primitives_PrimitiveBase.prototype = $extend(away3d_core_base_Geometry.prototype,{
	_geomDirty: null
	,_uvDirty: null
	,_subGeometry: null
	,get_subGeometries: function() {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		if(this._uvDirty) {
			this.updateUVs();
		}
		return away3d_core_base_Geometry.prototype.get_subGeometries.call(this);
	}
	,clone: function() {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		if(this._uvDirty) {
			this.updateUVs();
		}
		return away3d_core_base_Geometry.prototype.clone.call(this);
	}
	,scale: function(scale) {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		away3d_core_base_Geometry.prototype.scale.call(this,scale);
	}
	,scaleUV: function(scaleU,scaleV) {
		if(scaleV == null) {
			scaleV = 1;
		}
		if(scaleU == null) {
			scaleU = 1;
		}
		if(this._uvDirty) {
			this.updateUVs();
		}
		away3d_core_base_Geometry.prototype.scaleUV.call(this,scaleU,scaleV);
	}
	,applyTransformation: function(transform) {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		away3d_core_base_Geometry.prototype.applyTransformation.call(this,transform);
	}
	,buildGeometry: function(target) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,buildUVs: function(target) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
	}
	,invalidateUVs: function() {
		this._uvDirty = true;
	}
	,updateGeometry: function() {
		this.buildGeometry(this._subGeometry);
		this._geomDirty = false;
	}
	,updateUVs: function() {
		this.buildUVs(this._subGeometry);
		this._uvDirty = false;
	}
	,validate: function() {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		if(this._uvDirty) {
			this.updateUVs();
		}
	}
	,__class__: away3d_primitives_PrimitiveBase
});
var away3d_primitives_CylinderGeometry = function(topRadius,bottomRadius,height,segmentsW,segmentsH,topClosed,bottomClosed,surfaceClosed,yUp) {
	if(yUp == null) {
		yUp = true;
	}
	if(surfaceClosed == null) {
		surfaceClosed = true;
	}
	if(bottomClosed == null) {
		bottomClosed = true;
	}
	if(topClosed == null) {
		topClosed = true;
	}
	if(segmentsH == null) {
		segmentsH = 1;
	}
	if(segmentsW == null) {
		segmentsW = 16;
	}
	if(height == null) {
		height = 100;
	}
	if(bottomRadius == null) {
		bottomRadius = 50;
	}
	if(topRadius == null) {
		topRadius = 50;
	}
	away3d_primitives_PrimitiveBase.call(this);
	this._topRadius = topRadius;
	this._bottomRadius = bottomRadius;
	this._height = height;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._topClosed = topClosed;
	this._bottomClosed = bottomClosed;
	this._surfaceClosed = surfaceClosed;
	this._yUp = yUp;
};
$hxClasses["away3d.primitives.CylinderGeometry"] = away3d_primitives_CylinderGeometry;
away3d_primitives_CylinderGeometry.__name__ = ["away3d","primitives","CylinderGeometry"];
away3d_primitives_CylinderGeometry.__super__ = away3d_primitives_PrimitiveBase;
away3d_primitives_CylinderGeometry.prototype = $extend(away3d_primitives_PrimitiveBase.prototype,{
	_topRadius: null
	,_bottomRadius: null
	,_height: null
	,_segmentsW: null
	,_segmentsH: null
	,_topClosed: null
	,_bottomClosed: null
	,_surfaceClosed: null
	,_yUp: null
	,_rawData: null
	,_rawIndices: null
	,_nextVertexIndex: null
	,_currentIndex: null
	,_currentTriangleIndex: null
	,_numVertices: null
	,_stride: null
	,_vertexOffset: null
	,addVertex: function(px,py,pz,nx,ny,nz,tx,ty,tz) {
		var compVertInd = this._vertexOffset + this._nextVertexIndex * this._stride;
		this._rawData.set(compVertInd++,px);
		this._rawData.set(compVertInd++,py);
		this._rawData.set(compVertInd++,pz);
		this._rawData.set(compVertInd++,nx);
		this._rawData.set(compVertInd++,ny);
		this._rawData.set(compVertInd++,nz);
		this._rawData.set(compVertInd++,tx);
		this._rawData.set(compVertInd++,ty);
		this._rawData.set(compVertInd++,tz);
		this._nextVertexIndex++;
	}
	,addTriangleClockWise: function(cwVertexIndex0,cwVertexIndex1,cwVertexIndex2) {
		this._rawIndices.set(this._currentIndex++,cwVertexIndex0);
		this._rawIndices.set(this._currentIndex++,cwVertexIndex1);
		this._rawIndices.set(this._currentIndex++,cwVertexIndex2);
		this._currentTriangleIndex++;
	}
	,buildGeometry: function(target) {
		var i = 0;
		var j = 0;
		var x = 0;
		var y = 0;
		var z = 0;
		var radius = 0;
		var revolutionAngle = 0;
		var dr = 0;
		var latNormElev = 0;
		var latNormBase = 0;
		var numTriangles = 0;
		var comp1 = 0;
		var comp2 = 0;
		var startIndex = 0;
		var t1 = 0;
		var t2 = 0;
		this._stride = target.get_vertexStride();
		this._vertexOffset = target.get_vertexOffset();
		this._numVertices = 0;
		this._nextVertexIndex = 0;
		this._currentIndex = 0;
		this._currentTriangleIndex = 0;
		if(this._surfaceClosed) {
			this._numVertices += (this._segmentsH + 1) * (this._segmentsW + 1);
			numTriangles += this._segmentsH * this._segmentsW * 2;
		}
		if(this._topClosed) {
			this._numVertices += 2 * (this._segmentsW + 1);
			numTriangles += this._segmentsW;
		}
		if(this._bottomClosed) {
			this._numVertices += 2 * (this._segmentsW + 1);
			numTriangles += this._segmentsW;
		}
		if(this._numVertices == target.get_numVertices()) {
			this._rawData = target.get_vertexData();
			this._rawIndices = target.get_indexData();
			if(this._rawIndices == null) {
				this._rawIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numTriangles * 3,true);
			}
		} else {
			var numVertComponents = this._numVertices * this._stride;
			this._rawData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVertComponents,true);
			this._rawIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numTriangles * 3,true);
		}
		var revolutionAngleDelta = 2 * Math.PI / this._segmentsW;
		if(this._topClosed && this._topRadius > 0) {
			z = -0.5 * this._height;
			var _g1 = 0;
			var _g = this._segmentsW + 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				if(this._yUp) {
					t1 = 1;
					t2 = 0;
					comp1 = -z;
					comp2 = 0;
				} else {
					t1 = 0;
					t2 = -1;
					comp1 = 0;
					comp2 = z;
				}
				this.addVertex(0,comp1,comp2,0,t1,t2,1,0,0);
				revolutionAngle = i1 * revolutionAngleDelta;
				x = this._topRadius * Math.cos(revolutionAngle);
				y = this._topRadius * Math.sin(revolutionAngle);
				if(this._yUp) {
					comp1 = -z;
					comp2 = y;
				} else {
					comp1 = y;
					comp2 = z;
				}
				if(i1 == this._segmentsW) {
					this.addVertex(this._rawData.get(startIndex + this._stride),this._rawData.get(startIndex + this._stride + 1),this._rawData.get(startIndex + this._stride + 2),0,t1,t2,1,0,0);
				} else {
					this.addVertex(x,comp1,comp2,0,t1,t2,1,0,0);
				}
				if(i1 > 0) {
					this.addTriangleClockWise(this._nextVertexIndex - 1,this._nextVertexIndex - 3,this._nextVertexIndex - 2);
				}
			}
		}
		if(this._bottomClosed && this._bottomRadius > 0) {
			z = 0.5 * this._height;
			startIndex = this._vertexOffset + this._nextVertexIndex * this._stride;
			var _g11 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g11 < _g2) {
				var i2 = _g11++;
				if(this._yUp) {
					t1 = -1;
					t2 = 0;
					comp1 = -z;
					comp2 = 0;
				} else {
					t1 = 0;
					t2 = 1;
					comp1 = 0;
					comp2 = z;
				}
				this.addVertex(0,comp1,comp2,0,t1,t2,1,0,0);
				revolutionAngle = i2 * revolutionAngleDelta;
				x = this._bottomRadius * Math.cos(revolutionAngle);
				y = this._bottomRadius * Math.sin(revolutionAngle);
				if(this._yUp) {
					comp1 = -z;
					comp2 = y;
				} else {
					comp1 = y;
					comp2 = z;
				}
				if(i2 == this._segmentsW) {
					this.addVertex(x,this._rawData.get(startIndex + 1),this._rawData.get(startIndex + 2),0,t1,t2,1,0,0);
				} else {
					this.addVertex(x,comp1,comp2,0,t1,t2,1,0,0);
				}
				if(i2 > 0) {
					this.addTriangleClockWise(this._nextVertexIndex - 2,this._nextVertexIndex - 3,this._nextVertexIndex - 1);
				}
			}
		}
		dr = this._bottomRadius - this._topRadius;
		latNormElev = dr / this._height;
		if(latNormElev == 0) {
			latNormBase = 1;
		} else {
			latNormBase = this._height / dr;
		}
		if(this._surfaceClosed) {
			var a;
			var b;
			var c;
			var d;
			var na0;
			var na1;
			var naComp1;
			var naComp2;
			var _g12 = 0;
			var _g3 = this._segmentsH + 1;
			while(_g12 < _g3) {
				var j1 = _g12++;
				radius = this._topRadius - j1 / this._segmentsH * (this._topRadius - this._bottomRadius);
				z = -(this._height / 2) + j1 / this._segmentsH * this._height;
				startIndex = this._vertexOffset + this._nextVertexIndex * this._stride;
				var _g31 = 0;
				var _g21 = this._segmentsW + 1;
				while(_g31 < _g21) {
					var i3 = _g31++;
					revolutionAngle = i3 * revolutionAngleDelta;
					x = radius * Math.cos(revolutionAngle);
					y = radius * Math.sin(revolutionAngle);
					na0 = latNormBase * Math.cos(revolutionAngle);
					na1 = latNormBase * Math.sin(revolutionAngle);
					if(this._yUp) {
						t1 = 0;
						t2 = -na0;
						comp1 = -z;
						comp2 = y;
						naComp1 = latNormElev;
						naComp2 = na1;
					} else {
						t1 = -na0;
						t2 = 0;
						comp1 = y;
						comp2 = z;
						naComp1 = na1;
						naComp2 = latNormElev;
					}
					if(i3 == this._segmentsW) {
						this.addVertex(this._rawData.get(startIndex),this._rawData.get(startIndex + 1),this._rawData.get(startIndex + 2),na0,latNormElev,na1,na1,t1,t2);
					} else {
						this.addVertex(x,comp1,comp2,na0,naComp1,naComp2,-na1,t1,t2);
					}
					if(i3 > 0 && j1 > 0) {
						a = this._nextVertexIndex - 1;
						b = this._nextVertexIndex - 2;
						c = b - this._segmentsW - 1;
						d = a - this._segmentsW - 1;
						this.addTriangleClockWise(a,b,c);
						this.addTriangleClockWise(a,c,d);
					}
				}
			}
		}
		target.updateData(this._rawData);
		target.updateIndexData(this._rawIndices);
	}
	,buildUVs: function(target) {
		var i;
		var j;
		var x;
		var y;
		var revolutionAngle;
		var stride = target.get_UVStride();
		var skip = stride - 2;
		var UVData;
		var numUvs = this._numVertices * stride;
		if(target.get_UVData() != null && numUvs == target.get_UVData().get_length()) {
			UVData = target.get_UVData();
		} else {
			UVData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numUvs,true);
			this.invalidateGeometry();
		}
		var revolutionAngleDelta = 2 * Math.PI / this._segmentsW;
		var currentUvCompIndex = target.get_UVOffset();
		if(this._topClosed) {
			var _g1 = 0;
			var _g = this._segmentsW + 1;
			while(_g1 < _g) {
				var i1 = _g1++;
				revolutionAngle = i1 * revolutionAngleDelta;
				x = 0.5 + 0.5 * -Math.cos(revolutionAngle);
				y = 0.5 + 0.5 * Math.sin(revolutionAngle);
				UVData.set(currentUvCompIndex++,0.5 * target.get_scaleU());
				UVData.set(currentUvCompIndex++,0.5 * target.get_scaleV());
				currentUvCompIndex += skip;
				UVData.set(currentUvCompIndex++,x * target.get_scaleU());
				UVData.set(currentUvCompIndex++,y * target.get_scaleV());
				currentUvCompIndex += skip;
			}
		}
		if(this._bottomClosed) {
			var _g11 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g11 < _g2) {
				var i2 = _g11++;
				revolutionAngle = i2 * revolutionAngleDelta;
				x = 0.5 + 0.5 * Math.cos(revolutionAngle);
				y = 0.5 + 0.5 * Math.sin(revolutionAngle);
				UVData.set(currentUvCompIndex++,0.5 * target.get_scaleU());
				UVData.set(currentUvCompIndex++,0.5 * target.get_scaleV());
				currentUvCompIndex += skip;
				UVData.set(currentUvCompIndex++,x * target.get_scaleU());
				UVData.set(currentUvCompIndex++,y * target.get_scaleV());
				currentUvCompIndex += skip;
			}
		}
		if(this._surfaceClosed) {
			var _g12 = 0;
			var _g3 = this._segmentsH + 1;
			while(_g12 < _g3) {
				var j1 = _g12++;
				var _g31 = 0;
				var _g21 = this._segmentsW + 1;
				while(_g31 < _g21) {
					var i3 = _g31++;
					UVData.set(currentUvCompIndex++,i3 / this._segmentsW * target.get_scaleU());
					UVData.set(currentUvCompIndex++,j1 / this._segmentsH * target.get_scaleV());
					currentUvCompIndex += skip;
				}
			}
		}
		target.updateData(UVData);
	}
	,get_topRadius: function() {
		return this._topRadius;
	}
	,set_topRadius: function(value) {
		this._topRadius = value;
		this.invalidateGeometry();
		return value;
	}
	,get_bottomRadius: function() {
		return this._bottomRadius;
	}
	,set_bottomRadius: function(value) {
		this._bottomRadius = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_topClosed: function() {
		return this._topClosed;
	}
	,set_topClosed: function(value) {
		this._topClosed = value;
		this.invalidateGeometry();
		return value;
	}
	,get_bottomClosed: function() {
		return this._bottomClosed;
	}
	,set_bottomClosed: function(value) {
		this._bottomClosed = value;
		this.invalidateGeometry();
		return value;
	}
	,get_yUp: function() {
		return this._yUp;
	}
	,set_yUp: function(value) {
		this._yUp = value;
		this.invalidateGeometry();
		return value;
	}
	,__class__: away3d_primitives_CylinderGeometry
});
var away3d_primitives_ConeGeometry = function(radius,height,segmentsW,segmentsH,closed,yUp) {
	if(yUp == null) {
		yUp = true;
	}
	if(closed == null) {
		closed = true;
	}
	if(segmentsH == null) {
		segmentsH = 1;
	}
	if(segmentsW == null) {
		segmentsW = 16;
	}
	if(height == null) {
		height = 100;
	}
	if(radius == null) {
		radius = 50;
	}
	away3d_primitives_CylinderGeometry.call(this,0,radius,height,segmentsW,segmentsH,false,closed,true,yUp);
};
$hxClasses["away3d.primitives.ConeGeometry"] = away3d_primitives_ConeGeometry;
away3d_primitives_ConeGeometry.__name__ = ["away3d","primitives","ConeGeometry"];
away3d_primitives_ConeGeometry.__super__ = away3d_primitives_CylinderGeometry;
away3d_primitives_ConeGeometry.prototype = $extend(away3d_primitives_CylinderGeometry.prototype,{
	get_radius: function() {
		return this._bottomRadius;
	}
	,set_radius: function(value) {
		this._bottomRadius = value;
		this.invalidateGeometry();
		return value;
	}
	,__class__: away3d_primitives_ConeGeometry
});
var away3d_primitives_CubeGeometry = function(width,height,depth,segmentsW,segmentsH,segmentsD,tile6) {
	if(tile6 == null) {
		tile6 = true;
	}
	if(segmentsD == null) {
		segmentsD = 1;
	}
	if(segmentsH == null) {
		segmentsH = 1;
	}
	if(segmentsW == null) {
		segmentsW = 1;
	}
	if(depth == null) {
		depth = 100;
	}
	if(height == null) {
		height = 100;
	}
	if(width == null) {
		width = 100;
	}
	away3d_primitives_PrimitiveBase.call(this);
	this._width = width;
	this._height = height;
	this._depth = depth;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._segmentsD = segmentsD;
	this._tile6 = tile6;
};
$hxClasses["away3d.primitives.CubeGeometry"] = away3d_primitives_CubeGeometry;
away3d_primitives_CubeGeometry.__name__ = ["away3d","primitives","CubeGeometry"];
away3d_primitives_CubeGeometry.__super__ = away3d_primitives_PrimitiveBase;
away3d_primitives_CubeGeometry.prototype = $extend(away3d_primitives_PrimitiveBase.prototype,{
	_width: null
	,_height: null
	,_depth: null
	,_tile6: null
	,_segmentsW: null
	,_segmentsH: null
	,_segmentsD: null
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,get_tile6: function() {
		return this._tile6;
	}
	,set_tile6: function(value) {
		this._tile6 = value;
		this.invalidateUVs();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsD: function() {
		return this._segmentsD;
	}
	,set_segmentsD: function(value) {
		this._segmentsD = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var tl = 0;
		var tr = 0;
		var bl = 0;
		var br = 0;
		var i = 0;
		var j = 0;
		var inc = 0;
		var vidx = 0;
		var fidx = 0;
		var hw = 0;
		var hh = 0;
		var hd = 0;
		var dw = 0;
		var dh = 0;
		var dd = 0;
		var outer_pos;
		var numVerts = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(numVerts == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) {
				indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12,true);
			}
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVerts * stride,true);
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,(this._segmentsW * this._segmentsH + this._segmentsW * this._segmentsD + this._segmentsH * this._segmentsD) * 12,true);
			this.invalidateUVs();
		}
		vidx = target.get_vertexOffset();
		fidx = 0;
		hw = this._width / 2;
		hh = this._height / 2;
		hd = this._depth / 2;
		dw = this._width / this._segmentsW;
		dh = this._height / this._segmentsH;
		dd = this._depth / this._segmentsD;
		var _g1 = 0;
		var _g = this._segmentsW + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			outer_pos = -hw + i1 * dw;
			var _g3 = 0;
			var _g2 = this._segmentsH + 1;
			while(_g3 < _g2) {
				var j1 = _g3++;
				data.set(vidx++,outer_pos);
				data.set(vidx++,-hh + j1 * dh);
				data.set(vidx++,-hd);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,-1);
				data.set(vidx++,1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				vidx += skip;
				data.set(vidx++,outer_pos);
				data.set(vidx++,-hh + j1 * dh);
				data.set(vidx++,hd);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,1);
				data.set(vidx++,-1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				vidx += skip;
				if(i1 > 0 && j1 > 0) {
					tl = 2 * ((i1 - 1) * (this._segmentsH + 1) + (j1 - 1)) | 0;
					tr = 2 * (i1 * (this._segmentsH + 1) + (j1 - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices.set(fidx++,tl);
					indices.set(fidx++,bl);
					indices.set(fidx++,br);
					indices.set(fidx++,tl);
					indices.set(fidx++,br);
					indices.set(fidx++,tr);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,br + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tl + 1);
				}
			}
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsH + 1) | 0;
		var _g11 = 0;
		var _g4 = this._segmentsW + 1;
		while(_g11 < _g4) {
			var i2 = _g11++;
			outer_pos = -hw + i2 * dw;
			var _g31 = 0;
			var _g21 = this._segmentsD + 1;
			while(_g31 < _g21) {
				var j2 = _g31++;
				data.set(vidx++,outer_pos);
				data.set(vidx++,hh);
				data.set(vidx++,-hd + j2 * dd);
				data.set(vidx++,0);
				data.set(vidx++,1);
				data.set(vidx++,0);
				data.set(vidx++,1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				vidx += skip;
				data.set(vidx++,outer_pos);
				data.set(vidx++,-hh);
				data.set(vidx++,-hd + j2 * dd);
				data.set(vidx++,0);
				data.set(vidx++,-1);
				data.set(vidx++,0);
				data.set(vidx++,1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				vidx += skip;
				if(i2 > 0 && j2 > 0) {
					tl = inc + 2 * ((i2 - 1) * (this._segmentsD + 1) + (j2 - 1)) | 0;
					tr = inc + 2 * (i2 * (this._segmentsD + 1) + (j2 - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices.set(fidx++,tl);
					indices.set(fidx++,bl);
					indices.set(fidx++,br);
					indices.set(fidx++,tl);
					indices.set(fidx++,br);
					indices.set(fidx++,tr);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,br + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tl + 1);
				}
			}
		}
		inc += 2 * (this._segmentsW + 1) * (this._segmentsD + 1) | 0;
		var _g12 = 0;
		var _g5 = this._segmentsD + 1;
		while(_g12 < _g5) {
			var i3 = _g12++;
			outer_pos = hd - i3 * dd;
			var _g32 = 0;
			var _g22 = this._segmentsH + 1;
			while(_g32 < _g22) {
				var j3 = _g32++;
				data.set(vidx++,-hw);
				data.set(vidx++,-hh + j3 * dh);
				data.set(vidx++,outer_pos);
				data.set(vidx++,-1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,-1);
				vidx += skip;
				data.set(vidx++,hw);
				data.set(vidx++,-hh + j3 * dh);
				data.set(vidx++,outer_pos);
				data.set(vidx++,1);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,0);
				data.set(vidx++,1);
				vidx += skip;
				if(i3 > 0 && j3 > 0) {
					tl = inc + 2 * ((i3 - 1) * (this._segmentsH + 1) + (j3 - 1)) | 0;
					tr = inc + 2 * (i3 * (this._segmentsH + 1) + (j3 - 1)) | 0;
					bl = tl + 2;
					br = tr + 2;
					indices.set(fidx++,tl);
					indices.set(fidx++,bl);
					indices.set(fidx++,br);
					indices.set(fidx++,tl);
					indices.set(fidx++,br);
					indices.set(fidx++,tr);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,br + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tr + 1);
					indices.set(fidx++,bl + 1);
					indices.set(fidx++,tl + 1);
				}
			}
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var i = 0;
		var j = 0;
		var uidx;
		var data;
		var u_tile_dim;
		var v_tile_dim;
		var u_tile_step;
		var v_tile_step;
		var tl0u;
		var tl0v;
		var tl1u;
		var tl1v;
		var du;
		var dv;
		var stride = target.get_UVStride();
		var numUvs = ((this._segmentsW + 1) * (this._segmentsH + 1) + (this._segmentsW + 1) * (this._segmentsD + 1) + (this._segmentsH + 1) * (this._segmentsD + 1)) * 2 * stride | 0;
		var skip = stride - 2;
		if(target.get_UVData() != null && numUvs == target.get_UVData().get_length()) {
			data = target.get_UVData();
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numUvs,true);
			this.invalidateGeometry();
		}
		if(this._tile6) {
			u_tile_step = 0.33333333333333331;
			u_tile_dim = u_tile_step;
			v_tile_step = 0.5;
			v_tile_dim = v_tile_step;
		} else {
			v_tile_dim = 1;
			u_tile_dim = v_tile_dim;
			v_tile_step = 0;
			u_tile_step = v_tile_step;
		}
		uidx = target.get_UVOffset();
		tl0u = u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsH;
		var _g1 = 0;
		var _g = this._segmentsW + 1;
		while(_g1 < _g) {
			var i1 = _g1++;
			var _g3 = 0;
			var _g2 = this._segmentsH + 1;
			while(_g3 < _g2) {
				var j1 = _g3++;
				data.set(uidx++,(tl0u + i1 * du) * target.get_scaleU());
				data.set(uidx++,(tl0v + (v_tile_dim - j1 * dv)) * target.get_scaleV());
				uidx += skip;
				data.set(uidx++,(tl1u + (u_tile_dim - i1 * du)) * target.get_scaleU());
				data.set(uidx++,(tl1v + (v_tile_dim - j1 * dv)) * target.get_scaleV());
				uidx += skip;
			}
		}
		tl0u = u_tile_step;
		tl0v = 0 * v_tile_step;
		tl1u = 0 * u_tile_step;
		tl1v = 0 * v_tile_step;
		du = u_tile_dim / this._segmentsW;
		dv = v_tile_dim / this._segmentsD;
		var _g11 = 0;
		var _g4 = this._segmentsW + 1;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var _g31 = 0;
			var _g21 = this._segmentsD + 1;
			while(_g31 < _g21) {
				var j2 = _g31++;
				data.set(uidx++,(tl0u + i2 * du) * target.get_scaleU());
				data.set(uidx++,(tl0v + (v_tile_dim - j2 * dv)) * target.get_scaleV());
				uidx += skip;
				data.set(uidx++,(tl1u + i2 * du) * target.get_scaleU());
				data.set(uidx++,(tl1v + j2 * dv) * target.get_scaleV());
				uidx += skip;
			}
		}
		tl0u = 0 * u_tile_step;
		tl0v = v_tile_step;
		tl1u = 2 * u_tile_step;
		tl1v = v_tile_step;
		du = u_tile_dim / this._segmentsD;
		dv = v_tile_dim / this._segmentsH;
		var _g12 = 0;
		var _g5 = this._segmentsD + 1;
		while(_g12 < _g5) {
			var i3 = _g12++;
			var _g32 = 0;
			var _g22 = this._segmentsH + 1;
			while(_g32 < _g22) {
				var j3 = _g32++;
				data.set(uidx++,(tl0u + i3 * du) * target.get_scaleU());
				data.set(uidx++,(tl0v + (v_tile_dim - j3 * dv)) * target.get_scaleV());
				uidx += skip;
				data.set(uidx++,(tl1u + (u_tile_dim - i3 * du)) * target.get_scaleU());
				data.set(uidx++,(tl1v + (v_tile_dim - j3 * dv)) * target.get_scaleV());
				uidx += skip;
			}
		}
		target.updateData(data);
	}
	,__class__: away3d_primitives_CubeGeometry
});
var away3d_primitives_data_Segment = function(start,end,anchor,colorStart,colorEnd,thickness) {
	if(thickness == null) {
		thickness = 1;
	}
	if(colorEnd == null) {
		colorEnd = 3355443;
	}
	if(colorStart == null) {
		colorStart = 3355443;
	}
	this._subSetIndex = -1;
	this._index = -1;
	anchor = null;
	this._thickness = thickness * .5;
	this._start = start;
	this._end = end;
	this.set_startColor(colorStart);
	this.set_endColor(colorEnd);
};
$hxClasses["away3d.primitives.data.Segment"] = away3d_primitives_data_Segment;
away3d_primitives_data_Segment.__name__ = ["away3d","primitives","data","Segment"];
away3d_primitives_data_Segment.prototype = {
	_segmentsBase: null
	,_thickness: null
	,_start: null
	,_end: null
	,_startR: null
	,_startG: null
	,_startB: null
	,_endR: null
	,_endG: null
	,_endB: null
	,_index: null
	,_subSetIndex: null
	,_startColor: null
	,_endColor: null
	,updateSegment: function(start,end,anchor,colorStart,colorEnd,thickness) {
		if(thickness == null) {
			thickness = 1;
		}
		if(colorEnd == null) {
			colorEnd = 3355443;
		}
		if(colorStart == null) {
			colorStart = 3355443;
		}
		anchor = null;
		this._start = start;
		this._end = end;
		if(this._startColor != colorStart) {
			this.set_startColor(colorStart);
		}
		if(this._endColor != colorEnd) {
			this.set_endColor(colorEnd);
		}
		this._thickness = thickness * .5;
		this.update();
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		this._start = value;
		this.update();
		return value;
	}
	,get_end: function() {
		return this._end;
	}
	,set_end: function(value) {
		this._end = value;
		this.update();
		return value;
	}
	,get_thickness: function() {
		return this._thickness * 2;
	}
	,set_thickness: function(value) {
		this._thickness = value * .5;
		this.update();
		return value;
	}
	,get_startColor: function() {
		return this._startColor;
	}
	,set_startColor: function(color) {
		this._startR = (color >> 16 & 255) / 255;
		this._startG = (color >> 8 & 255) / 255;
		this._startB = (color & 255) / 255;
		this._startColor = color;
		this.update();
		return color;
	}
	,get_endColor: function() {
		return this._endColor;
	}
	,set_endColor: function(color) {
		this._endR = (color >> 16 & 255) / 255;
		this._endG = (color >> 8 & 255) / 255;
		this._endB = (color & 255) / 255;
		this._endColor = color;
		this.update();
		return color;
	}
	,dispose: function() {
		this._start = null;
		this._end = null;
	}
	,get_index: function() {
		return this._index;
	}
	,set_index: function(ind) {
		this._index = ind;
		return ind;
	}
	,get_subSetIndex: function() {
		return this._subSetIndex;
	}
	,set_subSetIndex: function(ind) {
		this._subSetIndex = ind;
		return ind;
	}
	,set_segmentsBase: function(segBase) {
		this._segmentsBase = segBase;
		return segBase;
	}
	,update: function() {
		if(this._segmentsBase == null) {
			return;
		}
		this._segmentsBase.updateSegment(this);
	}
	,__class__: away3d_primitives_data_Segment
};
var away3d_primitives_LineSegment = function(v0,v1,color0,color1,thickness) {
	if(thickness == null) {
		thickness = 1;
	}
	if(color1 == null) {
		color1 = 3355443;
	}
	if(color0 == null) {
		color0 = 3355443;
	}
	away3d_primitives_data_Segment.call(this,v0,v1,null,color0,color1,thickness);
};
$hxClasses["away3d.primitives.LineSegment"] = away3d_primitives_LineSegment;
away3d_primitives_LineSegment.__name__ = ["away3d","primitives","LineSegment"];
away3d_primitives_LineSegment.__super__ = away3d_primitives_data_Segment;
away3d_primitives_LineSegment.prototype = $extend(away3d_primitives_data_Segment.prototype,{
	__class__: away3d_primitives_LineSegment
});
var away3d_primitives_PlaneGeometry = function(width,height,segmentsW,segmentsH,yUp,doubleSided) {
	if(doubleSided == null) {
		doubleSided = false;
	}
	if(yUp == null) {
		yUp = true;
	}
	if(segmentsH == null) {
		segmentsH = 1;
	}
	if(segmentsW == null) {
		segmentsW = 1;
	}
	if(height == null) {
		height = 100;
	}
	if(width == null) {
		width = 100;
	}
	away3d_primitives_PrimitiveBase.call(this);
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._yUp = yUp;
	this._width = width;
	this._height = height;
	this._doubleSided = doubleSided;
};
$hxClasses["away3d.primitives.PlaneGeometry"] = away3d_primitives_PlaneGeometry;
away3d_primitives_PlaneGeometry.__name__ = ["away3d","primitives","PlaneGeometry"];
away3d_primitives_PlaneGeometry.__super__ = away3d_primitives_PrimitiveBase;
away3d_primitives_PlaneGeometry.prototype = $extend(away3d_primitives_PrimitiveBase.prototype,{
	_segmentsW: null
	,_segmentsH: null
	,_yUp: null
	,_width: null
	,_height: null
	,_doubleSided: null
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_yUp: function() {
		return this._yUp;
	}
	,set_yUp: function(value) {
		this._yUp = value;
		this.invalidateGeometry();
		return value;
	}
	,get_doubleSided: function() {
		return this._doubleSided;
	}
	,set_doubleSided: function(value) {
		this._doubleSided = value;
		this.invalidateGeometry();
		return value;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function(target) {
		var data;
		var indices;
		var x;
		var y;
		var numIndices;
		var base;
		var tw = this._segmentsW + 1;
		var numVertices = (this._segmentsH + 1) * tw;
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(this._doubleSided) {
			numVertices *= 2;
		}
		numIndices = this._segmentsH * this._segmentsW * 6;
		if(this._doubleSided) {
			numIndices <<= 1;
		}
		if(numVertices == target.get_numVertices()) {
			data = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) {
				indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numIndices,true);
			}
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVertices * stride,true);
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numIndices,true);
			this.invalidateUVs();
		}
		numIndices = 0;
		var index = target.get_vertexOffset();
		var _g1 = 0;
		var _g = this._segmentsH + 1;
		while(_g1 < _g) {
			var yi = _g1++;
			var _g3 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g3 < _g2) {
				var xi = _g3++;
				x = (xi / this._segmentsW - .5) * this._width;
				y = (yi / this._segmentsH - .5) * this._height;
				data.set(index++,x);
				if(this._yUp) {
					data.set(index++,0);
					data.set(index++,y);
				} else {
					data.set(index++,y);
					data.set(index++,0);
				}
				data.set(index++,0);
				if(this._yUp) {
					data.set(index++,1);
					data.set(index++,0);
				} else {
					data.set(index++,0);
					data.set(index++,-1);
				}
				data.set(index++,1);
				data.set(index++,0);
				data.set(index++,0);
				index += skip;
				if(this._doubleSided) {
					var _g4 = 0;
					while(_g4 < 3) {
						var i = _g4++;
						data.set(index,data.get(index - stride));
						++index;
					}
					var _g41 = 0;
					while(_g41 < 3) {
						var i1 = _g41++;
						data.set(index,-data.get(index - stride));
						++index;
					}
					var _g42 = 0;
					while(_g42 < 3) {
						var i2 = _g42++;
						data.set(index,-data.get(index - stride));
						++index;
					}
					index += skip;
				}
				if(xi != this._segmentsW && yi != this._segmentsH) {
					base = xi + yi * tw;
					var mult = this._doubleSided ? 2 : 1;
					indices.set(numIndices++,base * mult);
					indices.set(numIndices++,(base + tw) * mult);
					indices.set(numIndices++,(base + tw + 1) * mult);
					indices.set(numIndices++,base * mult);
					indices.set(numIndices++,(base + tw + 1) * mult);
					indices.set(numIndices++,(base + 1) * mult);
					if(this._doubleSided) {
						indices.set(numIndices++,(base + tw + 1) * mult + 1);
						indices.set(numIndices++,(base + tw) * mult + 1);
						indices.set(numIndices++,base * mult + 1);
						indices.set(numIndices++,(base + 1) * mult + 1);
						indices.set(numIndices++,(base + tw + 1) * mult + 1);
						indices.set(numIndices++,base * mult + 1);
					}
				}
			}
		}
		target.updateData(data);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var data;
		var stride = target.get_UVStride();
		var numUvs = (this._segmentsH + 1) * (this._segmentsW + 1) * stride;
		var skip = stride - 2;
		if(this._doubleSided) {
			numUvs *= 2;
		}
		if(target.get_UVData() != null && numUvs == target.get_UVData().get_length()) {
			data = target.get_UVData();
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numUvs,true);
			this.invalidateGeometry();
		}
		var index = target.get_UVOffset();
		var _g1 = 0;
		var _g = this._segmentsH + 1;
		while(_g1 < _g) {
			var yi = _g1++;
			var _g3 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g3 < _g2) {
				var xi = _g3++;
				data.set(index++,xi / this._segmentsW * target.get_scaleU());
				data.set(index++,(1 - yi / this._segmentsH) * target.get_scaleV());
				index += skip;
				if(this._doubleSided) {
					data.set(index++,xi / this._segmentsW * target.get_scaleU());
					data.set(index++,(1 - yi / this._segmentsH) * target.get_scaleV());
					index += skip;
				}
			}
		}
		target.updateData(data);
	}
	,__class__: away3d_primitives_PlaneGeometry
});
var away3d_primitives_SphereGeometry = function(radius,segmentsW,segmentsH,yUp) {
	if(yUp == null) {
		yUp = true;
	}
	if(segmentsH == null) {
		segmentsH = 12;
	}
	if(segmentsW == null) {
		segmentsW = 16;
	}
	if(radius == null) {
		radius = 50;
	}
	away3d_primitives_PrimitiveBase.call(this);
	this._radius = radius;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
	this._yUp = yUp;
};
$hxClasses["away3d.primitives.SphereGeometry"] = away3d_primitives_SphereGeometry;
away3d_primitives_SphereGeometry.__name__ = ["away3d","primitives","SphereGeometry"];
away3d_primitives_SphereGeometry.__super__ = away3d_primitives_PrimitiveBase;
away3d_primitives_SphereGeometry.prototype = $extend(away3d_primitives_PrimitiveBase.prototype,{
	_radius: null
	,_segmentsW: null
	,_segmentsH: null
	,_yUp: null
	,buildGeometry: function(target) {
		var vertices;
		var indices;
		var i = 0;
		var j = 0;
		var triIndex = 0;
		var numVerts = (this._segmentsH + 1) * (this._segmentsW + 1);
		var stride = target.get_vertexStride();
		var skip = stride - 9;
		if(numVerts == target.get_numVertices()) {
			vertices = target.get_vertexData();
			indices = target.get_indexData();
			if(indices == null) {
				indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,(this._segmentsH - 1) * this._segmentsW * 6);
			}
		} else {
			vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVerts * stride,true);
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,(this._segmentsH - 1) * this._segmentsW * 6);
			this.invalidateGeometry();
		}
		var startIndex;
		var index = target.get_vertexOffset();
		var comp1;
		var comp2;
		var t1;
		var t2;
		var _g1 = 0;
		var _g = this._segmentsH + 1;
		while(_g1 < _g) {
			var j1 = _g1++;
			startIndex = index;
			var horangle = Math.PI * j1 / this._segmentsH;
			var z = -this._radius * Math.cos(horangle);
			var ringradius = this._radius * Math.sin(horangle);
			var _g3 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				var verangle = 2 * Math.PI * i1 / this._segmentsW;
				var x = ringradius * Math.cos(verangle);
				var y = ringradius * Math.sin(verangle);
				var normLen = 1 / Math.sqrt(x * x + y * y + z * z);
				var tanLen = Math.sqrt(y * y + x * x);
				if(this._yUp) {
					t1 = 0;
					if(tanLen > .007) {
						t2 = x / tanLen;
					} else {
						t2 = 0;
					}
					comp1 = -z;
					comp2 = y;
				} else {
					if(tanLen > .007) {
						t1 = x / tanLen;
					} else {
						t1 = 0;
					}
					t2 = 0;
					comp1 = y;
					comp2 = z;
				}
				if(i1 == this._segmentsW) {
					vertices.set(index++,vertices.get(startIndex));
					vertices.set(index++,vertices.get(startIndex + 1));
					vertices.set(index++,vertices.get(startIndex + 2));
					vertices.set(index++,vertices.get(startIndex + 3) + x * normLen * .5);
					vertices.set(index++,vertices.get(startIndex + 4) + comp1 * normLen * .5);
					vertices.set(index++,vertices.get(startIndex + 5) + comp2 * normLen * .5);
					vertices.set(index++,tanLen > .007 ? -y / tanLen : 1);
					vertices.set(index++,t1);
					vertices.set(index++,t2);
				} else {
					vertices.set(index++,x);
					vertices.set(index++,comp1);
					vertices.set(index++,comp2);
					vertices.set(index++,x * normLen);
					vertices.set(index++,comp1 * normLen);
					vertices.set(index++,comp2 * normLen);
					vertices.set(index++,tanLen > .007 ? -y / tanLen : 1);
					vertices.set(index++,t1);
					vertices.set(index++,t2);
				}
				if(i1 > 0 && j1 > 0) {
					var a = (this._segmentsW + 1) * j1 + i1;
					var b = (this._segmentsW + 1) * j1 + i1 - 1;
					var c = (this._segmentsW + 1) * (j1 - 1) + i1 - 1;
					var d = (this._segmentsW + 1) * (j1 - 1) + i1;
					if(j1 == this._segmentsH) {
						vertices.set(index - 9,vertices.get(startIndex));
						vertices.set(index - 8,vertices.get(startIndex + 1));
						vertices.set(index - 7,vertices.get(startIndex + 2));
						indices.set(triIndex++,a);
						indices.set(triIndex++,c);
						indices.set(triIndex++,d);
					} else if(j1 == 1) {
						indices.set(triIndex++,a);
						indices.set(triIndex++,b);
						indices.set(triIndex++,c);
					} else {
						indices.set(triIndex++,a);
						indices.set(triIndex++,b);
						indices.set(triIndex++,c);
						indices.set(triIndex++,a);
						indices.set(triIndex++,c);
						indices.set(triIndex++,d);
					}
				}
				index += skip;
			}
		}
		target.updateData(vertices);
		target.updateIndexData(indices);
	}
	,buildUVs: function(target) {
		var i;
		var j;
		var stride = target.get_UVStride();
		var numUvs = (this._segmentsH + 1) * (this._segmentsW + 1) * stride;
		var data;
		var skip = stride - 2;
		if(target.get_UVData() != null && numUvs == target.get_UVData().get_length()) {
			data = target.get_UVData();
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numUvs,true);
			this.invalidateGeometry();
		}
		var index = target.get_UVOffset();
		var _g1 = 0;
		var _g = this._segmentsH + 1;
		while(_g1 < _g) {
			var j1 = _g1++;
			var _g3 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				data.set(index++,i1 / this._segmentsW * target.get_scaleU());
				data.set(index++,j1 / this._segmentsH * target.get_scaleV());
				index += skip;
			}
		}
		target.updateData(data);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		this.invalidateGeometry();
		return value;
	}
	,get_segmentsW: function() {
		return this._segmentsW;
	}
	,set_segmentsW: function(value) {
		this._segmentsW = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsH: function() {
		return this._segmentsH;
	}
	,set_segmentsH: function(value) {
		this._segmentsH = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_yUp: function() {
		return this._yUp;
	}
	,set_yUp: function(value) {
		this._yUp = value;
		this.invalidateGeometry();
		return value;
	}
	,__class__: away3d_primitives_SphereGeometry
});
var away3d_primitives_TorusGeometry = function(radius,tubeRadius,segmentsR,segmentsT,yUp) {
	if(yUp == null) {
		yUp = true;
	}
	if(segmentsT == null) {
		segmentsT = 8;
	}
	if(segmentsR == null) {
		segmentsR = 16;
	}
	if(tubeRadius == null) {
		tubeRadius = 50;
	}
	if(radius == null) {
		radius = 50;
	}
	away3d_primitives_PrimitiveBase.call(this);
	this._radius = radius;
	this._tubeRadius = tubeRadius;
	this._segmentsR = segmentsR;
	this._segmentsT = segmentsT;
	this._yUp = yUp;
};
$hxClasses["away3d.primitives.TorusGeometry"] = away3d_primitives_TorusGeometry;
away3d_primitives_TorusGeometry.__name__ = ["away3d","primitives","TorusGeometry"];
away3d_primitives_TorusGeometry.__super__ = away3d_primitives_PrimitiveBase;
away3d_primitives_TorusGeometry.prototype = $extend(away3d_primitives_PrimitiveBase.prototype,{
	_radius: null
	,_tubeRadius: null
	,_segmentsR: null
	,_segmentsT: null
	,_yUp: null
	,_rawVertexData: null
	,_rawIndices: null
	,_nextVertexIndex: null
	,_currentIndex: null
	,_currentTriangleIndex: null
	,_numVertices: null
	,_vertexStride: null
	,_vertexOffset: null
	,addVertex: function(px,py,pz,nx,ny,nz,tx,ty,tz) {
		var compVertInd = this._vertexOffset + this._nextVertexIndex * this._vertexStride;
		this._rawVertexData.set(compVertInd++,px);
		this._rawVertexData.set(compVertInd++,py);
		this._rawVertexData.set(compVertInd++,pz);
		this._rawVertexData.set(compVertInd++,nx);
		this._rawVertexData.set(compVertInd++,ny);
		this._rawVertexData.set(compVertInd++,nz);
		this._rawVertexData.set(compVertInd++,tx);
		this._rawVertexData.set(compVertInd++,ty);
		this._rawVertexData.set(compVertInd,tz);
		this._nextVertexIndex++;
	}
	,addTriangleClockWise: function(cwVertexIndex0,cwVertexIndex1,cwVertexIndex2) {
		this._rawIndices.set(this._currentIndex++,cwVertexIndex0);
		this._rawIndices.set(this._currentIndex++,cwVertexIndex1);
		this._rawIndices.set(this._currentIndex++,cwVertexIndex2);
		this._currentTriangleIndex++;
	}
	,buildGeometry: function(target) {
		var i = 0;
		var j;
		var x;
		var y;
		var z;
		var nx;
		var ny;
		var nz;
		var revolutionAngleR;
		var revolutionAngleT;
		var numTriangles;
		this._numVertices = 0;
		this._nextVertexIndex = 0;
		this._currentIndex = 0;
		this._currentTriangleIndex = 0;
		this._vertexStride = target.get_vertexStride();
		this._vertexOffset = target.get_vertexOffset();
		this._numVertices = (this._segmentsT + 1) * (this._segmentsR + 1);
		numTriangles = this._segmentsT * this._segmentsR * 2;
		if(this._numVertices == target.get_numVertices()) {
			this._rawVertexData = target.get_vertexData();
			this._rawIndices = target.get_indexData();
			if(this._rawIndices == null) {
				this._rawIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numTriangles * 3,true);
			}
		} else {
			var numVertComponents = this._numVertices * this._vertexStride;
			this._rawVertexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numVertComponents,true);
			this._rawIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,numTriangles * 3,true);
			this.invalidateUVs();
		}
		var revolutionAngleDeltaR = 2 * Math.PI / this._segmentsR;
		var revolutionAngleDeltaT = 2 * Math.PI / this._segmentsT;
		var comp1;
		var comp2;
		var t1;
		var t2;
		var n1;
		var n2;
		var startIndex;
		var a;
		var b;
		var c;
		var d;
		var length;
		var _g1 = 0;
		var _g = this._segmentsT + 1;
		while(_g1 < _g) {
			var j1 = _g1++;
			startIndex = this._vertexOffset + this._nextVertexIndex * this._vertexStride;
			var _g3 = 0;
			var _g2 = this._segmentsR + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				revolutionAngleR = i1 * revolutionAngleDeltaR;
				revolutionAngleT = j1 * revolutionAngleDeltaT;
				length = Math.cos(revolutionAngleT);
				nx = length * Math.cos(revolutionAngleR);
				ny = length * Math.sin(revolutionAngleR);
				nz = Math.sin(revolutionAngleT);
				x = this._radius * Math.cos(revolutionAngleR) + this._tubeRadius * nx;
				y = this._radius * Math.sin(revolutionAngleR) + this._tubeRadius * ny;
				if(j1 == this._segmentsT) {
					z = 0;
				} else {
					z = this._tubeRadius * nz;
				}
				if(this._yUp) {
					n1 = -nz;
					n2 = ny;
					t1 = 0;
					if(length != 0) {
						t2 = nx / length;
					} else {
						t2 = x / this._radius;
					}
					comp1 = -z;
					comp2 = y;
				} else {
					n1 = ny;
					n2 = nz;
					if(length != 0) {
						t1 = nx / length;
					} else {
						t1 = x / this._radius;
					}
					t2 = 0;
					comp1 = y;
					comp2 = z;
				}
				if(i1 == this._segmentsR) {
					this.addVertex(x,this._rawVertexData.get(startIndex + 1),this._rawVertexData.get(startIndex + 2),nx,n1,n2,-(length != 0 ? ny / length : y / this._radius),t1,t2);
				} else {
					this.addVertex(x,comp1,comp2,nx,n1,n2,-(length != 0 ? ny / length : y / this._radius),t1,t2);
				}
				if(i1 > 0 && j1 > 0) {
					a = this._nextVertexIndex - 1;
					b = this._nextVertexIndex - 2;
					c = b - this._segmentsR - 1;
					d = a - this._segmentsR - 1;
					this.addTriangleClockWise(a,b,c);
					this.addTriangleClockWise(a,c,d);
				}
			}
		}
		target.updateData(this._rawVertexData);
		target.updateIndexData(this._rawIndices);
	}
	,buildUVs: function(target) {
		var i;
		var j;
		var data;
		var stride = target.get_UVStride();
		var offset = target.get_UVOffset();
		var skip = target.get_UVStride() - 2;
		var numUvs = this._numVertices * stride;
		if(target.get_UVData() != null && numUvs == target.get_UVData().get_length()) {
			data = target.get_UVData();
		} else {
			data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,numUvs,true);
			this.invalidateGeometry();
		}
		var currentUvCompIndex = offset;
		var _g1 = 0;
		var _g = this._segmentsT + 1;
		while(_g1 < _g) {
			var j1 = _g1++;
			var _g3 = 0;
			var _g2 = this._segmentsR + 1;
			while(_g3 < _g2) {
				var i1 = _g3++;
				data.set(currentUvCompIndex++,i1 / this._segmentsR * target.get_scaleU());
				data.set(currentUvCompIndex++,j1 / this._segmentsT * target.get_scaleV());
				currentUvCompIndex += skip;
			}
		}
		target.updateData(data);
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		this._radius = value;
		this.invalidateGeometry();
		return value;
	}
	,get_tubeRadius: function() {
		return this._tubeRadius;
	}
	,set_tubeRadius: function(value) {
		this._tubeRadius = value;
		this.invalidateGeometry();
		return value;
	}
	,get_segmentsR: function() {
		return this._segmentsR;
	}
	,set_segmentsR: function(value) {
		this._segmentsR = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_segmentsT: function() {
		return this._segmentsT;
	}
	,set_segmentsT: function(value) {
		this._segmentsT = value;
		this.invalidateGeometry();
		this.invalidateUVs();
		return value;
	}
	,get_yUp: function() {
		return this._yUp;
	}
	,set_yUp: function(value) {
		this._yUp = value;
		this.invalidateGeometry();
		return value;
	}
	,__class__: away3d_primitives_TorusGeometry
});
var away3d_primitives_WireframePrimitiveBase = function(color,thickness) {
	if(thickness == null) {
		thickness = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	this._geomDirty = true;
	if(thickness <= 0) {
		thickness = 1;
	}
	this._color = color;
	this._thickness = thickness;
	this.set_mouseEnabled(this.set_mouseChildren(false));
	away3d_entities_SegmentSet.call(this);
};
$hxClasses["away3d.primitives.WireframePrimitiveBase"] = away3d_primitives_WireframePrimitiveBase;
away3d_primitives_WireframePrimitiveBase.__name__ = ["away3d","primitives","WireframePrimitiveBase"];
away3d_primitives_WireframePrimitiveBase.__super__ = away3d_entities_SegmentSet;
away3d_primitives_WireframePrimitiveBase.prototype = $extend(away3d_entities_SegmentSet.prototype,{
	_geomDirty: null
	,_color: null
	,_thickness: null
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		this._color = value;
		var segRef = this._segments.iterator();
		while(segRef.hasNext()) {
			var segRef1 = segRef.next();
			segRef1.segment.set_startColor(segRef1.segment.set_endColor(value));
		}
		return value;
	}
	,get_thickness: function() {
		return this._thickness;
	}
	,set_thickness: function(value) {
		this._thickness = value;
		var segRef = this._segments.iterator();
		while(segRef.hasNext()) {
			var segRef1 = segRef.next();
			segRef1.segment.set_thickness(segRef1.segment.set_thickness(value));
		}
		return value;
	}
	,removeAllSegments: function() {
		away3d_entities_SegmentSet.prototype.removeAllSegments.call(this);
	}
	,get_bounds: function() {
		if(this._geomDirty) {
			this.updateGeometry();
		}
		return away3d_entities_SegmentSet.prototype.get_bounds.call(this);
	}
	,buildGeometry: function() {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,invalidateGeometry: function() {
		this._geomDirty = true;
		this.invalidateBounds();
	}
	,updateGeometry: function() {
		this.buildGeometry();
		this._geomDirty = false;
	}
	,updateOrAddSegment: function(index,v0,v1) {
		var segment;
		var s;
		var e;
		segment = this.getSegment(index);
		if(segment != null) {
			s = segment.get_start();
			e = segment.get_end();
			s.x = v0.x;
			s.y = v0.y;
			s.z = v0.z;
			e.x = v1.x;
			e.y = v1.y;
			e.z = v1.z;
			segment.updateSegment(s,e,null,this._color,this._color,this._thickness);
		} else {
			this.addSegment(new away3d_primitives_LineSegment(v0.clone(),v1.clone(),this._color,this._color,this._thickness));
		}
	}
	,updateMouseChildren: function() {
		this._ancestorsAllowMouseEnabled = false;
	}
	,__class__: away3d_primitives_WireframePrimitiveBase
});
var away3d_primitives_WireframeCube = function(width,height,depth,color,thickness) {
	if(thickness == null) {
		thickness = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(depth == null) {
		depth = 100;
	}
	if(height == null) {
		height = 100;
	}
	if(width == null) {
		width = 100;
	}
	away3d_primitives_WireframePrimitiveBase.call(this,color,thickness);
	this._width = width;
	this._height = height;
	this._depth = depth;
};
$hxClasses["away3d.primitives.WireframeCube"] = away3d_primitives_WireframeCube;
away3d_primitives_WireframeCube.__name__ = ["away3d","primitives","WireframeCube"];
away3d_primitives_WireframeCube.__super__ = away3d_primitives_WireframePrimitiveBase;
away3d_primitives_WireframeCube.prototype = $extend(away3d_primitives_WireframePrimitiveBase.prototype,{
	_width: null
	,_height: null
	,_depth: null
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		this._width = value;
		this.invalidateGeometry();
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(value <= 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Value needs to be greater than 0"));
		}
		this._height = value;
		this.invalidateGeometry();
		return value;
	}
	,get_depth: function() {
		return this._depth;
	}
	,set_depth: function(value) {
		this._depth = value;
		this.invalidateGeometry();
		return value;
	}
	,buildGeometry: function() {
		var v0 = new openfl_geom_Vector3D();
		var v1 = new openfl_geom_Vector3D();
		var hw = this._width * .5;
		var hh = this._height * .5;
		var hd = this._depth * .5;
		v0.x = -hw;
		v0.y = hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(0,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(1,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(2,v0,v1);
		v0.z = -hd;
		v1.z = -hd;
		this.updateOrAddSegment(3,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = hw;
		v1.y = -hh;
		v1.z = -hd;
		this.updateOrAddSegment(4,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(5,v0,v1);
		v0.z = hd;
		v1.z = hd;
		this.updateOrAddSegment(6,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(7,v0,v1);
		v0.x = -hw;
		v0.y = -hh;
		v0.z = -hd;
		v1.x = -hw;
		v1.y = -hh;
		v1.z = hd;
		this.updateOrAddSegment(8,v0,v1);
		v0.y = hh;
		v1.y = hh;
		this.updateOrAddSegment(9,v0,v1);
		v0.x = hw;
		v1.x = hw;
		this.updateOrAddSegment(10,v0,v1);
		v0.y = -hh;
		v1.y = -hh;
		this.updateOrAddSegment(11,v0,v1);
	}
	,__class__: away3d_primitives_WireframeCube
});
var away3d_primitives_WireframeSphere = function(radius,segmentsW,segmentsH,color,thickness) {
	if(thickness == null) {
		thickness = 1;
	}
	if(color == null) {
		color = 16777215;
	}
	if(segmentsH == null) {
		segmentsH = 12;
	}
	if(segmentsW == null) {
		segmentsW = 16;
	}
	if(radius == null) {
		radius = 50;
	}
	away3d_primitives_WireframePrimitiveBase.call(this,color,thickness);
	this._radius = radius;
	this._segmentsW = segmentsW;
	this._segmentsH = segmentsH;
};
$hxClasses["away3d.primitives.WireframeSphere"] = away3d_primitives_WireframeSphere;
away3d_primitives_WireframeSphere.__name__ = ["away3d","primitives","WireframeSphere"];
away3d_primitives_WireframeSphere.__super__ = away3d_primitives_WireframePrimitiveBase;
away3d_primitives_WireframeSphere.prototype = $extend(away3d_primitives_WireframePrimitiveBase.prototype,{
	_segmentsW: null
	,_segmentsH: null
	,_radius: null
	,buildGeometry: function() {
		var vertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var v0 = new openfl_geom_Vector3D();
		var v1 = new openfl_geom_Vector3D();
		var numVerts = 0;
		var index = 0;
		var horangle;
		var z;
		var ringradius;
		var verangle;
		var x;
		var y;
		var _g1 = 0;
		var _g = this._segmentsH + 1;
		while(_g1 < _g) {
			var j = _g1++;
			horangle = Math.PI * j / this._segmentsH;
			z = -this._radius * Math.cos(horangle);
			ringradius = this._radius * Math.sin(horangle);
			var _g3 = 0;
			var _g2 = this._segmentsW + 1;
			while(_g3 < _g2) {
				var i = _g3++;
				verangle = 2 * Math.PI * i / this._segmentsW;
				x = ringradius * Math.cos(verangle);
				y = ringradius * Math.sin(verangle);
				vertices.set(numVerts++,x);
				vertices.set(numVerts++,-z);
				vertices.set(numVerts++,y);
			}
		}
		var a;
		var b;
		var c;
		var d;
		var _g11 = 1;
		var _g4 = this._segmentsH + 1;
		while(_g11 < _g4) {
			var j1 = _g11++;
			var _g31 = 1;
			var _g21 = this._segmentsH + 1;
			while(_g31 < _g21) {
				var i1 = _g31++;
				a = ((this._segmentsW + 1) * j1 + i1) * 3;
				b = ((this._segmentsW + 1) * j1 + i1 - 1) * 3;
				c = ((this._segmentsW + 1) * (j1 - 1) + i1 - 1) * 3;
				d = ((this._segmentsW + 1) * (j1 - 1) + i1) * 3;
				if(j1 == this._segmentsH) {
					v0.x = vertices.get(c);
					v0.y = vertices.get(c + 1);
					v0.z = vertices.get(c + 2);
					v1.x = vertices.get(d);
					v1.y = vertices.get(d + 1);
					v1.z = vertices.get(d + 2);
					this.updateOrAddSegment(index++,v0,v1);
					v0.x = vertices.get(a);
					v0.y = vertices.get(a + 1);
					v0.z = vertices.get(a + 2);
					this.updateOrAddSegment(index++,v0,v1);
				} else if(j1 == 1) {
					v1.x = vertices.get(b);
					v1.y = vertices.get(b + 1);
					v1.z = vertices.get(b + 2);
					v0.x = vertices.get(c);
					v0.y = vertices.get(c + 1);
					v0.z = vertices.get(c + 2);
					this.updateOrAddSegment(index++,v0,v1);
				} else {
					v1.x = vertices.get(b);
					v1.y = vertices.get(b + 1);
					v1.z = vertices.get(b + 2);
					v0.x = vertices.get(c);
					v0.y = vertices.get(c + 1);
					v0.z = vertices.get(c + 2);
					this.updateOrAddSegment(index++,v0,v1);
					v1.x = vertices.get(d);
					v1.y = vertices.get(d + 1);
					v1.z = vertices.get(d + 2);
					this.updateOrAddSegment(index++,v0,v1);
				}
			}
		}
	}
	,__class__: away3d_primitives_WireframeSphere
});
var away3d_textures__$Anisotropy_Anisotropy_$Impl_$ = {};
$hxClasses["away3d.textures._Anisotropy.Anisotropy_Impl_"] = away3d_textures__$Anisotropy_Anisotropy_$Impl_$;
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.__name__ = ["away3d","textures","_Anisotropy","Anisotropy_Impl_"];
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 4;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "none":
		return 0;
	default:
		return null;
	}
};
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "anisotropic16x";
	default:
		return null;
	}
};
var away3d_textures_TextureProxyBase = function() {
	this._hasMipmaps = true;
	this._format = 1;
	this._textures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this._dirty = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	away3d_library_assets_NamedAssetBase.call(this);
};
$hxClasses["away3d.textures.TextureProxyBase"] = away3d_textures_TextureProxyBase;
away3d_textures_TextureProxyBase.__name__ = ["away3d","textures","TextureProxyBase"];
away3d_textures_TextureProxyBase.__interfaces__ = [away3d_library_assets_IAsset];
away3d_textures_TextureProxyBase.__super__ = away3d_library_assets_NamedAssetBase;
away3d_textures_TextureProxyBase.prototype = $extend(away3d_library_assets_NamedAssetBase.prototype,{
	_format: null
	,_hasMipmaps: null
	,_textures: null
	,_dirty: null
	,_width: null
	,_height: null
	,get_hasMipMaps: function() {
		return this._hasMipmaps;
	}
	,get_format: function() {
		return this._format;
	}
	,get_assetType: function() {
		return "texture";
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		return value;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		return value;
	}
	,getTextureForStage3D: function(stage3DProxy) {
		var contextIndex = stage3DProxy._stage3DIndex;
		var tex = this._textures.get(contextIndex);
		var context = stage3DProxy._context3D;
		if(context == null) {
			return null;
		}
		if(tex == null || this._dirty.get(contextIndex) != context) {
			var this1 = this._textures;
			tex = this.createTexture(context);
			this1.set(contextIndex,tex);
			this._dirty.set(contextIndex,context);
			this.uploadContent(tex);
		}
		return tex;
	}
	,uploadContent: function(texture) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,setSize: function(width,height) {
		if(this._width != width || this._height != height) {
			this.invalidateSize();
		}
		this._width = width;
		this._height = height;
	}
	,invalidateContent: function() {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this._dirty.set(i,null);
		}
	}
	,invalidateSize: function() {
		var tex;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			tex = this._textures.get(i);
			if(tex != null) {
				tex.dispose();
				this._textures.set(i,null);
				this._dirty.set(i,null);
			}
		}
	}
	,createTexture: function(context) {
		throw new js__$Boot_HaxeError(new away3d_errors_AbstractMethodError());
	}
	,dispose: function() {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			if(this._textures.get(i) != null) {
				this._textures.get(i).dispose();
			}
		}
	}
	,__class__: away3d_textures_TextureProxyBase
});
var away3d_textures_Texture2DBase = function() {
	away3d_textures_TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.Texture2DBase"] = away3d_textures_Texture2DBase;
away3d_textures_Texture2DBase.__name__ = ["away3d","textures","Texture2DBase"];
away3d_textures_Texture2DBase.__super__ = away3d_textures_TextureProxyBase;
away3d_textures_Texture2DBase.prototype = $extend(away3d_textures_TextureProxyBase.prototype,{
	createTexture: function(context) {
		return context.createTexture(this._width,this._height,1,false);
	}
	,__class__: away3d_textures_Texture2DBase
});
var away3d_textures_BitmapTexture = function(bitmapData,generateMipmaps) {
	if(generateMipmaps == null) {
		generateMipmaps = true;
	}
	away3d_textures_Texture2DBase.call(this);
	this.set_bitmapData(bitmapData);
	this._generateMipmaps = this._hasMipmaps = generateMipmaps;
};
$hxClasses["away3d.textures.BitmapTexture"] = away3d_textures_BitmapTexture;
away3d_textures_BitmapTexture.__name__ = ["away3d","textures","BitmapTexture"];
away3d_textures_BitmapTexture.__super__ = away3d_textures_Texture2DBase;
away3d_textures_BitmapTexture.prototype = $extend(away3d_textures_Texture2DBase.prototype,{
	_bitmapData: null
	,_mipMapHolder: null
	,_generateMipmaps: null
	,get_bitmapData: function() {
		return this._bitmapData;
	}
	,set_bitmapData: function(value) {
		if(value == this._bitmapData) {
			return null;
		}
		if(!away3d_tools_utils_TextureUtils.isBitmapDataValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid bitmapData: Width and height must be power of 2 and cannot exceed 2048"));
		}
		this.invalidateContent();
		this.setSize(value.width,value.height);
		this._bitmapData = value;
		if(this._generateMipmaps) {
			this.getMipMapHolder();
		}
		return value;
	}
	,uploadContent: function(texture) {
		if(this._generateMipmaps) {
			away3d_materials_utils_MipmapGenerator.generateMipMaps(this._bitmapData,texture,this._mipMapHolder,true);
		} else {
			(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).uploadFromBitmapData(this._bitmapData,0);
		}
	}
	,getMipMapHolder: function() {
		var newW;
		var newH;
		newW = this._bitmapData.width;
		newH = this._bitmapData.height;
		if(this._mipMapHolder != null) {
			if(this._mipMapHolder.width == newW && this._bitmapData.height == newH) {
				return;
			}
			this.freeMipMapHolder();
		}
		if(away3d_textures_BitmapTexture._mipMaps[newW] == null) {
			away3d_textures_BitmapTexture._mipMaps[newW] = [];
			away3d_textures_BitmapTexture._mipMapUses[newW] = [];
		}
		if(away3d_textures_BitmapTexture._mipMaps[newW][newH] == null) {
			this._mipMapHolder = away3d_textures_BitmapTexture._mipMaps[newW][newH] = new openfl_display_BitmapData(newW,newH,true);
			away3d_textures_BitmapTexture._mipMapUses[newW][newH] = 1;
		} else {
			away3d_textures_BitmapTexture._mipMapUses[newW][newH] = away3d_textures_BitmapTexture._mipMapUses[newW][newH] + 1;
			this._mipMapHolder = away3d_textures_BitmapTexture._mipMaps[newW][newH];
		}
	}
	,freeMipMapHolder: function() {
		var holderWidth = this._mipMapHolder.width;
		var holderHeight = this._mipMapHolder.height;
		if(--away3d_textures_BitmapTexture._mipMapUses[holderWidth][holderHeight] == 0) {
			away3d_textures_BitmapTexture._mipMaps[holderWidth][holderHeight].dispose();
			away3d_textures_BitmapTexture._mipMaps[holderWidth][holderHeight] = null;
		}
	}
	,dispose: function() {
		away3d_textures_Texture2DBase.prototype.dispose.call(this);
		if(this._mipMapHolder != null) {
			this.freeMipMapHolder();
		}
	}
	,__class__: away3d_textures_BitmapTexture
});
var away3d_textures_CubeTextureBase = function() {
	away3d_textures_TextureProxyBase.call(this);
};
$hxClasses["away3d.textures.CubeTextureBase"] = away3d_textures_CubeTextureBase;
away3d_textures_CubeTextureBase.__name__ = ["away3d","textures","CubeTextureBase"];
away3d_textures_CubeTextureBase.__super__ = away3d_textures_TextureProxyBase;
away3d_textures_CubeTextureBase.prototype = $extend(away3d_textures_TextureProxyBase.prototype,{
	get_size: function() {
		return this._width;
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this.get_width(),1,false);
	}
	,__class__: away3d_textures_CubeTextureBase
});
var away3d_textures_RenderCubeTexture = function(size) {
	away3d_textures_CubeTextureBase.call(this);
	this.setSize(size,size);
};
$hxClasses["away3d.textures.RenderCubeTexture"] = away3d_textures_RenderCubeTexture;
away3d_textures_RenderCubeTexture.__name__ = ["away3d","textures","RenderCubeTexture"];
away3d_textures_RenderCubeTexture.__super__ = away3d_textures_CubeTextureBase;
away3d_textures_RenderCubeTexture.prototype = $extend(away3d_textures_CubeTextureBase.prototype,{
	set_size: function(value) {
		if(value == this._width) {
			return value;
		}
		if(!away3d_tools_utils_TextureUtils.isDimensionValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048"));
		}
		this.invalidateContent();
		this.setSize(value,value);
		return value;
	}
	,uploadContent: function(texture) {
		var bmd = new openfl_display_BitmapData(this._width,this._height,false,0);
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			away3d_materials_utils_MipmapGenerator.generateMipMaps(bmd,texture,null,false,i);
		}
		bmd.dispose();
	}
	,createTexture: function(context) {
		return context.createCubeTexture(this._width,1,true);
	}
	,__class__: away3d_textures_RenderCubeTexture
});
var away3d_textures_RenderTexture = function(width,height) {
	away3d_textures_Texture2DBase.call(this);
	this.setSize(width,height);
};
$hxClasses["away3d.textures.RenderTexture"] = away3d_textures_RenderTexture;
away3d_textures_RenderTexture.__name__ = ["away3d","textures","RenderTexture"];
away3d_textures_RenderTexture.__super__ = away3d_textures_Texture2DBase;
away3d_textures_RenderTexture.prototype = $extend(away3d_textures_Texture2DBase.prototype,{
	set_width: function(value) {
		if(value == this._width) {
			return value;
		}
		if(!away3d_tools_utils_TextureUtils.isDimensionValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048"));
		}
		this.invalidateContent();
		this.setSize(value,this._height);
		return value;
	}
	,set_height: function(value) {
		if(value == this._height) {
			return value;
		}
		if(!away3d_tools_utils_TextureUtils.isDimensionValid(value)) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid size: Width and height must be power of 2 and cannot exceed 2048"));
		}
		this.invalidateContent();
		this.setSize(this._width,value);
		return value;
	}
	,uploadContent: function(texture) {
	}
	,createTexture: function(context) {
		return context.createTexture(this.get_width(),this.get_height(),1,true);
	}
	,__class__: away3d_textures_RenderTexture
});
var away3d_tools_helpers_MeshHelper = function() { };
$hxClasses["away3d.tools.helpers.MeshHelper"] = away3d_tools_helpers_MeshHelper;
away3d_tools_helpers_MeshHelper.__name__ = ["away3d","tools","helpers","MeshHelper"];
away3d_tools_helpers_MeshHelper.boundingRadius = function(mesh) {
	var radius;
	try {
		radius = Math.max((mesh.get_maxX() - mesh.get_minX()) * mesh.get_scaleX(),Math.max((mesh.get_maxY() - mesh.get_minY()) * mesh.get_scaleY(),(mesh.get_maxZ() - mesh.get_minZ()) * mesh.get_scaleZ()));
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
			away3d_tools_utils_Bounds.getMeshBounds(mesh);
			radius = Math.max((away3d_tools_utils_Bounds.get_maxX() - away3d_tools_utils_Bounds.get_minX()) * mesh.get_scaleX(),Math.max((away3d_tools_utils_Bounds.get_maxY() - away3d_tools_utils_Bounds.get_minY()) * mesh.get_scaleY(),(away3d_tools_utils_Bounds.get_maxZ() - away3d_tools_utils_Bounds.get_minZ()) * mesh.get_scaleZ()));
		} else throw(e);
	}
	return radius * .5;
};
away3d_tools_helpers_MeshHelper.boundingRadiusContainer = function(container) {
	away3d_tools_utils_Bounds.getObjectContainerBounds(container);
	var radius = Math.max((away3d_tools_utils_Bounds.get_maxX() - away3d_tools_utils_Bounds.get_minX()) * container.get_scaleX(),Math.max((away3d_tools_utils_Bounds.get_maxY() - away3d_tools_utils_Bounds.get_minY()) * container.get_scaleY(),(away3d_tools_utils_Bounds.get_maxZ() - away3d_tools_utils_Bounds.get_minZ()) * container.get_scaleZ()));
	return radius * .5;
};
away3d_tools_helpers_MeshHelper.recenter = function(mesh,keepPosition) {
	if(keepPosition == null) {
		keepPosition = true;
	}
	away3d_tools_utils_Bounds.getMeshBounds(mesh);
	var dx = (away3d_tools_utils_Bounds.get_minX() + away3d_tools_utils_Bounds.get_maxX()) * .5;
	var dy = (away3d_tools_utils_Bounds.get_minY() + away3d_tools_utils_Bounds.get_maxY()) * .5;
	var dz = (away3d_tools_utils_Bounds.get_minZ() + away3d_tools_utils_Bounds.get_maxZ()) * .5;
	away3d_tools_helpers_MeshHelper.applyPosition(mesh,-dx,-dy,-dz);
	if(!keepPosition) {
		var _g = mesh;
		_g.set_x(_g.get_x() - dx);
		var _g1 = mesh;
		_g1.set_y(_g1.get_y() - dy);
		var _g2 = mesh;
		_g2.set_z(_g2.get_z() - dz);
	}
};
away3d_tools_helpers_MeshHelper.recenterContainer = function(obj,keepPosition) {
	if(keepPosition == null) {
		keepPosition = true;
	}
	var child;
	if(js_Boot.__instanceof(obj,away3d_entities_Mesh) && obj.get_numChildren() == 0) {
		away3d_tools_helpers_MeshHelper.recenter(js_Boot.__cast(obj , away3d_entities_Mesh),keepPosition);
	}
	var _g1 = 0;
	var _g = obj.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		child = obj.getChildAt(i);
		away3d_tools_helpers_MeshHelper.recenterContainer(child,keepPosition);
	}
};
away3d_tools_helpers_MeshHelper.applyRotations = function(mesh) {
	var i;
	var j;
	var len;
	var vStride;
	var vOffs;
	var nStride;
	var nOffs;
	var geometry = mesh.get_geometry();
	var geometries = geometry.get_subGeometries();
	var vertices;
	var normals;
	var numSubGeoms = geometries.get_length();
	var subGeom;
	var t = mesh.get_transform().clone();
	t.appendScale(1 / mesh.get_scaleX(),1 / mesh.get_scaleY(),1 / mesh.get_scaleZ());
	var holder = new openfl_geom_Vector3D();
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i1 = _g1++;
		subGeom = js_Boot.__cast(geometries.get(i1) , away3d_core_base_ISubGeometry);
		vertices = subGeom.get_vertexData();
		vOffs = subGeom.get_vertexOffset();
		vStride = subGeom.get_vertexStride();
		normals = subGeom.get_vertexNormalData();
		nOffs = subGeom.get_vertexNormalOffset();
		nStride = subGeom.get_vertexNormalStride();
		len = subGeom.get_numVertices();
		var _g3 = 0;
		var _g2 = len;
		while(_g3 < _g2) {
			var j1 = _g3++;
			holder.x = vertices.get(vOffs + j1 * vStride + 0);
			holder.y = vertices.get(vOffs + j1 * vStride + 1);
			holder.z = vertices.get(vOffs + j1 * vStride + 2);
			holder = t.deltaTransformVector(holder);
			vertices.set(vOffs + j1 * vStride + 0,holder.x);
			vertices.set(vOffs + j1 * vStride + 1,holder.y);
			vertices.set(vOffs + j1 * vStride + 2,holder.z);
			holder.x = normals.get(nOffs + j1 * nStride + 0);
			holder.y = normals.get(nOffs + j1 * nStride + 1);
			holder.z = normals.get(nOffs + j1 * nStride + 2);
			holder = t.deltaTransformVector(holder);
			holder.normalize();
			normals.set(nOffs + j1 * nStride + 0,holder.x);
			normals.set(nOffs + j1 * nStride + 1,holder.y);
			normals.set(nOffs + j1 * nStride + 2,holder.z);
		}
		if(js_Boot.__instanceof(subGeom,away3d_core_base_CompactSubGeometry)) {
			(js_Boot.__cast(subGeom , away3d_core_base_CompactSubGeometry)).updateData(vertices);
		} else {
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexData(vertices);
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexNormalData(normals);
		}
	}
	mesh.set_rotationX(mesh.set_rotationY(mesh.set_rotationZ(0)));
};
away3d_tools_helpers_MeshHelper.applyRotationsContainer = function(obj) {
	var child;
	if(js_Boot.__instanceof(obj,away3d_entities_Mesh) && obj.get_numChildren() == 0) {
		away3d_tools_helpers_MeshHelper.applyRotations(js_Boot.__cast(obj , away3d_entities_Mesh));
	}
	var _g1 = 0;
	var _g = obj.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		child = obj.getChildAt(i);
		away3d_tools_helpers_MeshHelper.applyRotationsContainer(child);
	}
};
away3d_tools_helpers_MeshHelper.applyScales = function(mesh,scaleX,scaleY,scaleZ,parent) {
	if(scaleX == 1 && scaleY == 1 && scaleZ == 1) {
		return;
	}
	if(mesh.get_animator() != null) {
		mesh.set_scaleX(scaleX);
		mesh.set_scaleY(scaleY);
		mesh.set_scaleZ(scaleZ);
		return;
	}
	var i;
	var j;
	var len;
	var vStride;
	var vOffs;
	var geometry = mesh.get_geometry();
	var geometries = geometry.get_subGeometries();
	var vertices;
	var numSubGeoms = geometries.get_length();
	var subGeom;
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i1 = _g1++;
		subGeom = js_Boot.__cast(geometries.get(i1) , away3d_core_base_ISubGeometry);
		vOffs = subGeom.get_vertexOffset();
		vStride = subGeom.get_vertexStride();
		vertices = subGeom.get_vertexData();
		len = subGeom.get_numVertices();
		var _g3 = 0;
		var _g2 = len;
		while(_g3 < _g2) {
			var j1 = _g3++;
			var _g4 = vOffs + j1 * vStride + 0;
			var _g5 = vertices;
			_g5.set(_g4,_g5.get(_g4) * scaleX);
			var _g41 = vOffs + j1 * vStride + 1;
			var _g51 = vertices;
			_g51.set(_g41,_g51.get(_g41) * scaleY);
			var _g42 = vOffs + j1 * vStride + 2;
			var _g52 = vertices;
			_g52.set(_g42,_g52.get(_g42) * scaleZ);
		}
		if(js_Boot.__instanceof(subGeom,away3d_core_base_CompactSubGeometry)) {
			(js_Boot.__cast(subGeom , away3d_core_base_CompactSubGeometry)).updateData(vertices);
		} else {
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexData(vertices);
		}
	}
	mesh.set_scaleX(mesh.set_scaleY(mesh.set_scaleZ(1)));
	if(parent != null) {
		var _g6 = mesh;
		_g6.set_x(_g6.get_x() * scaleX);
		var _g7 = mesh;
		_g7.set_y(_g7.get_y() * scaleY);
		var _g8 = mesh;
		_g8.set_z(_g8.get_z() * scaleZ);
	}
};
away3d_tools_helpers_MeshHelper.applyScalesContainer = function(obj,scaleX,scaleY,scaleZ,parent) {
	var child;
	if(js_Boot.__instanceof(obj,away3d_entities_Mesh) && obj.get_numChildren() == 0) {
		away3d_tools_helpers_MeshHelper.applyScales(js_Boot.__cast(obj , away3d_entities_Mesh),scaleX,scaleY,scaleZ,obj);
	}
	var _g1 = 0;
	var _g = obj.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		child = obj.getChildAt(i);
		away3d_tools_helpers_MeshHelper.applyScalesContainer(child,scaleX,scaleY,scaleZ,obj);
	}
};
away3d_tools_helpers_MeshHelper.applyPosition = function(mesh,dx,dy,dz) {
	var i;
	var j;
	var len;
	var vStride;
	var vOffs;
	var geometry = mesh.get_geometry();
	var geometries = geometry.get_subGeometries();
	var vertices;
	var numSubGeoms = geometries.get_length();
	var subGeom;
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i1 = _g1++;
		subGeom = js_Boot.__cast(geometries.get(i1) , away3d_core_base_ISubGeometry);
		vOffs = subGeom.get_vertexOffset();
		vStride = subGeom.get_vertexStride();
		vertices = subGeom.get_vertexData();
		len = subGeom.get_numVertices();
		var _g3 = 0;
		var _g2 = len;
		while(_g3 < _g2) {
			var j1 = _g3++;
			var _g4 = vOffs + j1 * vStride + 0;
			var _g5 = vertices;
			_g5.set(_g4,_g5.get(_g4) + dx);
			var _g41 = vOffs + j1 * vStride + 1;
			var _g51 = vertices;
			_g51.set(_g41,_g51.get(_g41) + dy);
			var _g42 = vOffs + j1 * vStride + 2;
			var _g52 = vertices;
			_g52.set(_g42,_g52.get(_g42) + dz);
		}
		if(js_Boot.__instanceof(subGeom,away3d_core_base_CompactSubGeometry)) {
			(js_Boot.__cast(subGeom , away3d_core_base_CompactSubGeometry)).updateData(vertices);
		} else {
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexData(vertices);
		}
	}
	var _g6 = mesh;
	_g6.set_x(_g6.get_x() - dx);
	var _g7 = mesh;
	_g7.set_y(_g7.get_y() - dy);
	var _g8 = mesh;
	_g8.set_z(_g8.get_z() - dz);
};
away3d_tools_helpers_MeshHelper.clone = function(mesh,newName) {
	if(newName == null) {
		newName = "";
	}
	var geometry = mesh.get_geometry().clone();
	var newMesh = new away3d_entities_Mesh(geometry,mesh.get_material());
	newMesh.set_name(newName);
	return newMesh;
};
away3d_tools_helpers_MeshHelper.invertFacesInContainer = function(obj) {
	var child;
	if(js_Boot.__instanceof(obj,away3d_entities_Mesh) && obj.get_numChildren() == 0) {
		away3d_tools_helpers_MeshHelper.invertFaces(js_Boot.__cast(obj , away3d_entities_Mesh));
	}
	var _g1 = 0;
	var _g = obj.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		child = obj.getChildAt(i);
		away3d_tools_helpers_MeshHelper.invertFacesInContainer(child);
	}
};
away3d_tools_helpers_MeshHelper.invertFaces = function(mesh,invertU) {
	if(invertU == null) {
		invertU = false;
	}
	var i;
	var j;
	var len;
	var tStride;
	var tOffs;
	var nStride;
	var nOffs;
	var uStride;
	var uOffs;
	var geometry = mesh.get_geometry();
	var geometries = geometry.get_subGeometries();
	var indices;
	var indicesC;
	var normals;
	var tangents;
	var uvs;
	var numSubGeoms = geometries.get_length();
	var subGeom;
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i1 = _g1++;
		subGeom = js_Boot.__cast(geometries.get(i1) , away3d_core_base_ISubGeometry);
		indices = subGeom.get_indexData();
		indicesC = subGeom.get_indexData().concat(null);
		normals = subGeom.get_vertexNormalData();
		nOffs = subGeom.get_vertexNormalOffset();
		nStride = subGeom.get_vertexNormalStride();
		uvs = subGeom.get_UVData();
		uOffs = subGeom.get_UVOffset();
		uStride = subGeom.get_UVStride();
		len = subGeom.get_numVertices();
		tangents = subGeom.get_vertexTangentData();
		tOffs = subGeom.get_vertexTangentOffset();
		tStride = subGeom.get_vertexTangentStride();
		var m = 0;
		while(m < indices.get_length()) {
			indices.set(m,indicesC.get(m + 2));
			indices.set(m + 1,indicesC.get(m + 1));
			indices.set(m + 2,indicesC.get(m));
			m += 3;
		}
		var _g3 = 0;
		var _g2 = len;
		while(_g3 < _g2) {
			var j1 = _g3++;
			var _g4 = nOffs + j1 * nStride + 0;
			var _g5 = normals;
			_g5.set(_g4,_g5.get(_g4) * -1);
			var _g41 = nOffs + j1 * nStride + 1;
			var _g51 = normals;
			_g51.set(_g41,_g51.get(_g41) * -1);
			var _g42 = nOffs + j1 * nStride + 2;
			var _g52 = normals;
			_g52.set(_g42,_g52.get(_g42) * -1);
			var _g43 = tOffs + j1 * tStride + 0;
			var _g53 = tangents;
			_g53.set(_g43,_g53.get(_g43) * -1);
			var _g44 = tOffs + j1 * tStride + 1;
			var _g54 = tangents;
			_g54.set(_g44,_g54.get(_g44) * -1);
			var _g45 = tOffs + j1 * tStride + 2;
			var _g55 = tangents;
			_g55.set(_g45,_g55.get(_g45) * -1);
			if(invertU) {
				uvs.set(uOffs + j1 * uStride + 0,1 - uvs.get(uOffs + j1 * uStride + 0));
			}
		}
		if(js_Boot.__instanceof(subGeom,away3d_core_base_CompactSubGeometry)) {
			(js_Boot.__cast(subGeom , away3d_core_base_CompactSubGeometry)).updateData(subGeom.get_vertexData());
		} else {
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateIndexData(indices);
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexNormalData(normals);
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateVertexTangentData(tangents);
			(js_Boot.__cast(subGeom , away3d_core_base_SubGeometry)).updateUVData(uvs);
		}
	}
};
away3d_tools_helpers_MeshHelper.build = function(vertices,indices,uvs,name,material,shareVertices,useDefaultMap,useCompactSubGeometry) {
	if(useCompactSubGeometry == null) {
		useCompactSubGeometry = true;
	}
	if(useDefaultMap == null) {
		useDefaultMap = true;
	}
	if(shareVertices == null) {
		shareVertices = true;
	}
	if(name == null) {
		name = "";
	}
	var geometry;
	var m;
	if(useCompactSubGeometry) {
		var subGeoms = away3d_tools_utils_GeomUtil.fromVectors(vertices,indices,uvs,null,null,null,null);
		geometry = new away3d_core_base_Geometry();
		var _g1 = 0;
		var _g = subGeoms.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			subGeoms.get(i).set_autoDeriveVertexNormals(true);
			subGeoms.get(i).set_autoDeriveVertexTangents(true);
			geometry.addSubGeometry(subGeoms.get(i));
		}
		if(material == null) {
			material = away3d_materials_utils_DefaultMaterialManager.getDefaultMaterial();
		} else {
			material = material;
		}
		m = new away3d_entities_Mesh(geometry,material);
		if(name != "") {
			m.set_name(name);
		}
		return m;
	} else {
		var subGeom = new away3d_core_base_SubGeometry();
		subGeom.set_autoDeriveVertexNormals(true);
		subGeom.set_autoDeriveVertexTangents(true);
		geometry = new away3d_core_base_Geometry();
		geometry.addSubGeometry(subGeom);
		if(material == null && useDefaultMap) {
			material = away3d_materials_utils_DefaultMaterialManager.getDefaultMaterial();
		} else {
			material = material;
		}
		m = new away3d_entities_Mesh(geometry,material);
		if(name != "") {
			m.set_name(name);
		}
		var nvertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var nuvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var nindices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var a = [0,1,.5,0,1,1,.5,0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g11 = 0;
		var _g2 = a.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector.set(i1,a[i1]);
		}
		var defaultUVS = vector;
		var uvid = 0;
		var uv = null;
		var ref = null;
		var dShared = null;
		if(shareVertices) {
			dShared = new haxe_ds_StringMap();
			uv = new away3d_core_base_data_UV();
		}
		var uvind;
		var vind;
		var ind;
		var vertex = new away3d_core_base_data_Vertex();
		var _g12 = 0;
		var _g3 = indices.get_length();
		while(_g12 < _g3) {
			var i2 = _g12++;
			ind = indices.get(i2) * 3;
			vertex.set_x(vertices.get(ind));
			vertex.set_y(vertices.get(ind + 1));
			vertex.set_z(vertices.get(ind + 2));
			if(nvertices.get_length() == 196605) {
				subGeom.updateVertexData(nvertices);
				subGeom.updateIndexData(nindices);
				subGeom.updateUVData(nuvs);
				if(shareVertices) {
					dShared = null;
					dShared = new haxe_ds_StringMap();
				}
				subGeom = new away3d_core_base_SubGeometry();
				subGeom.set_autoDeriveVertexNormals(true);
				subGeom.set_autoDeriveVertexTangents(true);
				geometry.addSubGeometry(subGeom);
				uvid = 0;
				nvertices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				nindices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
				nuvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			}
			vind = nvertices.get_length() / 3 | 0;
			uvind = indices.get(i2) * 2;
			if(shareVertices) {
				uv.set_u(uvs.get(uvind));
				uv.set_v(uvs.get(uvind + 1));
				ref = vertex.toString() + uv.toString();
				if(__map_reserved[ref] != null ? dShared.existsReserved(ref) : dShared.h.hasOwnProperty(ref)) {
					nindices.set(nindices.get_length(),__map_reserved[ref] != null ? dShared.getReserved(ref) : dShared.h[ref]);
					continue;
				}
				if(__map_reserved[ref] != null) {
					dShared.setReserved(ref,vind);
				} else {
					dShared.h[ref] = vind;
				}
			}
			nindices.set(nindices.get_length(),vind);
			nvertices.push(vertex.get_x());
			nvertices.push(vertex.get_y());
			nvertices.push(vertex.get_z());
			if(uvs == null || uvind > uvs.get_length() - 2) {
				nuvs.push(defaultUVS.get(uvid));
				nuvs.push(defaultUVS.get(uvid + 1));
				if(_$UInt_UInt_$Impl_$.gt(uvid + 2,3)) {
					uvid = 0;
				} else {
					uvid = uvid + 2;
					uvid = uvid;
				}
			} else {
				nuvs.push(uvs.get(uvind));
				nuvs.push(uvs.get(uvind + 1));
			}
		}
		if(shareVertices) {
			dShared = null;
		}
		subGeom.updateVertexData(nvertices);
		subGeom.updateIndexData(nindices);
		subGeom.updateUVData(nuvs);
		return m;
	}
};
away3d_tools_helpers_MeshHelper.splitMesh = function(mesh,disposeSource) {
	if(disposeSource == null) {
		disposeSource = false;
	}
	var meshes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var geometries = mesh.get_geometry().get_subGeometries();
	var numSubGeoms = geometries.get_length();
	if(numSubGeoms == 1) {
		meshes.push(mesh);
		return meshes;
	}
	if(js_Boot.__instanceof(geometries.get(0),away3d_core_base_CompactSubGeometry)) {
		return away3d_tools_helpers_MeshHelper.splitMeshCsg(mesh,disposeSource);
	}
	var vertices;
	var indices;
	var uvs;
	var normals;
	var tangents;
	var subGeom = null;
	var nGeom = null;
	var nSubGeom = null;
	var nm = null;
	var nMeshMat = null;
	var j = 0;
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i = _g1++;
		if(js_Boot.__instanceof(geometries.get(0),away3d_core_base_SubGeometry)) {
			subGeom = js_Boot.__cast(geometries.get(i) , away3d_core_base_SubGeometry);
		}
		vertices = subGeom.get_vertexData();
		indices = subGeom.get_indexData();
		uvs = subGeom.get_UVData();
		try {
			normals = subGeom.get_vertexNormalData();
			subGeom.set_autoDeriveVertexNormals(false);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				subGeom.set_autoDeriveVertexNormals(true);
				normals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				j = 0;
				while(j < vertices.get_length()) normals.set(j++,0.0);
			} else throw(e);
		}
		try {
			tangents = subGeom.get_vertexTangentData();
			subGeom.set_autoDeriveVertexTangents(false);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,openfl_errors_Error) ) {
				subGeom.set_autoDeriveVertexTangents(true);
				tangents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				j = 0;
				while(j < vertices.get_length()) tangents.set(j++,0.0);
			} else throw(e1);
		}
		vertices.fixed = false;
		indices.fixed = false;
		uvs.fixed = false;
		normals.fixed = false;
		tangents.fixed = false;
		nGeom = new away3d_core_base_Geometry();
		nm = new away3d_entities_Mesh(nGeom,mesh.get_subMeshes().get(i).get_material() != null ? mesh.get_subMeshes().get(i).get_material() : nMeshMat);
		nSubGeom = new away3d_core_base_SubGeometry();
		nSubGeom.updateVertexData(vertices);
		nSubGeom.updateIndexData(indices);
		nSubGeom.updateUVData(uvs);
		nSubGeom.updateVertexNormalData(normals);
		nSubGeom.updateVertexTangentData(tangents);
		nGeom.addSubGeometry(nSubGeom);
		meshes.push(nm);
	}
	if(disposeSource) {
		mesh = null;
	}
	return meshes;
};
away3d_tools_helpers_MeshHelper.splitMeshCsg = function(mesh,disposeSource) {
	if(disposeSource == null) {
		disposeSource = false;
	}
	var meshes = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var geometries = mesh.get_geometry().get_subGeometries();
	var numSubGeoms = geometries.get_length();
	if(numSubGeoms == 1) {
		meshes.push(mesh);
		return meshes;
	}
	var subGeom = null;
	var nGeom = null;
	var nSubGeom = null;
	var nm = null;
	var nMeshMat = null;
	var _g1 = 0;
	var _g = numSubGeoms;
	while(_g1 < _g) {
		var i = _g1++;
		subGeom = js_Boot.__cast(geometries.get(i) , away3d_core_base_CompactSubGeometry);
		nGeom = new away3d_core_base_Geometry();
		nm = new away3d_entities_Mesh(nGeom,mesh.get_subMeshes().get(i).get_material() != null ? mesh.get_subMeshes().get(i).get_material() : nMeshMat);
		nSubGeom = new away3d_core_base_CompactSubGeometry();
		nSubGeom.updateData(subGeom.get_vertexData());
		nSubGeom.updateIndexData(subGeom.get_indexData());
		nGeom.addSubGeometry(nSubGeom);
		meshes.push(nm);
	}
	if(disposeSource) {
		mesh = null;
	}
	return meshes;
};
var away3d_tools_helpers_ParticleGeometryHelper = function() { };
$hxClasses["away3d.tools.helpers.ParticleGeometryHelper"] = away3d_tools_helpers_ParticleGeometryHelper;
away3d_tools_helpers_ParticleGeometryHelper.__name__ = ["away3d","tools","helpers","ParticleGeometryHelper"];
away3d_tools_helpers_ParticleGeometryHelper.generateGeometry = function(geometries,transforms) {
	var verticesVector = openfl__$Vector_Vector_$Impl_$.toNullVector(null);
	var indicesVector = openfl__$Vector_Vector_$Impl_$.toNullVector(null);
	var vertexCounters = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var particles = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var subGeometries = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var numParticles = geometries.get_length();
	var sourceSubGeometries;
	var sourceSubGeometry;
	var numSubGeometries;
	var vertices;
	var indices;
	var vertexCounter;
	var subGeometry;
	var i;
	var j;
	var sub2SubMap = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	var tempVertex = new openfl_geom_Vector3D();
	var tempNormal = new openfl_geom_Vector3D();
	var tempTangents = new openfl_geom_Vector3D();
	var tempUV = new openfl_geom_Point();
	var _g1 = 0;
	var _g = numParticles;
	while(_g1 < _g) {
		var i1 = _g1++;
		sourceSubGeometries = geometries.get(i1).get_subGeometries();
		numSubGeometries = sourceSubGeometries.get_length();
		var _g3 = 0;
		var _g2 = numSubGeometries;
		while(_g3 < _g2) {
			var srcIndex = _g3++;
			if(sub2SubMap.get_length() <= srcIndex) {
				sub2SubMap.push(subGeometries.get_length());
				verticesVector.push(openfl__$Vector_Vector_$Impl_$.toFloatVector(null));
				indicesVector.push(openfl__$Vector_Vector_$Impl_$.toIntVector(null));
				subGeometries.push(new away3d_core_base_CompactSubGeometry());
				vertexCounters.push(0);
			}
			sourceSubGeometry = sourceSubGeometries.get(srcIndex);
			if((_$UInt_UInt_$Impl_$.toFloat(sourceSubGeometry.get_numVertices() + vertexCounters.get(sub2SubMap.get(srcIndex))) | 0) > 65535) {
				sub2SubMap.set(srcIndex,subGeometries.get_length());
				verticesVector.push(openfl__$Vector_Vector_$Impl_$.toFloatVector(null));
				indicesVector.push(openfl__$Vector_Vector_$Impl_$.toIntVector(null));
				subGeometries.push(new away3d_core_base_CompactSubGeometry());
				vertexCounters.push(0);
			}
			j = sub2SubMap.get(srcIndex);
			vertices = verticesVector.get(j);
			indices = indicesVector.get(j);
			vertexCounter = vertexCounters.get(j);
			subGeometry = subGeometries.get(j);
			var particleData = new away3d_core_base_data_ParticleData();
			particleData.numVertices = sourceSubGeometry.get_numVertices();
			particleData.startVertexIndex = vertexCounter;
			particleData.particleIndex = i1;
			particleData.subGeometry = subGeometry;
			particles.push(particleData);
			var _g4 = j;
			var _g5 = vertexCounters;
			_g5.set(_g4,_g5.get(_g4) + sourceSubGeometry.get_numVertices());
			var k;
			var tempLen;
			var compact = js_Boot.__instanceof(sourceSubGeometry,away3d_core_base_CompactSubGeometry) ? sourceSubGeometry : null;
			var product;
			var sourceVertices;
			if(compact != null) {
				tempLen = compact.get_numVertices();
				compact.get_numTriangles();
				sourceVertices = compact.get_vertexData();
				if(transforms != null) {
					var particleGeometryTransform = transforms.get(i1);
					var vertexTransform = particleGeometryTransform.get_vertexTransform();
					var invVertexTransform = particleGeometryTransform.get_invVertexTransform();
					var UVTransform = particleGeometryTransform.get_UVTransform();
					var _g51 = 0;
					var _g41 = tempLen;
					while(_g51 < _g41) {
						var k1 = _g51++;
						product = k1 * 13;
						tempVertex.x = sourceVertices.get(product);
						tempVertex.y = sourceVertices.get(product + 1);
						tempVertex.z = sourceVertices.get(product + 2);
						tempNormal.x = sourceVertices.get(product + 3);
						tempNormal.y = sourceVertices.get(product + 4);
						tempNormal.z = sourceVertices.get(product + 5);
						tempTangents.x = sourceVertices.get(product + 6);
						tempTangents.y = sourceVertices.get(product + 7);
						tempTangents.z = sourceVertices.get(product + 8);
						tempUV.x = sourceVertices.get(product + 9);
						tempUV.y = sourceVertices.get(product + 10);
						if(vertexTransform != null) {
							tempVertex = vertexTransform.transformVector(tempVertex);
							tempNormal = invVertexTransform.deltaTransformVector(tempNormal);
							tempTangents = invVertexTransform.deltaTransformVector(tempNormal);
						}
						if(UVTransform != null) {
							tempUV = UVTransform.transformPoint(tempUV);
						}
						vertices.push(tempVertex.x);
						vertices.push(tempVertex.y);
						vertices.push(tempVertex.z);
						vertices.push(tempNormal.x);
						vertices.push(tempNormal.y);
						vertices.push(tempNormal.z);
						vertices.push(tempTangents.x);
						vertices.push(tempTangents.y);
						vertices.push(tempTangents.z);
						vertices.push(tempUV.x);
						vertices.push(tempUV.y);
						vertices.push(sourceVertices.get(product + 11));
						vertices.push(sourceVertices.get(product + 12));
					}
				} else {
					var _g52 = 0;
					var _g42 = tempLen;
					while(_g52 < _g42) {
						var k2 = _g52++;
						product = k2 * 13;
						vertices.push(sourceVertices.get(product));
						vertices.push(sourceVertices.get(product + 1));
						vertices.push(sourceVertices.get(product + 2));
						vertices.push(sourceVertices.get(product + 3));
						vertices.push(sourceVertices.get(product + 4));
						vertices.push(sourceVertices.get(product + 5));
						vertices.push(sourceVertices.get(product + 6));
						vertices.push(sourceVertices.get(product + 7));
						vertices.push(sourceVertices.get(product + 8));
						vertices.push(sourceVertices.get(product + 9));
						vertices.push(sourceVertices.get(product + 10));
						vertices.push(sourceVertices.get(product + 11));
						vertices.push(sourceVertices.get(product + 12));
					}
				}
			}
			var sourceIndices = sourceSubGeometry.get_indexData();
			tempLen = sourceSubGeometry.get_numTriangles();
			var _g53 = 0;
			var _g43 = tempLen;
			while(_g53 < _g43) {
				var k3 = _g53++;
				product = k3 * 3;
				indices.push(sourceIndices.get(product) + vertexCounter);
				indices.push(sourceIndices.get(product + 1) + vertexCounter);
				indices.push(sourceIndices.get(product + 2) + vertexCounter);
			}
		}
	}
	var particleGeometry = new away3d_core_base_ParticleGeometry();
	particleGeometry.particles = particles;
	particleGeometry.numParticles = numParticles;
	numParticles = subGeometries.get_length();
	var _g11 = 0;
	var _g6 = numParticles;
	while(_g11 < _g6) {
		var i2 = _g11++;
		subGeometry = subGeometries.get(i2);
		subGeometry.updateData(verticesVector.get(i2));
		subGeometry.updateIndexData(indicesVector.get(i2));
		particleGeometry.addSubGeometry(subGeometry);
	}
	return particleGeometry;
};
var away3d_tools_helpers_data_ParticleGeometryTransform = function() {
};
$hxClasses["away3d.tools.helpers.data.ParticleGeometryTransform"] = away3d_tools_helpers_data_ParticleGeometryTransform;
away3d_tools_helpers_data_ParticleGeometryTransform.__name__ = ["away3d","tools","helpers","data","ParticleGeometryTransform"];
away3d_tools_helpers_data_ParticleGeometryTransform.prototype = {
	_defaultVertexTransform: null
	,_defaultInvVertexTransform: null
	,_defaultUVTransform: null
	,set_vertexTransform: function(value) {
		this._defaultVertexTransform = value;
		this._defaultInvVertexTransform = value.clone();
		this._defaultInvVertexTransform.invert();
		this._defaultInvVertexTransform.transpose();
		return value;
	}
	,set_UVTransform: function(value) {
		this._defaultUVTransform = value;
		return value;
	}
	,get_UVTransform: function() {
		return this._defaultUVTransform;
	}
	,get_vertexTransform: function() {
		return this._defaultVertexTransform;
	}
	,get_invVertexTransform: function() {
		return this._defaultInvVertexTransform;
	}
	,__class__: away3d_tools_helpers_data_ParticleGeometryTransform
};
var away3d_tools_utils_Bounds = function() { };
$hxClasses["away3d.tools.utils.Bounds"] = away3d_tools_utils_Bounds;
away3d_tools_utils_Bounds.__name__ = ["away3d","tools","utils","Bounds"];
away3d_tools_utils_Bounds.getMeshBounds = function(mesh) {
	away3d_tools_utils_Bounds.getObjectContainerBounds(mesh);
};
away3d_tools_utils_Bounds.getObjectContainerBounds = function(container,worldBased) {
	if(worldBased == null) {
		worldBased = true;
	}
	away3d_tools_utils_Bounds.reset();
	away3d_tools_utils_Bounds.parseObjectContainerBounds(container);
	if(away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._minX) || away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._minY) || away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._minZ) || away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._maxX) || away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._maxY) || away3d_tools_utils_Bounds.isInfinite(away3d_tools_utils_Bounds._maxZ)) {
		return;
	}
	if(worldBased) {
		var a = [Infinity,Infinity,Infinity,-Infinity,-Infinity,-Infinity];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		var b = vector;
		var c = away3d_tools_utils_Bounds.getBoundsCorners(away3d_tools_utils_Bounds._minX,away3d_tools_utils_Bounds._minY,away3d_tools_utils_Bounds._minZ,away3d_tools_utils_Bounds._maxX,away3d_tools_utils_Bounds._maxY,away3d_tools_utils_Bounds._maxZ);
		away3d_tools_utils_Bounds.transformContainer(b,c,container.get_sceneTransform());
		away3d_tools_utils_Bounds._minX = b.get(0);
		away3d_tools_utils_Bounds._minY = b.get(1);
		away3d_tools_utils_Bounds._minZ = b.get(2);
		away3d_tools_utils_Bounds._maxX = b.get(3);
		away3d_tools_utils_Bounds._maxY = b.get(4);
		away3d_tools_utils_Bounds._maxZ = b.get(5);
	}
};
away3d_tools_utils_Bounds.getVerticesVectorBounds = function(vertices) {
	away3d_tools_utils_Bounds.reset();
	var l = vertices.get_length();
	if(l % 3 != 0) {
		return;
	}
	var x;
	var y;
	var z;
	var i = 0;
	while(i < l) {
		x = vertices.get(i);
		y = vertices.get(i + 1);
		z = vertices.get(i + 2);
		if(x < away3d_tools_utils_Bounds._minX) {
			away3d_tools_utils_Bounds._minX = x;
		}
		if(x > away3d_tools_utils_Bounds._maxX) {
			away3d_tools_utils_Bounds._maxX = x;
		}
		if(y < away3d_tools_utils_Bounds._minY) {
			away3d_tools_utils_Bounds._minY = y;
		}
		if(y > away3d_tools_utils_Bounds._maxY) {
			away3d_tools_utils_Bounds._maxY = y;
		}
		if(z < away3d_tools_utils_Bounds._minZ) {
			away3d_tools_utils_Bounds._minZ = z;
		}
		if(z > away3d_tools_utils_Bounds._maxZ) {
			away3d_tools_utils_Bounds._maxZ = z;
		}
		i += 3;
	}
};
away3d_tools_utils_Bounds.getCenter = function(outCenter) {
	var center = outCenter;
	if(center == null) {
		center = new openfl_geom_Vector3D();
	}
	center.x = away3d_tools_utils_Bounds._minX + (away3d_tools_utils_Bounds._maxX - away3d_tools_utils_Bounds._minX) * .5;
	center.y = away3d_tools_utils_Bounds._minY + (away3d_tools_utils_Bounds._maxY - away3d_tools_utils_Bounds._minY) * .5;
	center.z = away3d_tools_utils_Bounds._minZ + (away3d_tools_utils_Bounds._maxZ - away3d_tools_utils_Bounds._minZ) * .5;
	return center;
};
away3d_tools_utils_Bounds.get_minX = function() {
	return away3d_tools_utils_Bounds._minX;
};
away3d_tools_utils_Bounds.get_minY = function() {
	return away3d_tools_utils_Bounds._minY;
};
away3d_tools_utils_Bounds.get_minZ = function() {
	return away3d_tools_utils_Bounds._minZ;
};
away3d_tools_utils_Bounds.get_maxX = function() {
	return away3d_tools_utils_Bounds._maxX;
};
away3d_tools_utils_Bounds.get_maxY = function() {
	return away3d_tools_utils_Bounds._maxY;
};
away3d_tools_utils_Bounds.get_maxZ = function() {
	return away3d_tools_utils_Bounds._maxZ;
};
away3d_tools_utils_Bounds.get_width = function() {
	return away3d_tools_utils_Bounds._maxX - away3d_tools_utils_Bounds._minX;
};
away3d_tools_utils_Bounds.get_height = function() {
	return away3d_tools_utils_Bounds._maxY - away3d_tools_utils_Bounds._minY;
};
away3d_tools_utils_Bounds.get_depth = function() {
	return away3d_tools_utils_Bounds._maxZ - away3d_tools_utils_Bounds._minZ;
};
away3d_tools_utils_Bounds.reset = function() {
	away3d_tools_utils_Bounds._containers = new haxe_ds_ObjectMap();
	away3d_tools_utils_Bounds._minX = away3d_tools_utils_Bounds._minY = away3d_tools_utils_Bounds._minZ = Infinity;
	away3d_tools_utils_Bounds._maxX = away3d_tools_utils_Bounds._maxY = away3d_tools_utils_Bounds._maxZ = -Infinity;
	away3d_tools_utils_Bounds._defaultPosition.x = 0.0;
	away3d_tools_utils_Bounds._defaultPosition.y = 0.0;
	away3d_tools_utils_Bounds._defaultPosition.z = 0.0;
};
away3d_tools_utils_Bounds.parseObjectContainerBounds = function(obj,parentTransform) {
	if(!obj.get_visible()) {
		return;
	}
	if(away3d_tools_utils_Bounds._containers.h.__keys__[obj.__id__] == null) {
		var this1 = away3d_tools_utils_Bounds._containers;
		var a = [Infinity,Infinity,Infinity,-Infinity,-Infinity,-Infinity];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this1.set(obj,vector);
	}
	var containerBounds = away3d_tools_utils_Bounds._containers.h[obj.__id__];
	var child;
	var isEntity = js_Boot.__instanceof(obj,away3d_entities_Entity) ? obj : null;
	var containerTransform = new openfl_geom_Matrix3D();
	if(isEntity != null && parentTransform != null) {
		away3d_tools_utils_Bounds.parseObjectBounds(obj,parentTransform);
		containerTransform = obj.get_transform().clone();
		if(parentTransform != null) {
			containerTransform.append(parentTransform);
		}
	} else if(isEntity != null && parentTransform == null) {
		var mat = obj.get_transform().clone();
		mat.invert();
		away3d_tools_utils_Bounds.parseObjectBounds(obj,mat);
	}
	var _g11 = 0;
	var _g2 = obj.get_numChildren();
	while(_g11 < _g2) {
		var i1 = _g11++;
		child = obj.getChildAt(i1);
		away3d_tools_utils_Bounds.parseObjectContainerBounds(child,containerTransform);
	}
	var this2 = away3d_tools_utils_Bounds._containers;
	var key = obj.get_parent();
	var parentBounds = this2.h[key.__id__];
	if(isEntity == null && parentTransform != null) {
		away3d_tools_utils_Bounds.parseObjectBounds(obj,parentTransform,true);
	}
	if(parentBounds != null) {
		parentBounds.set(0,Math.min(parentBounds.get(0),containerBounds.get(0)));
		parentBounds.set(1,Math.min(parentBounds.get(1),containerBounds.get(1)));
		parentBounds.set(2,Math.min(parentBounds.get(2),containerBounds.get(2)));
		parentBounds.set(3,Math.max(parentBounds.get(3),containerBounds.get(3)));
		parentBounds.set(4,Math.max(parentBounds.get(4),containerBounds.get(4)));
		parentBounds.set(5,Math.max(parentBounds.get(5),containerBounds.get(5)));
	} else {
		away3d_tools_utils_Bounds._minX = containerBounds.get(0);
		away3d_tools_utils_Bounds._minY = containerBounds.get(1);
		away3d_tools_utils_Bounds._minZ = containerBounds.get(2);
		away3d_tools_utils_Bounds._maxX = containerBounds.get(3);
		away3d_tools_utils_Bounds._maxY = containerBounds.get(4);
		away3d_tools_utils_Bounds._maxZ = containerBounds.get(5);
	}
};
away3d_tools_utils_Bounds.isInfinite = function(value) {
	if(value != Infinity) {
		return value == -Infinity;
	} else {
		return true;
	}
};
away3d_tools_utils_Bounds.parseObjectBounds = function(oC,parentTransform,resetBounds) {
	if(resetBounds == null) {
		resetBounds = false;
	}
	if(js_Boot.__instanceof(oC,away3d_lights_LightBase)) {
		return;
	}
	var e = js_Boot.__instanceof(oC,away3d_entities_Entity) ? oC : null;
	var corners;
	var mat = oC.get_transform().clone();
	var cB = away3d_tools_utils_Bounds._containers.h[oC.__id__];
	if(e != null) {
		if(away3d_tools_utils_Bounds.isInfinite(e.get_minX()) || away3d_tools_utils_Bounds.isInfinite(e.get_minY()) || away3d_tools_utils_Bounds.isInfinite(e.get_minZ()) || away3d_tools_utils_Bounds.isInfinite(e.get_maxX()) || away3d_tools_utils_Bounds.isInfinite(e.get_maxY()) || away3d_tools_utils_Bounds.isInfinite(e.get_maxZ())) {
			return;
		}
		corners = away3d_tools_utils_Bounds.getBoundsCorners(e.get_minX(),e.get_minY(),e.get_minZ(),e.get_maxX(),e.get_maxY(),e.get_maxZ());
		if(parentTransform != null) {
			mat.append(parentTransform);
		}
	} else {
		corners = away3d_tools_utils_Bounds.getBoundsCorners(cB.get(0),cB.get(1),cB.get(2),cB.get(3),cB.get(4),cB.get(5));
		if(parentTransform != null) {
			mat.prepend(parentTransform);
		}
	}
	if(resetBounds) {
		cB.set(0,cB.set(1,cB.set(2,Infinity)));
		cB.set(3,cB.set(4,cB.set(5,-Infinity)));
	}
	away3d_tools_utils_Bounds.transformContainer(cB,corners,mat);
};
away3d_tools_utils_Bounds.getBoundsCorners = function(minX,minY,minZ,maxX,maxY,maxZ) {
	var a = [minX,minY,minZ,minX,minY,maxZ,minX,maxY,minZ,minX,maxY,maxZ,maxX,minY,minZ,maxX,minY,maxZ,maxX,maxY,minZ,maxX,maxY,maxZ];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
away3d_tools_utils_Bounds.transformContainer = function(bounds,corners,matrix) {
	matrix.transformVectors(corners,corners);
	var x;
	var y;
	var z;
	var pCtr = 0;
	while(pCtr < corners.get_length()) {
		x = corners.get(pCtr++);
		y = corners.get(pCtr++);
		z = corners.get(pCtr++);
		if(x < bounds.get(0)) {
			bounds.set(0,x);
		}
		if(x > bounds.get(3)) {
			bounds.set(3,x);
		}
		if(y < bounds.get(1)) {
			bounds.set(1,y);
		}
		if(y > bounds.get(4)) {
			bounds.set(4,y);
		}
		if(z < bounds.get(2)) {
			bounds.set(2,z);
		}
		if(z > bounds.get(5)) {
			bounds.set(5,z);
		}
	}
};
var away3d_tools_utils_GeomUtil = function() { };
$hxClasses["away3d.tools.utils.GeomUtil"] = away3d_tools_utils_GeomUtil;
away3d_tools_utils_GeomUtil.__name__ = ["away3d","tools","utils","GeomUtil"];
away3d_tools_utils_GeomUtil.fromVectors = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	if(triangleOffset == null) {
		triangleOffset = 0;
	}
	var subs = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	if(uvs != null && uvs.get_length() == 0) {
		uvs = null;
	}
	if(normals != null && normals.get_length() == 0) {
		normals = null;
	}
	if(tangents != null && tangents.get_length() == 0) {
		tangents = null;
	}
	if(weights != null && weights.get_length() == 0) {
		weights = null;
	}
	if(jointIndices != null && jointIndices.get_length() == 0) {
		jointIndices = null;
	}
	if(indices.get_length() >= 983025 || verts.get_length() >= 196605) {
		var i = 0;
		var len;
		var outIndex;
		var j;
		var splitVerts = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var splitIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		var splitUvs = uvs != null ? openfl__$Vector_Vector_$Impl_$.toFloatVector(null) : null;
		var splitNormals = normals != null ? openfl__$Vector_Vector_$Impl_$.toFloatVector(null) : null;
		var splitTangents = tangents != null ? openfl__$Vector_Vector_$Impl_$.toFloatVector(null) : null;
		var splitWeights = weights != null ? openfl__$Vector_Vector_$Impl_$.toFloatVector(null) : null;
		var splitJointIndices = jointIndices != null ? openfl__$Vector_Vector_$Impl_$.toFloatVector(null) : null;
		var mappings = openfl__$Vector_Vector_$Impl_$.toIntVector(null,verts.get_length() / 3 | 0,true);
		i = mappings.get_length();
		while(i-- > 0) mappings.set(i,-1);
		var originalIndex;
		var splitIndex;
		var o0;
		var o1;
		var o2;
		var s0;
		var s1;
		var s2;
		var su;
		var ou;
		var sv;
		var ov;
		outIndex = 0;
		len = indices.get_length();
		i = 0;
		while(i < len) {
			splitIndex = splitVerts.get_length() + 6;
			if(outIndex + 2 >= 983025 || splitIndex >= 196605) {
				subs.push(away3d_tools_utils_GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset));
				splitVerts = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				splitIndices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
				if(uvs != null) {
					splitUvs = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				} else {
					splitUvs = null;
				}
				if(normals != null) {
					splitNormals = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				} else {
					splitNormals = null;
				}
				if(tangents != null) {
					splitTangents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				} else {
					splitTangents = null;
				}
				if(weights != null) {
					splitWeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				} else {
					splitWeights = null;
				}
				if(jointIndices != null) {
					splitJointIndices = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				} else {
					splitJointIndices = null;
				}
				splitIndex = 0;
				j = mappings.get_length();
				while(j-- > 0) mappings.set(j,-1);
				outIndex = 0;
			}
			var _g = 0;
			while(_g < 3) {
				var j1 = _g++;
				originalIndex = indices.get(i + j1);
				if(mappings.get(originalIndex) >= 0) {
					splitIndex = mappings.get(originalIndex);
				} else {
					o0 = originalIndex * 3;
					o1 = originalIndex * 3 + 1;
					o2 = originalIndex * 3 + 2;
					splitIndex = splitVerts.get_length() / 3 | 0;
					s0 = splitIndex * 3;
					s1 = splitIndex * 3 + 1;
					s2 = splitIndex * 3 + 2;
					splitVerts.set(s0,verts.get(o0));
					splitVerts.set(s1,verts.get(o1));
					splitVerts.set(s2,verts.get(o2));
					if(uvs != null) {
						su = splitIndex * 2;
						sv = splitIndex * 2 + 1;
						ou = originalIndex * 2;
						ov = originalIndex * 2 + 1;
						splitUvs.set(su,uvs.get(ou));
						splitUvs.set(sv,uvs.get(ov));
					}
					if(normals != null) {
						splitNormals.set(s0,normals.get(o0));
						splitNormals.set(s1,normals.get(o1));
						splitNormals.set(s2,normals.get(o2));
					}
					if(tangents != null) {
						splitTangents.set(s0,tangents.get(o0));
						splitTangents.set(s1,tangents.get(o1));
						splitTangents.set(s2,tangents.get(o2));
					}
					if(weights != null) {
						splitWeights.set(s0,weights.get(o0));
						splitWeights.set(s1,weights.get(o1));
						splitWeights.set(s2,weights.get(o2));
					}
					if(jointIndices != null) {
						splitJointIndices.set(s0,jointIndices.get(o0));
						splitJointIndices.set(s1,jointIndices.get(o1));
						splitJointIndices.set(s2,jointIndices.get(o2));
					}
					mappings.set(originalIndex,splitIndex);
				}
				splitIndices.set(outIndex + j1,splitIndex);
			}
			outIndex += 3;
			i += 3;
		}
		if(splitVerts.get_length() > 0) {
			subs.push(away3d_tools_utils_GeomUtil.constructSubGeometry(splitVerts,splitIndices,splitUvs,splitNormals,splitTangents,splitWeights,splitJointIndices,triangleOffset));
		}
	} else {
		subs.push(away3d_tools_utils_GeomUtil.constructSubGeometry(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset));
	}
	return subs;
};
away3d_tools_utils_GeomUtil.constructSubGeometry = function(verts,indices,uvs,normals,tangents,weights,jointIndices,triangleOffset) {
	var sub;
	if(weights != null && jointIndices != null) {
		sub = new away3d_core_base_SkinnedSubGeometry(weights.get_length() / (verts.get_length() / 3) | 0);
		(js_Boot.__cast(sub , away3d_core_base_SkinnedSubGeometry)).updateJointWeightsData(weights);
		(js_Boot.__cast(sub , away3d_core_base_SkinnedSubGeometry)).updateJointIndexData(jointIndices);
	} else {
		sub = new away3d_core_base_CompactSubGeometry();
	}
	sub.updateIndexData(indices);
	sub.fromVectors(verts,uvs,normals,tangents);
	return sub;
};
away3d_tools_utils_GeomUtil.interleaveBuffers = function(numVertices,vertices,normals,tangents,uvs,suvs) {
	var i = 0;
	var compIndex;
	var uvCompIndex;
	var interleavedCompIndex;
	var interleavedBuffer = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = numVertices;
	while(_g1 < _g) {
		var i1 = _g1++;
		uvCompIndex = i1 * 2;
		compIndex = i1 * 3;
		interleavedCompIndex = i1 * 13;
		interleavedBuffer.set(interleavedCompIndex,vertices != null ? vertices.get(compIndex) : 0);
		interleavedBuffer.set(interleavedCompIndex + 1,vertices != null ? vertices.get(compIndex + 1) : 0);
		interleavedBuffer.set(interleavedCompIndex + 2,vertices != null ? vertices.get(compIndex + 2) : 0);
		interleavedBuffer.set(interleavedCompIndex + 3,normals != null ? normals.get(compIndex) : 0);
		interleavedBuffer.set(interleavedCompIndex + 4,normals != null ? normals.get(compIndex + 1) : 0);
		interleavedBuffer.set(interleavedCompIndex + 5,normals != null ? normals.get(compIndex + 2) : 0);
		interleavedBuffer.set(interleavedCompIndex + 6,tangents != null ? tangents.get(compIndex) : 0);
		interleavedBuffer.set(interleavedCompIndex + 7,tangents != null ? tangents.get(compIndex + 1) : 0);
		interleavedBuffer.set(interleavedCompIndex + 8,tangents != null ? tangents.get(compIndex + 2) : 0);
		interleavedBuffer.set(interleavedCompIndex + 9,uvs != null ? uvs.get(uvCompIndex) : 0);
		interleavedBuffer.set(interleavedCompIndex + 10,uvs != null ? uvs.get(uvCompIndex + 1) : 0);
		interleavedBuffer.set(interleavedCompIndex + 11,suvs != null ? suvs.get(uvCompIndex) : 0);
		interleavedBuffer.set(interleavedCompIndex + 12,suvs != null ? suvs.get(uvCompIndex + 1) : 0);
	}
	return interleavedBuffer;
};
away3d_tools_utils_GeomUtil.getMeshSubgeometryIndex = function(subGeometry) {
	var index = 0;
	var subGeometries = subGeometry.get_parentGeometry().get_subGeometries();
	var _g1 = 0;
	var _g = subGeometries.get_length();
	while(_g1 < _g) {
		var i = _g1++;
		if(subGeometries.get(i) == subGeometry) {
			index = i;
			break;
		}
	}
	return index;
};
away3d_tools_utils_GeomUtil.getMeshSubMeshIndex = function(subMesh) {
	var index = 0;
	var subMeshes = subMesh.get_parentMesh().get_subMeshes();
	var _g1 = 0;
	var _g = subMeshes.get_length();
	while(_g1 < _g) {
		var i = _g1++;
		if(subMeshes.get(i) == subMesh) {
			index = i;
			break;
		}
	}
	return index;
};
var away3d_tools_utils_TextureUtils = function() { };
$hxClasses["away3d.tools.utils.TextureUtils"] = away3d_tools_utils_TextureUtils;
away3d_tools_utils_TextureUtils.__name__ = ["away3d","tools","utils","TextureUtils"];
away3d_tools_utils_TextureUtils.isBitmapDataValid = function(bitmapData) {
	if(bitmapData == null) {
		return true;
	}
	if(away3d_tools_utils_TextureUtils.isDimensionValid(bitmapData.width)) {
		return away3d_tools_utils_TextureUtils.isDimensionValid(bitmapData.height);
	} else {
		return false;
	}
};
away3d_tools_utils_TextureUtils.isDimensionValid = function(d) {
	if(d >= 1 && d <= 4096) {
		return away3d_tools_utils_TextureUtils.isPowerOfTwo(d);
	} else {
		return false;
	}
};
away3d_tools_utils_TextureUtils.isPowerOfTwo = function(value) {
	if(value > 0) {
		return (value & -value) == value;
	} else {
		return false;
	}
};
away3d_tools_utils_TextureUtils.getBestPowerOf2 = function(value) {
	var p = 1;
	while(p < value) p <<= 1;
	if(p > 4096) {
		p = 4096;
	}
	return p;
};
var com_watabou_coogee_Scene = function() {
	this.rHeight = 0.0;
	this.rWidth = 0.0;
	this.update = new msignal_Signal1();
	this.keyEvent = new msignal_Signal2();
	openfl_display_Sprite.call(this);
};
$hxClasses["com.watabou.coogee.Scene"] = com_watabou_coogee_Scene;
com_watabou_coogee_Scene.__name__ = ["com","watabou","coogee","Scene"];
com_watabou_coogee_Scene.__super__ = openfl_display_Sprite;
com_watabou_coogee_Scene.prototype = $extend(openfl_display_Sprite.prototype,{
	keyEvent: null
	,update: null
	,rWidth: null
	,rHeight: null
	,activate: function() {
		com_watabou_utils_Updater.get_tick().add($bind(this,this.onUpdate));
		this.stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
		this.stage.addEventListener("keyUp",$bind(this,this.onKeyUp));
	}
	,deactivate: function() {
		com_watabou_utils_Updater.get_tick().remove($bind(this,this.onUpdate));
		this.stage.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		this.stage.removeEventListener("keyUp",$bind(this,this.onKeyUp));
	}
	,onEsc: function() {
		com_watabou_coogee_Game.quit();
	}
	,onKeyDown: function(e) {
		var _g = e.keyCode;
		if(_g == 27) {
			this.onEsc();
		}
		this.keyEvent.dispatch(e.keyCode,true);
		e.preventDefault();
	}
	,onKeyUp: function(e) {
		this.keyEvent.dispatch(e.keyCode,false);
		e.preventDefault();
	}
	,setSize: function(w,h) {
		this.rWidth = w;
		this.rHeight = h;
		this.layout();
	}
	,getWidth: function() {
		return this.rWidth;
	}
	,getHeight: function() {
		return this.rHeight;
	}
	,layout: function() {
	}
	,onUpdate: function(elapsed) {
		this.update.dispatch(elapsed);
	}
	,shake: function(time,ax,ay) {
		if(ay == null) {
			ay = -1;
		}
		if(ax == null) {
			ax = 2;
		}
		if(time == null) {
			time = 1;
		}
		var _gthis = this;
		if(ay == -1) {
			ay = ax;
		}
		com_watabou_processes_Tweener.run(time,function(elapsed) {
			var tmp = (1 - elapsed) * (Math.random() - 0.5) * _gthis.get_scaleX() * ax | 0;
			_gthis.set_x(tmp);
			var tmp1 = (1 - elapsed) * (Math.random() - 0.5) * _gthis.get_scaleY() * ay | 0;
			_gthis.set_y(tmp1);
		});
	}
	,__class__: com_watabou_coogee_Scene
});
var com_watabou_geom_Color = function() { };
$hxClasses["com.watabou.geom.Color"] = com_watabou_geom_Color;
com_watabou_geom_Color.__name__ = ["com","watabou","geom","Color"];
com_watabou_geom_Color.rgb = function(r,g,b) {
	return r << 16 | g << 8 | b;
};
com_watabou_geom_Color.rgbf = function(r,g,b) {
	return (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
};
com_watabou_geom_Color.rgbfSafe = function(r,g,b) {
	return (com_watabou_utils_MathUtils.gate(r * 255,0,255) | 0) << 16 | (com_watabou_utils_MathUtils.gate(g * 255,0,255) | 0) << 8 | (com_watabou_utils_MathUtils.gate(b * 255,0,255) | 0);
};
com_watabou_geom_Color.red = function(c) {
	return c >>> 16;
};
com_watabou_geom_Color.green = function(c) {
	return c >>> 8 & 255;
};
com_watabou_geom_Color.blue = function(c) {
	return c & 255;
};
com_watabou_geom_Color.redf = function(c) {
	return _$UInt_UInt_$Impl_$.toFloat(c >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255);
};
com_watabou_geom_Color.greenf = function(c) {
	return _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
com_watabou_geom_Color.bluef = function(c) {
	return _$UInt_UInt_$Impl_$.toFloat(c & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
};
com_watabou_geom_Color.lerp = function(c1,c2,t1) {
	if(t1 == null) {
		t1 = 0.5;
	}
	var r1 = c1 >>> 16;
	var g1 = c1 >>> 8 & 255;
	var b1 = c1 & 255;
	var r2 = c2 >>> 16;
	var g2 = c2 >>> 8 & 255;
	var b2 = c2 & 255;
	var t2 = 1 - t1;
	return (_$UInt_UInt_$Impl_$.toFloat(r1) * t2 + _$UInt_UInt_$Impl_$.toFloat(r2) * t1 | 0) << 16 | (_$UInt_UInt_$Impl_$.toFloat(g1) * t2 + _$UInt_UInt_$Impl_$.toFloat(g2) * t1 | 0) << 8 | (_$UInt_UInt_$Impl_$.toFloat(b1) * t2 + _$UInt_UInt_$Impl_$.toFloat(b2) * t1 | 0);
};
com_watabou_geom_Color.lerpHSV = function(c1,c2,t1) {
	if(t1 == null) {
		t1 = 0.5;
	}
	var hsv1 = com_watabou_geom_Color.rgb2hsv(c1);
	var hsv2 = com_watabou_geom_Color.rgb2hsv(c2);
	var hue = hsv1.y == 0 ? hsv2.x : hsv2.y == 0 ? hsv1.x : com_watabou_geom_Color.lerpHue(hsv1.x,hsv2.x,t1);
	var t2 = 1 - t1;
	return com_watabou_geom_Color.hsv(hue,hsv1.y * t2 + hsv2.y * t1,hsv1.z * t2 + hsv2.z * t1);
};
com_watabou_geom_Color.lerpHue = function(h1,h2,ratio) {
	if(ratio == null) {
		ratio = 0.5;
	}
	h1 -= 360 * Math.floor(h1 / 360);
	h2 -= 360 * Math.floor(h1 / 360);
	if(h1 > h2) {
		var h = h1;
		h1 = h2;
		h2 = h;
		ratio = 1 - ratio;
	}
	if(h2 - h1 > 180) {
		h2 -= 360;
	}
	return h1 * (1 - ratio) + h2 * ratio;
};
com_watabou_geom_Color.gradient = function(c1,c2,size) {
	if(size == null) {
		size = 256;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = size;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(com_watabou_geom_Color.lerpHSV(c1,c2,i / (size - 1)));
	}
	return _g;
};
com_watabou_geom_Color.scale = function(c,t) {
	return com_watabou_geom_Color.rgbfSafe(_$UInt_UInt_$Impl_$.toFloat(c >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255) * t,_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * t,_$UInt_UInt_$Impl_$.toFloat(c & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * t);
};
com_watabou_geom_Color.multiply = function(c1,c2) {
	return com_watabou_geom_Color.rgbf(_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255)),_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(c2 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)),_$UInt_UInt_$Impl_$.toFloat(c1 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) * (_$UInt_UInt_$Impl_$.toFloat(c2 & 255) / _$UInt_UInt_$Impl_$.toFloat(255)));
};
com_watabou_geom_Color.add = function(c1,c2) {
	return com_watabou_geom_Color.rgbfSafe(_$UInt_UInt_$Impl_$.toFloat(c1 >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255) + _$UInt_UInt_$Impl_$.toFloat(c2 >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255),_$UInt_UInt_$Impl_$.toFloat(c1 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) + _$UInt_UInt_$Impl_$.toFloat(c2 >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255),_$UInt_UInt_$Impl_$.toFloat(c1 & 255) / _$UInt_UInt_$Impl_$.toFloat(255) + _$UInt_UInt_$Impl_$.toFloat(c2 & 255) / _$UInt_UInt_$Impl_$.toFloat(255));
};
com_watabou_geom_Color.hsv = function(h,s,v) {
	var level = function(h1) {
		h1 -= 360 * Math.floor(h1 / 360);
		return com_watabou_utils_MathUtils.gate(Math.abs(h1 / 60 - 3) - 1,0,1);
	};
	var r = level(h);
	var g = level(h - 120);
	var b = level(h + 120);
	r = (r * s + 1 - s) * v;
	g = (g * s + 1 - s) * v;
	b = (b * s + 1 - s) * v;
	return com_watabou_geom_Color.rgbf(r,g,b);
};
com_watabou_geom_Color.rgb2hsv = function(c) {
	var r = _$UInt_UInt_$Impl_$.toFloat(c >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255);
	var g = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
	var b = _$UInt_UInt_$Impl_$.toFloat(c & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
	var min = Math.min(r,Math.min(g,b));
	var max = Math.max(r,Math.max(g,b));
	if(min == max) {
		return new openfl_geom_Vector3D(0,0,min);
	}
	var d = r == min ? g - b : b == min ? r - g : b - r;
	var h = r == min ? 3 : b == min ? 1 : 5;
	return new openfl_geom_Vector3D(60 * (h - d / (max - min)),(max - min) / max,max);
};
com_watabou_geom_Color.brightness = function(c) {
	var r = _$UInt_UInt_$Impl_$.toFloat(c >>> 16) / _$UInt_UInt_$Impl_$.toFloat(255);
	var g = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
	var b = _$UInt_UInt_$Impl_$.toFloat(c & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
	return Math.sqrt(0.299 * r * r + 0.587 * g * g + 0.114 * b * b);
};
com_watabou_geom_Color.hex = function(c) {
	return StringTools.hex(c,6);
};
var com_watabou_geom_GeomUtils = function() { };
$hxClasses["com.watabou.geom.GeomUtils"] = com_watabou_geom_GeomUtils;
com_watabou_geom_GeomUtils.__name__ = ["com","watabou","geom","GeomUtils"];
com_watabou_geom_GeomUtils.intersectLines = function(x1,y1,dx1,dy1,x2,y2,dx2,dy2) {
	var d = dx1 * dy2 - dy1 * dx2;
	if(d == 0) {
		return null;
	}
	var t2 = (dy1 * (x2 - x1) - dx1 * (y2 - y1)) / d;
	var t1 = Math.abs(dx1) > Math.abs(dy1) ? (x2 - x1 + dx2 * t2) / dx1 : (y2 - y1 + dy2 * t2) / dy1;
	return new openfl_geom_Point(t1,t2);
};
com_watabou_geom_GeomUtils.intersectSegments = function(x1,y1,dx1,dy1,x2,y2,dx2,dy2) {
	var t = com_watabou_geom_GeomUtils.intersectLines(x1,y1,dx1,dy1,x2,y2,dx2,dy2);
	if(t.x >= 0 && t.x <= 1 && t.y >= 0) {
		return t.y <= 1;
	} else {
		return false;
	}
};
com_watabou_geom_GeomUtils.lerp = function(p1,p2,ratio) {
	if(ratio == null) {
		ratio = 0.5;
	}
	var d = p2.subtract(p1);
	return new openfl_geom_Point(p1.x + d.x * ratio,p1.y + d.y * ratio);
};
com_watabou_geom_GeomUtils.scalar = function(x1,y1,x2,y2) {
	return x1 * x2 + y1 * y2;
};
com_watabou_geom_GeomUtils.cross = function(x1,y1,x2,y2) {
	return x1 * y2 - y1 * x2;
};
com_watabou_geom_GeomUtils.distance2line = function(x1,y1,dx1,dy1,x0,y0) {
	return (dx1 * y0 - dy1 * x0 + (y1 + dy1) * x1 - (x1 + dx1) * y1) / Math.sqrt(dx1 * dx1 + dy1 * dy1);
};
com_watabou_geom_GeomUtils.converge = function(p0,p1,q0,q1) {
	var dxp = p1.x - p0.x;
	var dyp = p1.y - p0.y;
	var z = p1.x * p0.y - p1.y * p0.x;
	if(Math.abs(dxp * q0.y - dyp * q0.x - z) < 1.e-9) {
		return Math.abs(dxp * q1.y - dyp * q1.x - z) < 1.e-9;
	} else {
		return false;
	}
};
com_watabou_geom_GeomUtils.pointInsideTriangle = function(a,b,c,s) {
	var asX = s.x - a.x;
	var asY = s.y - a.y;
	var bsX = s.x - b.x;
	var bsY = s.y - b.y;
	var s_ab = (b.x - a.x) * asY - (b.y - a.y) * asX >= 0;
	if((c.x - a.x) * asY - (c.y - a.y) * asX >= 0 == s_ab) {
		return false;
	}
	if((c.x - b.x) * bsY - (c.y - b.y) * bsX >= 0 != s_ab) {
		return false;
	}
	return true;
};
com_watabou_geom_GeomUtils.barycentric = function(p1,p2,p3,f) {
	var f1 = p1.subtract(f);
	var f2 = p2.subtract(f);
	var f3 = p3.subtract(f);
	var a = (p1.x - p2.x) * (p1.y - p3.y) - (p1.y - p2.y) * (p1.x - p3.x);
	var a1 = f2.x * f3.y - f2.y * f3.x;
	var a2 = f3.x * f1.y - f3.y * f1.x;
	var a3 = f1.x * f2.y - f1.y * f2.x;
	return new openfl_geom_Vector3D(a1 / a,a2 / a,a3 / a);
};
com_watabou_geom_GeomUtils.pointInSector = function(a,b,c,p) {
	var v1 = b.subtract(a);
	var v2 = c.subtract(b);
	var cross = v1.x * v2.y - v1.y * v2.x;
	var sign1 = p.x * v1.y - p.y * v1.x - (a.x * b.y - b.x * a.y);
	if(sign1 * cross > 0) {
		return sign1;
	} else {
		var sign2 = p.x * v2.y - p.y * v2.x - (b.x * c.y - c.x * b.y);
		return p.x * v2.y - p.y * v2.x - (b.x * c.y - c.x * b.y);
	}
};
var com_watabou_geom__$Polygon_Polygon_$Impl_$ = {};
$hxClasses["com.watabou.geom._Polygon.Polygon_Impl_"] = com_watabou_geom__$Polygon_Polygon_$Impl_$;
com_watabou_geom__$Polygon_Polygon_$Impl_$.__name__ = ["com","watabou","geom","_Polygon","Polygon_Impl_"];
com_watabou_geom__$Polygon_Polygon_$Impl_$._new = function(vertices) {
	var this1 = vertices != null ? vertices.slice() : [];
	return this1;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.clone = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var v = this1[_g1];
		++_g1;
		_g.push(v.clone());
	}
	return _g;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.set = function(this1,p) {
	var _g1 = 0;
	var _g = p.length;
	while(_g1 < _g) {
		var i = _g1++;
		com_watabou_utils_PointExtender.set(this1[i],p[i]);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.replace = function(this1,p) {
	this1.splice(0,this1.length);
	var v = HxOverrides.iter(p);
	while(v.hasNext()) {
		var v1 = v.next();
		this1.push(v1);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area = function(this1) {
	var v1 = this1[this1.length - 1];
	var v2 = this1[0];
	var s = v1.x * v2.y - v2.x * v1.y;
	var _g1 = 1;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		v1 = v2;
		v2 = this1[i];
		s += v1.x * v2.y - v2.x * v1.y;
	}
	return s * 0.5;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.get_perimeter = function(this1) {
	var len = 0.0;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		len += openfl_geom_Point.distance(this1[i],this1[(i + 1) % this1.length]);
	}
	return len;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.get_compactness = function(this1) {
	var p = com_watabou_geom__$Polygon_Polygon_$Impl_$.get_perimeter(this1);
	return 4 * Math.PI * com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area(this1) / (p * p);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.get_center = function(this1) {
	var c = new openfl_geom_Point();
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		com_watabou_utils_PointExtender.addEq(c,v);
	}
	com_watabou_utils_PointExtender.scaleEq(c,1 / this1.length);
	return c;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.get_centroid = function(this1) {
	var x = 0.0;
	var y = 0.0;
	var a = 0.0;
	com_watabou_geom__$Polygon_Polygon_$Impl_$.forEdge(this1,function(v0,v1) {
		var f = v0.x * v1.y - v0.y * v1.x;
		a += f;
		x += (v0.x + v1.x) * f;
		y += (v0.y + v1.y) * f;
	});
	var s6 = 1 / (3 * a);
	return new openfl_geom_Point(s6 * x,s6 * y);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.contains = function(this1,v) {
	return this1.indexOf(v) != -1;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.forEdge = function(this1,f) {
	var len = this1.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		f(this1[i],this1[(i + 1) % len]);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.forSegment = function(this1,f) {
	var _g1 = 0;
	var _g = this1.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		f(this1[i],this1[i + 1]);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.offset = function(this1,p) {
	var dx = p.x;
	var dy = p.y;
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		v.offset(dx,dy);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.scale = function(this1,f) {
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		com_watabou_utils_PointExtender.scaleEq(v,f);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.rotateYX = function(this1,sinA,cosA) {
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		var vx = v.x * cosA - v.y * sinA;
		var vy = v.y * cosA + v.x * sinA;
		v.setTo(vx,vy);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.rotate = function(this1,a) {
	com_watabou_geom__$Polygon_Polygon_$Impl_$.rotateYX(this1,Math.sin(a),Math.cos(a));
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.isConvexVertexi = function(this1,i) {
	var len = this1.length;
	var v0 = this1[(i + len - 1) % len];
	var v1 = this1[i];
	var v2 = this1[(i + 1) % len];
	return (v1.x - v0.x) * (v2.y - v1.y) - (v1.y - v0.y) * (v2.x - v1.x) > 0;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.isConvexVertex = function(this1,v1) {
	var v0 = this1[(this1.indexOf(v1) + this1.length - 1) % this1.length];
	var v2 = this1[(this1.indexOf(v1) + 1) % this1.length];
	return (v1.x - v0.x) * (v2.y - v1.y) - (v1.y - v0.y) * (v2.x - v1.x) > 0;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.isConvex = function(this1) {
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(!com_watabou_geom__$Polygon_Polygon_$Impl_$.isConvexVertexi(this1,i)) {
			return false;
		}
	}
	return true;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.smoothVertexi = function(this1,i,f) {
	if(f == null) {
		f = 1.0;
	}
	var v = this1[i];
	var len = this1.length;
	var prev = this1[(i + len - 1) % len];
	var next = this1[(i + 1) % len];
	return new openfl_geom_Point((prev.x + v.x * f + next.x) / (2 + f),(prev.y + v.y * f + next.y) / (2 + f));
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.smoothVertex = function(this1,v,f) {
	if(f == null) {
		f = 1.0;
	}
	var prev = this1[(this1.indexOf(v) + this1.length - 1) % this1.length];
	var next = this1[(this1.indexOf(v) + 1) % this1.length];
	return new openfl_geom_Point((prev.x + v.x * f + next.x) / (2 + f),(prev.y + v.y * f + next.y) / (2 + f));
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.distance = function(this1,p) {
	var d = openfl_geom_Point.distance(this1[0],p);
	var _g1 = 1;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var d1 = openfl_geom_Point.distance(this1[i],p);
		if(d1 < d) {
			d = d1;
		}
	}
	return d;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.smoothVertexEq = function(this1,f) {
	if(f == null) {
		f = 1.0;
	}
	var len = this1.length;
	var v1 = this1[len - 1];
	var v2 = this1[0];
	var _g = [];
	var _g2 = 0;
	var _g1 = len;
	while(_g2 < _g1) {
		var i = _g2++;
		var v0 = v1;
		v1 = v2;
		v2 = this1[(i + 1) % len];
		_g.push(new openfl_geom_Point((v0.x + v1.x * f + v2.x) / (2 + f),(v0.y + v1.y * f + v2.y) / (2 + f)));
	}
	return _g;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.aabb = function(this1) {
	var minx = Infinity;
	var miny = Infinity;
	var maxx = -Infinity;
	var maxy = -Infinity;
	var _g = 0;
	while(_g < this1.length) {
		var p = this1[_g];
		++_g;
		var x = p.x;
		var y = p.y;
		if(x < minx) {
			minx = x;
		}
		if(y < miny) {
			miny = y;
		}
		if(x > maxx) {
			maxx = x;
		}
		if(y > maxy) {
			maxy = y;
		}
	}
	return [new openfl_geom_Point(minx,miny),new openfl_geom_Point(maxx,miny),new openfl_geom_Point(maxx,maxy),new openfl_geom_Point(minx,maxy)];
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.obb = function(this1) {
	var obb = null;
	var minArea = Infinity;
	var _g = 0;
	while(_g < this1.length) {
		var p = this1[_g];
		++_g;
		var p1 = this1[(this1.indexOf(p) + 1) % this1.length].subtract(p);
		p1 = p1.clone();
		p1.normalize(1);
		var v = p1;
		var aabb = com_watabou_geom__$Polygon_Polygon_$Impl_$.aabb(com_watabou_geom__$Polygon_Polygon_$Impl_$.rotatedYX(this1,-v.y,v.x));
		var area = com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area(aabb);
		if(area < minArea) {
			minArea = area;
			com_watabou_geom__$Polygon_Polygon_$Impl_$.rotateYX(aabb,v.y,v.x);
			obb = aabb;
		}
	}
	return obb;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.lir = function(this1,base) {
	var horIntersect = function(x1,y1,dx1,x2,y2,dx2,dy2) {
		var t2 = (y1 - y2) / dy2;
		var t1 = (x2 - x1 + dx2 * t2) / dx1;
		return new openfl_geom_Point(t1,t2);
	};
	var p = this1[base == this1.length - 1 ? 0 : base + 1].subtract(this1[base]);
	p = p.clone();
	p.normalize(1);
	var v = p;
	var poly = com_watabou_geom__$Polygon_Polygon_$Impl_$.rotatedYX(this1,v.y,-v.x);
	var base1 = poly[base];
	var base2 = poly[(base + 1) % poly.length];
	var bottom = base1.y;
	var baseX1 = base1.x;
	var baseX2 = base2.x;
	var width = baseX1 - baseX2;
	var leftCaps = [];
	var rightCaps = [];
	com_watabou_geom__$Polygon_Polygon_$Impl_$.forEdge(poly,function(v1,v2) {
		if(v2.x > v1.x) {
			if(v2.y < v1.y && v2.x > baseX2) {
				leftCaps.push(new com_watabou_geom_Segment(v1,v2));
			}
			if(v2.y > v1.y && v1.x < baseX1) {
				rightCaps.push(new com_watabou_geom_Segment(v1,v2));
			}
		}
	});
	var bestX1 = 0.0;
	var bestX2 = 0.0;
	var top = bottom;
	var maxSq = 0.0;
	var _g = 0;
	while(_g < leftCaps.length) {
		var c = leftCaps[_g];
		++_g;
		var s = c.start;
		var e = c.end;
		var s1 = s.x;
		var s2 = s.y;
		var t = c.end.subtract(c.start).x;
		var t3 = horIntersect(baseX2,bottom,width,s1,s2,t,c.end.subtract(c.start).y);
		var x11 = baseX2 + t3.x * width;
		var y11 = bottom;
		var x21 = 0.0;
		var y21 = 0.0;
		if(e.x > baseX1) {
			x21 = baseX1;
			y21 = s.y + (e.y - s.y) / (e.x - s.x) * (baseX1 - s.x);
		} else {
			x21 = e.x;
			y21 = e.y;
		}
		var xm = Math.max(Math.max((x11 + x21) / 2,s.x),baseX2);
		var ym = x11 != x21 ? y21 + (y11 - y21) * (xm - x21) / (x11 - x21) : y21;
		var right = baseX1;
		var _g1 = 0;
		while(_g1 < rightCaps.length) {
			var c1 = rightCaps[_g1];
			++_g1;
			var c11 = c1.start.x;
			var c12 = c1.start.y;
			var t4 = c1.end.subtract(c1.start).x;
			var t5 = horIntersect(baseX2,ym,width,c11,c12,t4,c1.end.subtract(c1.start).y);
			if(t5.x >= 0 && t5.x <= 1 && t5.y >= 0 && t5.y <= 1) {
				var r = baseX2 + width * t5.x;
				if(right > r) {
					right = r;
				}
			}
		}
		var sq = (bottom - ym) * (right - xm);
		if(sq > maxSq) {
			bestX1 = right;
			bestX2 = xm;
			top = ym;
			maxSq = sq;
		}
	}
	var _g2 = 0;
	while(_g2 < rightCaps.length) {
		var c2 = rightCaps[_g2];
		++_g2;
		var s3 = c2.start;
		var e1 = c2.end;
		var s4 = s3.x;
		var s5 = s3.y;
		var t6 = c2.end.subtract(c2.start).x;
		var t7 = horIntersect(baseX2,bottom,width,s4,s5,t6,c2.end.subtract(c2.start).y);
		var x12 = baseX2 + t7.x * width;
		var y12 = bottom;
		var x22 = 0.0;
		var y22 = 0.0;
		if(s3.x < baseX2) {
			x22 = baseX2;
			y22 = s3.y + (e1.y - s3.y) / (e1.x - s3.x) * (baseX2 - s3.x);
		} else {
			x22 = s3.x;
			y22 = s3.y;
		}
		var xm1 = Math.min(Math.min((x12 + x22) / 2,e1.x),baseX1);
		var ym1 = x12 != x22 ? y22 + (y12 - y22) * (xm1 - x22) / (x12 - x22) : y22;
		var left = baseX2;
		var _g11 = 0;
		while(_g11 < leftCaps.length) {
			var c13 = leftCaps[_g11];
			++_g11;
			var c14 = c13.start.x;
			var c15 = c13.start.y;
			var t8 = c13.end.subtract(c13.start).x;
			var t9 = horIntersect(baseX2,ym1,width,c14,c15,t8,c13.end.subtract(c13.start).y);
			if(t9.x >= 0 && t9.x <= 1 && t9.y >= 0 && t9.y <= 1) {
				var l = baseX2 + width * t9.x;
				if(left < l) {
					left = l;
				}
			}
		}
		var sq1 = (bottom - ym1) * (xm1 - left);
		if(sq1 > maxSq) {
			bestX1 = xm1;
			bestX2 = left;
			top = ym1;
			maxSq = sq1;
		}
	}
	var rect = com_watabou_geom__$Polygon_Polygon_$Impl_$._new([new openfl_geom_Point(bestX1,bottom),new openfl_geom_Point(bestX2,bottom),new openfl_geom_Point(bestX2,top),new openfl_geom_Point(bestX1,top)]);
	com_watabou_geom__$Polygon_Polygon_$Impl_$.rotateYX(rect,-v.y,-v.x);
	return rect;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.lira = function(this1) {
	var maxSq = 0.0;
	var rect = this1;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var r = com_watabou_geom__$Polygon_Polygon_$Impl_$.lir(this1,i);
		var s = com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area(r);
		if(s > maxSq) {
			rect = r;
			maxSq = s;
		}
	}
	return rect;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.filterShort = function(this1,threshold) {
	var i = 1;
	var v0 = this1[0];
	var v1 = this1[1];
	var result = [v0];
	while(true) {
		while(true) {
			v1 = this1[i++];
			if(!(openfl_geom_Point.distance(v0,v1) < threshold && i < this1.length)) {
				break;
			}
		}
		v0 = v1;
		result.push(v0);
		if(!(i < this1.length)) {
			break;
		}
	}
	return result;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.longestEdge = function(this1) {
	var length = -1.0;
	var longest = -1;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var len = openfl_geom_Point.distance(this1[i],this1[(i + 1) % this1.length]);
		if(length < len) {
			length = len;
			longest = i;
		}
	}
	return this1[longest];
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.inset = function(this1,p1,d) {
	var i1 = this1.indexOf(p1);
	var i0 = i1 > 0 ? i1 - 1 : this1.length - 1;
	var p0 = this1[i0];
	var i2 = i1 < this1.length - 1 ? i1 + 1 : 0;
	var p2 = this1[i2];
	var i3 = i2 < this1.length - 1 ? i2 + 1 : 0;
	var p3 = this1[i3];
	var v0 = p1.subtract(p0);
	var v1 = p2.subtract(p1);
	var v2 = p3.subtract(p2);
	var cos = (v0.x * v1.x + v0.y * v1.y) / v0.get_length() / v1.get_length();
	var z = v0.x * v1.y - v0.y * v1.x;
	var t = d / Math.sqrt(1 - cos * cos);
	if(z > 0) {
		t = Math.min(t,v0.get_length() * 0.99);
	} else {
		t = Math.min(t,v1.get_length() * 0.5);
	}
	t *= com_watabou_utils_MathUtils.sign(z);
	var p = v0;
	p = p.clone();
	p.normalize(t);
	this1[i1] = p1.subtract(p);
	cos = (v1.x * v2.x + v1.y * v2.y) / v1.get_length() / v2.get_length();
	z = v1.x * v2.y - v1.y * v2.x;
	t = d / Math.sqrt(1 - cos * cos);
	if(z > 0) {
		t = Math.min(t,v2.get_length() * 0.99);
	} else {
		t = Math.min(t,v1.get_length() * 0.5);
	}
	var p4 = v2;
	p4 = p4.clone();
	p4.normalize(t);
	this1[i2] = p2.add(p4);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.insetAll = function(this1,d) {
	var p = com_watabou_geom__$Polygon_Polygon_$Impl_$._new(this1);
	var _g1 = 0;
	var _g = p.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(d[i] != 0) {
			com_watabou_geom__$Polygon_Polygon_$Impl_$.inset(p,p[i],d[i]);
		}
	}
	return p;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.insetEq = function(this1,d) {
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		com_watabou_geom__$Polygon_Polygon_$Impl_$.inset(this1,this1[i],d);
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.buffer = function(this1,d,safer) {
	if(safer == null) {
		safer = true;
	}
	var q = com_watabou_geom__$Polygon_Polygon_$Impl_$._new();
	var i = 0;
	com_watabou_geom__$Polygon_Polygon_$Impl_$.forEdge(this1,function(v0,v1) {
		i += 1;
		var dd = d[i - 1];
		if(dd == 0) {
			q.push(v0);
			q.push(v1);
		} else {
			var p = v1.subtract(v0);
			var n = new openfl_geom_Point(-p.y,p.x);
			n.normalize(dd);
			if(safer) {
				var p1 = v1.subtract(v0);
				p1 = p1.clone();
				p1.normalize(dd);
				var cap = p1;
				var tmp = v0.add(n).subtract(cap);
				q.push(tmp);
				var tmp1 = v1.add(n).add(cap);
				q.push(tmp1);
			} else {
				var tmp2 = v0.add(n);
				q.push(tmp2);
				var tmp3 = v1.add(n);
				q.push(tmp3);
			}
		}
	});
	var wasCut;
	var lastEdge = 0;
	while(true) {
		wasCut = false;
		var n1 = q.length;
		var _g1 = lastEdge;
		var _g = n1 - 2;
		while(_g1 < _g) {
			var i1 = _g1++;
			lastEdge = i1;
			var p11 = q[i1];
			var p12 = q[i1 + 1];
			var x1 = p11.x;
			var y1 = p11.y;
			var dx1 = p12.x - x1;
			var dy1 = p12.y - y1;
			var _g3 = i1 + 2;
			var _g2 = i1 > 0 ? n1 : n1 - 1;
			while(_g3 < _g2) {
				var j = _g3++;
				var p21 = q[j];
				var p22 = j < n1 - 1 ? q[j + 1] : q[0];
				var x2 = p21.x;
				var y2 = p21.y;
				var dx2 = p22.x - x2;
				var dy2 = p22.y - y2;
				var $int = com_watabou_geom_GeomUtils.intersectLines(x1,y1,dx1,dy1,x2,y2,dx2,dy2);
				if($int != null && $int.x > 0.000001 && $int.x < 0.999999 && $int.y > 0.000001 && $int.y < 0.999999) {
					var pn = new openfl_geom_Point(x1 + dx1 * $int.x,y1 + dy1 * $int.x);
					q.splice(j + 1,0,pn);
					q.splice(i1 + 1,0,pn);
					wasCut = true;
					break;
				}
			}
			if(wasCut) {
				break;
			}
		}
		if(!wasCut) {
			break;
		}
	}
	var _g4 = [];
	var _g21 = 0;
	var _g11 = q.length;
	while(_g21 < _g11) {
		var i2 = _g21++;
		_g4.push(i2);
	}
	var regular = _g4;
	var bestPart = null;
	var bestPartSq = -Infinity;
	while(regular.length > 0) {
		var indices = [];
		var start = regular[0];
		var i3 = start;
		while(true) {
			indices.push(i3);
			HxOverrides.remove(regular,i3);
			var next = (i3 + 1) % q.length;
			var v = q[next];
			var next1 = q.indexOf(v);
			if(next1 == next) {
				next1 = q.lastIndexOf(v);
			}
			if(next1 == -1) {
				i3 = next;
			} else {
				i3 = next1;
			}
			if(!(i3 != start)) {
				break;
			}
		}
		var _g12 = [];
		var _g22 = 0;
		while(_g22 < indices.length) {
			var i4 = indices[_g22];
			++_g22;
			_g12.push(q[i4]);
		}
		var p2 = _g12;
		var s = com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area(p2);
		if(s > bestPartSq) {
			bestPart = p2;
			bestPartSq = s;
		}
	}
	return bestPart;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.bufferEq = function(this1,d,safer) {
	if(safer == null) {
		safer = true;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var vv = this1[_g1];
		++_g1;
		_g.push(d);
	}
	return com_watabou_geom__$Polygon_Polygon_$Impl_$.buffer(this1,_g,safer);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.simplyfy = function(this1,n) {
	var len = this1.length;
	while(len > n) {
		var result = 0;
		var min = Infinity;
		var b = this1[len - 1];
		var c = this1[0];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var a = b;
			b = c;
			c = this1[(i + 1) % len];
			var measure = Math.abs(a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y));
			if(measure < min) {
				result = i;
				min = measure;
			}
		}
		this1.splice(result,1);
		--len;
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.findEdge = function(this1,a,b) {
	var index = this1.indexOf(a);
	if(index != -1 && this1[(index + 1) % this1.length] == b) {
		return index;
	} else {
		return -1;
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.containsSegment = function(this1,v0,v1) {
	var i0 = this1.indexOf(v0);
	if(i0 != -1) {
		if(!(i0 < this1.length - 1 && this1[i0 + 1] == v1)) {
			if(i0 > 0) {
				return this1[i0 - 1] == v1;
			} else {
				return false;
			}
		} else {
			return true;
		}
	} else {
		return false;
	}
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.next = function(this1,a) {
	return this1[(this1.indexOf(a) + 1) % this1.length];
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.prev = function(this1,a) {
	return this1[(this1.indexOf(a) + this1.length - 1) % this1.length];
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.vector = function(this1,v) {
	return this1[(this1.indexOf(v) + 1) % this1.length].subtract(v);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.vectori = function(this1,i) {
	return this1[i == this1.length - 1 ? 0 : i + 1].subtract(this1[i]);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.vectorn = function(this1,v) {
	var p = this1[(this1.indexOf(v) + 1) % this1.length].subtract(v);
	p = p.clone();
	p.normalize(1);
	return p;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.sidei = function(this1,i) {
	return openfl_geom_Point.distance(this1[i],this1[(i + 1) % this1.length]);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.borders = function(this1,another) {
	var len1 = this1.length;
	var len2 = another.length;
	var _g1 = 0;
	var _g = len1;
	while(_g1 < _g) {
		var i = _g1++;
		var j = another.indexOf(this1[i]);
		if(j != -1) {
			var next = this1[(i + 1) % len1];
			if(next == another[(j + 1) % len2] || next == another[(j + len2 - 1) % len2]) {
				return true;
			}
		}
	}
	return false;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.getBounds = function(this1) {
	var rect = new openfl_geom_Rectangle(this1[0].x,this1[0].y);
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		rect.set_left(Math.min(rect.get_left(),v.x));
		rect.set_right(Math.max(rect.get_right(),v.x));
		rect.set_top(Math.min(rect.get_top(),v.y));
		rect.set_bottom(Math.max(rect.get_bottom(),v.y));
	}
	return rect;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.split = function(this1,p1,p2) {
	return com_watabou_geom__$Polygon_Polygon_$Impl_$.spliti(this1,this1.indexOf(p1),this1.indexOf(p2));
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.spliti = function(this1,i1,i2) {
	if(i1 > i2) {
		var t = i1;
		i1 = i2;
		i2 = t;
	}
	return [com_watabou_geom__$Polygon_Polygon_$Impl_$._new(this1.slice(i1,i2 + 1)),com_watabou_geom__$Polygon_Polygon_$Impl_$._new(this1.slice(i2).concat(this1.slice(0,i1 + 1)))];
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.smooth = function(this1,immutable) {
	var smoothed = [this1[0].clone()];
	var _g1 = 1;
	var _g = this1.length - 1;
	while(_g1 < _g) {
		var i = _g1++;
		if(immutable != null && immutable[i]) {
			smoothed.push(this1[i].clone());
		} else {
			var a = this1[i - 1];
			var b = this1[i];
			var c = this1[i + 1];
			var f = com_watabou_geom_GeomUtils.lerp(a,b,0.5625);
			var g = new openfl_geom_Point(a.x * 0.1875,a.y * 0.1875).add(new openfl_geom_Point(b.x * 0.75,b.y * 0.75)).add(new openfl_geom_Point(c.x * 0.0625,c.y * 0.0625));
			var h = new openfl_geom_Point(a.x * 0.0625,a.y * 0.0625).add(new openfl_geom_Point(b.x * 0.75,b.y * 0.75)).add(new openfl_geom_Point(c.x * 0.1875,c.y * 0.1875));
			var i1 = com_watabou_geom_GeomUtils.lerp(b,c,0.4375);
			smoothed.push(f);
			smoothed.push(g);
			smoothed.push(h);
			smoothed.push(i1);
		}
	}
	smoothed.push(this1[this1.length - 1].clone());
	return smoothed;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.interpolate = function(this1,p) {
	return com_watabou_geom__$Polygon_Polygon_$Impl_$.interpolateSet(this1,p);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.interpolateSet = function(set,p) {
	var sum = 0.0;
	var _g = [];
	var _g1 = 0;
	while(_g1 < set.length) {
		var v = set[_g1];
		++_g1;
		var dist = openfl_geom_Point.distance(v,p);
		if(dist == 0) {
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < set.length) {
				var vv = set[_g3];
				++_g3;
				_g2.push(vv == v ? 1 : 0);
			}
			return _g2;
		}
		var invDist = 1 / dist;
		sum += invDist;
		_g.push(invDist);
	}
	var dd = _g;
	var _g11 = [];
	var _g21 = 0;
	while(_g21 < dd.length) {
		var d = dd[_g21];
		++_g21;
		_g11.push(d / sum);
	}
	return _g11;
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.rotatedYX = function(poly,sin,cos) {
	var _g = [];
	var v = HxOverrides.iter(poly);
	while(v.hasNext()) {
		var v1 = v.next();
		_g.push(new openfl_geom_Point(v1.x * cos - v1.y * sin,v1.y * cos + v1.x * sin));
	}
	return com_watabou_geom__$Polygon_Polygon_$Impl_$._new(_g);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.rect = function(w,h) {
	if(h == null) {
		h = 1.0;
	}
	if(w == null) {
		w = 1.0;
	}
	return com_watabou_geom__$Polygon_Polygon_$Impl_$._new([new openfl_geom_Point(-w / 2,-h / 2),new openfl_geom_Point(w / 2,-h / 2),new openfl_geom_Point(w / 2,h / 2),new openfl_geom_Point(-w / 2,h / 2)]);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.regular = function(n,r,o) {
	if(o == null) {
		o = 0.0;
	}
	if(r == null) {
		r = 1.0;
	}
	if(n == null) {
		n = 8;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = n;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(openfl_geom_Point.polar(r,o + i / n * Math.PI * 2));
	}
	return com_watabou_geom__$Polygon_Polygon_$Impl_$._new(_g);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.circle = function(r) {
	if(r == null) {
		r = 1.0;
	}
	return com_watabou_geom__$Polygon_Polygon_$Impl_$.regular(16,r);
};
com_watabou_geom__$Polygon_Polygon_$Impl_$.circumference = function(parts) {
	if(parts.length == 0) {
		return com_watabou_geom__$Polygon_Polygon_$Impl_$._new();
	} else if(parts.length == 1) {
		return com_watabou_geom__$Polygon_Polygon_$Impl_$._new(parts[0]);
	}
	var edgeA = [];
	var edgeB = [];
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		com_watabou_geom__$Polygon_Polygon_$Impl_$.forEdge(p,function(a,b) {
			var outer = true;
			var from = 0;
			while(true) {
				var i = edgeA.indexOf(b,from);
				if(i == -1) {
					break;
				} else if(edgeB[i] == a) {
					edgeA.splice(i,1);
					edgeB.splice(i,1);
					outer = false;
					break;
				} else {
					from = i + 1;
				}
				if(!(from < edgeA.length)) {
					break;
				}
			}
			if(outer) {
				edgeA.push(a);
				edgeB.push(b);
			}
		});
	}
	var loop = 0;
	var _g1 = 0;
	var _g2 = edgeA.length;
	while(_g1 < _g2) {
		var i1 = _g1++;
		if(edgeA.lastIndexOf(edgeA[i1]) != i1) {
			loop = i1;
			break;
		}
	}
	var start = edgeA[loop];
	var vertex = edgeB[loop];
	var poly = com_watabou_geom__$Polygon_Polygon_$Impl_$._new([start]);
	while(true) {
		poly.push(vertex);
		var vertex1 = edgeA.indexOf(vertex);
		vertex = edgeB[vertex1];
		if(!(vertex != start)) {
			break;
		}
	}
	return poly;
};
var com_watabou_geom_Segment = function(start,end) {
	this.start = start;
	this.end = end;
};
$hxClasses["com.watabou.geom.Segment"] = com_watabou_geom_Segment;
com_watabou_geom_Segment.__name__ = ["com","watabou","geom","Segment"];
com_watabou_geom_Segment.prototype = {
	start: null
	,end: null
	,dx: null
	,get_dx: function() {
		return this.end.x - this.start.x;
	}
	,dy: null
	,get_dy: function() {
		return this.end.y - this.start.y;
	}
	,vector: null
	,get_vector: function() {
		return this.end.subtract(this.start);
	}
	,length: null
	,get_length: function() {
		return openfl_geom_Point.distance(this.start,this.end);
	}
	,angle: null
	,get_angle: function() {
		return Math.atan2(this.end.y - this.start.y,this.end.x - this.start.x);
	}
	,invert: function() {
		return new com_watabou_geom_Segment(this.end,this.start);
	}
	,lerp: function(ratio) {
		if(ratio == null) {
			ratio = 0.5;
		}
		return com_watabou_geom_GeomUtils.lerp(this.start,this.end,ratio);
	}
	,toString: function() {
		return [this.start,this.end].toString();
	}
	,__class__: com_watabou_geom_Segment
};
var com_watabou_geom_polygons_PolyAccess = function() { };
$hxClasses["com.watabou.geom.polygons.PolyAccess"] = com_watabou_geom_polygons_PolyAccess;
com_watabou_geom_polygons_PolyAccess.__name__ = ["com","watabou","geom","polygons","PolyAccess"];
com_watabou_geom_polygons_PolyAccess.last = function(poly) {
	return poly[poly.length - 1];
};
com_watabou_geom_polygons_PolyAccess.longest = function(poly) {
	var index = -1;
	var maxLen = 0.0;
	var _g1 = 0;
	var _g = poly.length;
	while(_g1 < _g) {
		var i = _g1++;
		var len = openfl_geom_Point.distance(poly[i],poly[(i + 1) % poly.length]);
		if(maxLen < len) {
			maxLen = len;
			index = i;
		}
	}
	return index;
};
com_watabou_geom_polygons_PolyAccess.vectori = function(poly,i) {
	return poly[i < poly.length - 1 ? i + 1 : 0].subtract(poly[i]);
};
com_watabou_geom_polygons_PolyAccess.sidei = function(poly,i) {
	return openfl_geom_Point.distance(poly[i],poly[(i + 1) % poly.length]);
};
com_watabou_geom_polygons_PolyAccess.isConvexVertexi = function(poly,i) {
	var len = poly.length;
	var v0 = poly[(i + len - 1) % len];
	var v1 = poly[i];
	var v2 = poly[(i + 1) % len];
	return (v1.x - v0.x) * (v2.y - v1.y) - (v1.y - v0.y) * (v2.x - v1.x) > 0;
};
var com_watabou_geom_polygons_PolyCut = function() { };
$hxClasses["com.watabou.geom.polygons.PolyCut"] = com_watabou_geom_polygons_PolyCut;
com_watabou_geom_polygons_PolyCut.__name__ = ["com","watabou","geom","polygons","PolyCut"];
com_watabou_geom_polygons_PolyCut.pierce = function(poly,p1,p2) {
	var x1 = p1.x;
	var y1 = p1.y;
	var dx1 = p2.x - x1;
	var dy1 = p2.y - y1;
	var len = poly.length;
	var edge1 = 0;
	var ratio1 = 0.0;
	var edge2 = 0;
	var ratio2 = 0.0;
	var count = 0;
	var ratios = [];
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var v0 = poly[i];
		var v1 = poly[(i + 1) % len];
		var x2 = v0.x;
		var y2 = v0.y;
		var dx2 = v1.x - x2;
		var dy2 = v1.y - y2;
		var t = com_watabou_geom_GeomUtils.intersectLines(x1,y1,dx1,dy1,x2,y2,dx2,dy2);
		if(t != null && t.y >= 0 && t.y <= 1) {
			ratios.push(t.x);
		}
	}
	ratios.sort(function(t1,t2) {
		return com_watabou_utils_MathUtils.sign(t1 - t2);
	});
	var _g2 = [];
	var _g11 = 0;
	while(_g11 < ratios.length) {
		var t3 = ratios[_g11];
		++_g11;
		_g2.push(com_watabou_geom_GeomUtils.lerp(p1,p2,t3));
	}
	return _g2;
};
com_watabou_geom_polygons_PolyCut.cut = function(poly,p1,p2,gap) {
	if(gap == null) {
		gap = 0;
	}
	var x1 = p1.x;
	var y1 = p1.y;
	var dx1 = p2.x - x1;
	var dy1 = p2.y - y1;
	var len = poly.length;
	var edge1 = 0;
	var ratio1 = 0.0;
	var edge2 = 0;
	var ratio2 = 0.0;
	var ratios = [];
	var edges = new haxe_ds_ObjectMap();
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var v0 = poly[i];
		var v1 = poly[(i + 1) % len];
		var x2 = v0.x;
		var y2 = v0.y;
		var dx2 = v1.x - x2;
		var dy2 = v1.y - y2;
		var t = com_watabou_geom_GeomUtils.intersectLines(x1,y1,dx1,dy1,x2,y2,dx2,dy2);
		if(t != null && t.y >= 0 && t.y <= 1) {
			ratios.push(t);
			edges.set(t,i);
		}
	}
	if(ratios.length >= 2) {
		ratios.sort(function(a,b) {
			return com_watabou_utils_MathUtils.sign(a.x - b.x);
		});
		var ratio11 = ratios[0];
		var ratio21 = ratios[1];
		var edge11 = edges.h[ratio11.__id__];
		var edge21 = edges.h[ratio21.__id__];
		var point1 = com_watabou_geom_GeomUtils.lerp(p1,p2,ratio11.x);
		var point2 = com_watabou_geom_GeomUtils.lerp(p1,p2,ratio21.x);
		var half1 = edge11 < edge21 ? poly.slice(edge11 + 1,edge21 + 1) : poly.slice(edge11 + 1).concat(poly.slice(0,edge21 + 1));
		half1.unshift(point1);
		half1.push(point2);
		var half2 = edge11 < edge21 ? poly.slice(edge21 + 1).concat(poly.slice(0,edge11 + 1)) : poly.slice(edge21 + 1,edge11 + 1);
		half2.unshift(point2);
		half2.push(point1);
		if(gap > 0) {
			half1 = com_watabou_geom_polygons_PolyCut.peel(half1,point2,gap / 2);
			half2 = com_watabou_geom_polygons_PolyCut.peel(half2,point1,gap / 2);
		}
		var v = com_watabou_geom_polygons_PolyAccess.vectori(poly,edge11);
		if(dx1 * v.y - dy1 * v.x > 0) {
			return [half1,half2];
		} else {
			return [half2,half1];
		}
	} else {
		return [poly];
	}
};
com_watabou_geom_polygons_PolyCut.peel = function(poly,v1,d) {
	var i1 = poly.indexOf(v1);
	var i2 = i1 == poly.length - 1 ? 0 : i1 + 1;
	var v2 = poly[i2];
	var v = v2.subtract(v1);
	var p = new openfl_geom_Point(-v.y,v.x);
	p = p.clone();
	p.normalize(d);
	var n = p;
	return com_watabou_geom_polygons_PolyCut.cut(poly,v1.add(n),v2.add(n))[0];
};
com_watabou_geom_polygons_PolyCut.shrink = function(poly,d) {
	var q = poly.slice();
	var len = poly.length;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var dd = d[i];
		if(dd > 0) {
			var v1 = poly[i];
			var v2 = poly[(i + 1) % len];
			var v = v2.subtract(v1);
			var p = new openfl_geom_Point(-v.y,v.x);
			p = p.clone();
			p.normalize(dd);
			var n = p;
			q = com_watabou_geom_polygons_PolyCut.cut(q,v1.add(n),v2.add(n))[0];
		}
	}
	return q;
};
com_watabou_geom_polygons_PolyCut.shrinkEq = function(poly,d) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < poly.length) {
		var v = poly[_g1];
		++_g1;
		_g.push(d);
	}
	return com_watabou_geom_polygons_PolyCut.shrink(poly,_g);
};
com_watabou_geom_polygons_PolyCut.buffer = function(poly,d,safer) {
	if(safer == null) {
		safer = true;
	}
	var len = poly.length;
	var q = [];
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var v0 = poly[i];
		var v1 = poly[(i + 1) % len];
		var dd = d[i];
		if(dd == 0) {
			q.push(v0);
			q.push(v1);
		} else {
			var p = v1.subtract(v0);
			var n = new openfl_geom_Point(-p.y,p.x);
			n.normalize(dd);
			if(safer) {
				var p1 = v1.subtract(v0);
				p1 = p1.clone();
				p1.normalize(dd);
				var cap = p1;
				q.push(v0.add(n).subtract(cap));
				q.push(v1.add(n).add(cap));
			} else {
				q.push(v0.add(n));
				q.push(v1.add(n));
			}
		}
	}
	var wasCut;
	var lastEdge = 0;
	while(true) {
		wasCut = false;
		var n1 = q.length;
		var _g11 = lastEdge;
		var _g2 = n1 - 2;
		while(_g11 < _g2) {
			var i1 = _g11++;
			lastEdge = i1;
			var p11 = q[i1];
			var p12 = q[i1 + 1];
			var x1 = p11.x;
			var y1 = p11.y;
			var dx1 = p12.x - x1;
			var dy1 = p12.y - y1;
			var _g3 = i1 + 2;
			var _g21 = i1 > 0 ? n1 : n1 - 1;
			while(_g3 < _g21) {
				var j = _g3++;
				var p21 = q[j];
				var p22 = j < n1 - 1 ? q[j + 1] : q[0];
				var x2 = p21.x;
				var y2 = p21.y;
				var dx2 = p22.x - x2;
				var dy2 = p22.y - y2;
				var $int = com_watabou_geom_GeomUtils.intersectLines(x1,y1,dx1,dy1,x2,y2,dx2,dy2);
				if($int != null && $int.x > 0.000001 && $int.x < 0.999999 && $int.y > 0.000001 && $int.y < 0.999999) {
					var pn = new openfl_geom_Point(x1 + dx1 * $int.x,y1 + dy1 * $int.x);
					q.splice(j + 1,0,pn);
					q.splice(i1 + 1,0,pn);
					wasCut = true;
					break;
				}
			}
			if(wasCut) {
				break;
			}
		}
		if(!wasCut) {
			break;
		}
	}
	var _g4 = [];
	var _g22 = 0;
	var _g12 = q.length;
	while(_g22 < _g12) {
		var i2 = _g22++;
		_g4.push(i2);
	}
	var regular = _g4;
	var bestPart = null;
	var bestPartSq = -Infinity;
	while(regular.length > 0) {
		var indices = [];
		var start = regular[0];
		var i3 = start;
		while(true) {
			indices.push(i3);
			HxOverrides.remove(regular,i3);
			var next = (i3 + 1) % q.length;
			var v = q[next];
			var next1 = q.indexOf(v);
			if(next1 == next) {
				next1 = q.lastIndexOf(v);
			}
			if(next1 == -1) {
				i3 = next;
			} else {
				i3 = next1;
			}
			if(!(i3 != start)) {
				break;
			}
		}
		var _g13 = [];
		var _g23 = 0;
		while(_g23 < indices.length) {
			var i4 = indices[_g23];
			++_g23;
			_g13.push(q[i4]);
		}
		var p2 = _g13;
		var s = com_watabou_geom__$Polygon_Polygon_$Impl_$.get_area(p2);
		if(s > bestPartSq) {
			bestPart = p2;
			bestPartSq = s;
		}
	}
	return bestPart;
};
com_watabou_geom_polygons_PolyCut.bufferEq = function(poly,d,safer) {
	if(safer == null) {
		safer = true;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < poly.length) {
		var vv = poly[_g1];
		++_g1;
		_g.push(d);
	}
	return com_watabou_geom_polygons_PolyCut.buffer(poly,_g,safer);
};
var com_watabou_processes_Process = function() {
	this.complete = new msignal_Signal0();
};
$hxClasses["com.watabou.processes.Process"] = com_watabou_processes_Process;
com_watabou_processes_Process.__name__ = ["com","watabou","processes","Process"];
com_watabou_processes_Process.prototype = {
	complete: null
	,start: function() {
		return this;
	}
	,stop: function() {
		return this;
	}
	,pause: function() {
		return this;
	}
	,resume: function() {
		return this;
	}
	,onComplete: function(callback) {
		if(callback != null) {
			this.complete.add(callback);
		}
		return this;
	}
	,__class__: com_watabou_processes_Process
};
var com_watabou_processes_Sequence = function(p) {
	this.curSub = null;
	this.subs = [];
	com_watabou_processes_Process.call(this);
	if(p != null) {
		this.curSub = p;
		this.curSub.complete.add($bind(this,this.start));
	}
};
$hxClasses["com.watabou.processes.Sequence"] = com_watabou_processes_Sequence;
com_watabou_processes_Sequence.__name__ = ["com","watabou","processes","Sequence"];
com_watabou_processes_Sequence.__super__ = com_watabou_processes_Process;
com_watabou_processes_Sequence.prototype = $extend(com_watabou_processes_Process.prototype,{
	subs: null
	,curSub: null
	,start: function() {
		if(this.subs.length > 0) {
			this.curSub = this.subs.shift();
			this.curSub.complete.add($bind(this,this.start));
			this.curSub.start();
		} else {
			this.complete.dispatch();
		}
		return this;
	}
	,stop: function() {
		if(this.curSub != null) {
			this.curSub.stop();
		}
		return this;
	}
	,resume: function() {
		if(this.curSub != null) {
			this.curSub.resume();
		}
		return this;
	}
	,pause: function() {
		if(this.curSub != null) {
			this.curSub.pause();
		}
		return this;
	}
	,add: function(p) {
		this.subs.push(p);
		return this;
	}
	,__class__: com_watabou_processes_Sequence
});
var com_watabou_processes_Tweener = function() {
	com_watabou_processes_Process.call(this);
};
$hxClasses["com.watabou.processes.Tweener"] = com_watabou_processes_Tweener;
com_watabou_processes_Tweener.__name__ = ["com","watabou","processes","Tweener"];
com_watabou_processes_Tweener.create = function(time,callback) {
	var tw = new com_watabou_processes_Tweener();
	tw.time = time;
	tw.updateCallback = callback;
	return tw;
};
com_watabou_processes_Tweener.run = function(time,callback) {
	var tw = com_watabou_processes_Tweener.create(time,callback);
	tw.start();
	return tw;
};
com_watabou_processes_Tweener.__super__ = com_watabou_processes_Process;
com_watabou_processes_Tweener.prototype = $extend(com_watabou_processes_Process.prototype,{
	passed: null
	,time: null
	,updateCallback: null
	,paused: null
	,start: function() {
		this.passed = 0.0;
		this.paused = false;
		this.updateCallback(0);
		return this.resume();
	}
	,stop: function() {
		return this.pause();
	}
	,resume: function() {
		com_watabou_utils_Updater.get_tick().add($bind(this,this.update));
		this.paused = false;
		return this;
	}
	,pause: function() {
		com_watabou_utils_Updater.get_tick().remove($bind(this,this.update));
		this.paused = true;
		return this;
	}
	,forceUpdate: function() {
		this.updateCallback(Math.min(this.passed / this.time,1));
	}
	,update: function(elapsed) {
		if(this.paused) {
			return;
		}
		var tmp = this;
		if((tmp.passed += elapsed) < this.time) {
			var p = this.passed / this.time;
			this.updateCallback(p);
		} else {
			this.updateCallback(1);
			this.stop();
			this.complete.dispatch();
		}
	}
	,add: function(p) {
		return new com_watabou_processes_Sequence(this).add(p);
	}
	,__class__: com_watabou_processes_Tweener
});
var com_watabou_utils_ArrayExtender = function() { };
$hxClasses["com.watabou.utils.ArrayExtender"] = com_watabou_utils_ArrayExtender;
com_watabou_utils_ArrayExtender.__name__ = ["com","watabou","utils","ArrayExtender"];
com_watabou_utils_ArrayExtender.append = function(a,b) {
	var _g = 0;
	while(_g < b.length) {
		var e = b[_g];
		++_g;
		a.push(e);
	}
};
com_watabou_utils_ArrayExtender.shuffle = function(a) {
	var result = [];
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		result.splice((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * (result.length + 1) | 0,0,e);
	}
	return result;
};
com_watabou_utils_ArrayExtender.random = function(a) {
	return a[(com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * a.length | 0];
};
com_watabou_utils_ArrayExtender.pick = function(a) {
	var index = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * a.length | 0;
	var item = a[index];
	a.splice(index,1);
	return item;
};
com_watabou_utils_ArrayExtender.fallOff = function(a,f) {
	if(f == null) {
		f = 2.0;
	}
	return a[Math.pow((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647,f) * a.length | 0];
};
com_watabou_utils_ArrayExtender.subset = function(a,n) {
	return com_watabou_utils_ArrayExtender.shuffle(a).slice(0,n);
};
com_watabou_utils_ArrayExtender.weighted = function(a,weights) {
	var z = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * com_watabou_utils_ArrayExtender.sum(weights);
	var acc = 0.0;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(z <= (acc += weights[i])) {
			return a[i];
		}
	}
	return a[0];
};
com_watabou_utils_ArrayExtender.weightedIndex = function(weights) {
	var _g = [];
	var _g2 = 0;
	var _g1 = weights.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(i);
	}
	return com_watabou_utils_ArrayExtender.weighted(_g,weights);
};
com_watabou_utils_ArrayExtender.contains = function(a,value) {
	return a.indexOf(value) != -1;
};
com_watabou_utils_ArrayExtender.isEmpty = function(a) {
	return a.length == 0;
};
com_watabou_utils_ArrayExtender.first = function(a) {
	return a[0];
};
com_watabou_utils_ArrayExtender.second = function(a) {
	return a[1];
};
com_watabou_utils_ArrayExtender.last = function(a) {
	return a[a.length - 1];
};
com_watabou_utils_ArrayExtender.min = function(a,f) {
	var result = a[0];
	var min = f(result);
	var _g1 = 1;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var element = a[i];
		var measure = f(element);
		if(measure < min) {
			result = element;
			min = measure;
		}
	}
	return result;
};
com_watabou_utils_ArrayExtender.max = function(a,f) {
	var result = a[0];
	var max = f(result);
	var _g1 = 1;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		var element = a[i];
		var measure = f(element);
		if(measure > max) {
			result = element;
			max = measure;
		}
	}
	return result;
};
com_watabou_utils_ArrayExtender.every = function(a,test) {
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		if(!test(e)) {
			return false;
		}
	}
	return true;
};
com_watabou_utils_ArrayExtender.some = function(a,test) {
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		if(test(e)) {
			return true;
		}
	}
	return false;
};
com_watabou_utils_ArrayExtender.count = function(a,test) {
	var count = 0;
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		if(test(e)) {
			++count;
		}
	}
	return count;
};
com_watabou_utils_ArrayExtender.indices = function(a) {
	var _g = [];
	var _g2 = 0;
	var _g1 = a.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(i);
	}
	return _g;
};
com_watabou_utils_ArrayExtender.sum = function(a) {
	var sum = 0.0;
	var _g = 0;
	while(_g < a.length) {
		var f = a[_g];
		++_g;
		sum += f;
	}
	return sum;
};
com_watabou_utils_ArrayExtender.map = function(a,f) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < a.length) {
		var el = a[_g1];
		++_g1;
		_g.push(f(el));
	}
	return _g;
};
com_watabou_utils_ArrayExtender.replace = function(a,el,newEls) {
	var index = a.indexOf(el);
	a[index++] = newEls[0];
	var _g1 = 1;
	var _g = newEls.length;
	while(_g1 < _g) {
		var i = _g1++;
		a.splice(index++,0,newEls[i]);
	}
};
com_watabou_utils_ArrayExtender.add = function(a,el) {
	if(a.indexOf(el) == -1) {
		a.push(el);
		return true;
	} else {
		return false;
	}
};
com_watabou_utils_ArrayExtender.clean = function(a) {
	var _g = [];
	var _g2 = 0;
	var _g1 = a.length;
	while(_g2 < _g1) {
		var i = _g2++;
		if(a.indexOf(a[i]) == i) {
			_g.push(a[i]);
		}
	}
	return _g;
};
com_watabou_utils_ArrayExtender.intersect = function(a,b) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < a.length) {
		var el = a[_g1];
		++_g1;
		if(b.indexOf(el) != -1) {
			_g.push(el);
		}
	}
	return _g;
};
com_watabou_utils_ArrayExtender.addAll = function(a,b) {
	var _g = 0;
	while(_g < b.length) {
		var el = b[_g];
		++_g;
		if(a.indexOf(el) == -1) {
			a.push(el);
		}
	}
};
com_watabou_utils_ArrayExtender.collect = function(a) {
	var result = [];
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		com_watabou_utils_ArrayExtender.addAll(result,e);
	}
	return result;
};
com_watabou_utils_ArrayExtender.union = function(a,b) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < b.length) {
		var el = b[_g1];
		++_g1;
		if(a.indexOf(el) == -1) {
			_g.push(el);
		}
	}
	return a.concat(_g);
};
com_watabou_utils_ArrayExtender.removeAll = function(a,b) {
	var _g = 0;
	while(_g < b.length) {
		var el = b[_g];
		++_g;
		HxOverrides.remove(a,el);
	}
};
com_watabou_utils_ArrayExtender.difference = function(a,b) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < a.length) {
		var el = a[_g1];
		++_g1;
		if(b.indexOf(el) == -1) {
			_g.push(el);
		}
	}
	return _g;
};
com_watabou_utils_ArrayExtender.flatten = function(a) {
	if(a.length == 0) {
		return [];
	} else {
		var result = a[0].slice();
		var _g1 = 1;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			result = result.concat(a[i]);
		}
		return result;
	}
};
com_watabou_utils_ArrayExtender.uflatten = function(a) {
	if(a.length == 0) {
		return [];
	} else {
		var result = a[0].slice();
		var _g1 = 1;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			result = com_watabou_utils_ArrayExtender.union(result,a[i]);
		}
		return result;
	}
};
com_watabou_utils_ArrayExtender.equals = function(a,b) {
	if(a.length != b.length) {
		return false;
	} else if(a.length == 0) {
		return true;
	} else {
		var _g = 0;
		while(_g < a.length) {
			var el = a[_g];
			++_g;
			if(b.indexOf(el) == -1) {
				return false;
			}
		}
		return true;
	}
};
var com_watabou_utils_MathUtils = function() { };
$hxClasses["com.watabou.utils.MathUtils"] = com_watabou_utils_MathUtils;
com_watabou_utils_MathUtils.__name__ = ["com","watabou","utils","MathUtils"];
com_watabou_utils_MathUtils.gate = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value < max) {
		return value;
	} else {
		return max;
	}
};
com_watabou_utils_MathUtils.gatei = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value < max) {
		return value;
	} else {
		return max;
	}
};
com_watabou_utils_MathUtils.mini = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
com_watabou_utils_MathUtils.maxi = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
com_watabou_utils_MathUtils.absi = function(i) {
	if(i >= 0) {
		return i;
	} else {
		return -i;
	}
};
com_watabou_utils_MathUtils.sign = function(value) {
	if(value == 0) {
		return 0;
	} else if(value < 0) {
		return -1;
	} else {
		return 1;
	}
};
com_watabou_utils_MathUtils.lerp = function(a,b,p) {
	if(p == null) {
		p = 0.5;
	}
	return a * (1 - p) + b * p;
};
var com_watabou_utils_PointExtender = function() { };
$hxClasses["com.watabou.utils.PointExtender"] = com_watabou_utils_PointExtender;
com_watabou_utils_PointExtender.__name__ = ["com","watabou","utils","PointExtender"];
com_watabou_utils_PointExtender.set = function(p,q) {
	p.x = q.x;
	p.y = q.y;
};
com_watabou_utils_PointExtender.scale = function(p,f) {
	return new openfl_geom_Point(p.x * f,p.y * f);
};
com_watabou_utils_PointExtender.norm = function(p,length) {
	if(length == null) {
		length = 1;
	}
	p = p.clone();
	p.normalize(length);
	return p;
};
com_watabou_utils_PointExtender.addEq = function(p,q) {
	p.x += q.x;
	p.y += q.y;
};
com_watabou_utils_PointExtender.subEq = function(p,q) {
	p.x -= q.x;
	p.y -= q.y;
};
com_watabou_utils_PointExtender.scaleEq = function(p,f) {
	p.x *= f;
	p.y *= f;
};
com_watabou_utils_PointExtender.atan = function(p) {
	return Math.atan2(p.y,p.x);
};
com_watabou_utils_PointExtender.dot = function(p1,p2) {
	return p1.x * p2.x + p1.y * p2.y;
};
com_watabou_utils_PointExtender.rotate90 = function(p) {
	return new openfl_geom_Point(-p.y,p.x);
};
com_watabou_utils_PointExtender.rotate = function(p,a) {
	var cosB = Math.cos(a);
	var sinB = Math.sin(a);
	return new openfl_geom_Point(p.x * cosB - p.y * sinB,p.y * cosB + p.x * sinB);
};
com_watabou_utils_PointExtender.scalar = function(p1,p2) {
	return p1.x * p2.x + p1.y * p2.y;
};
com_watabou_utils_PointExtender.cross = function(p1,p2) {
	return p1.x * p2.y - p1.y * p2.x;
};
com_watabou_utils_PointExtender.project = function(basis,v) {
	var len = basis.get_length();
	return (basis.x * v.x + basis.y * v.y) / (len * len);
};
var com_watabou_utils_Random = function() { };
$hxClasses["com.watabou.utils.Random"] = com_watabou_utils_Random;
com_watabou_utils_Random.__name__ = ["com","watabou","utils","Random"];
com_watabou_utils_Random.reset = function(seed) {
	if(seed == null) {
		seed = -1;
	}
	com_watabou_utils_Random.seed = seed != -1 ? seed : new Date().getTime() % 2147483647 | 0;
};
com_watabou_utils_Random.save = function() {
	return com_watabou_utils_Random.saved = com_watabou_utils_Random.seed;
};
com_watabou_utils_Random.restore = function(value) {
	if(value == null) {
		value = -1;
	}
	if(value != -1) {
		com_watabou_utils_Random.seed = value;
	} else if(com_watabou_utils_Random.saved != -1) {
		com_watabou_utils_Random.seed = com_watabou_utils_Random.saved;
		com_watabou_utils_Random.saved = -1;
	}
};
com_watabou_utils_Random.getSeed = function() {
	return com_watabou_utils_Random.seed;
};
com_watabou_utils_Random.next = function() {
	return com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0;
};
com_watabou_utils_Random["float"] = function() {
	return (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
};
com_watabou_utils_Random.float2 = function() {
	var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	return f * f * f;
};
com_watabou_utils_Random.normal = function() {
	return ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3;
};
com_watabou_utils_Random.normal2 = function() {
	return ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1;
};
com_watabou_utils_Random["int"] = function(min,max) {
	return min + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * (max - min) | 0;
};
com_watabou_utils_Random.frac = function(f) {
	return (f | 0) + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < f - (f | 0) ? 1 : 0);
};
com_watabou_utils_Random.bool = function(chance) {
	if(chance == null) {
		chance = 0.5;
	}
	return (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < chance;
};
com_watabou_utils_Random.fuzzy = function(f) {
	if(f == null) {
		f = 1.0;
	}
	if(f == 0) {
		return 0.5;
	} else {
		return (1 - f) / 2 + f * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	}
};
var com_watabou_utils_RectExtender = function() { };
$hxClasses["com.watabou.utils.RectExtender"] = com_watabou_utils_RectExtender;
com_watabou_utils_RectExtender.__name__ = ["com","watabou","utils","RectExtender"];
com_watabou_utils_RectExtender.random = function(rect) {
	return new openfl_geom_Point(rect.x + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * rect.width,rect.y + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * rect.height);
};
com_watabou_utils_RectExtender.center = function(rect) {
	return new openfl_geom_Point(rect.x + rect.width / 2,rect.y + rect.height / 2);
};
com_watabou_utils_RectExtender.topRight = function(r) {
	return new openfl_geom_Point(r.x + r.width,r.y);
};
com_watabou_utils_RectExtender.bottomLeft = function(r) {
	return new openfl_geom_Point(r.x,r.y + r.height);
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = ["msignal","Signal"];
msignal_Signal.prototype = {
	valueClasses: null
	,numListeners: null
	,slots: null
	,priorityBased: null
	,add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
};
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = ["msignal","Signal1"];
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = ["msignal","SlotList"];
msignal_SlotList.prototype = {
	head: null
	,tail: null
	,nonEmpty: null
	,length: null
	,get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
};
var com_watabou_utils_Updater = function() { };
$hxClasses["com.watabou.utils.Updater"] = com_watabou_utils_Updater;
com_watabou_utils_Updater.__name__ = ["com","watabou","utils","Updater"];
com_watabou_utils_Updater.reset = function() {
	com_watabou_utils_Updater._tick.removeAll();
};
com_watabou_utils_Updater.get_tick = function() {
	if(com_watabou_utils_Updater.source == null) {
		com_watabou_utils_Updater.useTimer(60);
	}
	return com_watabou_utils_Updater._tick;
};
com_watabou_utils_Updater.fire = function() {
	var t = openfl_Lib.getTimer();
	if(com_watabou_utils_Updater.lastTime == 0) {
		com_watabou_utils_Updater._tick.dispatch(0);
	} else {
		com_watabou_utils_Updater._tick.dispatch((t - com_watabou_utils_Updater.lastTime) / 1000 * com_watabou_utils_Updater.timeScale);
	}
	com_watabou_utils_Updater.lastTime = t;
};
com_watabou_utils_Updater.useTimer = function(interval) {
	if(com_watabou_utils_Updater.source != null) {
		com_watabou_utils_Updater.source.stop();
	}
	com_watabou_utils_Updater.source = new com_watabou_utils__$Updater_TimerEventDispatcher(interval);
};
com_watabou_utils_Updater.useEnterFrame = function(src) {
	if(com_watabou_utils_Updater.source != null) {
		com_watabou_utils_Updater.source.stop();
	}
	com_watabou_utils_Updater.source = new com_watabou_utils__$Updater_FrameEventDispatcher(src);
};
com_watabou_utils_Updater.useRenderer = function(window) {
	if(com_watabou_utils_Updater.source != null) {
		com_watabou_utils_Updater.source.stop();
	}
	com_watabou_utils_Updater.source = new com_watabou_utils__$Updater_RendererDispatcher(window);
};
com_watabou_utils_Updater.wait = function(time,callback) {
	var passed = 0.0;
	var waiting = null;
	waiting = function(elapsed) {
		if((passed += elapsed) >= time) {
			com_watabou_utils_Updater.get_tick().remove(waiting);
			callback();
		}
	};
	var waiting1 = waiting;
	com_watabou_utils_Updater.get_tick().add(waiting1);
	return waiting1;
};
com_watabou_utils_Updater.cancel = function(callback) {
	com_watabou_utils_Updater.get_tick().remove(callback);
};
com_watabou_utils_Updater.stop = function() {
	if(com_watabou_utils_Updater.source != null) {
		com_watabou_utils_Updater.source.stop();
		com_watabou_utils_Updater.source = null;
	}
};
var com_watabou_utils_RecurringEventDispatcher = function() { };
$hxClasses["com.watabou.utils.RecurringEventDispatcher"] = com_watabou_utils_RecurringEventDispatcher;
com_watabou_utils_RecurringEventDispatcher.__name__ = ["com","watabou","utils","RecurringEventDispatcher"];
com_watabou_utils_RecurringEventDispatcher.prototype = {
	stop: function() {
	}
	,__class__: com_watabou_utils_RecurringEventDispatcher
};
var com_watabou_utils__$Updater_TimerEventDispatcher = function(interval) {
	this.timer = new openfl_utils_Timer(interval);
	this.timer.addEventListener("timer",$bind(this,this.onTimer));
	this.timer.start();
};
$hxClasses["com.watabou.utils._Updater.TimerEventDispatcher"] = com_watabou_utils__$Updater_TimerEventDispatcher;
com_watabou_utils__$Updater_TimerEventDispatcher.__name__ = ["com","watabou","utils","_Updater","TimerEventDispatcher"];
com_watabou_utils__$Updater_TimerEventDispatcher.__super__ = com_watabou_utils_RecurringEventDispatcher;
com_watabou_utils__$Updater_TimerEventDispatcher.prototype = $extend(com_watabou_utils_RecurringEventDispatcher.prototype,{
	timer: null
	,onTimer: function(e) {
		com_watabou_utils_Updater.fire();
		e.updateAfterEvent();
	}
	,stop: function() {
		this.timer.stop();
	}
	,__class__: com_watabou_utils__$Updater_TimerEventDispatcher
});
var com_watabou_utils__$Updater_FrameEventDispatcher = function(dispObj) {
	this.dispObj = dispObj;
	dispObj.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
};
$hxClasses["com.watabou.utils._Updater.FrameEventDispatcher"] = com_watabou_utils__$Updater_FrameEventDispatcher;
com_watabou_utils__$Updater_FrameEventDispatcher.__name__ = ["com","watabou","utils","_Updater","FrameEventDispatcher"];
com_watabou_utils__$Updater_FrameEventDispatcher.__super__ = com_watabou_utils_RecurringEventDispatcher;
com_watabou_utils__$Updater_FrameEventDispatcher.prototype = $extend(com_watabou_utils_RecurringEventDispatcher.prototype,{
	dispObj: null
	,onEnterFrame: function(e) {
		com_watabou_utils_Updater.fire();
	}
	,stop: function() {
		this.dispObj.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
	}
	,__class__: com_watabou_utils__$Updater_FrameEventDispatcher
});
var com_watabou_utils__$Updater_RendererDispatcher = function(window) {
	this.window = window;
	window.onRender.add($bind(this,this.onRender));
};
$hxClasses["com.watabou.utils._Updater.RendererDispatcher"] = com_watabou_utils__$Updater_RendererDispatcher;
com_watabou_utils__$Updater_RendererDispatcher.__name__ = ["com","watabou","utils","_Updater","RendererDispatcher"];
com_watabou_utils__$Updater_RendererDispatcher.__super__ = com_watabou_utils_RecurringEventDispatcher;
com_watabou_utils__$Updater_RendererDispatcher.prototype = $extend(com_watabou_utils_RecurringEventDispatcher.prototype,{
	window: null
	,onRender: function(context) {
		com_watabou_utils_Updater.fire();
	}
	,stop: function() {
		this.window.onRender.remove($bind(this,this.onRender));
	}
	,__class__: com_watabou_utils__$Updater_RendererDispatcher
});
var com_watabou_wintermansion_elements3d_Banner = function() {
	away3d_entities_Mesh.call(this,this.createGeometry(),com_watabou_wintermansion_elements3d_Banner.texture);
	this.scale(com_watabou_wintermansion_elements3d_Banner.size);
	this.phase = Math.PI * 2 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
	com_watabou_utils_Updater.get_tick().add($bind(this,this.onUpdate));
	com_watabou_wintermansion_elements3d_Banner.flags.push(this);
	this.set_rotationY(com_watabou_wintermansion_elements3d_Banner.angle);
};
$hxClasses["com.watabou.wintermansion.elements3d.Banner"] = com_watabou_wintermansion_elements3d_Banner;
com_watabou_wintermansion_elements3d_Banner.__name__ = ["com","watabou","wintermansion","elements3d","Banner"];
com_watabou_wintermansion_elements3d_Banner.solid = function(c1,c2) {
	var shape = new openfl_display_Shape();
	shape.get_graphics().beginFill(c1);
	shape.get_graphics().drawRect(0,0,512,512);
	return shape;
};
com_watabou_wintermansion_elements3d_Banner.horSplit = function(c1,c2) {
	var shape = new openfl_display_Shape();
	shape.get_graphics().beginFill(c1);
	shape.get_graphics().drawRect(0,0,512,256.);
	shape.get_graphics().beginFill(c2);
	shape.get_graphics().drawRect(0,256.,512,256.);
	return shape;
};
com_watabou_wintermansion_elements3d_Banner.verSplit = function(c1,c2) {
	var shape = new openfl_display_Shape();
	shape.get_graphics().beginFill(c1);
	shape.get_graphics().drawRect(0,0,204.8,512);
	shape.get_graphics().beginFill(c2);
	shape.get_graphics().drawRect(204.8,0,307.2,512);
	return shape;
};
com_watabou_wintermansion_elements3d_Banner.checkers = function(c1,c2) {
	var shape = new openfl_display_Shape();
	shape.get_graphics().beginFill(c1);
	shape.get_graphics().drawRect(0,0,512,512);
	shape.get_graphics().beginFill(c2);
	shape.get_graphics().drawRect(0,256.,204.8,256.);
	shape.get_graphics().drawRect(204.8,0,307.2,256.);
	return shape;
};
com_watabou_wintermansion_elements3d_Banner.stripes = function(c1,c2) {
	var shape = new openfl_display_Shape();
	shape.get_graphics().beginFill(c1);
	shape.get_graphics().drawRect(0,0,512,512);
	shape.get_graphics().beginFill(c2);
	shape.get_graphics().drawRect(0,76.8,512,76.8);
	shape.get_graphics().drawRect(0,358.4,512,76.8);
	return shape;
};
com_watabou_wintermansion_elements3d_Banner.square = function() {
	if(com_watabou_wintermansion_elements3d_Banner.shapeSquare == null) {
		com_watabou_wintermansion_elements3d_Banner.shapeSquare = new openfl_display_Shape();
		com_watabou_wintermansion_elements3d_Banner.shapeSquare.get_graphics().beginFill(16711680);
		com_watabou_wintermansion_elements3d_Banner.shapeSquare.get_graphics().drawRect(0,0,512,512);
	}
	return com_watabou_wintermansion_elements3d_Banner.shapeSquare;
};
com_watabou_wintermansion_elements3d_Banner.swallowtail = function() {
	if(com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail == null) {
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail = new openfl_display_Shape();
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().beginFill(16711680);
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().moveTo(0,0);
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().lineTo(512,0);
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().lineTo(384.,256.);
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().lineTo(512,512);
		com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail.get_graphics().lineTo(0,512);
	}
	return com_watabou_wintermansion_elements3d_Banner.shapeSwallowtail;
};
com_watabou_wintermansion_elements3d_Banner.pennant = function() {
	if(com_watabou_wintermansion_elements3d_Banner.shapePennant == null) {
		com_watabou_wintermansion_elements3d_Banner.shapePennant = new openfl_display_Shape();
		com_watabou_wintermansion_elements3d_Banner.shapePennant.get_graphics().beginFill(16711680);
		com_watabou_wintermansion_elements3d_Banner.shapePennant.get_graphics().moveTo(0,0);
		com_watabou_wintermansion_elements3d_Banner.shapePennant.get_graphics().lineTo(512,256.);
		com_watabou_wintermansion_elements3d_Banner.shapePennant.get_graphics().lineTo(0,512);
	}
	return com_watabou_wintermansion_elements3d_Banner.shapePennant;
};
com_watabou_wintermansion_elements3d_Banner.burgee = function() {
	if(com_watabou_wintermansion_elements3d_Banner.shapeBurgee == null) {
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee = new openfl_display_Shape();
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().beginFill(16711680);
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().moveTo(0,0);
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().lineTo(512,128.);
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().lineTo(384.,256.);
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().lineTo(512,384.);
		com_watabou_wintermansion_elements3d_Banner.shapeBurgee.get_graphics().lineTo(0,512);
	}
	return com_watabou_wintermansion_elements3d_Banner.shapeBurgee;
};
com_watabou_wintermansion_elements3d_Banner.spearhead = function() {
	if(com_watabou_wintermansion_elements3d_Banner.shapeSpearhead == null) {
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead = new openfl_display_Shape();
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().beginFill(16711680);
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().moveTo(0,0);
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().lineTo(384.,0);
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().lineTo(512,256.);
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().lineTo(384.,512);
		com_watabou_wintermansion_elements3d_Banner.shapeSpearhead.get_graphics().lineTo(0,512);
	}
	return com_watabou_wintermansion_elements3d_Banner.shapeSpearhead;
};
com_watabou_wintermansion_elements3d_Banner.createFlag = function() {
	var bmp = new openfl_display_BitmapData(512,512,true,0);
	var style = com_watabou_wintermansion_elements3d_Style.current.flag;
	if(style == null) {
		var colors = com_watabou_utils_ArrayExtender.shuffle(com_watabou_wintermansion_elements3d_Banner.PALETTE);
		var pattern = (com_watabou_utils_ArrayExtender.random(com_watabou_wintermansion_elements3d_Banner.patterns))(colors[0],colors[1]);
		pattern.set_mask((com_watabou_utils_ArrayExtender.random(com_watabou_wintermansion_elements3d_Banner.shapes))());
		bmp.draw(pattern);
	} else {
		var pattern1 = com_watabou_wintermansion_elements3d_Banner.patterns[style >> 8](com_watabou_wintermansion_elements3d_Banner.PALETTE[style >> 4 & 15],com_watabou_wintermansion_elements3d_Banner.PALETTE[style & 15]);
		pattern1.set_mask((com_watabou_utils_ArrayExtender.random(com_watabou_wintermansion_elements3d_Banner.shapes))());
		bmp.draw(pattern1);
	}
	com_watabou_wintermansion_elements3d_Banner.texture = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true,false,false);
	com_watabou_wintermansion_elements3d_Banner.texture.set_alphaBlending(true);
	com_watabou_wintermansion_elements3d_Banner.texture.set_specular(0.8);
	return com_watabou_wintermansion_elements3d_Banner.texture;
};
com_watabou_wintermansion_elements3d_Banner.reset = function() {
	var _g = 0;
	var _g1 = com_watabou_wintermansion_elements3d_Banner.flags;
	while(_g < _g1.length) {
		var flag = _g1[_g];
		++_g;
		com_watabou_utils_Updater.get_tick().remove($bind(flag,flag.onUpdate));
	}
	com_watabou_wintermansion_elements3d_Banner.flags = [];
	com_watabou_wintermansion_elements3d_Banner.angle = 360 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
	com_watabou_wintermansion_elements3d_Banner.$length = 12 + (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1) * 6 | 0;
	com_watabou_wintermansion_elements3d_Banner.size = 0.15 + (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1) * 0.03;
	com_watabou_wintermansion_elements3d_Banner.amplitude = Math.PI * (0.25 + 0.25 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1));
	com_watabou_wintermansion_elements3d_Banner.frequency = Math.PI * 2 / 3 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
};
com_watabou_wintermansion_elements3d_Banner.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_Banner.prototype = $extend(away3d_entities_Mesh.prototype,{
	segments: null
	,phase: null
	,side0: null
	,side1: null
	,createGeometry: function() {
		var fa = new com_watabou_wintermansion_utils3d_FaceAdder();
		var _g1 = 0;
		var _g = com_watabou_wintermansion_elements3d_Banner.$length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			fa.addVertex(i * 0.4,-0.5,0,0,0,-1,i / com_watabou_wintermansion_elements3d_Banner.$length,1);
			fa.addVertex(i * 0.4,0.5,0,0,0,-1,i / com_watabou_wintermansion_elements3d_Banner.$length,0);
		}
		var _g11 = 0;
		var _g2 = com_watabou_wintermansion_elements3d_Banner.$length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			fa.addTri(i1 * 2,(i1 + 1) * 2,(i1 + 1) * 2 + 1);
			fa.addTri(i1 * 2,(i1 + 1) * 2 + 1,i1 * 2 + 1);
		}
		var g = new away3d_core_base_Geometry();
		this.side0 = new away3d_core_base_CompactSubGeometry();
		this.side0.updateData(fa.data.copy());
		this.side0.updateIndexData(fa.indices.copy());
		g.addSubGeometry(this.side0);
		fa.flip();
		this.side1 = new away3d_core_base_CompactSubGeometry();
		this.side1.updateData(fa.data);
		this.side1.updateIndexData(fa.indices);
		g.addSubGeometry(this.side1);
		return g;
	}
	,onUpdate: function(e) {
		this.setPhase(this.phase + e * Math.PI);
	}
	,setPhase: function(a) {
		this.phase = a;
		var data0 = this.side0.get_vertexData();
		var vStride = this.side0.get_vertexStride();
		var p = new openfl_geom_Point();
		var amp = com_watabou_wintermansion_elements3d_Banner.amplitude;
		var _g1 = 0;
		var _g = com_watabou_wintermansion_elements3d_Banner.$length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var rotation = com_watabou_wintermansion_elements3d_Banner.amplitude * Math.sin(a);
			var normal = openfl_geom_Point.polar(1,rotation + Math.PI / 2);
			var j = i * 2 * vStride;
			data0.set(j,p.x);
			data0.set(j + 2,p.y);
			data0.set(j + 3,normal.x);
			data0.set(j + 5,normal.y);
			j += vStride;
			data0.set(j,p.x);
			data0.set(j + 2,p.y);
			data0.set(j + 3,normal.x);
			data0.set(j + 5,normal.y);
			p = p.add(openfl_geom_Point.polar(0.4,-rotation));
			a -= com_watabou_wintermansion_elements3d_Banner.frequency;
			amp *= 1.05;
		}
		this.side0.updateData(data0);
		var data1 = this.side1.get_vertexData();
		var _g11 = 0;
		var _g2 = (com_watabou_wintermansion_elements3d_Banner.$length + 1) * 2;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var j1 = i1 * vStride;
			data1.set(j1,data0.get(j1));
			data1.set(j1 + 2,data0.get(j1 + 2));
			data1.set(j1 + 3,-data0.get(j1 + 3));
			data1.set(j1 + 5,-data0.get(j1 + 5));
		}
		this.side1.updateData(data1);
	}
	,__class__: com_watabou_wintermansion_elements3d_Banner
});
var com_watabou_wintermansion_elements3d_Chimney = function(body,hole) {
	away3d_core_base_Geometry.call(this);
	var _g = 0;
	while(_g < body.length) {
		var sg = body[_g];
		++_g;
		this.addSubGeometry(sg);
	}
	this.addSubGeometry(this.hole = hole);
};
$hxClasses["com.watabou.wintermansion.elements3d.Chimney"] = com_watabou_wintermansion_elements3d_Chimney;
com_watabou_wintermansion_elements3d_Chimney.__name__ = ["com","watabou","wintermansion","elements3d","Chimney"];
com_watabou_wintermansion_elements3d_Chimney.create = function(view) {
	var chimney = new away3d_entities_Mesh(com_watabou_wintermansion_elements3d_Chimney.proto,view.mWalls);
	chimney.getSubMeshForSubGeometry(com_watabou_wintermansion_elements3d_Chimney.proto.hole).set_material(view.mHole);
	return chimney;
};
com_watabou_wintermansion_elements3d_Chimney.createProto = function(mansion) {
	var g = new away3d_core_base_Geometry();
	var ch = mansion.pitch * 0.8;
	var cw = 0.15;
	var box = new away3d_primitives_CubeGeometry(cw,ch,cw);
	var m = new openfl_geom_Matrix3D();
	m.appendTranslation(0,ch / 2 - cw * mansion.pitch + com_watabou_wintermansion_elements3d_Style.current.thickness,0);
	box.applyTransformation(m);
	var _g = [];
	var _g1 = 0;
	var _g2 = box.get_subGeometries();
	while(_g1 < _g2.get_length()) {
		var sg = _g2.get(_g1);
		++_g1;
		_g.push(sg);
	}
	var body = _g;
	if(com_watabou_wintermansion_elements3d_Style.current.baseSize > 0) {
		var dw = com_watabou_wintermansion_elements3d_Style.current.baseSize;
		var dh = com_watabou_wintermansion_elements3d_Style.current.baseHeight;
		var cw2 = cw * (1 + dw);
		var ch2 = cw * dh;
		var box2 = new away3d_primitives_CubeGeometry(cw2,ch2,cw2);
		m.identity();
		m.appendTranslation(0,ch / 2 - cw * mansion.pitch + com_watabou_wintermansion_elements3d_Style.current.thickness + (ch - ch2) / 2,0);
		box2.applyTransformation(m);
		var _g11 = 0;
		var _g21 = box2.get_subGeometries();
		while(_g11 < _g21.get_length()) {
			var sg1 = _g21.get(_g11);
			++_g11;
			body.push(sg1);
		}
	}
	var d = new com_watabou_wintermansion_utils3d_Decal();
	var h = cw / 4;
	d.addPoint(-h,h);
	d.addPoint(h,h);
	d.addPoint(h,-h);
	d.addPoint(-h,-h);
	var hole = d.subGeometry(1.0,0,true);
	m.identity();
	m.appendTranslation(0,ch - cw * mansion.pitch + com_watabou_wintermansion_elements3d_Style.current.thickness,0);
	hole.applyTransformation(m);
	com_watabou_wintermansion_elements3d_Chimney.proto = new com_watabou_wintermansion_elements3d_Chimney(body,hole);
};
com_watabou_wintermansion_elements3d_Chimney.__super__ = away3d_core_base_Geometry;
com_watabou_wintermansion_elements3d_Chimney.prototype = $extend(away3d_core_base_Geometry.prototype,{
	hole: null
	,__class__: com_watabou_wintermansion_elements3d_Chimney
});
var com_watabou_wintermansion_elements3d_Door = function(doorway,steps) {
	away3d_core_base_Geometry.call(this);
	this.addSubGeometry(this.doorway = doorway);
	var _g = 0;
	while(_g < steps.length) {
		var sg = steps[_g];
		++_g;
		this.addSubGeometry(sg);
	}
};
$hxClasses["com.watabou.wintermansion.elements3d.Door"] = com_watabou_wintermansion_elements3d_Door;
com_watabou_wintermansion_elements3d_Door.__name__ = ["com","watabou","wintermansion","elements3d","Door"];
com_watabou_wintermansion_elements3d_Door.create = function(view,face) {
	var geometry = com_watabou_wintermansion_elements3d_Door.proto[face];
	var door = new away3d_entities_Mesh(geometry,view.mBase);
	door.getSubMeshForSubGeometry(geometry.doorway).set_material(view.mWood);
	return door;
};
com_watabou_wintermansion_elements3d_Door.createProtos = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(com_watabou_wintermansion_elements3d_Door.createProto(i));
	}
	com_watabou_wintermansion_elements3d_Door.proto = _g;
};
com_watabou_wintermansion_elements3d_Door.createProto = function(f) {
	if(f == null) {
		f = 0;
	}
	var w = 0.3;
	var doorway = com_watabou_wintermansion_elements3d_Door.createDoorway(w,f);
	var steps = com_watabou_wintermansion_elements3d_Door.createSteps(w,f);
	return new com_watabou_wintermansion_elements3d_Door(doorway,steps);
};
com_watabou_wintermansion_elements3d_Door.createDoorway = function(w,face) {
	var h = 0.7;
	var n = 7;
	var r = w * 0.5;
	var decal = new com_watabou_wintermansion_utils3d_Decal();
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		var a = Math.PI * (1 - i / n);
		decal.addPoint(r * Math.cos(a),h - r + r * Math.sin(a));
	}
	decal.addPoint(r,0);
	decal.addPoint(-r,0);
	return decal.subGeometry(1.0,face);
};
com_watabou_wintermansion_elements3d_Door.createSteps = function(w,face) {
	var stairsHeight = com_watabou_wintermansion_elements3d_Style.current.baseHeight;
	if(stairsHeight == 0) {
		var sh = 0.06;
		var sw = w + sh * 2;
		var sd = sh;
		var s = new away3d_primitives_CubeGeometry(sw,sh,sd);
		var m = new openfl_geom_Matrix3D();
		m.appendTranslation(0,sh / 2,sd / 2);
		m.appendRotation(90 * face,new openfl_geom_Vector3D(0,1,0));
		m.appendScale(1.0,1.0,1.0);
		s.applyTransformation(m);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.get_subGeometries();
		while(_g1 < _g2.get_length()) {
			var sg = _g2.get(_g1);
			++_g1;
			_g.push(sg);
		}
		return _g;
	} else {
		var n = Math.ceil(stairsHeight / 0.06);
		var sh1 = stairsHeight / n;
		var sw1 = w + sh1 * 2;
		var sd1 = Math.max(sh1,com_watabou_wintermansion_elements3d_Style.current.baseSize / 2);
		var sgs = [];
		var _g11 = 0;
		var _g3 = n;
		while(_g11 < _g3) {
			var i = _g11++;
			var s1 = new away3d_primitives_CubeGeometry(sw1,sh1,sd1 * (i + 1));
			var m1 = new openfl_geom_Matrix3D();
			m1.appendTranslation(0,-sh1 / 2 - i * sh1,sd1 / 2 + i * sd1 / 2);
			m1.appendRotation(90 * face,new openfl_geom_Vector3D(0,1,0));
			m1.appendScale(1.0,1.0,1.0);
			s1.applyTransformation(m1);
			var _g21 = 0;
			var _g31 = s1.get_subGeometries();
			while(_g21 < _g31.get_length()) {
				var sg1 = _g31.get(_g21);
				++_g21;
				sgs.push(sg1);
			}
		}
		return sgs;
	}
};
com_watabou_wintermansion_elements3d_Door.__super__ = away3d_core_base_Geometry;
com_watabou_wintermansion_elements3d_Door.prototype = $extend(away3d_core_base_Geometry.prototype,{
	doorway: null
	,__class__: com_watabou_wintermansion_elements3d_Door
});
var com_watabou_wintermansion_elements3d_GroundShadow = function() { };
$hxClasses["com.watabou.wintermansion.elements3d.GroundShadow"] = com_watabou_wintermansion_elements3d_GroundShadow;
com_watabou_wintermansion_elements3d_GroundShadow.__name__ = ["com","watabou","wintermansion","elements3d","GroundShadow"];
com_watabou_wintermansion_elements3d_GroundShadow.setup = function(lightPos,materials) {
	var dx = lightPos.x / lightPos.y;
	var dz = lightPos.z / lightPos.y;
	var a = [1,0,0,0,-dx,0,-dz,0,0,0,1,0,0,0,0,1];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	com_watabou_wintermansion_elements3d_GroundShadow.projection = new openfl_geom_Matrix3D(vector);
	com_watabou_wintermansion_elements3d_GroundShadow.materials = materials;
};
com_watabou_wintermansion_elements3d_GroundShadow.getShadows = function(mesh) {
	var _g = [];
	var _g1 = 0;
	var _g2 = mesh.get_subMeshes();
	while(_g1 < _g2.get_length()) {
		var subMesh = _g2.get(_g1);
		++_g1;
		if(com_watabou_wintermansion_elements3d_GroundShadow.materials.indexOf(subMesh.get_material()) != -1) {
			var sub = subMesh.get_subGeometry().clone();
			sub.applyTransformation(mesh.get_transform());
			sub.applyTransformation(com_watabou_wintermansion_elements3d_GroundShadow.projection);
			_g.push(sub);
		}
	}
	return _g;
};
var com_watabou_wintermansion_elements3d_Icicles = function(color,width,weight) {
	if(weight == null) {
		weight = 128;
	}
	if(width == null) {
		width = 64;
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = width;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	}
	var ice = _g;
	var _g21 = 0;
	var _g11 = weight;
	while(_g21 < _g11) {
		var i1 = _g21++;
		var ice1 = ice;
		var _g3 = [];
		var _g22 = 0;
		var _g12 = ice.length;
		while(_g22 < _g12) {
			var i2 = _g22++;
			_g3.push(i2);
		}
		ice1[com_watabou_utils_ArrayExtender.weighted(_g3,ice)] += ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2;
	}
	var _g23 = 0;
	var _g13 = width;
	while(_g23 < _g13) {
		var i3 = _g23++;
		if((i3 & 1) == 0) {
			ice[i3] = Math.sqrt(ice[i3]);
		}
	}
	away3d_materials_TextureMaterial.call(this,new away3d_textures_BitmapTexture(com_watabou_wintermansion_elements3d_Icicles.bitmap(ice,color,1024,1024),false),true,true);
	this.set_alphaBlending(true);
};
$hxClasses["com.watabou.wintermansion.elements3d.Icicles"] = com_watabou_wintermansion_elements3d_Icicles;
com_watabou_wintermansion_elements3d_Icicles.__name__ = ["com","watabou","wintermansion","elements3d","Icicles"];
com_watabou_wintermansion_elements3d_Icicles.bitmap = function(ice,color,w,h) {
	var bmp = new openfl_display_BitmapData(w,h,true,0);
	var s = w / ice.length;
	var sh = new openfl_display_Shape();
	sh.get_graphics().beginFill(color,1.0);
	sh.get_graphics().lineTo(0,ice[0]);
	var _g1 = 1;
	var _g = ice.length;
	while(_g1 < _g) {
		var i = _g1++;
		sh.get_graphics().curveTo(i - 0.5,Math.min(ice[i],ice[i - 1]),i,ice[i]);
	}
	sh.get_graphics().lineTo(ice.length,0);
	sh.get_graphics().lineTo(0,0);
	sh.get_graphics().endFill();
	var m = new openfl_geom_Matrix(s,0,0,s);
	bmp.draw(sh,m);
	return bmp;
};
com_watabou_wintermansion_elements3d_Icicles.createRack = function(view,v0,v1,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var fa = new com_watabou_wintermansion_utils3d_FaceAdder();
	var v2 = new openfl_geom_Vector3D(v1.x,v1.y - scale,v1.z);
	var v3 = new openfl_geom_Vector3D(v0.x,v0.y - scale,v0.z);
	var length = openfl_geom_Point.distance(new openfl_geom_Point(v0.x,v0.z),new openfl_geom_Point(v1.x,v1.z));
	var uMin = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var uMax = uMin + length / scale;
	var vMin = 0.0009765625;
	var vMax = 1 - vMin * 8;
	var n = null;
	var uv1 = new openfl_geom_Point(uMin,vMin);
	var uv2 = new openfl_geom_Point(uMax,vMin);
	var uv3 = new openfl_geom_Point(uMax,vMax);
	if(n == null) {
		n = v1.subtract(v0).crossProduct(v2.subtract(v0));
	}
	fa.addTriangle(v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,n.x,n.y,n.z,uv1.x,uv1.y,uv2.x,uv2.y,uv3.x,uv3.y);
	var n1 = null;
	var uv11 = new openfl_geom_Point(uMin,vMin);
	var uv21 = new openfl_geom_Point(uMax,vMax);
	var uv31 = new openfl_geom_Point(uMax,vMin);
	if(n1 == null) {
		n1 = v2.subtract(v0).crossProduct(v1.subtract(v0));
	}
	fa.addTriangle(v0.x,v0.y,v0.z,v2.x,v2.y,v2.z,v1.x,v1.y,v1.z,n1.x,n1.y,n1.z,uv11.x,uv11.y,uv21.x,uv21.y,uv31.x,uv31.y);
	var n2 = null;
	var uv12 = new openfl_geom_Point(uMin,vMin);
	var uv22 = new openfl_geom_Point(uMax,vMax);
	var uv32 = new openfl_geom_Point(uMin,vMax);
	if(n2 == null) {
		n2 = v2.subtract(v0).crossProduct(v3.subtract(v0));
	}
	fa.addTriangle(v0.x,v0.y,v0.z,v2.x,v2.y,v2.z,v3.x,v3.y,v3.z,n2.x,n2.y,n2.z,uv12.x,uv12.y,uv22.x,uv22.y,uv32.x,uv32.y);
	var n3 = null;
	var uv13 = new openfl_geom_Point(uMin,vMin);
	var uv23 = new openfl_geom_Point(uMin,vMax);
	var uv33 = new openfl_geom_Point(uMax,vMax);
	if(n3 == null) {
		n3 = v3.subtract(v0).crossProduct(v2.subtract(v0));
	}
	fa.addTriangle(v0.x,v0.y,v0.z,v3.x,v3.y,v3.z,v2.x,v2.y,v2.z,n3.x,n3.y,n3.z,uv13.x,uv13.y,uv23.x,uv23.y,uv33.x,uv33.y);
	var sg = new away3d_core_base_CompactSubGeometry();
	sg.updateData(fa.data);
	sg.updateIndexData(fa.indices);
	var g = new away3d_core_base_Geometry();
	g.addSubGeometry(sg);
	return new away3d_entities_Mesh(g,view.mIcicle);
};
com_watabou_wintermansion_elements3d_Icicles.__super__ = away3d_materials_TextureMaterial;
com_watabou_wintermansion_elements3d_Icicles.prototype = $extend(away3d_materials_TextureMaterial.prototype,{
	__class__: com_watabou_wintermansion_elements3d_Icicles
});
var com_watabou_wintermansion_elements3d_LampPost = function(view,x,y) {
	away3d_containers_ObjectContainer3D.call(this);
	var bulb = new away3d_entities_Mesh(com_watabou_wintermansion_elements3d_LampPost.geoBulb,view.mLight);
	bulb.set_x(x);
	bulb.set_y(com_watabou_wintermansion_elements3d_LampPost.height);
	bulb.set_z(y);
	this.addChild(bulb);
	if(view.style.lights != null) {
		var haloR = Math.min(com_watabou_wintermansion_elements3d_LampPost.height,1);
		var halo = new away3d_entities_Sprite3D(view.mHalo,haloR,haloR);
		halo.set_x(x);
		halo.set_y(com_watabou_wintermansion_elements3d_LampPost.height);
		halo.set_z(y);
		this.addChild(halo);
	}
	var ext = new away3d_entities_Mesh(com_watabou_wintermansion_elements3d_LampPost.geoPost.clone(),view.mWood);
	ext.set_x(x);
	ext.set_z(y);
	ext.bakeTransformations();
	this.addChild(ext);
};
$hxClasses["com.watabou.wintermansion.elements3d.LampPost"] = com_watabou_wintermansion_elements3d_LampPost;
com_watabou_wintermansion_elements3d_LampPost.__name__ = ["com","watabou","wintermansion","elements3d","LampPost"];
com_watabou_wintermansion_elements3d_LampPost.createGeoBallBulb = function(radius) {
	return new away3d_primitives_SphereGeometry(radius,12,8);
};
com_watabou_wintermansion_elements3d_LampPost.createGeoConicBulb = function(radius,shape,segments) {
	return new away3d_primitives_CylinderGeometry(radius * 0.9,radius * shape * 0.9,radius * 2,segments);
};
com_watabou_wintermansion_elements3d_LampPost.createGeoShadow = function(bulb) {
	var g = bulb.clone();
	var m = new openfl_geom_Matrix3D();
	m.appendScale(0.9,0.9,0.9);
	m.appendTranslation(0,com_watabou_wintermansion_elements3d_LampPost.height,0);
	g.applyTransformation(m);
	return g;
};
com_watabou_wintermansion_elements3d_LampPost.init = function() {
	var ballBulb = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.4;
	var bulbShape = 0.4 + 0.6 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var segments = (f * f * f * 3 + 2 | 0) * 2;
	var radius = com_watabou_wintermansion_elements3d_Style.current.winWidth / 3;
	com_watabou_wintermansion_elements3d_LampPost.height = com_watabou_wintermansion_elements3d_Style.current.baseHeight + com_watabou_wintermansion_elements3d_Style.current.floorHeight - radius;
	var f1 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var bandH = 0.01 + 0.01 * (f1 * f1 * f1);
	var baseH = com_watabou_wintermansion_elements3d_LampPost.height * (0.1 + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 0.3);
	var radius0 = 0.005 + 0.015 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var radius1 = radius0 * (1 + 2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3));
	var radius2 = radius1 * (1 + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	com_watabou_wintermansion_elements3d_LampPost.geoBulb = ballBulb ? com_watabou_wintermansion_elements3d_LampPost.createGeoBallBulb(radius) : com_watabou_wintermansion_elements3d_LampPost.createGeoConicBulb(radius,bulbShape,segments);
	var a = ballBulb ? [new openfl_geom_Vector3D(radius1,com_watabou_wintermansion_elements3d_LampPost.height,0),new openfl_geom_Vector3D(radius1,com_watabou_wintermansion_elements3d_LampPost.height - radius,0),new openfl_geom_Vector3D(radius0,com_watabou_wintermansion_elements3d_LampPost.height - radius - bandH,0),new openfl_geom_Vector3D(radius0,baseH,0),new openfl_geom_Vector3D(radius1,baseH - bandH,0),new openfl_geom_Vector3D(radius2,bandH,0),new openfl_geom_Vector3D(radius2,0,0)] : [new openfl_geom_Vector3D(0,com_watabou_wintermansion_elements3d_LampPost.height + radius + bandH * 3,0),new openfl_geom_Vector3D(radius,com_watabou_wintermansion_elements3d_LampPost.height + radius + bandH,0),new openfl_geom_Vector3D(radius,com_watabou_wintermansion_elements3d_LampPost.height + radius,0),new openfl_geom_Vector3D(0,com_watabou_wintermansion_elements3d_LampPost.height + radius,0),new openfl_geom_Vector3D(0,com_watabou_wintermansion_elements3d_LampPost.height - radius,0),new openfl_geom_Vector3D(radius * bulbShape,com_watabou_wintermansion_elements3d_LampPost.height - radius,0),new openfl_geom_Vector3D(radius * bulbShape,com_watabou_wintermansion_elements3d_LampPost.height - radius - bandH,0),new openfl_geom_Vector3D(radius0,com_watabou_wintermansion_elements3d_LampPost.height - radius - bandH,0),new openfl_geom_Vector3D(radius0,baseH,0),new openfl_geom_Vector3D(radius1,baseH - bandH,0),new openfl_geom_Vector3D(radius2,bandH,0),new openfl_geom_Vector3D(radius2,0,0)];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	var profile = vector;
	com_watabou_wintermansion_elements3d_LampPost.geoPost = new away3d_extrusions_LatheExtrude(null,profile,"y",1,segments,true,false,false,0,true,0,null,"",null,segments >= 8).get_geometry();
	var _g2 = 0;
	var _g11 = com_watabou_wintermansion_elements3d_LampPost.createGeoShadow(com_watabou_wintermansion_elements3d_LampPost.geoBulb).get_subGeometries();
	while(_g2 < _g11.get_length()) {
		var sg = _g11.get(_g2);
		++_g2;
		com_watabou_wintermansion_elements3d_LampPost.geoPost.addSubGeometry(sg);
	}
	if(segments == 4) {
		var m = new openfl_geom_Matrix3D();
		m.appendRotation(45,new openfl_geom_Vector3D(0,1,0));
		com_watabou_wintermansion_elements3d_LampPost.geoBulb.applyTransformation(m);
		com_watabou_wintermansion_elements3d_LampPost.geoPost.applyTransformation(m);
	}
};
com_watabou_wintermansion_elements3d_LampPost.createHalo = function(color) {
	com_watabou_wintermansion_elements3d_LampPost.init();
	if(com_watabou_wintermansion_elements3d_Style.current.lights != null) {
		if(color == 0) {
			color = 16777215;
		}
		var txtSize = 64;
		var bmp = new openfl_display_BitmapData(txtSize,txtSize,true,0);
		var halo = new openfl_display_Shape();
		var m = new openfl_geom_Matrix();
		m.createGradientBox(txtSize,txtSize);
		halo.get_graphics().beginGradientFill(1,[color,color],[0.2,0],[0,255],m);
		halo.get_graphics().drawCircle(txtSize / 2,txtSize / 2,txtSize / 2);
		bmp.draw(halo);
		var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true);
		mat.set_alphaBlending(true);
		mat.set_blendMode(0);
		return mat;
	} else {
		return null;
	}
};
com_watabou_wintermansion_elements3d_LampPost.__super__ = away3d_containers_ObjectContainer3D;
com_watabou_wintermansion_elements3d_LampPost.prototype = $extend(away3d_containers_ObjectContainer3D.prototype,{
	__class__: com_watabou_wintermansion_elements3d_LampPost
});
var com_watabou_wintermansion_elements3d_Roof = function(wing,view) {
	var style = com_watabou_wintermansion_elements3d_Style.current;
	away3d_containers_ObjectContainer3D.call(this);
	if(wing.tower && style.concave < 1) {
		this.addChild(new away3d_entities_Mesh(this.buildCone(wing,view,style.concave),view.mRoof));
	} else if(wing.hipRoof && wing.w == wing.h && (wing.parentA == null && wing.parentB == null) && style.concave < 1) {
		this.addChild(new away3d_entities_Mesh(this.buildCone(wing,view),view.mRoof));
	} else {
		this.addChild(new away3d_entities_Mesh(this.buildRamps(wing,view),view.mRoof));
		if(wing.parentA == null || wing.parentB == null) {
			var gables = new away3d_core_base_Geometry();
			gables.addSubGeometry(this.buildGables(wing,view));
			this.addChild(new away3d_entities_Mesh(gables,view.mWalls));
		}
		var ridge = style.ridge;
		if(ridge != null) {
			var beam = this.buildBeam(wing,view,ridge);
			if(beam != null) {
				this.addChild(new away3d_entities_Mesh(beam,com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("icicles") != -1 ? view.mRoof : view.mWood));
			}
		}
	}
	this.createChimney(wing,view);
	if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("icicles") != -1)) {
		this.createIcicles(wing,view);
	}
	var _this = wing.mansion;
	var p = new openfl_geom_Vector3D(0.,wing.height * _this.floorHeight + _this.baseHeight,0.);
	var _g1 = 0;
	var _g = this.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		this.getChildAt(i).translate(p,p.get_length());
	}
};
$hxClasses["com.watabou.wintermansion.elements3d.Roof"] = com_watabou_wintermansion_elements3d_Roof;
com_watabou_wintermansion_elements3d_Roof.__name__ = ["com","watabou","wintermansion","elements3d","Roof"];
com_watabou_wintermansion_elements3d_Roof.__super__ = away3d_containers_ObjectContainer3D;
com_watabou_wintermansion_elements3d_Roof.prototype = $extend(away3d_containers_ObjectContainer3D.prototype,{
	buildRamps: function(wing,view) {
		var eave = com_watabou_wintermansion_elements3d_Style.current.eaves;
		var rake = wing.hipRoof ? eave : com_watabou_wintermansion_elements3d_Style.current.rakes;
		var rakeA = wing.parentA == null ? -rake : 0.0;
		var rakeB = wing.parentB == null ? rake : 0.0;
		var eaveH = wing.mansion.pitch * eave * 2;
		var fa = new com_watabou_wintermansion_elements3d__$Roof_Roofer(com_watabou_wintermansion_elements3d_Style.current.thickness);
		var a1;
		var a2;
		var b1;
		var b2;
		var ca;
		var cb;
		if(wing.orientation) {
			a1 = new openfl_geom_Vector3D(wing.x + rakeA,-eaveH,wing.y - eave);
			a2 = new openfl_geom_Vector3D(wing.x + rakeA,-eaveH,wing.y + wing.h + eave);
			b1 = new openfl_geom_Vector3D(wing.x + wing.w + rakeB,-eaveH,wing.y - eave);
			b2 = new openfl_geom_Vector3D(wing.x + wing.w + rakeB,-eaveH,wing.y + wing.h + eave);
			ca = new openfl_geom_Vector3D(wing.x + rakeA,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
			cb = new openfl_geom_Vector3D(wing.x + wing.w + rakeB,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
			if(wing.hipRoof) {
				if(wing.parentA == null) {
					ca = new openfl_geom_Vector3D(wing.tipA,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
				}
				if(wing.parentB == null) {
					cb = new openfl_geom_Vector3D(wing.tipB,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
				}
			}
		} else {
			a1 = new openfl_geom_Vector3D(wing.x + wing.w + eave,-eaveH,wing.y + rakeA);
			a2 = new openfl_geom_Vector3D(wing.x - eave,-eaveH,wing.y + rakeA);
			b1 = new openfl_geom_Vector3D(wing.x + wing.w + eave,-eaveH,wing.y + wing.h + rakeB);
			b2 = new openfl_geom_Vector3D(wing.x - eave,-eaveH,wing.y + wing.h + rakeB);
			ca = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + rakeA);
			cb = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h + rakeB);
			if(wing.hipRoof) {
				if(wing.parentA == null) {
					ca = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipA);
				}
				if(wing.parentB == null) {
					cb = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipB);
				}
			}
		}
		fa.addFace([a1,b1,cb,ca],wing.orientation);
		fa.addFace([ca,cb,b2,a2],wing.orientation);
		if(wing.hipRoof) {
			if(wing.parentA == null) {
				fa.addFace([ca,a2,a1],!wing.orientation);
			}
			if(wing.parentB == null) {
				fa.addFace([cb,b1,b2],!wing.orientation);
			}
		}
		if(wing.parentA != null && (wing.parentA.orientation != wing.orientation || wing.parentA.hipRoof)) {
			var p1;
			var p2;
			var ta;
			if(wing.orientation) {
				ta = new openfl_geom_Vector3D(wing.tipA,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
				p1 = new openfl_geom_Vector3D(wing.x,0.,wing.y);
				p2 = new openfl_geom_Vector3D(wing.x,0.,wing.y + wing.h);
			} else {
				ta = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipA);
				p1 = new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y);
				p2 = new openfl_geom_Vector3D(wing.x,0.,wing.y);
			}
			fa.addFace([p1,ca,ta],wing.orientation);
			fa.addFace([p2,ta,ca],wing.orientation);
		}
		if(wing.parentB != null && (wing.parentB.orientation != wing.orientation || wing.parentB.hipRoof)) {
			var q1;
			var q2;
			var tb;
			if(wing.orientation) {
				tb = new openfl_geom_Vector3D(wing.tipB,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
				q1 = new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y);
				q2 = new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y + wing.h);
			} else {
				tb = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipB);
				q1 = new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y + wing.h);
				q2 = new openfl_geom_Vector3D(wing.x,0.,wing.y + wing.h);
			}
			fa.addFace([q1,tb,cb],wing.orientation);
			fa.addFace([q2,cb,tb],wing.orientation);
		}
		return fa.geometry();
	}
	,buildCone: function(wing,view,concave) {
		if(concave == null) {
			concave = 0.0;
		}
		var fa = new com_watabou_wintermansion_elements3d__$Roof_Roofer(com_watabou_wintermansion_elements3d_Style.current.thickness);
		var eave = com_watabou_wintermansion_elements3d_Style.current.eaves;
		var wideCone = (wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch * Math.pow(1 - concave,2);
		var pitch = wideCone / wing.w;
		var eaveH = eave * pitch * 2;
		var tip = new openfl_geom_Vector3D(wing.x + wing.w / 2,wideCone,wing.y + wing.h / 2);
		var edge = [new openfl_geom_Vector3D(wing.x - eave,-eaveH,wing.y - eave),new openfl_geom_Vector3D(wing.x + wing.w + eave,-eaveH,wing.y - eave),new openfl_geom_Vector3D(wing.x + wing.w + eave,-eaveH,wing.y + wing.h + eave),new openfl_geom_Vector3D(wing.x - eave,-eaveH,wing.y + wing.h + eave)];
		var _g1 = 0;
		var _g = edge.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v1 = edge[i];
			var v2 = edge[(i + 1) % edge.length];
			fa.addFace([tip,v1,v2],(i & 1) == 0);
		}
		if(concave > 0) {
			var tip1 = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2);
			var r = (wing.x + wing.w / 2 - wing.x) * concave;
			var edge1 = [new openfl_geom_Vector3D(wing.x + r,0.,wing.y + r),new openfl_geom_Vector3D(wing.x + wing.w - r,0.,wing.y + r),new openfl_geom_Vector3D(wing.x + wing.w - r,0.,wing.y + wing.h - r),new openfl_geom_Vector3D(wing.x + r,0.,wing.y + wing.h - r)];
			var _g11 = 0;
			var _g2 = edge1.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var v11 = edge1[i1];
				var v21 = edge1[(i1 + 1) % edge1.length];
				fa.addTop([tip1,v11,v21],(i1 & 1) == 0);
			}
		}
		return fa.geometry();
	}
	,buildBeam: function(wing,view,d) {
		var tmp;
		var tmp1;
		var tmp2;
		if(wing.parentA != null) {
			var _this = wing.parentA;
			tmp2 = _this.mansion.baseHeight + _this.height * _this.mansion.floorHeight + (_this.orientation ? _this.h : _this.w) * (_this.tower ? _this.mansion.towerFactor : 1) * _this.mansion.pitch != wing.mansion.baseHeight + wing.height * wing.mansion.floorHeight + (wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = wing.parentA.orientation == wing.orientation;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			var tmp3;
			if(wing.parentB != null) {
				var _this1 = wing.parentB;
				tmp3 = _this1.mansion.baseHeight + _this1.height * _this1.mansion.floorHeight + (_this1.orientation ? _this1.h : _this1.w) * (_this1.tower ? _this1.mansion.towerFactor : 1) * _this1.mansion.pitch != wing.mansion.baseHeight + wing.height * wing.mansion.floorHeight + (wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				tmp = wing.parentB.orientation == wing.orientation;
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var c = wing.orientation ? wing.x + wing.w / 2 : wing.y + wing.h / 2;
		var rake = com_watabou_wintermansion_elements3d_Style.current.rakes;
		var lenA = c - wing.tipA + (wing.parentA == null && !wing.hipRoof ? rake : 0);
		var lenB = wing.tipB - c + (wing.parentB == null && !wing.hipRoof ? rake : 0);
		var bar;
		if(com_watabou_wintermansion_elements3d_Style.current.cylindrical) {
			bar = new away3d_primitives_CylinderGeometry(d / 2,d / 2,lenA + lenB + d,12);
			var m = new openfl_geom_Matrix3D();
			m.appendRotation(90,new openfl_geom_Vector3D(0,0,1));
			bar.applyTransformation(m);
		} else {
			bar = new away3d_primitives_CubeGeometry(lenA + lenB + d,d,d);
		}
		var m1 = new openfl_geom_Matrix3D();
		m1.appendTranslation((lenB - lenA) / 2,0,0);
		m1.appendScale(1.0,1.0,1.0);
		if(!wing.orientation) {
			m1.appendRotation(-90,new openfl_geom_Vector3D(0,1,0));
		}
		var p = new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch + com_watabou_wintermansion_elements3d_Style.current.thickness,wing.y + wing.h / 2);
		m1.appendTranslation(p.x,p.y,p.z);
		bar.applyTransformation(m1);
		return bar;
	}
	,buildGables: function(wing,view) {
		var fa = new com_watabou_wintermansion_utils3d_FaceAdder();
		var base = wing.mansion.baseHeight;
		if(wing.parentA == null) {
			if(wing.orientation) {
				fa.addPolygon([new openfl_geom_Vector3D(wing.x,0.,wing.y),new openfl_geom_Vector3D(wing.tipA,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2),new openfl_geom_Vector3D(wing.x,0.,wing.y + wing.h)]);
			} else {
				fa.addPolygon([new openfl_geom_Vector3D(wing.x,0.,wing.y),new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y),new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipA)]);
			}
		}
		if(wing.parentB == null) {
			if(wing.orientation) {
				fa.addPolygon([new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y),new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y + wing.h),new openfl_geom_Vector3D(wing.tipB,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.y + wing.h / 2)]);
			} else {
				fa.addPolygon([new openfl_geom_Vector3D(wing.x,0.,wing.y + wing.h),new openfl_geom_Vector3D(wing.x + wing.w / 2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch,wing.tipB),new openfl_geom_Vector3D(wing.x + wing.w,0.,wing.y + wing.h)]);
			}
		}
		var sg = new away3d_core_base_CompactSubGeometry();
		sg.updateData(fa.data);
		sg.updateIndexData(fa.indices);
		return sg;
	}
	,createChimney: function(wing,view) {
		if(wing.chimney != null) {
			var chimney = com_watabou_wintermansion_elements3d_Chimney.create(view);
			var pos = new openfl_geom_Vector3D(wing.chimney.x,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch / 2,wing.chimney.y);
			chimney.translate(pos,pos.get_length());
			this.addChild(chimney);
			if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.6) {
				var smoke = new com_watabou_wintermansion_elements3d_Smoke(view);
				pos.y += wing.mansion.pitch * 0.65 + com_watabou_wintermansion_elements3d_Style.current.thickness;
				smoke.translate(pos,pos.get_length());
				this.addChild(smoke);
			}
		}
	}
	,createIcicles: function(wing,view) {
		var _gthis = this;
		var delta = 0.01;
		var hip = wing.hipRoof || wing.tower && view.style.concave < 1;
		var eave = view.style.eaves;
		var rake = hip ? eave : view.style.rakes;
		var eaveDrop = -eave * wing.mansion.pitch * 2 + delta;
		var pa = wing.parentA == null;
		var pb = wing.parentB == null;
		var eaveScale = 2;
		var rakeScale = 2;
		var straight = function(x0,y0,x1,y1) {
			var straight1 = new openfl_geom_Vector3D(x0,eaveDrop,y0);
			var straight2 = com_watabou_wintermansion_elements3d_Icicles.createRack(view,straight1,new openfl_geom_Vector3D(x1,eaveDrop,y1),eaveScale);
			_gthis.addChild(straight2);
		};
		var underRoof = function(x01,y01,x11,y11) {
			var x2 = (x01 + x11) / 2;
			var y2 = (y01 + y11) / 2;
			var v0 = new openfl_geom_Vector3D(x01,eaveDrop,y01);
			var v1 = new openfl_geom_Vector3D(x2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch + delta,y2);
			var underRoof1 = com_watabou_wintermansion_elements3d_Icicles.createRack(view,v0,v1,rakeScale);
			_gthis.addChild(underRoof1);
			var v01 = new openfl_geom_Vector3D(x2,(wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch + delta,y2);
			var v11 = new openfl_geom_Vector3D(x11,eaveDrop,y11);
			var underRoof2 = com_watabou_wintermansion_elements3d_Icicles.createRack(view,v01,v11,rakeScale);
			_gthis.addChild(underRoof2);
		};
		if(wing.orientation) {
			straight(wing.x - (pa ? rake : 0),wing.y - eave,wing.x + wing.w + (pb ? rake : 0),wing.y - eave);
			straight(wing.x - (pa ? rake : 0),wing.y + wing.h + eave,wing.x + wing.w + (pb ? rake : 0),wing.y + wing.h + eave);
			if(pa) {
				if(hip) {
					straight(wing.x - rake,wing.y - eave,wing.x - rake,wing.y + wing.h + eave);
				} else {
					underRoof(wing.x - rake,wing.y - eave,wing.x - rake,wing.y + wing.h + eave);
				}
			}
			if(pb) {
				if(hip) {
					straight(wing.x + wing.w + rake,wing.y - eave,wing.x + wing.w + rake,wing.y + wing.h + eave);
				} else {
					underRoof(wing.x + wing.w + rake,wing.y - eave,wing.x + wing.w + rake,wing.y + wing.h + eave);
				}
			}
		} else {
			straight(wing.x - eave,wing.y - (pa ? rake : 0),wing.x - eave,wing.y + wing.h + (pb ? rake : 0));
			straight(wing.x + wing.w + eave,wing.y - (pa ? rake : 0),wing.x + wing.w + eave,wing.y + wing.h + (pb ? rake : 0));
			if(pa) {
				if(hip) {
					straight(wing.x - eave,wing.y - rake,wing.x + wing.w + eave,wing.y - rake);
				} else {
					underRoof(wing.x - eave,wing.y - rake,wing.x + wing.w + eave,wing.y - rake);
				}
			}
			if(pb) {
				if(hip) {
					straight(wing.x - eave,wing.y + wing.h + rake,wing.x + wing.w + eave,wing.y + wing.h + rake);
				} else {
					underRoof(wing.x - eave,wing.y + wing.h + rake,wing.x + wing.w + eave,wing.y + wing.h + rake);
				}
			}
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_Roof
});
var com_watabou_wintermansion_utils3d_FaceAdder = function(nTriangles) {
	if(nTriangles == null) {
		nTriangles = 0;
	}
	if(_$UInt_UInt_$Impl_$.gt(nTriangles,0)) {
		this.fixed = true;
		this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,nTriangles * 3 * 13,true);
		this.indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null,nTriangles * 3,true);
	} else {
		this.fixed = false;
		this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		this.indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	}
	this.vCount = 0;
	this.vIndex = 0;
	this.iIndex = 0;
};
$hxClasses["com.watabou.wintermansion.utils3d.FaceAdder"] = com_watabou_wintermansion_utils3d_FaceAdder;
com_watabou_wintermansion_utils3d_FaceAdder.__name__ = ["com","watabou","wintermansion","utils3d","FaceAdder"];
com_watabou_wintermansion_utils3d_FaceAdder.normal = function(v0,v1,v2) {
	return v2.subtract(v0).crossProduct(v1.subtract(v0));
};
com_watabou_wintermansion_utils3d_FaceAdder.prototype = {
	data: null
	,indices: null
	,vCount: null
	,vIndex: null
	,iIndex: null
	,fixed: null
	,addVertex: function(x,y,z,nx,ny,nz,u,v) {
		if(v == null) {
			v = 0.0;
		}
		if(u == null) {
			u = 0.0;
		}
		if(nz == null) {
			nz = 0.0;
		}
		if(ny == null) {
			ny = 1.0;
		}
		if(nx == null) {
			nx = 0.0;
		}
		if(this.fixed) {
			this.data.set(this.vIndex++,x);
			this.data.set(this.vIndex++,y);
			this.data.set(this.vIndex++,z);
			this.data.set(this.vIndex++,nx);
			this.data.set(this.vIndex++,ny);
			this.data.set(this.vIndex++,nz);
			this.data.set(this.vIndex++,1);
			this.data.set(this.vIndex++,0);
			this.data.set(this.vIndex++,0);
			this.data.set(this.vIndex++,u);
			this.data.set(this.vIndex++,v);
			this.data.set(this.vIndex++,u);
			this.data.set(this.vIndex++,v);
		} else {
			this.data.push(x);
			this.data.push(y);
			this.data.push(z);
			this.data.push(nx);
			this.data.push(ny);
			this.data.push(nz);
			this.data.push(1);
			this.data.push(0);
			this.data.push(0);
			this.data.push(u);
			this.data.push(v);
			this.data.push(0);
			this.data.push(0);
		}
		return this.vCount++;
	}
	,addTriangle: function(x1,y1,z1,x2,y2,z2,x3,y3,z3,nx,ny,nz,u1,v1,u2,v2,u3,v3) {
		if(v3 == null) {
			v3 = 0.0;
		}
		if(u3 == null) {
			u3 = 0.0;
		}
		if(v2 == null) {
			v2 = 0.0;
		}
		if(u2 == null) {
			u2 = 0.0;
		}
		if(v1 == null) {
			v1 = 0.0;
		}
		if(u1 == null) {
			u1 = 0.0;
		}
		if(this.fixed) {
			this.indices.set(this.iIndex++,this.addVertex(x1,y1,z1,nx,ny,nz,u1,v1));
			this.indices.set(this.iIndex++,this.addVertex(x2,y2,z2,nx,ny,nz,u2,v2));
			this.indices.set(this.iIndex++,this.addVertex(x3,y3,z3,nx,ny,nz,u3,v3));
		} else {
			this.indices.push(this.addVertex(x1,y1,z1,nx,ny,nz,u1,v1));
			this.indices.push(this.addVertex(x2,y2,z2,nx,ny,nz,u2,v2));
			this.indices.push(this.addVertex(x3,y3,z3,nx,ny,nz,u3,v3));
		}
	}
	,addTri: function(i0,i1,i2) {
		if(this.fixed) {
			this.indices.set(this.iIndex++,i0);
			this.indices.set(this.iIndex++,i1);
			this.indices.set(this.iIndex++,i2);
		} else {
			this.indices.push(i0);
			this.indices.push(i1);
			this.indices.push(i2);
		}
	}
	,addTriangleV: function(v1,v2,v3,n) {
		if(n == null) {
			n = v2.subtract(v1).crossProduct(v3.subtract(v1));
		}
		this.addTriangle(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,v3.x,v3.y,v3.z,n.x,n.y,n.z);
	}
	,addTriangleUV: function(v1,v2,v3,n,uv1,uv2,uv3) {
		if(n == null) {
			n = v2.subtract(v1).crossProduct(v3.subtract(v1));
		}
		this.addTriangle(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,v3.x,v3.y,v3.z,n.x,n.y,n.z,uv1.x,uv1.y,uv2.x,uv2.y,uv3.x,uv3.y);
	}
	,addPolygon: function(vertices) {
		var v0 = vertices[0];
		var n = vertices[2].subtract(v0).crossProduct(vertices[1].subtract(v0));
		var _g1 = 1;
		var _g = vertices.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var v1 = vertices[i];
			var v2 = vertices[i + 1];
			var n1 = n;
			if(n1 == null) {
				n1 = v2.subtract(v0).crossProduct(v1.subtract(v0));
			}
			this.addTriangle(v0.x,v0.y,v0.z,v2.x,v2.y,v2.z,v1.x,v1.y,v1.z,n1.x,n1.y,n1.z);
		}
	}
	,addPolygonUV: function(vertices,uvs) {
		var v0 = vertices[0];
		var n = vertices[2].subtract(v0).crossProduct(vertices[1].subtract(v0));
		var uv0 = uvs[0];
		var _g1 = 1;
		var _g = vertices.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var v2 = vertices[i + 1];
			var v3 = vertices[i];
			var n1 = n;
			var uv2 = uvs[i + 1];
			var uv3 = uvs[i];
			if(n1 == null) {
				n1 = v2.subtract(v0).crossProduct(v3.subtract(v0));
			}
			this.addTriangle(v0.x,v0.y,v0.z,v2.x,v2.y,v2.z,v3.x,v3.y,v3.z,n1.x,n1.y,n1.z,uv0.x,uv0.y,uv2.x,uv2.y,uv3.x,uv3.y);
		}
	}
	,flip: function() {
		var i = 0;
		while(i < this.indices.get_length()) {
			var t = this.indices.get(i);
			this.indices.set(i,this.indices.get(i + 1));
			this.indices.set(i + 1,t);
			i += 3;
		}
	}
	,__class__: com_watabou_wintermansion_utils3d_FaceAdder
};
var com_watabou_wintermansion_elements3d__$Roof_Roofer = function(thickness) {
	com_watabou_wintermansion_utils3d_FaceAdder.call(this);
	this.thickness = thickness;
};
$hxClasses["com.watabou.wintermansion.elements3d._Roof.Roofer"] = com_watabou_wintermansion_elements3d__$Roof_Roofer;
com_watabou_wintermansion_elements3d__$Roof_Roofer.__name__ = ["com","watabou","wintermansion","elements3d","_Roof","Roofer"];
com_watabou_wintermansion_elements3d__$Roof_Roofer.__super__ = com_watabou_wintermansion_utils3d_FaceAdder;
com_watabou_wintermansion_elements3d__$Roof_Roofer.prototype = $extend(com_watabou_wintermansion_utils3d_FaceAdder.prototype,{
	thickness: null
	,addFace: function(vertices,orientation) {
		var filtered = [];
		var _g = 0;
		while(_g < vertices.length) {
			var v = vertices[_g];
			++_g;
			if(filtered.length == 0 || !v.equals(filtered[filtered.length - 1])) {
				filtered.push(v);
			}
		}
		vertices = filtered;
		this.addTop(vertices,orientation);
		var bottom = vertices.slice();
		bottom.reverse();
		this.addPolygonUV(bottom,this.getUV(bottom,orientation));
		if(this.thickness > 0) {
			var _g1 = 0;
			var _g2 = vertices.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var v1 = vertices[i];
				var v2 = vertices[(i + 1) % vertices.length];
				var edge = [v1,v2,new openfl_geom_Vector3D(v2.x,v2.y + this.thickness,v2.z),new openfl_geom_Vector3D(v1.x,v1.y + this.thickness,v1.z)];
				this.addPolygon(edge);
			}
		}
	}
	,addTop: function(vertices,orientation) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vertices.length) {
			var v = vertices[_g1];
			++_g1;
			_g.push(new openfl_geom_Vector3D(v.x,v.y + this.thickness,v.z));
		}
		var top = _g;
		this.addPolygonUV(top,this.getUV(top,orientation));
	}
	,getUV: function(vertices,orientation) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vertices.length) {
			var v = vertices[_g1];
			++_g1;
			_g.push(new openfl_geom_Point((orientation ? v.x : v.z) * 15,0));
		}
		return _g;
	}
	,geometry: function() {
		var sg = new away3d_core_base_CompactSubGeometry();
		sg.updateData(this.data);
		sg.updateIndexData(this.indices);
		var g = new away3d_core_base_Geometry();
		g.addSubGeometry(sg);
		return g;
	}
	,__class__: com_watabou_wintermansion_elements3d__$Roof_Roofer
});
var com_watabou_wintermansion_elements3d_RoundWindow = function(glass,recess) {
	away3d_core_base_Geometry.call(this);
	this.addSubGeometry(glass);
	this.addSubGeometry(this.recess = recess);
};
$hxClasses["com.watabou.wintermansion.elements3d.RoundWindow"] = com_watabou_wintermansion_elements3d_RoundWindow;
com_watabou_wintermansion_elements3d_RoundWindow.__name__ = ["com","watabou","wintermansion","elements3d","RoundWindow"];
com_watabou_wintermansion_elements3d_RoundWindow.create = function(view,face) {
	var geometry = com_watabou_wintermansion_elements3d_RoundWindow.proto[face];
	var mesh = new away3d_entities_Mesh(geometry,view.style.lights != null ? view.mLight : view.mWindow);
	mesh.getSubMeshForSubGeometry(geometry.recess).set_material(view.mRecess);
	return mesh;
};
com_watabou_wintermansion_elements3d_RoundWindow.creteProtos = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(com_watabou_wintermansion_elements3d_RoundWindow.createProto(i));
	}
	com_watabou_wintermansion_elements3d_RoundWindow.proto = _g;
};
com_watabou_wintermansion_elements3d_RoundWindow.createProto = function(face) {
	var r = 0.060;
	var q = 0.005;
	var decal = new com_watabou_wintermansion_utils3d_Decal();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		var b = (i + 0.5) * Math.PI / 2;
		var csb = q * Math.cos(b);
		var snb = q * Math.sin(b);
		var _g1 = -2;
		while(_g1 < 3) {
			var j = _g1++;
			var a = b + j * Math.PI / 8;
			decal.addPoint(r * Math.cos(a) + csb,-r * Math.sin(a) - snb);
		}
		decal.addPoint(csb,-snb);
		decal.push();
	}
	var recess = new away3d_primitives_CylinderGeometry(r + q / Math.sqrt(2),r + q / Math.sqrt(2),0.03,16,1,false,false,true,false);
	com_watabou_wintermansion_elements3d_RoundWindow.m.identity();
	com_watabou_wintermansion_elements3d_RoundWindow.m.appendRotation(face * 90,new openfl_geom_Vector3D(0,1,0));
	recess.applyTransformation(com_watabou_wintermansion_elements3d_RoundWindow.m);
	recess.scale(-1);
	return new com_watabou_wintermansion_elements3d_RoundWindow(decal.subGeometry(1.0,face),recess.get_subGeometries().get(0));
};
com_watabou_wintermansion_elements3d_RoundWindow.__super__ = away3d_core_base_Geometry;
com_watabou_wintermansion_elements3d_RoundWindow.prototype = $extend(away3d_core_base_Geometry.prototype,{
	recess: null
	,__class__: com_watabou_wintermansion_elements3d_RoundWindow
});
var com_watabou_wintermansion_elements3d_SkyDome = function(view) {
	var h = 640 * com_watabou_wintermansion_elements3d_Style.current.air;
	away3d_entities_Mesh.call(this,new away3d_primitives_CylinderGeometry(400,400,h * 2,16,1,false,false),com_watabou_wintermansion_elements3d_SkyDome.createTexture(com_watabou_wintermansion_elements3d_Style.current));
	var m = new openfl_geom_Matrix3D();
	m.appendRotation(180,new openfl_geom_Vector3D(0,0,1));
	var lid = new away3d_primitives_PlaneGeometry(800,800);
	lid.applyTransformation(m);
	this.addSubMesh(lid.get_subGeometries().get(0)).set_material(new away3d_materials_ColorMaterial(com_watabou_wintermansion_elements3d_Style.current.skyColor0));
	this.set_y(h - h / 4);
	this.set_scaleY(-1);
};
$hxClasses["com.watabou.wintermansion.elements3d.SkyDome"] = com_watabou_wintermansion_elements3d_SkyDome;
com_watabou_wintermansion_elements3d_SkyDome.__name__ = ["com","watabou","wintermansion","elements3d","SkyDome"];
com_watabou_wintermansion_elements3d_SkyDome.createTexture = function(style) {
	var bmp = new openfl_display_BitmapData(1,4,false,style.skyColor0);
	bmp.setPixel(0,0,style.skyColor1);
	return new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp));
};
com_watabou_wintermansion_elements3d_SkyDome.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_SkyDome.prototype = $extend(away3d_entities_Mesh.prototype,{
	__class__: com_watabou_wintermansion_elements3d_SkyDome
});
var com_watabou_wintermansion_elements3d_Smoke = function(view) {
	var flake = new away3d_primitives_PlaneGeometry(0.2,0.2,1,1,false);
	var _g = [];
	var _g1 = 0;
	while(_g1 < 12) {
		var i = _g1++;
		_g.push(flake);
	}
	var a = _g;
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g11 = 0;
	var _g2 = a.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector.set(i1,a[i1]);
	}
	var particleGeometry = away3d_tools_helpers_ParticleGeometryHelper.generateGeometry(vector);
	away3d_entities_Mesh.call(this,particleGeometry,view.mSmoke);
	if(com_watabou_wintermansion_elements3d_Smoke.a == null) {
		var animationSet = new away3d_animators_ParticleAnimationSet(true,true,false);
		animationSet.addAnimation(new away3d_animators_nodes_ParticleVelocityNode(1));
		animationSet.addAnimation(new away3d_animators_nodes_ParticleColorNode(0,true,true,false,false,com_watabou_wintermansion_elements3d_Smoke.ALPHA_1,com_watabou_wintermansion_elements3d_Smoke.ALPHA_0));
		animationSet.addAnimation(new away3d_animators_nodes_ParticleScaleNode(0,false,false,0.8,3));
		animationSet.addAnimation(new away3d_animators_nodes_ParticleBillboardNode());
		animationSet.initParticleFunc = $bind(this,this.initParticleParam);
		com_watabou_wintermansion_elements3d_Smoke.a = new away3d_animators_ParticleAnimator(animationSet);
		com_watabou_wintermansion_elements3d_Smoke.a.start();
	}
	this.set_animator(com_watabou_wintermansion_elements3d_Smoke.a);
};
$hxClasses["com.watabou.wintermansion.elements3d.Smoke"] = com_watabou_wintermansion_elements3d_Smoke;
com_watabou_wintermansion_elements3d_Smoke.__name__ = ["com","watabou","wintermansion","elements3d","Smoke"];
com_watabou_wintermansion_elements3d_Smoke.createSmokeCloud = function() {
	var bmp = openfl_utils_Assets.getBitmapData("smoke");
	var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true);
	mat.set_alphaBlending(true);
	return mat;
};
com_watabou_wintermansion_elements3d_Smoke.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_Smoke.prototype = $extend(away3d_entities_Mesh.prototype,{
	initParticleParam: function(prop) {
		prop.startTime = prop.index / prop.total * 3;
		prop.duration = 3;
		var v = openfl_geom_Point.polar(((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 0.3 * 0.2,(com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * Math.PI * 2);
		var this1 = prop.nodes;
		var v1 = new openfl_geom_Vector3D(v.x,0.3 * (1 + (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1) * 0.2),v.y);
		var _this = this1;
		var value = v1;
		if(__map_reserved["VelocityVector3D"] != null) {
			_this.setReserved("VelocityVector3D",value);
		} else {
			_this.h["VelocityVector3D"] = value;
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_Smoke
});
var com_watabou_wintermansion_elements3d_Style = function() { };
$hxClasses["com.watabou.wintermansion.elements3d.Style"] = com_watabou_wintermansion_elements3d_Style;
com_watabou_wintermansion_elements3d_Style.__name__ = ["com","watabou","wintermansion","elements3d","Style"];
com_watabou_wintermansion_elements3d_Style.has = function(f) {
	if(com_watabou_wintermansion_elements3d_Style.current.features != null) {
		return com_watabou_wintermansion_elements3d_Style.current.features.indexOf(f) != -1;
	} else {
		return false;
	}
};
com_watabou_wintermansion_elements3d_Style.random = function() {
	if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.01) {
		return com_watabou_wintermansion_elements3d_Style.randomHogmanay();
	}
	var nightTime = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.2;
	var winterTime = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.1;
	var snow;
	if(winterTime) {
		var h = 210 + 30 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
		var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		snow = new openfl_geom_Vector3D(h,0.2 * (f * f * f),1);
	} else {
		snow = null;
	}
	var h1 = 360 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
	var f1 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var walls = new openfl_geom_Vector3D(h1,0.5 * (f1 * f1 * f1),0.4 + 0.6 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3));
	var wood = new openfl_geom_Vector3D(25 + 60 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),0.3 + 0.3 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),0.7 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3));
	var roof = winterTime ? snow : new openfl_geom_Vector3D(walls.x + 30 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),(1 + walls.y) / 2,(1 - walls.z + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) / 2);
	var f2 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var f3 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var light = com_watabou_geom_Color.hsv(60 - 60 * (f2 * f2 * f2),f3 * f3 * f3,1);
	var brightness = (nightTime ? 0.8 : 1.0) + 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var ambience = 0.2 + 0.8 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var sun = new openfl_geom_Vector3D(50 + 60 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),0.3 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647),1);
	var sky = new openfl_geom_Vector3D(360 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647),((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3,(nightTime ? 0.5 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : 0.8 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3)) * brightness);
	sky.z = com_watabou_utils_MathUtils.gate(sky.z,0,1);
	var horizont;
	if(nightTime) {
		horizont = com_watabou_geom_Color.hsv(sky.x + 150 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),(sky.y + 1) / 2,(sky.z + 1) / 2);
	} else {
		var horizont1 = 210 + 40 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
		var horizont2 = 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
		var f4 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		horizont = com_watabou_geom_Color.hsv(horizont1,horizont2,1.0 - 0.2 * (f4 * f4 * f4));
	}
	var ground = winterTime ? snow : new openfl_geom_Vector3D(360 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647),((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3,Math.min(((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * brightness,1));
	var hipRoof = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.33333333333333331;
	var pitch;
	if(hipRoof) {
		var f5 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		pitch = f5 * f5 * f5;
	} else {
		pitch = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	}
	var pitch1 = 0.1 + pitch * 1.2;
	var hasBase = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.9;
	var base = winterTime ? snow : (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.4 || !hasBase ? walls : new openfl_geom_Vector3D(roof.x + 180 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),(walls.y + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) / 2,roof.z);
	var winWidth = 0.1 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var winHeight = 0.2 + 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var winFRows = Math.round(winHeight / (0.1 + 0.1 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3)));
	var winFCols = Math.round(winWidth / 0.08);
	var chance = Math.abs(walls.z - wood.z);
	var shutters = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < chance;
	var features = [];
	if(nightTime && (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.7) {
		features.push("lamps");
	}
	if(winterTime) {
		if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.6) {
			features.push("snow");
		}
		if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.9) {
			features.push("icicles");
		}
		if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.05) {
			features.push("wreaths");
		}
	} else if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < ambience * ambience * (1 - sky.y)) {
		features.push("rain");
	}
	if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 1 / (1 + features.length)) {
		features.push("flags");
	}
	if(nightTime && features.indexOf("snow") == -1 && features.indexOf("rain") == -1) {
		features.push("stars");
	}
	var chance1 = features.indexOf("snow") != -1 || features.indexOf("rain") != -1 ? 0.2 : 0.4;
	if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < chance1) {
		features.push("clouds");
	}
	var tmp = com_watabou_geom_Color.hsv(sky.x,sky.y,sky.z);
	var tmp1 = com_watabou_geom_Color.lerp(horizont,com_watabou_geom_Color.hsv(sky.x,sky.y,sky.z),0.5 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647));
	var tmp2 = com_watabou_geom_Color.hsv(ground.x,ground.y,ground.z);
	var tmp3 = com_watabou_geom_Color.hsv(walls.x,walls.y,walls.z);
	var tmp4 = com_watabou_geom_Color.hsv(base.x,base.y,base.z);
	var tmp5 = com_watabou_geom_Color.hsv(roof.x,roof.y,roof.z);
	var tmp6 = com_watabou_geom_Color.hsv(wood.x,wood.y,wood.z);
	var tmp7 = com_watabou_geom_Color.hsv(sun.x,sun.y,sun.z);
	var tmp8 = nightTime ? 0.5 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1) : null;
	var tmp9 = (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 + ambience) / 2;
	var f6 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var tmp10 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < pitch1 * 0.7 ? 0.1 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : null;
	var tmp11 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.25;
	var tmp12 = 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var tmp13 = 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var tmp14 = 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var tmp15;
	if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.33333333333333331 && !hipRoof) {
		tmp15 = 1.0;
	} else {
		var f7 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		tmp15 = 0.4 * (f7 * f7 * f7);
	}
	return { skyColor0 : tmp, skyColor1 : tmp1, groundColor : tmp2, wallsColor : tmp3, baseColor : tmp4, roofColor : tmp5, woodColor : tmp6, lightColor : light, brightness : brightness, ambience : ambience, sunColor : tmp7, sunPos : 75 - sun.y * 150, lights : tmp8, air : tmp9, floorHeight : 0.8 + 0.8 * (f6 * f6 * f6), pitch : pitch1, ridge : tmp10, cylindrical : tmp11, rakes : tmp12, eaves : tmp13, thickness : tmp14, concave : tmp15, hipRoof : hipRoof, baseSize : hasBase ? 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : 0, baseHeight : hasBase ? 0.6 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : 0, shutters : shutters, winWidth : winWidth, winHeight : winHeight, winFCols : winFCols, winFRows : winFRows, features : features};
};
com_watabou_wintermansion_elements3d_Style.randomHogmanay = function() {
	var h = 20 + 30 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var s = 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var sky = new openfl_geom_Vector3D(h,s,1 - 0.2 * (f * f * f));
	var f1 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var f2 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var horizon = new openfl_geom_Vector3D(sky.x - 30 * (f1 * f1 * f1),sky.y,Math.min(sky.z + 0.2 * (f2 * f2 * f2),1));
	var h1 = 210 + 30 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var f3 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var snow = new openfl_geom_Vector3D(h1,0.2 * (f3 * f3 * f3),1);
	var h2 = 40 + 30 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var f4 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var walls = new openfl_geom_Vector3D(h2,0.3 * (f4 * f4 * f4),0.6 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1));
	var h3 = 360 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
	var f5 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var wood = new openfl_geom_Vector3D(h3,Math.min(f5 * f5 * f5 * 0.2,walls.z * 0.8),0.4 + 0.1 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1));
	var light = new openfl_geom_Vector3D(40 + 20 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1),0.2 + 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3),1);
	var brightness = 1.0 + 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var ambience = 0.5 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var h4 = 40 + (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1) * 30;
	var f6 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var sun = new openfl_geom_Vector3D(h4,f6 * f6 * f6 * 0.3,1);
	var hipRoof = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.33333333333333331;
	var pitch;
	if(hipRoof) {
		var f7 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		pitch = f7 * f7 * f7;
	} else {
		pitch = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	}
	var pitch1 = 0.1 + pitch;
	var overhang = 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var base = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.9;
	var fw = 0.08;
	var f8 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var fh = fw * (1 + 0.5 * (f8 * f8 * f8));
	var nh = 2 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 3 | 0;
	var nw = 2 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * (nh + 1 - 2) | 0;
	var winWidth = 0.016 * (nw - 1) + fw * nw;
	var winHeight = 0.016 * (nh - 1) + fh * nh;
	if(winWidth < 0.25 && winHeight < 0.25) {
		var s1 = 0.25 / Math.max(winWidth,winHeight);
		winWidth *= s1;
		winHeight *= s1;
	}
	var tmp = com_watabou_geom_Color.hsv(sky.x,sky.y,sky.z);
	var tmp1 = com_watabou_geom_Color.hsv(horizon.x,horizon.y,horizon.z);
	var tmp2 = com_watabou_geom_Color.hsv(snow.x,snow.y,snow.z);
	var tmp3 = com_watabou_geom_Color.hsv(walls.x,walls.y,walls.z);
	var tmp4 = com_watabou_geom_Color.hsv(snow.x,snow.y,snow.z);
	var tmp5 = com_watabou_geom_Color.hsv(snow.x,snow.y,snow.z);
	var tmp6 = com_watabou_geom_Color.hsv(wood.x,wood.y,wood.z);
	var tmp7 = com_watabou_geom_Color.hsv(light.x,light.y,light.z);
	var tmp8 = com_watabou_geom_Color.hsv(sun.x,sun.y,sun.z);
	var tmp9 = 30 + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 40;
	var tmp10 = 0.7 + 0.3 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var tmp11 = 0.5 + 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var tmp12 = 1.0 + 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var tmp13 = base ? 0.2 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : 0;
	var tmp14 = base ? 0.5 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3) : 0;
	var tmp15 = 0.4 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var tmp16;
	if((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5 && !hipRoof) {
		tmp16 = 1.0;
	} else {
		var f9 = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		tmp16 = 0.2 * (f9 * f9 * f9);
	}
	return { skyColor0 : tmp, skyColor1 : tmp1, groundColor : tmp2, wallsColor : tmp3, baseColor : tmp4, roofColor : tmp5, woodColor : tmp6, lightColor : tmp7, brightness : brightness, ambience : ambience, sunColor : tmp8, sunPos : tmp9, lights : tmp10, air : tmp11, floorHeight : tmp12, baseSize : tmp13, baseHeight : tmp14, cylindrical : true, pitch : pitch1, rakes : overhang, eaves : overhang, thickness : tmp15, concave : tmp16, hipRoof : hipRoof, shutters : (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.1, winWidth : winWidth, winHeight : winHeight, winFCols : nw, winFRows : nh, features : ["snow","icicles","wreaths","lamps"]};
};
com_watabou_wintermansion_elements3d_Style.color = function(hsv) {
	return com_watabou_geom_Color.hsv(hsv.x,hsv.y,hsv.z);
};
com_watabou_wintermansion_elements3d_Style.hsv = function(h,s,v) {
	return new openfl_geom_Vector3D(h,s,v);
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__symbol: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer1 = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer1.__allowSmoothing = smoothing;
			renderer1.__overrideBlendMode = blendMode;
			renderer1.__worldTransform = transform;
			renderer1.__worldAlpha = 1 / source.__worldAlpha;
			renderer1.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer1.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer1);
			if(clipRect != null) {
				renderer1.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context) {
			var this1 = new Uint16Array(6);
			this.__indexBufferData = this1;
			this.__indexBufferData[0] = 0;
			this.__indexBufferData[1] = 1;
			this.__indexBufferData[2] = 2;
			this.__indexBufferData[3] = 2;
			this.__indexBufferData[4] = 1;
			this.__indexBufferData[5] = 3;
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = context.createIndexBuffer(6);
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(56);
			this.__vertexBufferData = this1;
			this.__vertexBufferData[0] = this.width;
			this.__vertexBufferData[1] = this.height;
			this.__vertexBufferData[3] = uvWidth;
			this.__vertexBufferData[4] = uvHeight;
			this.__vertexBufferData[15] = this.height;
			this.__vertexBufferData[18] = uvHeight;
			this.__vertexBufferData[28] = this.width;
			this.__vertexBufferData[31] = uvWidth;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = context.createVertexBuffer(3,14);
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				var j = _g3++;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y1 = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x1,y1,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x1 < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x1,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x1);
				}
				if(y1 < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y1,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y1);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x1 < 0 ? -x1 : 0;
				hitRect.y = y1 < 0 ? -y1 : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g1 = 0;
				var _g = length;
				while(_g1 < _g) {
					var i = _g1++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) > firstAlphaThreshold && (testPixel >> 24 & 255) > secondAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel2;
				var _g11 = 0;
				var _g2 = length1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) > firstAlphaThreshold) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var this1 = new openfl_utils_ByteArrayData(0);
		var data = this1;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				a = pixelValue & -16777216;
			} else {
				a = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				r = pixelValue & 16711680;
			} else {
				r = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				g = pixelValue & 65280;
			} else {
				g = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				b = pixelValue & 255;
			} else {
				b = blueArray[pixelValue & 255];
			}
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(_$UInt_UInt_$Impl_$.toFloat(byteArray.length - byteArray.position) < length) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer(byteArray),1,openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.get_length()) {
			var color = inputVector.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		this.__symbol = symbol;
		lime_graphics_Image.loadFromFile(symbol.path).onComplete(function(image) {
			if(symbol.alpha != null) {
				lime_graphics_Image.loadFromFile(symbol.alpha).onComplete(function(alpha) {
					if(image != null && alpha != null) {
						var tmp = alpha.get_rect();
						image.copyChannel(alpha,tmp,new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
						image.buffer.premultiplied = true;
						image.set_premultiplied(false);
					}
					_gthis.__fromImage(image);
				});
			} else {
				_gthis.__fromImage(image);
			}
		});
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderer.context;
		context.globalAlpha = 1;
		renderer.setTransform(this.__renderTransform,context);
		context.drawImage(this.image.get_src(),0,0,this.image.width,this.image.height);
	}
	,__renderCanvasMask: function(renderer) {
	}
	,__renderDOM: function(renderer) {
	}
	,__renderGL: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		renderer.__setBlendMode(10);
		var shader = renderer.__defaultDisplayShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__allowSmoothing && renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.applyAlpha(this.__worldAlpha);
		renderer.applyColorTransform(this.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
	,__renderGLMask: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__allowSmoothing && renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromBytes(bytes)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			if(alphaImage != null || sourceImage.type != lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			return lime__$internal_format_PNG.encode(this);
		} else {
			switch(format[1]) {
			case 0:
				return lime__$internal_format_BMP.encode(this);
			case 1:
				return lime__$internal_format_JPEG.encode(this,quality);
			case 2:
				return lime__$internal_format_PNG.encode(this);
			}
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime__$internal_graphics_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this2 = 0;
					var bgra = this2;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this3 = 0;
					var rgba2 = this3;
					rgba2 = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			lime__$internal_graphics_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime__$internal_graphics_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytePointer,format,endian) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		if(endian == null) {
			endian = lime_system_Endian.BIG_ENDIAN;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.setPixels(this,rect,bytePointer,format,endian);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			return lime__$internal_graphics_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb = this1;
				argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb1 = this2;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb2 = this3;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var this4 = 0;
				var argb3 = this4;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >>> 24 & 255 & 255) << 16 | (rgba2 >>> 16 & 255 & 255) << 8 | rgba2 >>> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var this5 = 0;
					var argb4 = this5;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >>> 8 & 255 & 255) << 16 | (bgra1 >>> 16 & 255 & 255) << 8 | bgra1 >>> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var this6 = 0;
					var argb5 = this6;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >>> 24 & 255 & 255) << 16 | (rgba3 >>> 16 & 255 & 255) << 8 | rgba3 >>> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			if(_g[1] == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			if(newWidth == this.buffer.width && newHeight == this.buffer.height) {
				return value;
			}
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 1:
				lime__$internal_graphics_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			if(_g1[1] == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
};
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = ["lime","_internal","graphics","ImageCanvasUtil"];
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel32(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixels(image,rect,format);
};
lime__$internal_graphics_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime__$internal_graphics_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	var copy = image.clone();
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime__$internal_graphics_ImageCanvasUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.setPixels(image,rect,bytePointer,format,endian);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.containsVector(point);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,containsVector: function(vector) {
		return this.contains(vector.x,vector.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflateVector: function(vector) {
		this.inflate(vector.x,vector.y);
	}
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetVector: function(vector) {
		this.x += vector.x;
		this.y += vector.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,union: function(toUnion,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		if(this.width == 0 || this.height == 0) {
			result.copyFrom(toUnion);
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			result.copyFrom(this);
		} else {
			var x0 = this.x > toUnion.x ? toUnion.x : this.x;
			var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
			var y0 = this.y > toUnion.y ? toUnion.y : this.y;
			var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
			result.setTo(x0,y0,x1 - x0,y1 - y0);
		}
		return result;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
};
var com_watabou_wintermansion_elements3d_SunDisk = function(pos,distance,color,feather,size) {
	if(size == null) {
		size = 1.0;
	}
	if(feather == null) {
		feather = 0.1;
	}
	if(color == null) {
		color = 16777215;
	}
	var material = new away3d_materials_TextureMaterial(this.createSunSprite(color,feather));
	material.set_alphaBlending(true);
	size *= 1 + feather;
	away3d_entities_Sprite3D.call(this,material,distance * size / 10,distance * size / 10);
	this.translate(pos,distance);
};
$hxClasses["com.watabou.wintermansion.elements3d.SunDisk"] = com_watabou_wintermansion_elements3d_SunDisk;
com_watabou_wintermansion_elements3d_SunDisk.__name__ = ["com","watabou","wintermansion","elements3d","SunDisk"];
com_watabou_wintermansion_elements3d_SunDisk.__super__ = away3d_entities_Sprite3D;
com_watabou_wintermansion_elements3d_SunDisk.prototype = $extend(away3d_entities_Sprite3D.prototype,{
	createSunSprite: function(color,feather) {
		if(com_watabou_wintermansion_elements3d_SunDisk.m == null) {
			com_watabou_wintermansion_elements3d_SunDisk.m = new openfl_geom_Matrix();
			com_watabou_wintermansion_elements3d_SunDisk.m.createGradientBox(256,256);
		}
		var shape = new openfl_display_Shape();
		shape.get_graphics().beginGradientFill(1,[color,color],[1.0,0.0],[255 * (1 - feather) | 0,255],com_watabou_wintermansion_elements3d_SunDisk.m);
		shape.get_graphics().drawCircle(128.,128.,128.);
		com_watabou_wintermansion_elements3d_SunDisk.bmp.fillRect(com_watabou_wintermansion_elements3d_SunDisk.bmp.rect,0);
		com_watabou_wintermansion_elements3d_SunDisk.bmp.draw(shape);
		return new away3d_textures_BitmapTexture(com_watabou_wintermansion_elements3d_SunDisk.bmp,false);
	}
	,__class__: com_watabou_wintermansion_elements3d_SunDisk
});
var com_watabou_wintermansion_elements3d_View = function(scene,camera,renderer,forceSoftware,profile,contextIndex) {
	this.opShadows = true;
	away3d_containers_View3D.call(this,scene,camera,renderer,forceSoftware,profile,contextIndex);
};
$hxClasses["com.watabou.wintermansion.elements3d.View"] = com_watabou_wintermansion_elements3d_View;
com_watabou_wintermansion_elements3d_View.__name__ = ["com","watabou","wintermansion","elements3d","View"];
com_watabou_wintermansion_elements3d_View.__super__ = away3d_containers_View3D;
com_watabou_wintermansion_elements3d_View.prototype = $extend(away3d_containers_View3D.prototype,{
	mansion: null
	,style: null
	,content: null
	,model: null
	,sky: null
	,ground: null
	,shadows: null
	,flags: null
	,sun: null
	,backLight: null
	,opShadows: null
	,mGround: null
	,mShadow: null
	,mWalls: null
	,mRecess: null
	,mBase: null
	,mRoof: null
	,mWood: null
	,mLight: null
	,mWindow: null
	,mHole: null
	,mFlag: null
	,mGreen: null
	,mRibbon: null
	,mSnow: null
	,mRain: null
	,mSmoke: null
	,mIcicle: null
	,mHalo: null
	,shadowColor: null
	,reset: function(mansion,ortho) {
		if(ortho == null) {
			ortho = false;
		}
		this.set_antiAlias(4);
		this.mansion = mansion;
		this.style = com_watabou_wintermansion_elements3d_Style.current;
		this.set_backgroundColor(this.style.skyColor1);
		if(this.sky == null) {
			this.sky = new away3d_containers_ObjectContainer3D();
			this.get_scene().addChild(this.sky);
		} else {
			while(this.sky.get_numChildren() > 0) this.sky.removeChildAt(0);
		}
		if(this.content == null) {
			this.content = new away3d_containers_ObjectContainer3D();
			this.get_scene().addChild(this.content);
		} else {
			while(this.content.get_numChildren() > 0) this.content.removeChildAt(0);
		}
		this.model = new away3d_containers_ObjectContainer3D();
		this.model.set_x(-mansion.center.x);
		this.model.set_z(-mansion.center.y);
		this.content.addChild(this.model);
		this.prepareLight();
		this.prepareGround();
		this.prepareMaterials(ortho);
		this.sky.addChild(new com_watabou_wintermansion_elements3d_SkyDome(this));
		this.model.addChild(this.ground);
		com_watabou_wintermansion_elements3d_Door.createProtos();
		com_watabou_wintermansion_elements3d_Window.creteProtos();
		com_watabou_wintermansion_elements3d_RoundWindow.creteProtos();
		com_watabou_wintermansion_elements3d_Chimney.createProto(mansion);
		com_watabou_wintermansion_elements3d_Wreath.createProto();
		var _g = 0;
		var _g1 = mansion.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			this.model.addChild(new com_watabou_wintermansion_elements3d_WingView(wing,this));
		}
		if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("lamps") != -1)) {
			this.placeLamps();
		}
		this.model.addChild(this.shadows = this.createShadows(this.sun.get_position()));
		this.shadows.set_visible(this.opShadows);
		if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("flags") != -1)) {
			com_watabou_wintermansion_elements3d_Banner.reset();
			var _g2 = 0;
			var _g11 = mansion.flags;
			while(_g2 < _g11.length) {
				var pole = _g11[_g2];
				++_g2;
				var flag = new com_watabou_wintermansion_elements3d_Banner();
				var p = new openfl_geom_Vector3D(pole.x,pole.y + 0.1,pole.z);
				flag.translate(p,p.get_length());
				this.model.addChild(flag);
			}
		}
		if(com_watabou_wintermansion_elements3d_View.opWeather) {
			if(com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("snow") != -1) {
				this.content.addChild(new com_watabou_wintermansion_elements3d_weather_Snowfall(this,11,9));
			}
			if(com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("rain") != -1) {
				this.content.addChild(new com_watabou_wintermansion_elements3d_weather_Rainfall(this,11,9));
			}
			if(com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("stars") != -1) {
				this.sky.addChild(new com_watabou_wintermansion_elements3d_weather_Stars(this,50));
			}
			if(com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("clouds") != -1) {
				this.sky.addChild(new com_watabou_wintermansion_elements3d_weather_Clouds(30));
			}
		}
	}
	,prepareLight: function() {
		var a = this.style.sunPos / 180 * Math.PI;
		var p = openfl_geom_Point.polar(1,(com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 2 * Math.PI);
		var sunPos = new openfl_geom_Vector3D(p.x * Math.cos(a),Math.sin(a),p.y * Math.cos(a));
		var ambience = this.style.ambience;
		this.sun = new away3d_lights_DirectionalLight();
		this.sun.set_position(sunPos);
		this.sun.lookAt(new openfl_geom_Vector3D());
		this.sun.set_color(this.style.sunColor != null ? this.style.sunColor : 16777215);
		this.sun.set_diffuse((1 - ambience) * this.style.brightness);
		var sunHSV = com_watabou_geom_Color.rgb2hsv(this.sun.get_color());
		this.sun.set_ambient(ambience * this.style.brightness);
		this.sun.set_ambientColor(com_watabou_geom_Color.hsv(sunHSV.x + 180,sunHSV.y,1.0));
		this.shadowColor = com_watabou_geom_Color.scale(com_watabou_geom_Color.multiply(this.style.groundColor,this.sun.get_ambientColor()),Math.sqrt(this.style.ambience));
		this.sun.set_specular(this.sun.get_diffuse());
		this.backLight = new away3d_lights_DirectionalLight();
		this.backLight.set_position(new openfl_geom_Vector3D(-sunPos.x,-sunPos.y,-sunPos.z));
		this.backLight.set_color(16777215);
		this.backLight.set_diffuse(this.sun.get_diffuse() * 0.1);
		this.backLight.set_specular(0.0);
		this.backLight.lookAt(new openfl_geom_Vector3D());
		this.content.addChild(this.sun);
		this.content.addChild(this.backLight);
		var sunDisk = new com_watabou_wintermansion_elements3d_SunDisk(sunPos,40,com_watabou_geom_Color.scale(this.sun.get_color(),this.style.brightness),ambience * ambience,2 - this.style.sunPos / 90);
		this.sky.addChild(sunDisk);
	}
	,prepareGround: function(g) {
		if(g == null) {
			g = 1;
		}
		var _gthis = this;
		var power2 = function(n) {
			var b = 1;
			while(n > b) b <<= 1;
			return b * 4;
		};
		var m = 2;
		var gw = power2(this.mansion.planW * g + m * 2);
		var gh = power2(this.mansion.planH * g + m * 2);
		var d = Math.ceil(this.mansion.radius * 4 * (2 - this.style.air));
		gh = power2(d);
		gw = gh;
		var bmp = new openfl_display_BitmapData(gw,gh,false,this.style.groundColor);
		var rect = new openfl_geom_Rectangle(0,0,g,g);
		var ofsx = gw - this.mansion.planW >> 1;
		var ofsy = gh - this.mansion.planH >> 1;
		var _g1 = -1;
		var _g = this.mansion.planH + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = -1;
			var _g2 = this.mansion.planW + 1;
			while(_g3 < _g2) {
				var j = _g3++;
				if(!_gthis.mansion.isOpen(j,i,0,0,0)) {
					rect.x = j * g + m + ofsx;
					rect.y = gh - 1 - i * g - m - ofsy;
					bmp.fillRect(rect,this.shadowColor);
				} else {
					var c = this.mansion.isOpen(j,i,1,0,0) ? 0 : 1;
					if(!_gthis.mansion.isOpen(j,i,0,-1,0)) {
						++c;
					}
					if(!_gthis.mansion.isOpen(j,i,0,1,0)) {
						++c;
					}
					if(!_gthis.mansion.isOpen(j,i,0,0,-1)) {
						++c;
					}
					if(!_gthis.mansion.isOpen(j,i,0,0,1)) {
						++c;
					}
					if(c > 0) {
						var c1 = com_watabou_geom_Color.lerp(this.style.groundColor,this.shadowColor,c / 4);
						rect.x = j * g + m + ofsx;
						rect.y = gh - 1 - i * g - m - ofsy;
						bmp.fillRect(rect,c1);
					}
				}
			}
		}
		this.mGround = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp));
		var pw = gw / g;
		var ph = gh / g;
		var plane = new away3d_primitives_PlaneGeometry(pw,ph);
		this.ground = new away3d_entities_Mesh(plane,this.mGround);
		var t = new openfl_geom_Vector3D(pw / 2 - m / g - ofsx / g,0,ph / 2 - m / g - ofsy / g);
		if(t.get_length() > 0) {
			this.ground.translate(t,t.get_length());
		}
	}
	,prepareMaterials: function(ortho) {
		this.mShadow = new away3d_materials_ColorMaterial(this.shadowColor);
		this.mShadow.set_depthCompareMode(0);
		this.mWalls = new away3d_materials_ColorMaterial(this.style.wallsColor);
		this.mRecess = new away3d_materials_ColorMaterial(this.style.wallsColor);
		this.mBase = new away3d_materials_ColorMaterial(this.style.baseColor);
		this.mWood = new away3d_materials_ColorMaterial(this.style.woodColor);
		this.mLight = new away3d_materials_ColorMaterial(this.style.lightColor != null ? this.style.lightColor : 16777215);
		this.mGreen = new away3d_materials_ColorMaterial(3167544);
		this.mRibbon = new away3d_materials_ColorMaterial(13386820);
		this.mRibbon.set_specular(0.5);
		this.mGreen.set_bothSides(this.mRibbon.set_bothSides(true));
		this.mSnow = com_watabou_wintermansion_elements3d_weather_Snowfall.createSnowFlake(this.style.roofColor);
		this.mRain = com_watabou_wintermansion_elements3d_weather_Rainfall.createRaindrop();
		this.mSmoke = com_watabou_wintermansion_elements3d_Smoke.createSmokeCloud();
		this.mIcicle = new com_watabou_wintermansion_elements3d_Icicles(this.style.roofColor);
		this.mHalo = com_watabou_wintermansion_elements3d_LampPost.createHalo(this.mLight.get_color());
		this.mWindow = new away3d_materials_ColorMaterial(com_watabou_geom_Color.scale(this.style.wallsColor,Math.min(0.25,this.style.ambience * 0.8)));
		this.mHole = new away3d_materials_ColorMaterial(this.mWindow.get_color());
		this.mFlag = com_watabou_wintermansion_elements3d_Banner.createFlag();
		var bmp = new openfl_display_BitmapData(2,1,false,this.style.roofColor);
		if(!(com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("icicles") != -1)) {
			bmp.setPixel(0,0,com_watabou_geom_Color.scale(this.style.roofColor,1.2 - this.style.ambience * 0.2));
		}
		this.mRoof = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true,true);
		this.mRoof.set_specular(0.1);
		var _g = 0;
		var _g1 = [this.mWalls,this.mRecess,this.mBase,this.mWood,this.mGround,this.mShadow,this.mWindow,this.mHole,this.mLight,this.mGreen,this.mSmoke,this.mIcicle];
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.set_specular(0.0);
		}
		var lightPicker = new away3d_materials_lightpickers_StaticLightPicker([this.sun,this.backLight]);
		var _g2 = 0;
		var _g11 = [this.mWalls,this.mRecess,this.mBase,this.mRoof,this.mWood,this.mFlag,this.mGreen,this.mRibbon,this.mSnow,this.mRain,this.mSmoke,this.mIcicle];
		while(_g2 < _g11.length) {
			var m1 = _g11[_g2];
			++_g2;
			m1.set_lightPicker(lightPicker);
		}
		var glass = new away3d_materials_methods_RimLightMethod(this.style.skyColor1,0.8);
		this.mWindow.addMethod(glass);
		var fog;
		if(!ortho) {
			fog = new away3d_materials_methods_FogMethod(this.mansion.radius * (2 - this.style.air),this.mansion.radius * 4 * (2 - this.style.air),this.style.skyColor1);
		} else {
			var range = this.get_camera().get_lens().get_far() - this.get_camera().get_lens().get_near();
			fog = new away3d_materials_methods_FogMethod(this.mansion.radius * (2 - this.style.air) / range,this.mansion.radius * 3 * (2 - this.style.air) / range,this.style.skyColor1);
		}
		var _g3 = 0;
		var _g12 = [this.mWalls,this.mRecess,this.mBase,this.mRoof,this.mWood,this.mGround,this.mShadow,this.mWindow,this.mHole,this.mFlag,this.mGreen,this.mRibbon,this.mSnow,this.mRain,this.mSmoke,this.mIcicle];
		while(_g3 < _g12.length) {
			var m2 = _g12[_g3];
			++_g3;
			m2.addMethod(fog);
		}
	}
	,alignSun: function() {
		this.content.set_rotationY(Math.atan2(this.sun.get_z(),this.sun.get_x()) / Math.PI * 180 + 180);
	}
	,placeLamps: function() {
		var places = [];
		var _g = 0;
		var _g1 = this.mansion.doors;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(this.mansion.isOpen(d.x,d.y,0,d.dx * 2,d.dy * 2)) {
				if(this.mansion.isOpen(d.x,d.y,0,d.dx * 2 + d.dy,d.dy * 2 + d.dx)) {
					places.push(new openfl_geom_Point(d.x + d.dx * 2 + d.dy * 0.5,d.y + d.dy * 2 + d.dx * 0.5));
				}
				if(this.mansion.isOpen(d.x,d.y,0,d.dx * 2 - d.dy,d.dy * 2 - d.dx)) {
					places.push(new openfl_geom_Point(d.x + d.dx * 2 - d.dy * 0.5,d.y + d.dy * 2 - d.dx * 0.5));
				}
			}
		}
		if(places.length == 0) {
			return;
		}
		var lamps;
		if(places.length == 1) {
			lamps = places;
		} else {
			var n = Math.ceil(places.length / 3);
			var lamp = com_watabou_utils_ArrayExtender.random(places);
			lamps = [lamp];
			HxOverrides.remove(places,lamp);
			while(lamps.length < n) {
				var farthest = com_watabou_utils_ArrayExtender.max(places,function(p) {
					var farthest1 = com_watabou_utils_ArrayExtender.min(lamps,function(l) {
						return openfl_geom_Point.distance(l,p);
					});
					return openfl_geom_Point.distance(p,farthest1);
				});
				var stop = false;
				var _g2 = 0;
				while(_g2 < lamps.length) {
					var l1 = lamps[_g2];
					++_g2;
					if(openfl_geom_Point.distance(l1,farthest) == 0) {
						stop = true;
						break;
					}
				}
				if(stop) {
					break;
				} else {
					lamps.push(farthest);
					HxOverrides.remove(places,farthest);
				}
			}
		}
		var _g3 = 0;
		while(_g3 < lamps.length) {
			var place = lamps[_g3];
			++_g3;
			var lamp1 = new com_watabou_wintermansion_elements3d_LampPost(this,place.x + 0.5,place.y + 0.5);
			this.model.addChild(lamp1);
		}
	}
	,createShadows: function(sunPos) {
		com_watabou_wintermansion_elements3d_GroundShadow.setup(sunPos,[this.mWalls,this.mBase,this.mRoof,this.mWood]);
		var geometry = new away3d_core_base_Geometry();
		var processContainer = null;
		processContainer = function(c) {
			var _g1 = 0;
			var _g = c.get_numChildren();
			while(_g1 < _g) {
				var i = _g1++;
				var child = c.getChildAt(i);
				if(js_Boot.__instanceof(child,away3d_entities_Mesh)) {
					var _g2 = 0;
					var _g3 = com_watabou_wintermansion_elements3d_GroundShadow.getShadows(child);
					while(_g2 < _g3.length) {
						var shadow = _g3[_g2];
						++_g2;
						geometry.addSubGeometry(shadow);
					}
				} else if(js_Boot.__instanceof(child,away3d_containers_ObjectContainer3D)) {
					processContainer(child);
				}
			}
		};
		var processContainer1 = processContainer;
		processContainer1(this.content);
		return new away3d_entities_Mesh(geometry,this.mShadow);
	}
	,p3d: function(x,y,height) {
		return new openfl_geom_Vector3D(x,height,y);
	}
	,switchShadows: function() {
		this.opShadows = this.shadows.set_visible(!this.shadows.get_visible());
	}
	,__class__: com_watabou_wintermansion_elements3d_View
});
var com_watabou_wintermansion_elements3d_Window = function(hole,recess,shutters) {
	away3d_core_base_Geometry.call(this);
	this.addSubGeometry(this.hole = hole);
	if(recess != null) {
		this.addSubGeometry(this.recess = recess);
	}
	if(shutters != null) {
		var _g = 0;
		while(_g < shutters.length) {
			var sg = shutters[_g];
			++_g;
			this.addSubGeometry(sg);
		}
	}
};
$hxClasses["com.watabou.wintermansion.elements3d.Window"] = com_watabou_wintermansion_elements3d_Window;
com_watabou_wintermansion_elements3d_Window.__name__ = ["com","watabou","wintermansion","elements3d","Window"];
com_watabou_wintermansion_elements3d_Window.create = function(view,face) {
	var geometry = com_watabou_wintermansion_elements3d_Window.proto[face];
	var mesh = new away3d_entities_Mesh(geometry,view.mWood);
	var mat = view.style.lights != null ? (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < view.style.lights ? view.mLight : view.mWindow : view.mWindow;
	mesh.getSubMeshForSubGeometry(geometry.hole).set_material(mat);
	if(geometry.recess != null) {
		mesh.getSubMeshForSubGeometry(geometry.recess).set_material(view.mRecess);
	}
	return mesh;
};
com_watabou_wintermansion_elements3d_Window.creteProtos = function() {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		var i = _g1++;
		_g.push(com_watabou_wintermansion_elements3d_Window.createProto(i,com_watabou_wintermansion_elements3d_Style.current.shutters));
	}
	com_watabou_wintermansion_elements3d_Window.proto = _g;
};
com_watabou_wintermansion_elements3d_Window.createProto = function(face,shutters) {
	if(shutters == null) {
		shutters = false;
	}
	var w = com_watabou_wintermansion_elements3d_Style.current.winWidth;
	var h = com_watabou_wintermansion_elements3d_Style.current.winHeight;
	var sx = com_watabou_wintermansion_elements3d_Style.current.winFCols;
	var sy = com_watabou_wintermansion_elements3d_Style.current.winFRows;
	if(shutters) {
		var shutter1 = new away3d_primitives_CubeGeometry(w / 2,h,0.05);
		com_watabou_wintermansion_elements3d_Window.m.identity();
		com_watabou_wintermansion_elements3d_Window.m.appendTranslation(-w * 0.75,0,0);
		com_watabou_wintermansion_elements3d_Window.m.appendRotation(face * 90,new openfl_geom_Vector3D(0,1,0));
		shutter1.applyTransformation(com_watabou_wintermansion_elements3d_Window.m);
		var shutter2 = new away3d_primitives_CubeGeometry(w / 2,h,0.05);
		com_watabou_wintermansion_elements3d_Window.m.identity();
		com_watabou_wintermansion_elements3d_Window.m.appendTranslation(w * 0.75,0,0);
		com_watabou_wintermansion_elements3d_Window.m.appendRotation(face * 90,new openfl_geom_Vector3D(0,1,0));
		shutter2.applyTransformation(com_watabou_wintermansion_elements3d_Window.m);
		return new com_watabou_wintermansion_elements3d_Window(com_watabou_wintermansion_elements3d_Window.createRegularWindow(w,h,sx,sy,face),null,[shutter1.get_subGeometries().get(0),shutter2.get_subGeometries().get(0)]);
	} else {
		var recess = new away3d_primitives_CubeGeometry(w,h,0.05);
		com_watabou_wintermansion_elements3d_Window.m.identity();
		com_watabou_wintermansion_elements3d_Window.m.appendRotation(face * 90,new openfl_geom_Vector3D(0,1,0));
		recess.applyTransformation(com_watabou_wintermansion_elements3d_Window.m);
		recess.scale(-1);
		return new com_watabou_wintermansion_elements3d_Window(com_watabou_wintermansion_elements3d_Window.createRegularWindow(w,h,sx,sy,face),recess.get_subGeometries().get(0),null);
	}
};
com_watabou_wintermansion_elements3d_Window.createGothicWindow = function(r) {
	if(r == null) {
		r = 0;
	}
	var decal = new com_watabou_wintermansion_utils3d_Decal();
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var dx = (i * 2 - 1) * 0.06;
		decal.addPoint(-0.05 + dx,0.20);
		decal.addPoint(dx,0.25);
		decal.addPoint(0.05 + dx,0.20);
		decal.addPoint(0.05 + dx,-0.20);
		decal.addPoint(-0.05 + dx,-0.20);
		decal.push();
	}
	return decal.geometry(1.0,r);
};
com_watabou_wintermansion_elements3d_Window.createRegularWindow = function(w,h,sx,sy,r) {
	if(r == null) {
		r = 0;
	}
	var g = 0.016;
	var sw = (w - g * (sx - 1)) / sx;
	var sh = (h - g * (sy - 1)) / sy;
	var mx = sw + g;
	var my = sh + g;
	var decal = new com_watabou_wintermansion_utils3d_Decal();
	var _g1 = 0;
	var _g = sy;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = sx;
		while(_g3 < _g2) {
			var j = _g3++;
			var dx = (sw + g) * (j - (sx - 1) / 2);
			var dy = (sh + g) * (i - (sy - 1) / 2);
			decal.addPoint(-sw / 2 + dx,sh / 2 + dy);
			decal.addPoint(sw / 2 + dx,sh / 2 + dy);
			decal.addPoint(sw / 2 + dx,-sh / 2 + dy);
			decal.addPoint(-sw / 2 + dx,-sh / 2 + dy);
			decal.push();
		}
	}
	return decal.subGeometry(1.0,r);
};
com_watabou_wintermansion_elements3d_Window.createWindow4 = function(r) {
	if(r == null) {
		r = 0;
	}
	return com_watabou_wintermansion_elements3d_Window.createRegularWindow(0.2,0.4,2,2,r);
};
com_watabou_wintermansion_elements3d_Window.createWindow6 = function(r) {
	if(r == null) {
		r = 0;
	}
	return com_watabou_wintermansion_elements3d_Window.createRegularWindow(0.2,0.4,2,3,r);
};
com_watabou_wintermansion_elements3d_Window.createWindow9 = function(r) {
	if(r == null) {
		r = 0;
	}
	return com_watabou_wintermansion_elements3d_Window.createRegularWindow(0.2,0.4,3,3,r);
};
com_watabou_wintermansion_elements3d_Window.createWindow12 = function(r) {
	if(r == null) {
		r = 0;
	}
	return com_watabou_wintermansion_elements3d_Window.createRegularWindow(0.2,0.4,3,4,r);
};
com_watabou_wintermansion_elements3d_Window.__super__ = away3d_core_base_Geometry;
com_watabou_wintermansion_elements3d_Window.prototype = $extend(away3d_core_base_Geometry.prototype,{
	hole: null
	,recess: null
	,__class__: com_watabou_wintermansion_elements3d_Window
});
var com_watabou_wintermansion_elements3d_WingView = function(wing,view) {
	away3d_containers_ObjectContainer3D.call(this);
	this.wing = wing;
	this.mansion = wing.mansion;
	this.view = view;
	this.createWalls();
	var roof = new com_watabou_wintermansion_elements3d_Roof(wing,view);
	this.addChild(roof);
	this.createDoor();
	this.createWindows();
	this.createRoundWindows();
	this.createIcicles();
};
$hxClasses["com.watabou.wintermansion.elements3d.WingView"] = com_watabou_wintermansion_elements3d_WingView;
com_watabou_wintermansion_elements3d_WingView.__name__ = ["com","watabou","wintermansion","elements3d","WingView"];
com_watabou_wintermansion_elements3d_WingView.__super__ = away3d_containers_ObjectContainer3D;
com_watabou_wintermansion_elements3d_WingView.prototype = $extend(away3d_containers_ObjectContainer3D.prototype,{
	wing: null
	,mansion: null
	,view: null
	,m: null
	,createWalls: function() {
		var left = !this.wing.orientation || this.wing.parentA == null;
		var right = !this.wing.orientation || this.wing.parentB == null;
		var top = this.wing.orientation || this.wing.parentA == null;
		var bottom = this.wing.orientation || this.wing.parentB == null;
		if(this.wing.get_inAir()) {
			var height = (this.wing.height - this.wing.ground) * this.mansion.floorHeight;
			var cube = new away3d_entities_Mesh(new away3d_primitives_CubeGeometry(this.wing.w * 1.0,height,this.wing.h * 1.0),this.view.mWalls);
			var _this = this.wing;
			var _this1 = this.wing;
			var _this2 = this.mansion;
			this.move(cube,_this.x + _this.w / 2,_this1.y + _this1.h / 2,this.wing.ground * _this2.floorHeight + _this2.baseHeight + height / 2);
			this.addChild(cube);
			this.createSupport();
		} else {
			var height1 = this.wing.height * this.mansion.floorHeight;
			var cube1 = new away3d_entities_Mesh(new away3d_primitives_CubeGeometry(this.wing.w * 1.0,height1,this.wing.h * 1.0),this.view.mWalls);
			var _this3 = this.wing;
			var _this4 = this.wing;
			var _this5 = this.mansion;
			this.move(cube1,_this3.x + _this3.w / 2,_this4.y + _this4.h / 2,this.wing.height / 2 * _this5.floorHeight + _this5.baseHeight);
			this.addChild(cube1);
			var baseHeight = this.mansion.baseHeight;
			if(baseHeight > 0) {
				var size = com_watabou_wintermansion_elements3d_Style.current.baseSize;
				var base = new away3d_entities_Mesh(new away3d_primitives_CubeGeometry(this.wing.w + size,baseHeight,this.wing.h + size),this.view.mBase);
				var _this6 = this.wing;
				var _this7 = this.wing;
				this.move(base,_this6.x + _this6.w / 2,_this7.y + _this7.h / 2,baseHeight / 2);
				this.addChild(base);
			}
		}
	}
	,createDoor: function() {
		if(this.wing.door != null) {
			var door = com_watabou_wintermansion_elements3d_Door.create(this.view,this.wing.door.r());
			this.move(door,this.wing.door.x + 0.5 + this.wing.door.dx * 0.5,this.wing.door.y + 0.5 + this.wing.door.dy * 0.5,this.mansion.baseHeight);
			this.addChild(door);
			if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("wreaths") != -1)) {
				var wreath = com_watabou_wintermansion_elements3d_Wreath.create(this.view,this.wing.door.r());
				wreath.scale(0.08);
				this.addChild(wreath);
				this.move(wreath,this.wing.door.x + 0.5 + this.wing.door.dx * 0.52,this.wing.door.y + 0.5 + this.wing.door.dy * 0.52,this.mansion.baseHeight + 0.5);
			}
		}
	}
	,createWindows: function() {
		var _g = 0;
		var _g1 = this.wing.windows;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var $window = com_watabou_wintermansion_elements3d_Window.create(this.view,w.r());
			var _this = this.mansion;
			this.move($window,w.x + 0.5 + w.dx * 0.5,w.y + 0.5 + w.dy * 0.5,(w.h + 0.5) * _this.floorHeight + _this.baseHeight);
			this.addChild($window);
		}
	}
	,createRoundWindows: function() {
		var _gthis = this;
		var tmp;
		var tmp1;
		if(!this.wing.tower) {
			var _this = this.wing;
			tmp1 = (_this.orientation ? _this.h : _this.w) * (_this.tower ? _this.mansion.towerFactor : 1) * _this.mansion.pitch >= this.mansion.floorHeight;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = !this.wing.hipRoof;
		} else {
			tmp = false;
		}
		if(tmp) {
			var addWindow = function(face) {
				var $window = com_watabou_wintermansion_elements3d_RoundWindow.create(_gthis.view,face.r());
				var _this1 = _gthis.wing;
				$window.scale(Math.sqrt(_this1.orientation ? _this1.h : _this1.w));
				var _this2 = _gthis.wing;
				var _this3 = _gthis.wing;
				var _this4 = _gthis.mansion;
				var _this5 = _gthis.wing;
				_gthis.move($window,_this2.x + _this2.w / 2 + _gthis.wing.w / 2 * face.dx,_this3.y + _this3.h / 2 + _gthis.wing.h / 2 * face.dy,_gthis.wing.height * _this4.floorHeight + _this4.baseHeight + (_this5.orientation ? _this5.h : _this5.w) * (_this5.tower ? _this5.mansion.towerFactor : 1) * _this5.mansion.pitch * 0.4);
				_gthis.addChild($window);
				if(com_watabou_wintermansion_elements3d_View.opDecoration && (com_watabou_wintermansion_elements3d_Style.current.features != null && com_watabou_wintermansion_elements3d_Style.current.features.indexOf("wreaths") != -1)) {
					var wreath = com_watabou_wintermansion_elements3d_Wreath.create(_gthis.view,face.r());
					var _this6 = _gthis.wing;
					var scale = 0.12 * Math.sqrt(_this6.orientation ? _this6.h : _this6.w);
					wreath.scale(scale);
					var _this7 = _gthis.wing;
					var _this8 = _gthis.wing;
					var _this9 = _gthis.mansion;
					var _this10 = _gthis.wing;
					_gthis.move(wreath,_this7.x + _this7.w / 2 + (_gthis.wing.w / 2 + scale / 3) * face.dx,_this8.y + _this8.h / 2 + (_gthis.wing.h / 2 + scale / 3) * face.dy,_gthis.wing.height * _this9.floorHeight + _this9.baseHeight + (_this10.orientation ? _this10.h : _this10.w) * (_this10.tower ? _this10.mansion.towerFactor : 1) * _this10.mansion.pitch * 0.4);
					_gthis.addChild(wreath);
				}
			};
			if(this.wing.parentA == null) {
				var h = 0;
				var f;
				if(this.wing.orientation) {
					var _g1 = this.wing.y;
					var _this11 = this.wing;
					var _g = _this11.y + _this11.h;
					while(_g1 < _g) {
						var i = _g1++;
						var w = this.mansion.getWing(this.wing.x - 1,i);
						if(w != null && w.height > h) {
							h = w.height;
						}
					}
					f = new com_watabou_wintermansion_model_Face(0,0,-1,0);
				} else {
					var _g11 = this.wing.x;
					var _this12 = this.wing;
					var _g2 = _this12.x + _this12.w;
					while(_g11 < _g2) {
						var i1 = _g11++;
						var w1 = this.mansion.getWing(i1,this.wing.y - 1);
						if(w1 != null && w1.height > h) {
							h = w1.height;
						}
					}
					f = new com_watabou_wintermansion_model_Face(0,0,0,-1);
				}
				if(h < this.wing.height) {
					addWindow(f);
				}
			}
			if(this.wing.parentB == null) {
				var h1 = 0;
				var f1;
				if(this.wing.orientation) {
					var _g12 = this.wing.y;
					var _this13 = this.wing;
					var _g3 = _this13.y + _this13.h;
					while(_g12 < _g3) {
						var i2 = _g12++;
						var _this14 = this.wing;
						var w2 = this.mansion.getWing(_this14.x + _this14.w,i2);
						if(w2 != null && w2.height > h1) {
							h1 = w2.height;
						}
					}
					f1 = new com_watabou_wintermansion_model_Face(0,0,1,0);
				} else {
					var _g13 = this.wing.x;
					var _this15 = this.wing;
					var _g4 = _this15.x + _this15.w;
					while(_g13 < _g4) {
						var i3 = _g13++;
						var _this16 = this.wing;
						var w3 = this.mansion.getWing(i3,_this16.y + _this16.h);
						if(w3 != null && w3.height > h1) {
							h1 = w3.height;
						}
					}
					f1 = new com_watabou_wintermansion_model_Face(0,0,0,1);
				}
				if(h1 < this.wing.height) {
					addWindow(f1);
				}
			}
		}
	}
	,createSupport: function() {
		var getBar = function(thickness,length) {
			if(com_watabou_wintermansion_elements3d_Style.current.cylindrical) {
				return new away3d_primitives_CylinderGeometry(thickness / 2,thickness / 2,length,12,1,false,false);
			} else {
				return new away3d_primitives_CubeGeometry(thickness,length,thickness);
			}
		};
		var thickness1 = com_watabou_wintermansion_elements3d_Style.current.ridge != null ? com_watabou_wintermansion_elements3d_Style.current.ridge : 0.06;
		var padding = thickness1 / 2 + (0.2 + com_watabou_wintermansion_elements3d_Style.current.rakes) / 2;
		var n = this.wing.orientation ? this.wing.h : this.wing.w;
		var d = (n - padding * 2) / n;
		if(this.wing.parentA != null && this.wing.parentB != null || this.wing.ground > 1) {
			var s = thickness1 * 2;
			var l = Math.sqrt(2) * (s + thickness1);
			var _g1 = 0;
			var _g = n + 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.wing.parentA != null) {
					var cube = new away3d_entities_Mesh(getBar(thickness1,l),this.view.mWood);
					if(this.wing.orientation) {
						cube.set_rotationZ(-45);
						var _this = this.mansion;
						this.move(cube,this.wing.x + s / 2,this.wing.y + padding + i * d,this.wing.ground * _this.floorHeight + _this.baseHeight - s / 2);
					} else {
						cube.set_rotationX(45);
						var _this1 = this.mansion;
						this.move(cube,this.wing.x + padding + i * d,this.wing.y + s / 2,this.wing.ground * _this1.floorHeight + _this1.baseHeight - s / 2);
					}
					this.addChild(cube);
				}
				if(this.wing.parentB != null) {
					var cube1 = new away3d_entities_Mesh(getBar(thickness1,l),this.view.mWood);
					if(this.wing.orientation) {
						cube1.set_rotationZ(45);
						var _this2 = this.mansion;
						this.move(cube1,this.wing.x + this.wing.w - s / 2,this.wing.y + padding + i * d,this.wing.ground * _this2.floorHeight + _this2.baseHeight - s / 2);
					} else {
						cube1.set_rotationX(-45);
						var _this3 = this.mansion;
						this.move(cube1,this.wing.x + padding + i * d,this.wing.y + this.wing.h - s / 2,this.wing.ground * _this3.floorHeight + _this3.baseHeight - s / 2);
					}
					this.addChild(cube1);
				}
			}
		} else {
			var start;
			var offset;
			if(this.wing.orientation) {
				offset = new openfl_geom_Point(0,d);
				start = new openfl_geom_Point(this.wing.parentA == null ? this.wing.x + padding : this.wing.x + this.wing.w - padding,this.wing.y + padding);
			} else {
				offset = new openfl_geom_Point(d,0);
				start = new openfl_geom_Point(this.wing.x + padding,this.wing.parentA == null ? this.wing.y + padding : this.wing.y + this.wing.h - padding);
			}
			var _g11 = 0;
			var _g2 = n + 1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var height = this.wing.ground * this.mansion.floorHeight + this.mansion.baseHeight;
				var geo = com_watabou_wintermansion_elements3d_Style.current.cylindrical ? new away3d_primitives_CylinderGeometry(thickness1 / 2,thickness1 / 2,height,12,1,false,false) : new away3d_primitives_CubeGeometry(thickness1,height,thickness1);
				var cube2 = new away3d_entities_Mesh(getBar(thickness1,height),this.view.mWood);
				this.move(cube2,start.x,start.y,height / 2);
				this.addChild(cube2);
				com_watabou_utils_PointExtender.addEq(start,offset);
			}
		}
	}
	,createIcicles: function() {
		var _this = this.wing.mansion;
		var h = this.wing.height * _this.floorHeight + _this.baseHeight;
	}
	,move: function(mesh,x,y,h) {
		var _this = this.view;
		var pos = new openfl_geom_Vector3D(x,h,y);
		mesh.translate(pos,pos.get_length());
	}
	,__class__: com_watabou_wintermansion_elements3d_WingView
});
var com_watabou_wintermansion_elements3d_Wreath = function(twigs,ribbons) {
	away3d_core_base_Geometry.call(this);
	var _g = 0;
	while(_g < twigs.length) {
		var twig = twigs[_g];
		++_g;
		this.addSubGeometry(twig);
	}
	this.ribbons = ribbons;
	var _g1 = 0;
	while(_g1 < ribbons.length) {
		var ribbon = ribbons[_g1];
		++_g1;
		this.addSubGeometry(ribbon);
	}
};
$hxClasses["com.watabou.wintermansion.elements3d.Wreath"] = com_watabou_wintermansion_elements3d_Wreath;
com_watabou_wintermansion_elements3d_Wreath.__name__ = ["com","watabou","wintermansion","elements3d","Wreath"];
com_watabou_wintermansion_elements3d_Wreath.create = function(view,face) {
	var wreath = new away3d_entities_Mesh(com_watabou_wintermansion_elements3d_Wreath.proto,view.mGreen);
	var _g = 0;
	var _g1 = com_watabou_wintermansion_elements3d_Wreath.proto.ribbons;
	while(_g < _g1.length) {
		var ribbon = _g1[_g];
		++_g;
		wreath.getSubMeshForSubGeometry(ribbon).set_material(view.mRibbon);
	}
	if(face == 1 || face == 3) {
		wreath.set_rotationY(90);
	}
	return wreath;
};
com_watabou_wintermansion_elements3d_Wreath.createProto = function() {
	var nBands = 20;
	var ribbonRate = 4;
	var twigs = [];
	var ribbons = [];
	var a0 = Math.PI * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
	var _g1 = 0;
	var _g = nBands;
	while(_g1 < _g) {
		var i = _g1++;
		var ribbon = i % ribbonRate == 0;
		var r1 = ribbon ? 0.45 : 0.2 + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 0.2;
		var r2 = ribbon ? 0.45 : 0.3 + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 0.2;
		var w = ribbon ? 0.5 : 0.8;
		var band = new away3d_primitives_CylinderGeometry(r1,r2,w,6,1,false,false);
		var m = new openfl_geom_Matrix3D();
		var a = a0 + i / nBands * Math.PI * 2;
		m.appendRotation(a / Math.PI * 180,new openfl_geom_Vector3D(0,0,1));
		m.appendTranslation(Math.cos(a),Math.sin(a),0);
		band.applyTransformation(m);
		if(ribbon) {
			ribbons.push(band.get_subGeometries().get(0));
		} else {
			twigs.push(band.get_subGeometries().get(0));
		}
	}
	com_watabou_wintermansion_elements3d_Wreath.proto = new com_watabou_wintermansion_elements3d_Wreath(twigs,ribbons);
};
com_watabou_wintermansion_elements3d_Wreath.__super__ = away3d_core_base_Geometry;
com_watabou_wintermansion_elements3d_Wreath.prototype = $extend(away3d_core_base_Geometry.prototype,{
	ribbons: null
	,__class__: com_watabou_wintermansion_elements3d_Wreath
});
var com_watabou_wintermansion_elements3d_weather_Clouds = function(radius) {
	var size = 0.1 * radius * Math.pow(2,((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3 * 2 - 1);
	var cluster = 10 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 40 | 0;
	var geo = new away3d_core_base_Geometry();
	var nClouds = 2 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 28 | 0;
	var height = 0.1 + 0.9 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
	var m = new openfl_geom_Matrix3D();
	var _g1 = 0;
	var _g = nClouds;
	while(_g1 < _g) {
		var j = _g1++;
		var polar = openfl_geom_Point.polar(radius * (0.8 + 0.2 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647)),Math.PI * 2 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647));
		var groupPos = new openfl_geom_Vector3D(polar.x,radius * height * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647),polar.y);
		var nSpheres = 4 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * (cluster - 4) | 0;
		var els = [];
		var min = Infinity;
		var max = -Infinity;
		var sgs = [];
		var _g3 = 0;
		var _g2 = nSpheres;
		while(_g3 < _g2) {
			var i = _g3++;
			var isInside;
			var intersects;
			var e;
			while(true) {
				var horPos = openfl_geom_Point.polar(size * nSpheres / 8 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647),Math.PI * 2 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647));
				var verPos = 0.1 + 0.8 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
				e = { pos : new openfl_geom_Vector3D(groupPos.x + horPos.x,groupPos.y + size * verPos,groupPos.z + horPos.y), radius : size * Math.sqrt(1 - verPos) * (0.1 + 0.9 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647)), yScale : verPos};
				intersects = els.length == 0;
				isInside = false;
				var _g4 = 0;
				while(_g4 < els.length) {
					var e1 = els[_g4];
					++_g4;
					var d2 = openfl_geom_Point.distance(new openfl_geom_Point(e.pos.x,e.pos.z),new openfl_geom_Point(e1.pos.x,e1.pos.z));
					var dv = Math.abs(e.pos.y - e1.pos.y);
					if(d2 > e.radius + e1.radius || dv > e.radius * e.yScale + e1.radius * e1.yScale) {
						continue;
					}
					if(d2 < Math.abs(e.radius - e1.radius) && dv < Math.abs(e.radius * e.yScale - e1.radius * e1.yScale)) {
						isInside = true;
						break;
					}
					intersects = true;
				}
				if(!(isInside || !intersects)) {
					break;
				}
			}
			m.identity();
			var sphere = new away3d_primitives_SphereGeometry(e.radius,Math.max(32 * e.radius / size,8) | 0,Math.max(16 * e.yScale,6) | 0);
			m.appendScale(1,e.yScale,1);
			m.appendTranslation(e.pos.x,e.pos.y,e.pos.z);
			sphere.applyTransformation(m);
			var sg = sphere.get_subGeometries().get(0);
			geo.addSubGeometry(sg);
			sgs.push(sg);
			els.push(e);
			var r = e.radius * e.yScale;
			if(min > e.pos.y - r) {
				min = e.pos.y - r;
			}
			if(max < e.pos.y + r) {
				max = e.pos.y + r;
			}
		}
		this.repaintCloud(sgs,min,max);
	}
	away3d_entities_Mesh.call(this,geo,com_watabou_wintermansion_elements3d_weather_Clouds.createMaterial());
};
$hxClasses["com.watabou.wintermansion.elements3d.weather.Clouds"] = com_watabou_wintermansion_elements3d_weather_Clouds;
com_watabou_wintermansion_elements3d_weather_Clouds.__name__ = ["com","watabou","wintermansion","elements3d","weather","Clouds"];
com_watabou_wintermansion_elements3d_weather_Clouds.createMaterial = function() {
	var air = com_watabou_wintermansion_elements3d_Style.current.air;
	var sunColor = com_watabou_wintermansion_elements3d_Style.current.sunColor != null ? com_watabou_wintermansion_elements3d_Style.current.sunColor : 16777215;
	var color1 = com_watabou_geom_Color.lerp(sunColor,com_watabou_wintermansion_elements3d_Style.current.skyColor0,air);
	var color2 = com_watabou_wintermansion_elements3d_Style.current.skyColor1;
	var dir = Math.round(127 * (com_watabou_wintermansion_elements3d_Style.current.sunPos / 90));
	var shape = new openfl_display_Shape();
	var m = new openfl_geom_Matrix();
	m.createGradientBox(1,64,Math.PI / 2);
	shape.get_graphics().beginGradientFill(0,[color1,color2],[1,0.9],[dir,255 - dir],m);
	shape.get_graphics().drawRect(0,0,1,64);
	var bmp = new openfl_display_BitmapData(1,64,true,0);
	bmp.draw(shape);
	var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp));
	return mat;
};
com_watabou_wintermansion_elements3d_weather_Clouds.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_weather_Clouds.prototype = $extend(away3d_entities_Mesh.prototype,{
	repaintCloud: function(sgs,min,max) {
		var range = max - min;
		var _g = 0;
		while(_g < sgs.length) {
			var sg = sgs[_g];
			++_g;
			var vertexData = sg.get_vertexData();
			var vStride = sg.get_vertexStride();
			var uvStride = sg.get_UVStride();
			var uvData = sg.get_UVData();
			var len = uvData.get_length();
			var i = sg.get_UVOffset();
			var j = sg.get_vertexOffset();
			while(i < len) {
				var y = vertexData.get(j + 1);
				uvData.set(i + 1,uvData.get(i + 1) * 0.099999999999999978 + (1 - (y - min) / range) * 0.9);
				i += uvStride;
				j += vStride;
			}
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_weather_Clouds
});
var com_watabou_wintermansion_elements3d_weather_Rainfall = function(view,volumeD,volumeH) {
	this.volumeD = volumeD;
	this.volumeH = volumeH;
	var drop = new away3d_primitives_CylinderGeometry(0.005,0.005,1.0,6,1,false,false);
	var _g = [];
	var _g1 = 0;
	while(_g1 < 400) {
		var i = _g1++;
		_g.push(drop);
	}
	var a = _g;
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g11 = 0;
	var _g2 = a.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector.set(i1,a[i1]);
	}
	var particleGeometry = away3d_tools_helpers_ParticleGeometryHelper.generateGeometry(vector);
	var animationSet = new away3d_animators_ParticleAnimationSet(true,true,false);
	animationSet.addAnimation(new away3d_animators_nodes_ParticlePositionNode(1));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleVelocityNode(0,new openfl_geom_Vector3D(0,-10,0)));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleColorNode(0,true,true,false,false,new openfl_geom_ColorTransform(1,1,1,0),new openfl_geom_ColorTransform(1,1,1,2)));
	animationSet.initParticleFunc = $bind(this,this.initDropParam);
	if(this.mDrop == null) {
		this.mDrop = com_watabou_wintermansion_elements3d_weather_Rainfall.createRaindrop();
	}
	away3d_entities_Mesh.call(this,particleGeometry,this.mDrop);
	var animator = new away3d_animators_ParticleAnimator(animationSet);
	this.set_animator(animator);
	animator.start();
};
$hxClasses["com.watabou.wintermansion.elements3d.weather.Rainfall"] = com_watabou_wintermansion_elements3d_weather_Rainfall;
com_watabou_wintermansion_elements3d_weather_Rainfall.__name__ = ["com","watabou","wintermansion","elements3d","weather","Rainfall"];
com_watabou_wintermansion_elements3d_weather_Rainfall.createRaindrop = function() {
	var color = 16777215;
	var txtSize = 64;
	var drop = new openfl_display_Shape();
	var m = new openfl_geom_Matrix();
	m.createGradientBox(1,txtSize,Math.PI / 2);
	drop.get_graphics().beginGradientFill(0,[color,color,color],[0,0.15,0],[0,128,255],m);
	drop.get_graphics().drawRect(0,0,1,txtSize);
	var bmp = new openfl_display_BitmapData(1,txtSize,true,0);
	bmp.draw(drop);
	var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true);
	mat.set_alphaBlending(true);
	return mat;
};
com_watabou_wintermansion_elements3d_weather_Rainfall.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_weather_Rainfall.prototype = $extend(away3d_entities_Mesh.prototype,{
	volumeD: null
	,volumeH: null
	,mDrop: null
	,initDropParam: function(prop) {
		var x = ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 - 0.5) * this.volumeD;
		var z = ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 - 0.5) * this.volumeD;
		var y = this.volumeH;
		prop.startTime = prop.index / prop.total * this.volumeH / 10;
		prop.duration = y / 10;
		var this1 = prop.nodes;
		var v = new openfl_geom_Vector3D(x,y,z);
		var _this = this1;
		var value = v;
		if(__map_reserved["PositionVector3D"] != null) {
			_this.setReserved("PositionVector3D",value);
		} else {
			_this.h["PositionVector3D"] = value;
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_weather_Rainfall
});
var com_watabou_wintermansion_elements3d_weather_Snowfall = function(view,volumeD,volumeH) {
	this.volumeD = volumeD;
	this.volumeH = volumeH;
	var flake = new away3d_primitives_PlaneGeometry(0.05,0.05,1,1,false);
	var _g = [];
	var _g1 = 0;
	while(_g1 < 1000) {
		var i = _g1++;
		_g.push(flake);
	}
	var a = _g;
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g11 = 0;
	var _g2 = a.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector.set(i1,a[i1]);
	}
	var particleGeometry = away3d_tools_helpers_ParticleGeometryHelper.generateGeometry(vector);
	var animationSet = new away3d_animators_ParticleAnimationSet(true,true,false);
	animationSet.addAnimation(new away3d_animators_nodes_ParticlePositionNode(1));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleVelocityNode(0,new openfl_geom_Vector3D(0,-1.,0)));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleColorNode(0,true,true,false,false,new openfl_geom_ColorTransform(),new openfl_geom_ColorTransform(1,1,1,0)));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleBillboardNode());
	animationSet.initParticleFunc = $bind(this,this.initParticleParam);
	away3d_entities_Mesh.call(this,particleGeometry,view.mSnow);
	var animator = new away3d_animators_ParticleAnimator(animationSet);
	this.set_animator(animator);
	animator.start();
};
$hxClasses["com.watabou.wintermansion.elements3d.weather.Snowfall"] = com_watabou_wintermansion_elements3d_weather_Snowfall;
com_watabou_wintermansion_elements3d_weather_Snowfall.__name__ = ["com","watabou","wintermansion","elements3d","weather","Snowfall"];
com_watabou_wintermansion_elements3d_weather_Snowfall.createSnowFlake = function(color) {
	var txtSize = 64;
	var bmp = new openfl_display_BitmapData(txtSize,txtSize,true,0);
	var flake = new openfl_display_Shape();
	var m = new openfl_geom_Matrix();
	m.createGradientBox(txtSize,txtSize);
	flake.get_graphics().beginGradientFill(1,[color,color],[1,0],[128,255],m);
	flake.get_graphics().drawCircle(txtSize / 2,txtSize / 2,txtSize / 2);
	bmp.draw(flake);
	var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true);
	mat.set_alphaBlending(true);
	return mat;
};
com_watabou_wintermansion_elements3d_weather_Snowfall.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_weather_Snowfall.prototype = $extend(away3d_entities_Mesh.prototype,{
	volumeD: null
	,volumeH: null
	,initParticleParam: function(prop) {
		var x = ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 - 0.5) * this.volumeD;
		var z = ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 - 0.5) * this.volumeD;
		var y = this.volumeH;
		prop.startTime = prop.index / prop.total * this.volumeH / 1.0;
		prop.duration = y / 1.0;
		var this1 = prop.nodes;
		var v = new openfl_geom_Vector3D(x,y,z);
		var _this = this1;
		var value = v;
		if(__map_reserved["PositionVector3D"] != null) {
			_this.setReserved("PositionVector3D",value);
		} else {
			_this.h["PositionVector3D"] = value;
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_weather_Snowfall
});
var com_watabou_wintermansion_elements3d_weather_Stars = function(view,distance) {
	this.distance = distance;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 1000) {
		var i = _g1++;
		var size = 0.3 * (((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) / 3);
		_g.push(new away3d_primitives_PlaneGeometry(size,size,1,1,false));
	}
	var a = _g;
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g11 = 0;
	var _g2 = a.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		vector.set(i1,a[i1]);
	}
	var particleGeometry = away3d_tools_helpers_ParticleGeometryHelper.generateGeometry(vector);
	var animationSet = new away3d_animators_ParticleAnimationSet(false,false,false);
	animationSet.addAnimation(new away3d_animators_nodes_ParticlePositionNode(1));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleInitialColorNode(1));
	animationSet.addAnimation(new away3d_animators_nodes_ParticleBillboardNode());
	animationSet.initParticleFunc = $bind(this,this.initParticleParam);
	var sunColor = com_watabou_wintermansion_elements3d_Style.current.sunColor != null ? com_watabou_wintermansion_elements3d_Style.current.sunColor : 16777215;
	away3d_entities_Mesh.call(this,particleGeometry,com_watabou_wintermansion_elements3d_weather_Stars.createStarTexture(com_watabou_geom_Color.lerp(16777215,sunColor),1 - com_watabou_wintermansion_elements3d_Style.current.ambience));
	var animator = new away3d_animators_ParticleAnimator(animationSet);
	this.set_animator(animator);
	animator.start();
};
$hxClasses["com.watabou.wintermansion.elements3d.weather.Stars"] = com_watabou_wintermansion_elements3d_weather_Stars;
com_watabou_wintermansion_elements3d_weather_Stars.__name__ = ["com","watabou","wintermansion","elements3d","weather","Stars"];
com_watabou_wintermansion_elements3d_weather_Stars.createStarTexture = function(color,clarity) {
	var star = new openfl_display_Shape();
	var m = new openfl_geom_Matrix();
	m.createGradientBox(64,64);
	star.get_graphics().beginGradientFill(1,[color,color],[1,0],[clarity * 255 | 0,255],m);
	star.get_graphics().drawCircle(32.,32.,32.);
	var bmp = new openfl_display_BitmapData(64,64,true,0);
	bmp.draw(star);
	var mat = new away3d_materials_TextureMaterial(new away3d_textures_BitmapTexture(bmp),true);
	mat.set_alphaBlending(true);
	return mat;
};
com_watabou_wintermansion_elements3d_weather_Stars.__super__ = away3d_entities_Mesh;
com_watabou_wintermansion_elements3d_weather_Stars.prototype = $extend(away3d_entities_Mesh.prototype,{
	distance: null
	,initParticleParam: function(prop) {
		var a = Math.PI * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647);
		var b = Math.acos(2 * ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647) - 1);
		var x = this.distance * Math.cos(a) * Math.sin(b);
		var y = this.distance * Math.sin(a) * Math.sin(b);
		var z = this.distance * Math.cos(b);
		var alpha = Math.sqrt(y / this.distance);
		var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
		var alpha1 = alpha * (1 - f * f * f);
		var this1 = prop.nodes;
		var v = new openfl_geom_Vector3D(x,y,z);
		var _this = this1;
		var value = v;
		if(__map_reserved["PositionVector3D"] != null) {
			_this.setReserved("PositionVector3D",value);
		} else {
			_this.h["PositionVector3D"] = value;
		}
		var this2 = prop.nodes;
		var v1 = new openfl_geom_ColorTransform(1,1,1,alpha1);
		var _this1 = this2;
		var value1 = v1;
		if(__map_reserved["ColorInitialColorTransform"] != null) {
			_this1.setReserved("ColorInitialColorTransform",value1);
		} else {
			_this1.h["ColorInitialColorTransform"] = value1;
		}
	}
	,__class__: com_watabou_wintermansion_elements3d_weather_Stars
});
var com_watabou_wintermansion_model_Mansion = function(seed,size) {
	this.floorHeight = 1.0;
	this.baseHeight = 0.0;
	this.towerFactor = 1.5;
	this.hipRoof = false;
	this.pitch = 0.8;
	this.symV = false;
	this.symH = false;
	if(seed != -1) {
		com_watabou_utils_Random.save();
		com_watabou_utils_Random.reset(seed);
	}
	haxe_Log.trace(this.seed = com_watabou_utils_Random.seed,{ fileName : "Mansion.hx", lineNumber : 51, className : "com.watabou.wintermansion.model.Mansion", methodName : "new", customParams : [size]});
	this.size = size;
	var f = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647;
	var fill = size * size / 2 + f * f * f * size / 2;
	this.symH = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.1;
	this.symV = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.1;
	this.buildPlan(size,size,fill | 0);
	var style = com_watabou_wintermansion_elements3d_Style.current;
	this.floorHeight = style.floorHeight;
	this.pitch = style.pitch;
	this.hipRoof = style.hipRoof;
	this.towerFactor = style.concave < 1 ? 1.5 : 1.0;
	this.baseHeight = style.baseHeight;
	this.buildWings();
	this.buildRoofs();
	this.placeDoors();
	this.placeWindows();
	this.placeChimneys();
	this.placeDormers();
	this.placeInnerDoors();
	this.placeStairs();
	com_watabou_utils_Random.restore();
};
$hxClasses["com.watabou.wintermansion.model.Mansion"] = com_watabou_wintermansion_model_Mansion;
com_watabou_wintermansion_model_Mansion.__name__ = ["com","watabou","wintermansion","model","Mansion"];
com_watabou_wintermansion_model_Mansion.prototype = {
	seed: null
	,size: null
	,planW: null
	,planH: null
	,plan: null
	,height: null
	,area: null
	,center: null
	,radius: null
	,spire: null
	,symH: null
	,symV: null
	,wings: null
	,doors: null
	,flags: null
	,clusters: null
	,stairs: null
	,innerDoors: null
	,pitch: null
	,hipRoof: null
	,towerFactor: null
	,baseHeight: null
	,floorHeight: null
	,f2h: function(floor) {
		return floor * this.floorHeight + this.baseHeight;
	}
	,isOpen: function(x,y,h,dx,dy) {
		if(x + dx < 0 || x + dx >= this.planW || y + dy < 0 || y + dy >= this.planH || !this.plan[y + dy][x + dx]) {
			return true;
		}
		var wing = this.getWing(x + dx,y + dy);
		if(wing.height > h) {
			return wing.ground > h;
		} else {
			return true;
		}
	}
	,isBlocked: function(x,y,h,dx,dy) {
		if(this.isOpen(x,y,h,dx,dy)) {
			return true;
		}
		var w1 = this.getWing(x,y);
		var w2 = this.getWing(x + dx,y + dy);
		if(w1 == w2) {
			return true;
		}
		if(w1.getCluster() == w2.getCluster()) {
			return true;
		}
		var dir = new com_watabou_wintermansion_model_Face(x,y,dx,dy,h);
		var _g = 0;
		var _g1 = this.innerDoors;
		while(_g < _g1.length) {
			var door = _g1[_g];
			++_g;
			if(door.equals(dir) || door.opposite().equals(dir)) {
				return true;
			}
		}
		return false;
	}
	,getWing: function(x,y) {
		var _g = 0;
		var _g1 = this.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			if(x >= wing.x && x < wing.x + wing.w && y >= wing.y && y < wing.y + wing.h) {
				return wing;
			}
		}
		return null;
	}
	,buildPlan: function(w,h,fill) {
		this.planW = w;
		this.planH = h;
		var ok;
		while(true) {
			var _g = [];
			var _g2 = 0;
			var _g1 = this.planH;
			while(_g2 < _g1) {
				var i = _g2++;
				var _g3 = [];
				var _g5 = 0;
				var _g4 = this.planW;
				while(_g5 < _g4) {
					var j = _g5++;
					_g3.push(false);
				}
				_g.push(_g3);
			}
			this.plan = _g;
			this.plan[this.planH / 2 | 0][this.planW / 2 | 0] = true;
			var weight = 1;
			while(weight < fill) {
				var x = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * this.planW | 0;
				var y = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * this.planH | 0;
				if(!this.plan[y][x] && (x > 0 && this.plan[y][x - 1] || x < this.planW - 1 && this.plan[y][x + 1] || y > 0 && this.plan[y - 1][x] || y < this.planH - 1 && this.plan[y + 1][x])) {
					this.plan[y][x] = true;
					++weight;
					if(this.symH) {
						if(!this.plan[y][this.planW - x - 1]) {
							this.plan[y][this.planW - x - 1] = true;
							++weight;
						}
					}
					if(this.symV) {
						if(!this.plan[this.planH - y - 1][x]) {
							this.plan[this.planH - y - 1][x] = true;
							++weight;
						}
					}
					if(this.symH && this.symV) {
						if(!this.plan[this.planH - y - 1][this.planW - x - 1]) {
							this.plan[this.planH - y - 1][this.planW - x - 1] = true;
							++weight;
						}
					}
				}
			}
			ok = true;
			var _g21 = 1;
			var _g11 = this.planH;
			while(_g21 < _g11) {
				var i1 = _g21++;
				var _g41 = 1;
				var _g31 = this.planW;
				while(_g41 < _g31) {
					var j1 = _g41++;
					var a = this.plan[i1][j1];
					var b = this.plan[i1 - 1][j1 - 1];
					var c = this.plan[i1 - 1][j1];
					var d = this.plan[i1][j1 - 1];
					if(a == b && c == d && a != c) {
						ok = false;
						continue;
					}
				}
			}
			if(!(!ok)) {
				break;
			}
		}
		this.area = 0;
		var cx = 0.0;
		var cy = 0.0;
		var _g12 = 0;
		var _g6 = this.planH;
		while(_g12 < _g6) {
			var i2 = _g12++;
			var _g32 = 0;
			var _g22 = this.planW;
			while(_g32 < _g22) {
				var j2 = _g32++;
				if(this.plan[i2][j2]) {
					this.area++;
					cx += j2 + 0.5;
					cy += i2 + 0.5;
				}
			}
		}
		this.center = new openfl_geom_Point(cx / this.area,cy / this.area);
		this.radius = 0;
		var _g13 = 0;
		var _g7 = this.planH;
		while(_g13 < _g7) {
			var i3 = _g13++;
			var _g33 = 0;
			var _g23 = this.planW;
			while(_g33 < _g23) {
				var j3 = _g33++;
				if(this.plan[i3][j3]) {
					var d1 = openfl_geom_Point.distance(this.center,new openfl_geom_Point(j3 + 0.5,i3 + 0.5));
					if(this.radius < d1) {
						this.radius = d1;
					}
				}
			}
		}
		this.radius += 0.5;
	}
	,buildWings: function() {
		var _g = [];
		var _g2 = 0;
		var _g1 = this.planH;
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = [];
			var _g5 = 0;
			var _g4 = this.planW;
			while(_g5 < _g4) {
				var j = _g5++;
				_g3.push(this.plan[i][j]);
			}
			_g.push(_g3);
		}
		var p = _g;
		this.wings = [];
		while(this.weight(p) > 0) {
			var wing = com_watabou_utils_ArrayExtender.random(this.findLargestWing(p));
			this.wings.push(wing);
			var _g21 = wing.y;
			var _g11 = wing.y + wing.h;
			while(_g21 < _g11) {
				var y = _g21++;
				var _g41 = wing.x;
				var _g31 = wing.x + wing.w;
				while(_g41 < _g31) {
					var x = _g41++;
					p[y][x] = false;
				}
			}
		}
	}
	,buildRoofs: function() {
		var _g = 0;
		var _g1 = this.wings;
		while(_g < _g1.length) {
			var room = [_g1[_g]];
			++_g;
			var attached = false;
			var builtWings = this.wings.filter((function(room1) {
				return function(r) {
					if(r.height > 0) {
						return room1[0].check(r) != com_watabou_wintermansion_model_Connection.NONE;
					} else {
						return false;
					}
				};
			})(room));
			var _g2 = 0;
			while(_g2 < builtWings.length) {
				var r1 = builtWings[_g2];
				++_g2;
				var c = room[0].check(r1);
				if(c == com_watabou_wintermansion_model_Connection.TOUCHES_LEFT || c == com_watabou_wintermansion_model_Connection.TOUCHES_RIGHT || c == com_watabou_wintermansion_model_Connection.TOUCHES_TOP || c == com_watabou_wintermansion_model_Connection.TOUCHES_BOTTOM) {
					attached = false;
					break;
				}
				var ridge = c == com_watabou_wintermansion_model_Connection.LEFT || c == com_watabou_wintermansion_model_Connection.RIGHT;
				var height = r1.height;
				if(!attached) {
					attached = true;
					room[0].orientation = ridge;
					room[0].height = height;
				} else if(ridge != room[0].orientation || height != room[0].height) {
					attached = false;
					break;
				}
				if(room[0].mansion.baseHeight + room[0].height * room[0].mansion.floorHeight + (room[0].orientation ? room[0].h : room[0].w) * (room[0].tower ? room[0].mansion.towerFactor : 1) * room[0].mansion.pitch > r1.mansion.baseHeight + r1.height * r1.mansion.floorHeight + (r1.orientation ? r1.h : r1.w) * (r1.tower ? r1.mansion.towerFactor : 1) * r1.mansion.pitch) {
					attached = false;
					break;
				}
				room[0].attachTo(r1,c);
			}
			if(!attached) {
				if(room[0].w > room[0].h) {
					room[0].orientation = true;
				} else if(room[0].w < room[0].h) {
					room[0].orientation = false;
				} else if(room[0].w == room[0].h) {
					room[0].orientation = (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5;
					if(room[0].w == 1) {
						room[0].tower = true;
					}
				}
				room[0].detach();
				var hh = [];
				var _g21 = 0;
				while(_g21 < builtWings.length) {
					var r2 = builtWings[_g21];
					++_g21;
					com_watabou_utils_ArrayExtender.add(hh,r2.height);
				}
				if(room[0].tower) {
					var tmp = com_watabou_utils_ArrayExtender.max(hh,(function() {
						return function(h) {
							return h;
						};
					})());
					room[0].height = tmp + 2;
				} else {
					room[0].height = room[0].w < room[0].h ? room[0].w : room[0].h;
					while(hh.indexOf(room[0].height) != -1) room[0].height++;
				}
			}
		}
		var _g3 = 0;
		var _g11 = this.wings;
		while(_g3 < _g11.length) {
			var wing = _g11[_g3];
			++_g3;
			wing.initTips();
		}
		this.spire = 0;
		this.height = 0;
		var _g4 = 0;
		var _g12 = this.wings;
		while(_g4 < _g12.length) {
			var wing1 = _g12[_g4];
			++_g4;
			var h1 = wing1.mansion.baseHeight + wing1.height * wing1.mansion.floorHeight + (wing1.orientation ? wing1.h : wing1.w) * (wing1.tower ? wing1.mansion.towerFactor : 1) * wing1.mansion.pitch;
			if(this.spire < h1) {
				this.spire = h1;
			}
			if(this.height < wing1.height) {
				this.height = wing1.height;
			}
			if(wing1.canBeSuspended()) {
				wing1.ground = wing1.height - 1;
			}
		}
		this.placeFlags();
	}
	,placeFlags: function() {
		this.flags = [];
		if(com_watabou_wintermansion_elements3d_Style.current.concave < 1) {
			var _g = 0;
			var _g1 = this.wings;
			while(_g < _g1.length) {
				var wing = _g1[_g];
				++_g;
				if(wing.tower) {
					this.flags.push(new openfl_geom_Vector3D(wing.x + wing.w / 2,wing.mansion.baseHeight + wing.height * wing.mansion.floorHeight + (wing.orientation ? wing.h : wing.w) * (wing.tower ? wing.mansion.towerFactor : 1) * wing.mansion.pitch + com_watabou_wintermansion_elements3d_Style.current.thickness,wing.y + wing.h / 2));
				}
			}
		}
	}
	,findLargestWing: function(plan) {
		var largest = null;
		var quality = 0.0;
		var _g1 = 0;
		var _g = this.planH;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.planW;
			while(_g3 < _g2) {
				var j = _g3++;
				if(plan[i][j]) {
					var block = this.findLargestBlock(plan,j,i);
					var q = block.w * block.h > Math.sqrt(block.mansion.area) * 2 ? 0 : block.w * block.h + (block.w < block.h ? block.w : block.h);
					if(largest == null || q > quality) {
						largest = [block];
						quality = q;
					} else if(q == quality) {
						largest.push(block);
					}
				}
			}
		}
		return largest;
	}
	,findLargestBlock: function(plan,x,y) {
		var largest = null;
		var _g1 = 0;
		var _g = this.planW - x;
		while(_g1 < _g) {
			var w = _g1++;
			if(plan[y][x + w]) {
				var column = this.findTallestColumn(plan,x,y,w + 1);
				if(largest == null || (column.w * column.h > Math.sqrt(column.mansion.area) * 2 ? 0 : column.w * column.h + (column.w < column.h ? column.w : column.h)) > (largest.w * largest.h > Math.sqrt(largest.mansion.area) * 2 ? 0 : largest.w * largest.h + (largest.w < largest.h ? largest.w : largest.h))) {
					largest = column;
				}
			} else {
				break;
			}
		}
		return largest;
	}
	,findTallestColumn: function(plan,x,y,w) {
		var _g1 = 0;
		var _g = this.planH - y;
		while(_g1 < _g) {
			var h = _g1++;
			var _g3 = 0;
			var _g2 = w;
			while(_g3 < _g2) {
				var w1 = _g3++;
				if(!plan[y + h][x + w1]) {
					return new com_watabou_wintermansion_model_Wing(this,x,y,w,h);
				}
			}
		}
		return new com_watabou_wintermansion_model_Wing(this,x,y,w,this.planH - y);
	}
	,weight: function(plan) {
		var count = 0;
		var _g1 = 0;
		var _g = this.planH;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.planW;
			while(_g3 < _g2) {
				var j = _g3++;
				if(plan[i][j]) {
					++count;
				}
			}
		}
		return count;
	}
	,getClusters: function() {
		if(this.clusters != null) {
			return this.clusters;
		}
		var roots = this.wings.filter(function(w) {
			if(w.parentA == null) {
				return w.parentB == null;
			} else {
				return false;
			}
		});
		var _g = [];
		var _g1 = 0;
		while(_g1 < roots.length) {
			var root = roots[_g1];
			++_g1;
			_g.push(root.getAllChildren().concat([root]));
		}
		var bunches = _g;
		this.clusters = [];
		var _g11 = 0;
		while(_g11 < bunches.length) {
			var bunch = bunches[_g11];
			++_g11;
			var newCluster = true;
			var _g2 = 0;
			var _g3 = this.clusters;
			while(_g2 < _g3.length) {
				var cluster = _g3[_g2];
				++_g2;
				if(com_watabou_utils_ArrayExtender.intersect(cluster,bunch).length > 0) {
					com_watabou_utils_ArrayExtender.addAll(cluster,bunch);
					newCluster = false;
					break;
				}
			}
			if(newCluster) {
				this.clusters.push(bunch);
			}
		}
		return this.clusters;
	}
	,placeDoors: function() {
		this.doors = [];
		var _g = 0;
		var _g1 = this.getClusters();
		while(_g < _g1.length) {
			var cluster = _g1[_g];
			++_g;
			var area = 0;
			var _g2 = 0;
			while(_g2 < cluster.length) {
				var c = cluster[_g2];
				++_g2;
				area += c.w * c.h;
			}
			var nDoors = 1 + (area / 8 | 0);
			var wings = com_watabou_utils_ArrayExtender.shuffle(cluster);
			var sym = wings.filter(function(w) {
				if(!w.isSymmetricalH()) {
					return w.isSymmetricalV();
				} else {
					return true;
				}
			});
			if(sym != null) {
				wings = sym.concat(com_watabou_utils_ArrayExtender.difference(wings,sym));
			}
			while(wings.length > 0 && nDoors > 0) {
				var door = wings.shift().placeDoor();
				if(door != null) {
					this.doors.push(door);
					--nDoors;
				}
			}
		}
	}
	,placeWindows: function() {
		var _g = 0;
		var _g1 = this.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			wing.placeWindows();
		}
	}
	,placeChimneys: function() {
		var _g = 0;
		var _g1 = this.getClusters();
		while(_g < _g1.length) {
			var cluster = _g1[_g];
			++_g;
			var area = 0;
			var _g2 = 0;
			while(_g2 < cluster.length) {
				var c = cluster[_g2];
				++_g2;
				area += c.w * c.h;
			}
			var nChimneys = 1 + (area / 6 | 0);
			var wings = com_watabou_utils_ArrayExtender.shuffle(cluster);
			while(wings.length > 0 && nChimneys > 0) if(wings.shift().placeChimney() != null) {
				--nChimneys;
			}
		}
	}
	,placeInnerDoors: function() {
		this.innerDoors = [];
		var _g1 = 0;
		var _g = this.clusters.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var c1 = this.clusters[i];
			var _g3 = i + 1;
			var _g2 = this.clusters.length;
			while(_g3 < _g2) {
				var j = _g3++;
				var c2 = this.clusters[j];
				var candidates = [];
				var _g4 = 0;
				while(_g4 < c1.length) {
					var wing = c1[_g4];
					++_g4;
					var _g6 = wing.x;
					var _g5 = wing.x + wing.w;
					while(_g6 < _g5) {
						var k = _g6++;
						if(c2.indexOf(this.getWing(k,wing.y - 1)) != -1) {
							candidates.push(new com_watabou_wintermansion_model_Face(k,wing.y,0,-1));
						}
						if(c2.indexOf(this.getWing(k,wing.y + wing.h)) != -1) {
							candidates.push(new com_watabou_wintermansion_model_Face(k,wing.y + wing.h,0,-1));
						}
					}
					var _g61 = wing.y;
					var _g51 = wing.y + wing.h;
					while(_g61 < _g51) {
						var k1 = _g61++;
						if(c2.indexOf(this.getWing(wing.x - 1,k1)) != -1) {
							candidates.push(new com_watabou_wintermansion_model_Face(wing.x,k1,-1,0));
						}
						if(c2.indexOf(this.getWing(wing.x + wing.w,k1)) != -1) {
							candidates.push(new com_watabou_wintermansion_model_Face(wing.x + wing.w,k1,-1,0));
						}
					}
				}
				if(candidates.length > 0) {
					var door = com_watabou_utils_ArrayExtender.random(candidates);
					var w1 = this.getWing(door.x,door.y);
					var w2 = this.getWing(door.x + door.dx,door.y + door.dy);
					var min = w1.ground > w2.ground ? w1.ground : w2.ground;
					var max = w1.height < w2.height ? w1.height : w2.height;
					door.h = min + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * (max - min) | 0;
					this.innerDoors.push(door);
				}
			}
		}
	}
	,placeStairs: function() {
		this.stairs = [];
		var _g = 0;
		var _g1 = this.getClusters();
		while(_g < _g1.length) {
			var cluster = _g1[_g];
			++_g;
			if(cluster[0].height > 1) {
				var cells = [];
				var quality = -1;
				var _g2 = 0;
				while(_g2 < cluster.length) {
					var wing = cluster[_g2];
					++_g2;
					if(wing.get_inAir()) {
						continue;
					} else if(wing.tower) {
						cells = [new com_watabou_wintermansion_model_Cell(wing.x,wing.y)];
						break;
					} else {
						var _g4 = wing.y;
						var _g3 = wing.y + wing.h;
						while(_g4 < _g3) {
							var i = _g4++;
							var _g6 = wing.x;
							var _g5 = wing.x + wing.w;
							while(_g6 < _g5) {
								var j = _g6++;
								var c = [new com_watabou_wintermansion_model_Cell(j,i)];
								var q = com_watabou_utils_ArrayExtender.some(this.doors,(function(c1) {
									return function(door) {
										return door.cell().equals(c1[0]);
									};
								})(c)) ? 0 : com_watabou_utils_ArrayExtender.some(this.innerDoors,(function(c2) {
									return function(door1) {
										if(!door1.cell().equals(c2[0])) {
											return door1.dest().equals(c2[0]);
										} else {
											return true;
										}
									};
								})(c)) ? 1 : 2;
								if(q > quality) {
									cells = [c[0]];
									quality = q;
								} else if(q == quality) {
									cells.push(c[0]);
								}
							}
						}
					}
				}
				if(cells.length == 1) {
					this.stairs.push(cells[0]);
				} else if(cells.length > 1) {
					this.stairs.push(com_watabou_utils_ArrayExtender.random(cells));
				}
			}
		}
	}
	,placeDormers: function() {
	}
	,__class__: com_watabou_wintermansion_model_Mansion
};
var com_watabou_wintermansion_model_Connection = $hxClasses["com.watabou.wintermansion.model.Connection"] = { __ename__ : ["com","watabou","wintermansion","model","Connection"], __constructs__ : ["NONE","TOP","BOTTOM","LEFT","RIGHT","TOUCHES_TOP","TOUCHES_BOTTOM","TOUCHES_LEFT","TOUCHES_RIGHT"] };
com_watabou_wintermansion_model_Connection.NONE = ["NONE",0];
com_watabou_wintermansion_model_Connection.NONE.toString = $estr;
com_watabou_wintermansion_model_Connection.NONE.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.TOP = ["TOP",1];
com_watabou_wintermansion_model_Connection.TOP.toString = $estr;
com_watabou_wintermansion_model_Connection.TOP.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.BOTTOM = ["BOTTOM",2];
com_watabou_wintermansion_model_Connection.BOTTOM.toString = $estr;
com_watabou_wintermansion_model_Connection.BOTTOM.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.LEFT = ["LEFT",3];
com_watabou_wintermansion_model_Connection.LEFT.toString = $estr;
com_watabou_wintermansion_model_Connection.LEFT.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.RIGHT = ["RIGHT",4];
com_watabou_wintermansion_model_Connection.RIGHT.toString = $estr;
com_watabou_wintermansion_model_Connection.RIGHT.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.TOUCHES_TOP = ["TOUCHES_TOP",5];
com_watabou_wintermansion_model_Connection.TOUCHES_TOP.toString = $estr;
com_watabou_wintermansion_model_Connection.TOUCHES_TOP.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.TOUCHES_BOTTOM = ["TOUCHES_BOTTOM",6];
com_watabou_wintermansion_model_Connection.TOUCHES_BOTTOM.toString = $estr;
com_watabou_wintermansion_model_Connection.TOUCHES_BOTTOM.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.TOUCHES_LEFT = ["TOUCHES_LEFT",7];
com_watabou_wintermansion_model_Connection.TOUCHES_LEFT.toString = $estr;
com_watabou_wintermansion_model_Connection.TOUCHES_LEFT.__enum__ = com_watabou_wintermansion_model_Connection;
com_watabou_wintermansion_model_Connection.TOUCHES_RIGHT = ["TOUCHES_RIGHT",8];
com_watabou_wintermansion_model_Connection.TOUCHES_RIGHT.toString = $estr;
com_watabou_wintermansion_model_Connection.TOUCHES_RIGHT.__enum__ = com_watabou_wintermansion_model_Connection;
var com_watabou_wintermansion_model_Wing = function(mansion,x,y,w,h) {
	this.chimney = null;
	this.windows = [];
	this.door = null;
	this.ground = 0;
	this.height = 0;
	this.hipRoof = false;
	this.mansion = mansion;
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
	this.hipRoof = mansion.hipRoof;
};
$hxClasses["com.watabou.wintermansion.model.Wing"] = com_watabou_wintermansion_model_Wing;
com_watabou_wintermansion_model_Wing.__name__ = ["com","watabou","wintermansion","model","Wing"];
com_watabou_wintermansion_model_Wing.prototype = {
	mansion: null
	,x: null
	,y: null
	,w: null
	,h: null
	,orientation: null
	,tower: null
	,inAir: null
	,get_inAir: function() {
		return this.ground > 0;
	}
	,bridge: null
	,get_bridge: function() {
		if(this.get_inAir() && this.parentA != null) {
			return this.parentB != null;
		} else {
			return false;
		}
	}
	,hipRoof: null
	,height: null
	,ground: null
	,parentA: null
	,parentB: null
	,tipA: null
	,tipB: null
	,door: null
	,windows: null
	,chimney: null
	,right: null
	,get_right: function() {
		return this.x + this.w;
	}
	,bottom: null
	,get_bottom: function() {
		return this.y + this.h;
	}
	,cx: null
	,get_cx: function() {
		return this.x + this.w / 2;
	}
	,cy: null
	,get_cy: function() {
		return this.y + this.h / 2;
	}
	,'short': null
	,get_short: function() {
		if(this.w < this.h) {
			return this.w;
		} else {
			return this.h;
		}
	}
	,'long': null
	,get_long: function() {
		if(this.w < this.h) {
			return this.h;
		} else {
			return this.w;
		}
	}
	,depth: null
	,get_depth: function() {
		if(this.orientation) {
			return this.w;
		} else {
			return this.h;
		}
	}
	,width: null
	,get_width: function() {
		if(this.orientation) {
			return this.h;
		} else {
			return this.w;
		}
	}
	,area: null
	,get_area: function() {
		return this.w * this.h;
	}
	,quality: null
	,get_quality: function() {
		if(this.w * this.h > Math.sqrt(this.mansion.area) * 2) {
			return 0;
		} else {
			return this.w * this.h + (this.w < this.h ? this.w : this.h);
		}
	}
	,roofHeight: null
	,get_roofHeight: function() {
		return (this.orientation ? this.h : this.w) * (this.tower ? this.mansion.towerFactor : 1) * this.mansion.pitch;
	}
	,ridgeHeight: null
	,get_ridgeHeight: function() {
		return this.mansion.baseHeight + this.height * this.mansion.floorHeight + (this.orientation ? this.h : this.w) * (this.tower ? this.mansion.towerFactor : 1) * this.mansion.pitch;
	}
	,getRect: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.w,this.h);
	}
	,toString: function() {
		return "(" + this.w + " x " + this.h + ")";
	}
	,getCluster: function() {
		var _g = 0;
		var _g1 = this.mansion.getClusters();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.indexOf(this) != -1) {
				return c;
			}
		}
		return null;
	}
	,check: function(room) {
		if(this.x + this.w == room.x) {
			if(this.y >= room.y && this.y + this.h <= room.y + room.h || room.y >= this.y && room.y + room.h <= this.y + this.h) {
				return com_watabou_wintermansion_model_Connection.RIGHT;
			}
			if((this.y > room.y && this.y < room.y + room.h) != (this.y + this.h > room.y && this.y + this.h < room.y + room.h)) {
				return com_watabou_wintermansion_model_Connection.TOUCHES_RIGHT;
			}
		}
		if(room.x + room.w == this.x) {
			if(this.y >= room.y && this.y + this.h <= room.y + room.h || room.y >= this.y && room.y + room.h <= this.y + this.h) {
				return com_watabou_wintermansion_model_Connection.LEFT;
			}
			if((this.y > room.y && this.y < room.y + room.h) != (this.y + this.h > room.y && this.y + this.h < room.y + room.h)) {
				return com_watabou_wintermansion_model_Connection.TOUCHES_LEFT;
			}
		}
		if(this.y + this.h == room.y) {
			if(this.x >= room.x && this.x + this.w <= room.x + room.w || room.x >= this.x && room.x + room.w <= this.x + this.w) {
				return com_watabou_wintermansion_model_Connection.BOTTOM;
			}
			if((this.x > room.x && this.x < room.x + room.w) != (this.x + this.w > room.x && this.x + this.w < room.x + room.w)) {
				return com_watabou_wintermansion_model_Connection.TOUCHES_BOTTOM;
			}
		}
		if(room.y + room.h == this.y) {
			if(this.x >= room.x && this.x + this.w <= room.x + room.w || room.x >= this.x && room.x + room.w <= this.x + this.w) {
				return com_watabou_wintermansion_model_Connection.TOP;
			}
			if((this.x > room.x && this.x < room.x + room.w) != (this.x + this.w > room.x && this.x + this.w < room.x + room.w)) {
				return com_watabou_wintermansion_model_Connection.TOUCHES_TOP;
			}
		}
		return com_watabou_wintermansion_model_Connection.NONE;
	}
	,initTips: function() {
		if(this.orientation) {
			var hip = this.h / 2;
			var tmp;
			if(this.parentA != null) {
				var _this = this.parentA;
				tmp = _this.x + _this.w / 2;
			} else if(this.hipRoof) {
				tmp = this.x + hip;
			} else {
				tmp = this.x;
			}
			this.tipA = tmp;
			var tmp1;
			if(this.parentB != null) {
				var _this1 = this.parentB;
				tmp1 = _this1.x + _this1.w / 2;
			} else if(this.hipRoof) {
				tmp1 = this.x + this.w - hip;
			} else {
				tmp1 = this.x + this.w;
			}
			this.tipB = tmp1;
		} else {
			var hip1 = this.w / 2;
			var tmp2;
			if(this.parentA != null) {
				var _this2 = this.parentA;
				tmp2 = _this2.y + _this2.h / 2;
			} else if(this.hipRoof) {
				tmp2 = this.y + hip1;
			} else {
				tmp2 = this.y;
			}
			this.tipA = tmp2;
			var tmp3;
			if(this.parentB != null) {
				var _this3 = this.parentB;
				tmp3 = _this3.y + _this3.h / 2;
			} else if(this.hipRoof) {
				tmp3 = this.y + this.h - hip1;
			} else {
				tmp3 = this.y + this.h;
			}
			this.tipB = tmp3;
		}
	}
	,attachTo: function(parent,c) {
		if(c == com_watabou_wintermansion_model_Connection.TOP || c == com_watabou_wintermansion_model_Connection.LEFT) {
			this.parentA = parent;
		}
		if(c == com_watabou_wintermansion_model_Connection.BOTTOM || c == com_watabou_wintermansion_model_Connection.RIGHT) {
			this.parentB = parent;
		}
	}
	,detach: function() {
		this.parentA = null;
		this.parentB = null;
	}
	,isRoot: function() {
		if(this.parentA == null) {
			return this.parentB == null;
		} else {
			return false;
		}
	}
	,isLeaf: function() {
		var _g = 0;
		var _g1 = this.mansion.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			if(wing.parentA == this || wing.parentB == this) {
				return false;
			}
		}
		return true;
	}
	,canBeSuspended: function() {
		if(this.height > 1 && (this.orientation ? this.w : this.h) == 1 && !(this.parentA == null && this.parentB == null)) {
			return this.isLeaf();
		} else {
			return false;
		}
	}
	,getRoots: function() {
		if(this.parentA == null && this.parentB == null) {
			return [this];
		} else if(this.parentA != null) {
			if(this.parentB != null) {
				return this.parentA.getRoots().concat(this.parentB.getRoots());
			} else {
				return this.parentA.getRoots();
			}
		} else {
			return this.parentB.getRoots();
		}
	}
	,getChildren: function() {
		var _gthis = this;
		return this.mansion.wings.filter(function(w) {
			if(w.parentA != _gthis) {
				return w.parentB == _gthis;
			} else {
				return true;
			}
		});
	}
	,getAllChildren: function() {
		var children = this.getChildren();
		var all = children.slice();
		var _g = 0;
		while(_g < children.length) {
			var child = children[_g];
			++_g;
			com_watabou_utils_ArrayExtender.addAll(all,child.getAllChildren());
		}
		return all;
	}
	,getLeaves: function() {
		if(this.isLeaf()) {
			return [this];
		} else {
			var leaves = [];
			var _g = 0;
			var _g1 = this.getChildren();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				leaves = leaves.concat(child.getChildren());
			}
			return leaves;
		}
	}
	,isSymmetricalH: function() {
		if(this.mansion.symH) {
			return this.x == this.mansion.planW - (this.x + this.w);
		} else {
			return false;
		}
	}
	,isSymmetricalV: function() {
		if(this.mansion.symV) {
			return this.y == this.mansion.planH - (this.y + this.h);
		} else {
			return false;
		}
	}
	,placeDoor: function() {
		if(this.get_inAir()) {
			return null;
		}
		var candidates = [];
		var _g1 = this.x;
		var _g = this.x + this.w;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.mansion.isOpen(i,this.y,0,0,-1)) {
				candidates.push(new com_watabou_wintermansion_model_Face(i,this.y,0,-1));
			}
			if(this.mansion.isOpen(i,this.y + this.h - 1,0,0,1)) {
				candidates.push(new com_watabou_wintermansion_model_Face(i,this.y + this.h - 1,0,1));
			}
		}
		var _g11 = this.y;
		var _g2 = this.y + this.h;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.mansion.isOpen(this.x,i1,0,-1,0)) {
				candidates.push(new com_watabou_wintermansion_model_Face(this.x,i1,-1,0));
			}
			if(this.mansion.isOpen(this.x + this.w - 1,i1,0,1,0)) {
				candidates.push(new com_watabou_wintermansion_model_Face(this.x + this.w - 1,i1,1,0));
			}
		}
		var _g3 = [];
		var _g12 = 0;
		while(_g12 < candidates.length) {
			var d = candidates[_g12];
			++_g12;
			_g3.push((this.mansion.isOpen(d.x,d.y,0,d.dy,-d.dx) == this.mansion.isOpen(d.x,d.y,0,-d.dy,d.dx) ? 1 : 0.1) * (this.mansion.isOpen(d.x + d.dx,d.y + d.dy,0,d.dy,-d.dx) == this.mansion.isOpen(d.x + d.dx,d.y + d.dy,0,-d.dy,d.dx) ? 1 : 0.1));
		}
		var weights = _g3;
		this.door = com_watabou_utils_ArrayExtender.weighted(candidates,weights);
		return this.door;
	}
	,placeWindows: function() {
		var _gthis = this;
		var firstFloor = this.tower ? this.height - 1 : this.get_inAir() ? this.ground : this.door == null && this.height > 1 ? 1 : 0;
		var _g1 = firstFloor;
		var _g = this.height;
		while(_g1 < _g) {
			var k = _g1++;
			var _g3 = this.x;
			var _g2 = this.x + this.w;
			while(_g3 < _g2) {
				var i = _g3++;
				if(this.mansion.isOpen(i,this.y,k,0,-1)) {
					this.windows.push(new com_watabou_wintermansion_model_Face(i,this.y,0,-1,k));
				}
				if(this.mansion.isOpen(i,this.y + this.h - 1,k,0,1)) {
					this.windows.push(new com_watabou_wintermansion_model_Face(i,this.y + this.h - 1,0,1,k));
				}
			}
			var _g31 = this.y;
			var _g21 = this.y + this.h;
			while(_g31 < _g21) {
				var i1 = _g31++;
				if(this.mansion.isOpen(this.x,i1,k,-1,0)) {
					this.windows.push(new com_watabou_wintermansion_model_Face(this.x,i1,-1,0,k));
				}
				if(this.mansion.isOpen(this.x + this.w - 1,i1,k,1,0)) {
					this.windows.push(new com_watabou_wintermansion_model_Face(this.x + this.w - 1,i1,1,0,k));
				}
			}
		}
		if(this.door != null) {
			this.windows = this.windows.filter(function(w) {
				return !w.equals(_gthis.door);
			});
		}
	}
	,placeChimney: function() {
		var tmp;
		if(!this.tower && !this.get_inAir()) {
			if(this.hipRoof) {
				return null;
			}
			var cx = 0.0;
			var cy = 0.0;
			if(this.orientation) {
				cy = this.y + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5 ? 0.25 : 0.75) * this.h;
				cx = this.x + (this.parentA != null ? this.w - 0.25 : this.parentB != null ? 0.25 : (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5 ? this.w - 0.25 : 0.25);
			} else {
				cx = this.x + ((com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5 ? 0.25 : 0.75) * this.w;
				cy = this.y + (this.parentA != null ? this.h - 0.25 : this.parentB != null ? 0.25 : (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 < 0.5 ? this.h - 0.25 : 0.25);
			}
			tmp = new openfl_geom_Point(cx,cy);
		} else {
			tmp = null;
		}
		return this.chimney = tmp;
	}
	,__class__: com_watabou_wintermansion_model_Wing
};
var com_watabou_wintermansion_model_Cell = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["com.watabou.wintermansion.model.Cell"] = com_watabou_wintermansion_model_Cell;
com_watabou_wintermansion_model_Cell.__name__ = ["com","watabou","wintermansion","model","Cell"];
com_watabou_wintermansion_model_Cell.prototype = {
	x: null
	,y: null
	,cx: null
	,get_cx: function() {
		return this.x + 0.5;
	}
	,cy: null
	,get_cy: function() {
		return this.y + 0.5;
	}
	,equals: function(c) {
		if(this.x == c.x) {
			return this.y == c.y;
		} else {
			return false;
		}
	}
	,__class__: com_watabou_wintermansion_model_Cell
};
var com_watabou_wintermansion_model_Face = function(x,y,dx,dy,h) {
	if(h == null) {
		h = 0;
	}
	this.x = x;
	this.y = y;
	this.h = h;
	this.dx = dx;
	this.dy = dy;
};
$hxClasses["com.watabou.wintermansion.model.Face"] = com_watabou_wintermansion_model_Face;
com_watabou_wintermansion_model_Face.__name__ = ["com","watabou","wintermansion","model","Face"];
com_watabou_wintermansion_model_Face.prototype = {
	x: null
	,y: null
	,h: null
	,dx: null
	,dy: null
	,cell: function() {
		return new com_watabou_wintermansion_model_Cell(this.x,this.y);
	}
	,dest: function() {
		return new com_watabou_wintermansion_model_Cell(this.x + this.dx,this.y + this.dy);
	}
	,opposite: function() {
		return new com_watabou_wintermansion_model_Face(this.x + this.dx,this.y + this.dy,-this.dx,-this.dy,this.h);
	}
	,r: function() {
		if(this.dy == -1) {
			return 2;
		} else if(this.dy == 1) {
			return 0;
		} else if(this.dx == -1) {
			return 3;
		} else {
			return 1;
		}
	}
	,equals: function(f) {
		if(this.x == f.x && this.y == f.y && this.h == f.h && this.dx == f.dx) {
			return this.dy == f.dy;
		} else {
			return false;
		}
	}
	,__class__: com_watabou_wintermansion_model_Face
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var com_watabou_wintermansion_scenes_PlanScene = function() {
	com_watabou_coogee_Scene.call(this);
	this.keyEvent.add($bind(this,this.onKey));
	this.bg = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,false,15063747));
	this.addChild(this.bg);
	this.plan = new openfl_display_Sprite();
	this.addChild(this.plan);
	this.tfFloor = new openfl_text_TextField();
	this.tfFloor.set_defaultTextFormat(com_watabou_wintermansion_scenes_PlanScene.FORMAT);
	this.tfFloor.set_autoSize(1);
	this.tfFloor.mouseEnabled = false;
	this.addChild(this.tfFloor);
	this.overlay = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("vignette"),null,true);
	this.overlay.set_blendMode(9);
	this.addChild(this.overlay);
	this.drawPlan(0);
};
$hxClasses["com.watabou.wintermansion.scenes.PlanScene"] = com_watabou_wintermansion_scenes_PlanScene;
com_watabou_wintermansion_scenes_PlanScene.__name__ = ["com","watabou","wintermansion","scenes","PlanScene"];
com_watabou_wintermansion_scenes_PlanScene.lineStyle = function(g,color,thickness) {
	if(thickness == null) {
		thickness = 0.01;
	}
	g.lineStyle(thickness,color,1,false,null,0,1);
};
com_watabou_wintermansion_scenes_PlanScene.line = function(g,x1,y1,x2,y2,d) {
	if(d == null) {
		d = 0.0;
	}
	if(d != 0) {
		var v = new openfl_geom_Point(x2 - x1,y2 - y1);
		v.normalize(d);
		x1 += v.x;
		y1 += v.y;
		x2 -= v.x;
		y2 -= v.y;
	}
	g.moveTo(x1,y1);
	g.lineTo(x2,y2);
};
com_watabou_wintermansion_scenes_PlanScene.rect = function(g,x,y,w,h) {
	if(h == null) {
		h = 0.0;
	}
	if(h == 0) {
		h = w;
	}
	g.drawRect(x - w / 2,y - h / 2,w,h);
};
com_watabou_wintermansion_scenes_PlanScene.arc = function(g,cx,cy,r,a1,a2) {
	var arc1 = function(a11,a21) {
		var ac = (a11 + a21) / 2;
		var rc = r / Math.cos((a21 - a11) / 2);
		g.curveTo(cx + rc * Math.cos(ac),cy + rc * Math.sin(ac),cx + r * Math.cos(a21),cy + r * Math.sin(a21));
	};
	var n = Math.ceil((a2 - a1) / 30);
	var da = Math.PI / 180 * (a2 - a1) / n;
	var a = Math.PI / 180 * a1;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		arc1(a,a += da);
	}
};
com_watabou_wintermansion_scenes_PlanScene.g2r = function(g) {
	return g / 180 * Math.PI;
};
com_watabou_wintermansion_scenes_PlanScene.__super__ = com_watabou_coogee_Scene;
com_watabou_wintermansion_scenes_PlanScene.prototype = $extend(com_watabou_coogee_Scene.prototype,{
	bg: null
	,plan: null
	,tfFloor: null
	,overlay: null
	,curFloor: null
	,drawPlan: function(floor) {
		while(this.plan.get_numChildren() > 0) this.plan.removeChildAt(0);
		var g = this.plan.get_graphics();
		g.clear();
		this.tfFloor.set_text(Std.string((this.curFloor = floor) + 1));
		this.tfFloor.set_x(this.rWidth - this.tfFloor.get_width() - 10);
		var _g = 0;
		var _g1 = com_watabou_wintermansion_scenes_PlanScene.mansion.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			if(this.curFloor < wing.ground) {
				g.beginFill(12563363);
				g.drawRect(wing.x,wing.y,wing.w,wing.h);
				if(wing.ground <= 1 && !wing.get_bridge()) {
					g.beginFill(10063747);
					g.lineStyle(0.01,2499101,1,false,null,0,1);
					var r = new openfl_geom_Rectangle(wing.x,wing.y,wing.w,wing.h);
					r.inflate(-0.1,-0.1);
					var pp = wing.parentA == null ? wing.orientation ? [r.get_topLeft(),new openfl_geom_Point(r.x,r.y + r.height)] : [r.get_topLeft(),new openfl_geom_Point(r.x + r.width,r.y)] : wing.orientation ? [new openfl_geom_Point(r.x + r.width,r.y),r.get_bottomRight()] : [new openfl_geom_Point(r.x,r.y + r.height),r.get_bottomRight()];
					var _g2 = 0;
					while(_g2 < pp.length) {
						var p = pp[_g2];
						++_g2;
						com_watabou_wintermansion_scenes_PlanScene.rect(g,p.x,p.y,0.1);
					}
					g.endFill();
				}
			}
		}
		g.beginFill(10063747);
		var _g3 = 0;
		var _g11 = com_watabou_wintermansion_scenes_PlanScene.mansion.wings;
		while(_g3 < _g11.length) {
			var wing1 = _g11[_g3];
			++_g3;
			if(this.curFloor >= wing1.height) {
				g.lineStyle(0.1,10063747,1,false,null,0,1);
				g.drawRect(wing1.x,wing1.y,wing1.w,wing1.h);
				g.lineStyle(0.01,2499101,0.5);
				var o = (wing1.orientation ? wing1.h : wing1.w) / 2;
				if(wing1.tower) {
					com_watabou_wintermansion_scenes_PlanScene.line(g,wing1.x,wing1.y,wing1.x + wing1.w,wing1.y + wing1.h);
					com_watabou_wintermansion_scenes_PlanScene.line(g,wing1.x,wing1.y + wing1.h,wing1.x + wing1.w,wing1.y);
				} else if(wing1.orientation) {
					com_watabou_wintermansion_scenes_PlanScene.line(g,wing1.x - (wing1.parentA != null && !wing1.parentA.orientation ? o : 0),wing1.y + wing1.h / 2,wing1.x + wing1.w + (wing1.parentB != null && !wing1.parentB.orientation ? o : 0),wing1.y + wing1.h / 2);
				} else {
					com_watabou_wintermansion_scenes_PlanScene.line(g,wing1.x + wing1.w / 2,wing1.y - (wing1.parentA != null && wing1.parentA.orientation ? o : 0),wing1.x + wing1.w / 2,wing1.y + wing1.h + (wing1.parentB != null && wing1.parentB.orientation ? o : 0));
				}
			}
		}
		g.endFill();
		var _g4 = 0;
		var _g12 = com_watabou_wintermansion_scenes_PlanScene.mansion.wings;
		while(_g4 < _g12.length) {
			var wing2 = _g12[_g4];
			++_g4;
			if(this.curFloor >= wing2.ground && this.curFloor < wing2.height) {
				if(wing2.door != null && wing2.door.h == this.curFloor) {
					g.beginFill(15063747);
					g.lineStyle(0.01,2499101,1,false,null,0,1);
					var sw = wing2.door.dx == 0 ? 0.4 : 0.08;
					var sh = wing2.door.dy == 0 ? 0.4 : 0.08;
					var _g21 = 0;
					while(_g21 < 3) {
						var i = _g21++;
						var x = wing2.door.x + 0.5 + wing2.door.dx * (sw * (0.5 + i) + 0.5);
						var y = wing2.door.y + 0.5 + wing2.door.dy * (sh * (0.5 + i) + 0.5);
						com_watabou_wintermansion_scenes_PlanScene.rect(g,x,y,sw,sh);
					}
					g.endFill();
				}
				this.drawFloor(g,wing2);
				g.lineStyle(0.1,2499101,1,false,null,0,1);
				g.drawRect(wing2.x,wing2.y,wing2.w,wing2.h);
			}
		}
		var _g5 = 0;
		var _g13 = com_watabou_wintermansion_scenes_PlanScene.mansion.wings;
		while(_g5 < _g13.length) {
			var wing3 = _g13[_g5];
			++_g5;
			if(this.curFloor >= wing3.ground && this.curFloor < wing3.height) {
				g.lineStyle(0.08,10063747,1,false,null,0,1);
				g.drawRect(wing3.x,wing3.y,wing3.w,wing3.h);
				if(wing3.parentA != null) {
					if(wing3.orientation) {
						this.drawPassage(g,wing3.x,wing3.y + 0.2,wing3.x,wing3.y + wing3.h - 0.2);
					} else {
						this.drawPassage(g,wing3.x + 0.2,wing3.y,wing3.x + wing3.w - 0.2,wing3.y);
					}
				}
				if(wing3.parentB != null) {
					if(wing3.orientation) {
						this.drawPassage(g,wing3.x + wing3.w,wing3.y + 0.2,wing3.x + wing3.w,wing3.y + wing3.h - 0.2);
					} else {
						this.drawPassage(g,wing3.x + 0.2,wing3.y + wing3.h,wing3.x + wing3.w - 0.2,wing3.y + wing3.h);
					}
				}
				if(wing3.door != null && wing3.door.h == this.curFloor) {
					var _g22 = wing3.door.r();
					switch(_g22) {
					case 0:
						this.drawDoor(g,wing3.door.x + 0.35,wing3.door.y + 1,wing3.door.x + 0.65,wing3.door.y + 1);
						break;
					case 1:
						this.drawDoor(g,wing3.door.x + 1,wing3.door.y + 0.35,wing3.door.x + 1,wing3.door.y + 0.65);
						break;
					case 2:
						this.drawDoor(g,wing3.door.x + 0.35,wing3.door.y,wing3.door.x + 0.65,wing3.door.y);
						break;
					case 3:
						this.drawDoor(g,wing3.door.x,wing3.door.y + 0.35,wing3.door.x,wing3.door.y + 0.65);
						break;
					}
				}
				var _g23 = 0;
				var _g31 = wing3.windows;
				while(_g23 < _g31.length) {
					var win = _g31[_g23];
					++_g23;
					if(win.h == this.curFloor) {
						var _g41 = win.r();
						switch(_g41) {
						case 0:
							this.drawWindow(g,win.x + 0.4,win.y + 1,win.x + 0.6,win.y + 1);
							break;
						case 1:
							this.drawWindow(g,win.x + 1,win.y + 0.4,win.x + 1,win.y + 0.6);
							break;
						case 2:
							this.drawWindow(g,win.x + 0.4,win.y,win.x + 0.6,win.y);
							break;
						case 3:
							this.drawWindow(g,win.x,win.y + 0.4,win.x,win.y + 0.6);
							break;
						}
					}
				}
			}
		}
		var _g6 = 0;
		var _g14 = com_watabou_wintermansion_scenes_PlanScene.mansion.innerDoors;
		while(_g6 < _g14.length) {
			var door = _g14[_g6];
			++_g6;
			if(door.h == this.curFloor) {
				var _g24 = door.r();
				switch(_g24) {
				case 0:
					this.drawDoor(g,door.x + 0.35,door.y + 1,door.x + 0.65,door.y + 1);
					break;
				case 1:
					this.drawDoor(g,door.x + 1,door.y + 0.35,door.x + 1,door.y + 0.65);
					break;
				case 2:
					this.drawDoor(g,door.x + 0.35,door.y,door.x + 0.65,door.y);
					break;
				case 3:
					this.drawDoor(g,door.x,door.y + 0.35,door.x,door.y + 0.65);
					break;
				}
			}
		}
		var _g7 = 0;
		var _g15 = com_watabou_wintermansion_scenes_PlanScene.mansion.stairs;
		while(_g7 < _g15.length) {
			var stair = _g15[_g7];
			++_g7;
			var wing4 = com_watabou_wintermansion_scenes_PlanScene.mansion.getWing(stair.x,stair.y);
			if(wing4.height > this.curFloor) {
				var a = NaN;
				var r1 = 0.35;
				var _g25 = 0;
				var _g32 = com_watabou_wintermansion_scenes_PlanScene.mansion.doors;
				while(_g25 < _g32.length) {
					var door1 = _g32[_g25];
					++_g25;
					if(door1.cell().equals(stair)) {
						a = 180 - wing4.door.r() * 90;
						r1 = 0.45;
						break;
					}
				}
				if(isNaN(a)) {
					var _g26 = 0;
					var _g33 = com_watabou_wintermansion_scenes_PlanScene.mansion.innerDoors;
					while(_g26 < _g33.length) {
						var door2 = _g33[_g26];
						++_g26;
						if(door2.cell().equals(stair)) {
							a = 180 - door2.r() * 90;
							break;
						} else if(door2.dest().equals(stair)) {
							a = 360 - door2.r() * 90;
							break;
						}
					}
				}
				if(!isNaN(a)) {
					this.drawSpiral(g,stair.x + 0.5,stair.y + 0.5,a,r1);
				} else {
					var s = this.getStair(0.35000000000000003,0.5);
					s.set_x(stair.x + 0.5);
					s.set_y(stair.y + 0.5);
					if(com_watabou_wintermansion_scenes_PlanScene.mansion.getWing(stair.x,stair.y - 1) != wing4 && com_watabou_wintermansion_scenes_PlanScene.mansion.getWing(stair.x,stair.y + 1) != wing4) {
						s.set_rotation(90);
					}
					this.plan.addChild(s);
				}
			}
		}
	}
	,getStair: function(w,h) {
		var stair = new openfl_display_Shape();
		var g = stair.get_graphics();
		g.beginFill(15063747);
		g.lineStyle(0.01,2499101,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.rect(g,0,0,w,h);
		var n = h / 0.08 | 0;
		var _g1 = 1;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			com_watabou_wintermansion_scenes_PlanScene.line(g,-w / 2,-h / 2 + i / n * h,w / 2,-h / 2 + i / n * h);
		}
		return stair;
	}
	,drawPassage: function(g,x1,y1,x2,y2) {
		g.lineStyle(0.1,2499101,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2,-0.01);
		g.lineStyle(0.12,15063747,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2);
	}
	,drawDoor: function(g,x1,y1,x2,y2) {
		this.drawPassage(g,x1,y1,x2,y2);
		g.lineStyle(0.04,2499101,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2,-0.01);
	}
	,drawWindow: function(g,x1,y1,x2,y2) {
		g.lineStyle(0.1,2499101,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2,-0.01);
		g.lineStyle(0.08,15063747,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2);
		g.lineStyle(0.01,2499101,1,false,null,0,1);
		com_watabou_wintermansion_scenes_PlanScene.line(g,x1,y1,x2,y2);
		g.beginFill(10063747);
		com_watabou_wintermansion_scenes_PlanScene.rect(g,(x1 + x2) / 2,(y1 + y2) / 2,0.02);
		g.endFill();
	}
	,drawSpiral: function(g,x,y,sa,r) {
		r -= 0.05;
		g.beginFill(15063747);
		g.lineStyle(0.01,2499101);
		g.moveTo(x,y);
		g.lineTo(x + r * Math.cos(sa / 180 * Math.PI),y + r * Math.sin(sa / 180 * Math.PI));
		com_watabou_wintermansion_scenes_PlanScene.arc(g,x,y,r,sa,sa + 240);
		g.endFill();
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			g.lineStyle(0.01,2499101,(12 - i) / 12);
			var a = (i * 22.5 + sa) / 180 * Math.PI;
			com_watabou_wintermansion_scenes_PlanScene.line(g,x,y,x + r * Math.cos(a),y + r * Math.sin(a));
		}
		g.beginFill(10063747);
		g.lineStyle(0.01,2499101);
		g.drawCircle(x,y,0.05);
		g.endFill();
	}
	,drawFloor: function(g,wing) {
		g.lineStyle(0.01,10063747,1,false,null,0,1);
		var plank = 0.09;
		if(wing.orientation) {
			var n = (wing.w - 0.1) / plank | 0;
			var _g1 = 1;
			var _g = n;
			while(_g1 < _g) {
				var i = _g1++;
				var p = wing.x + 0.05 + i * plank;
				com_watabou_wintermansion_scenes_PlanScene.line(g,p,wing.y + wing.h * Math.random(),p,wing.y + wing.h * Math.random());
			}
		} else {
			var n1 = (wing.h - 0.1) / plank | 0;
			var _g11 = 1;
			var _g2 = n1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p1 = wing.y + 0.05 + i1 * plank;
				com_watabou_wintermansion_scenes_PlanScene.line(g,wing.x + wing.w * Math.random(),p1,wing.x + wing.w * Math.random(),p1);
			}
		}
	}
	,onKey: function(keyCode,down) {
		if(down) {
			switch(keyCode) {
			case 13:
				this["export"]();
				break;
			case 38:
				if(this.curFloor < com_watabou_wintermansion_scenes_PlanScene.mansion.height - 1) {
					this.drawPlan(this.curFloor + 1);
				}
				break;
			case 40:
				if(this.curFloor > 0) {
					this.drawPlan(this.curFloor - 1);
				}
				break;
			case 9:case 80:
				com_watabou_coogee_Game.switchScene(com_watabou_wintermansion_scenes_ViewScene);
				break;
			case 86:
				this.overlay.set_visible(!this.overlay.get_visible());
				break;
			}
		}
	}
	,layout: function() {
		this.bg.set_width(this.overlay.set_width(this.rWidth));
		this.bg.set_height(this.overlay.set_height(this.rHeight));
		var scale = Math.min(this.rWidth,this.rHeight) / (com_watabou_wintermansion_scenes_PlanScene.mansion.radius * 2) * 0.9;
		this.plan.set_scaleX(scale);
		this.plan.set_scaleY(-scale);
		this.plan.set_x(this.rWidth / 2 - com_watabou_wintermansion_scenes_PlanScene.mansion.center.x * scale);
		this.plan.set_y(this.rHeight / 2 + com_watabou_wintermansion_scenes_PlanScene.mansion.center.y * scale);
		this.tfFloor.set_scaleX(this.tfFloor.set_scaleY(Math.min(this.rWidth,this.rHeight) / 100));
		this.tfFloor.set_x(this.rWidth - this.tfFloor.get_width() - 10);
		this.tfFloor.set_y(10);
	}
	,'export': function() {
		var svg = new com_watabou_wintermansion_svg_SvgPlan(com_watabou_wintermansion_scenes_PlanScene.mansion);
		var name = "plan.svg";
		window.saveAs(new Blob([haxe_xml_Printer.print(svg.root)],{ type : "image/svg+xml"}),name,true);
	}
	,__class__: com_watabou_wintermansion_scenes_PlanScene
});
var com_watabou_wintermansion_scenes_ViewScene = function() {
	this.randomStyle = false;
	this.dstSpeed = 1.0;
	this.verSpeed = 0.0;
	this.angSpeed = 10.0;
	com_watabou_coogee_Scene.call(this);
	this.view = new com_watabou_wintermansion_elements3d_View();
	this.camera = this.view.get_camera();
	this.camera.get_lens().set_near(0.01);
	this.addChild(this.view);
	this.vignette = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("vignette"),null,true);
	this.vignette.set_blendMode(9);
	this.addChild(this.vignette);
	this.keyEvent.add($bind(this,this.onKey));
	if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 4) {
		this.camera.set_lens(new away3d_cameras_lenses_OrthographicLens());
		this.camera.get_lens().set_near(0.01);
		this.orthoAngle = Math.PI / 5;
		this.orthoScale = 1.0;
	}
	if(com_watabou_wintermansion_scenes_PlanScene.mansion == null) {
		this.switchScale(2);
	} else {
		this.mansion = com_watabou_wintermansion_scenes_PlanScene.mansion;
		this.create(com_watabou_wintermansion_elements3d_Style.current);
		var _g = com_watabou_wintermansion_scenes_ViewScene.viewMode;
		switch(_g) {
		case 1:
			this.view1();
			break;
		case 2:
			this.view2();
			break;
		case 3:
			this.view3();
			break;
		case 4:
			this.view4();
			break;
		}
	}
};
$hxClasses["com.watabou.wintermansion.scenes.ViewScene"] = com_watabou_wintermansion_scenes_ViewScene;
com_watabou_wintermansion_scenes_ViewScene.__name__ = ["com","watabou","wintermansion","scenes","ViewScene"];
com_watabou_wintermansion_scenes_ViewScene.__super__ = com_watabou_coogee_Scene;
com_watabou_wintermansion_scenes_ViewScene.prototype = $extend(com_watabou_coogee_Scene.prototype,{
	mansion: null
	,view: null
	,camera: null
	,angSpeed: null
	,verSpeed: null
	,dstSpeed: null
	,orthoAngle: null
	,orthoScale: null
	,maxDistance: null
	,vignette: null
	,randomStyle: null
	,activate: function() {
		com_watabou_coogee_Scene.prototype.activate.call(this);
		this.stage.addEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.stage.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
	}
	,deactivate: function() {
		com_watabou_coogee_Scene.prototype.deactivate.call(this);
		this.stage.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.stage.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		this.view.dispose();
	}
	,onKey: function(keyCode,down) {
		switch(keyCode) {
		case 37:
			this.angSpeed = down ? -30 : 0;
			break;
		case 38:
			this.verSpeed = down ? 1.0 : 0;
			break;
		case 39:
			this.angSpeed = down ? 30 : 0;
			break;
		case 40:
			this.verSpeed = down ? -1. : 0;
			break;
		case 107:
			this.dstSpeed = down ? 0.8 : 1;
			break;
		case 109:
			this.dstSpeed = down ? 1.25 : 1;
			break;
		default:
			if(down) {
				switch(keyCode) {
				case 13:
					this.create(this.randomStyle ? null : com_watabou_wintermansion_elements3d_Style.current,true);
					break;
				case 32:case 192:
					this.angSpeed = this.angSpeed == 0 ? 10 : 0;
					break;
				case 48:
					this.create(null);
					break;
				case 49:
					this.changeLens(away3d_cameras_lenses_PerspectiveLens);
					this.view1();
					break;
				case 50:
					this.changeLens(away3d_cameras_lenses_PerspectiveLens);
					this.view2();
					break;
				case 51:
					this.changeLens(away3d_cameras_lenses_PerspectiveLens);
					this.view3();
					break;
				case 52:
					this.changeLens(away3d_cameras_lenses_OrthographicLens);
					this.view4();
					break;
				case 53:
					this.create(com_watabou_wintermansion_elements3d_Style.England);
					break;
				case 54:
					this.create(com_watabou_wintermansion_elements3d_Style.Italy);
					break;
				case 55:
					this.create(com_watabou_wintermansion_elements3d_Style.Germany);
					break;
				case 56:
					this.create(com_watabou_wintermansion_elements3d_Style.Russia);
					break;
				case 57:
					this.create(com_watabou_wintermansion_elements3d_Style.Night);
					break;
				case 67:
					this.switchScale(3);
					break;
				case 68:
					com_watabou_wintermansion_elements3d_View.opDecoration = !com_watabou_wintermansion_elements3d_View.opDecoration;
					this.rebuild();
					break;
				case 9:case 80:
					com_watabou_wintermansion_scenes_PlanScene.mansion = this.mansion;
					com_watabou_coogee_Game.switchScene(com_watabou_wintermansion_scenes_PlanScene);
					break;
				case 83:
					this.view.switchShadows();
					break;
				case 86:
					this.vignette.set_visible(!this.vignette.get_visible());
					break;
				case 87:
					com_watabou_wintermansion_elements3d_View.opWeather = !com_watabou_wintermansion_elements3d_View.opWeather;
					this.rebuild();
					break;
				case 88:
					this.switchScale(2);
					break;
				case 90:
					this.switchScale(1);
					break;
				}
			}
		}
	}
	,create: function(e,newMansion) {
		if(newMansion == null) {
			newMansion = false;
		}
		if(e == null) {
			com_watabou_wintermansion_elements3d_Style.current = com_watabou_wintermansion_elements3d_Style.random();
			this.randomStyle = true;
		} else {
			com_watabou_wintermansion_elements3d_Style.current = e;
			this.randomStyle = false;
		}
		this.mansion = newMansion ? new com_watabou_wintermansion_model_Mansion(-1,this.getSize()) : new com_watabou_wintermansion_model_Mansion(this.mansion.seed,this.mansion.size);
		this.view.reset(this.mansion,com_watabou_wintermansion_scenes_ViewScene.viewMode == 4);
		this.maxDistance = this.mansion.radius * 5;
		if(newMansion) {
			var _g = com_watabou_wintermansion_scenes_ViewScene.viewMode;
			switch(_g) {
			case 1:
				this.view1();
				break;
			case 2:
				this.view2();
				break;
			case 3:
				this.view3();
				break;
			case 4:
				this.view4();
				break;
			}
			if(this.angSpeed > 0 && com_watabou_wintermansion_scenes_ViewScene.viewMode != 3) {
				this.view.alignSun();
			}
		} else {
			this.alignCamera();
		}
	}
	,switchScale: function(scale) {
		this.mansion = new com_watabou_wintermansion_model_Mansion(-1,this.getSize(scale));
		this.view.reset(this.mansion,com_watabou_wintermansion_scenes_ViewScene.viewMode == 4);
		this.maxDistance = this.mansion.radius * 5;
		var _g = com_watabou_wintermansion_scenes_ViewScene.viewMode;
		switch(_g) {
		case 1:
			this.view1();
			break;
		case 2:
			this.view2();
			break;
		case 3:
			this.view3();
			break;
		case 4:
			this.view4();
			break;
		}
		if(this.angSpeed > 0 && com_watabou_wintermansion_scenes_ViewScene.viewMode != 3) {
			this.view.alignSun();
		}
	}
	,rebuild: function() {
		this.view.reset(this.mansion,com_watabou_wintermansion_scenes_ViewScene.viewMode == 4);
		this.alignCamera();
	}
	,getSize: function(scale) {
		if(scale == null) {
			scale = 0;
		}
		switch(scale) {
		case 1:
			return 2 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 2 | 0;
		case 2:
			return 4 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 3 | 0;
		case 3:
			return 7 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 4 | 0;
		default:
			return 1 + (1 + (com_watabou_utils_Random.seed = com_watabou_utils_Random.seed * 48271.0 % 2147483647 | 0) / 2147483647 * 3 | 0) * 2;
		}
	}
	,changeLens: function(lens) {
		if(!js_Boot.__instanceof(this.camera.get_lens(),lens)) {
			this.camera.set_lens(Type.createInstance(lens,[]));
			this.camera.get_lens().set_near(0.01);
			this.view.reset(this.mansion,lens == away3d_cameras_lenses_OrthographicLens);
		}
	}
	,view1: function() {
		com_watabou_wintermansion_scenes_ViewScene.viewMode = 1;
		this.camera.set_position(new openfl_geom_Vector3D(0,0.5,this.mansion.radius * 2));
		this.alignCamera();
	}
	,view2: function() {
		com_watabou_wintermansion_scenes_ViewScene.viewMode = 2;
		this.camera.set_position(new openfl_geom_Vector3D(0,this.mansion.spire + 1,this.mansion.radius * 2));
		this.alignCamera();
	}
	,view3: function() {
		com_watabou_wintermansion_scenes_ViewScene.viewMode = 3;
		this.view.content.set_rotationY(0);
		var _this = this.view;
		this.camera.set_position(new openfl_geom_Vector3D(0.,this.mansion.spire + this.mansion.radius,0.));
		this.alignCamera();
	}
	,view4: function() {
		com_watabou_wintermansion_scenes_ViewScene.viewMode = 4;
		this.orthoAngle = Math.PI / 5;
		this.orthoScale = 1.0;
		this.alignCamera();
	}
	,layout: function() {
		this.view.set_width(this.vignette.set_width(this.rWidth));
		this.view.set_height(this.vignette.set_height(this.rHeight));
	}
	,onUpdate: function(elapsed) {
		com_watabou_coogee_Scene.prototype.onUpdate.call(this,elapsed);
		if(this.verSpeed != 0 && com_watabou_wintermansion_scenes_ViewScene.viewMode != 3) {
			if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 4) {
				this.orthoAngle += this.verSpeed * elapsed;
			} else {
				var _g = this.camera;
				_g.set_y(_g.get_y() + this.verSpeed * elapsed);
			}
			this.alignCamera();
		}
		if(this.dstSpeed != 1) {
			if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 4) {
				var _g1 = js_Boot.__cast(this.camera.get_lens() , away3d_cameras_lenses_OrthographicLens);
				_g1.set_projectionHeight(_g1.get_projectionHeight() * Math.pow(this.dstSpeed,elapsed));
			} else {
				var scale = Math.pow(this.dstSpeed,elapsed);
				if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 3) {
					var _g2 = this.camera;
					_g2.set_y(_g2.get_y() * scale);
				} else {
					var _g3 = this.camera;
					_g3.set_x(_g3.get_x() * scale);
					var _g4 = this.camera;
					_g4.set_z(_g4.get_z() * scale);
				}
				if(this.camera.get_position().get_length() > this.maxDistance) {
					var p = this.camera.get_position();
					p.scaleBy(this.maxDistance / p.get_length());
					this.camera.set_position(p);
				}
				this.alignCamera();
			}
		}
		if(this.angSpeed != 0 && com_watabou_wintermansion_scenes_ViewScene.viewMode != 3) {
			var _g5 = this.view.content;
			_g5.set_rotationY(_g5.get_rotationY() + elapsed * this.angSpeed);
		}
		this.view.sky.set_position(this.camera.get_position());
		this.view.sky.set_rotationY(this.view.content.get_rotationY());
		this.view.render();
	}
	,onMouseDown: function(e) {
		this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.window.set_mouseLock(true);
		this.lastX = e.stageX;
		this.lastY = e.stageY;
	}
	,onMouseUp: function(e) {
		this.stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.window.set_mouseLock(false);
	}
	,lastX: null
	,lastY: null
	,onMouseMove: function(e) {
		var dx = e.stageX - this.lastX;
		var dy = e.stageY - this.lastY;
		this.lastX = e.stageX;
		this.lastY = e.stageY;
		this.angSpeed = 0;
		this.verSpeed = 0;
		this.dstSpeed = 1;
		if(com_watabou_wintermansion_scenes_ViewScene.viewMode != 3) {
			if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 4) {
				this.orthoAngle += dy / this.rHeight * Math.PI / 2;
			} else {
				var _g = this.camera;
				_g.set_y(_g.get_y() + dy / this.rHeight * (this.mansion.spire + 1));
			}
			var _g1 = this.view.content;
			_g1.set_rotationY(_g1.get_rotationY() - dx / this.rWidth * 180);
			this.alignCamera();
		}
	}
	,onMouseWheel: function(e) {
		this.dstSpeed = 1;
		if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 4) {
			this.orthoScale *= Math.pow(1.1,com_watabou_utils_MathUtils.sign(-e.delta));
		} else {
			var scale = Math.pow(1.1,com_watabou_utils_MathUtils.sign(-e.delta));
			if(com_watabou_wintermansion_scenes_ViewScene.viewMode == 3) {
				var _g = this.camera;
				_g.set_y(_g.get_y() * scale);
			} else {
				var _g1 = this.camera;
				_g1.set_x(_g1.get_x() * scale);
				var _g2 = this.camera;
				_g2.set_z(_g2.get_z() * scale);
			}
			if(this.camera.get_position().get_length() > this.maxDistance) {
				var p = this.camera.get_position();
				p.scaleBy(this.maxDistance / p.get_length());
				this.camera.set_position(p);
			}
		}
		this.alignCamera();
		e.preventDefault();
	}
	,alignCamera: function() {
		var _g = com_watabou_wintermansion_scenes_ViewScene.viewMode;
		switch(_g) {
		case 3:
			this.camera.lookAt(new openfl_geom_Vector3D());
			break;
		case 4:
			this.orthoAngle = com_watabou_utils_MathUtils.gate(this.orthoAngle,0,Math.PI / 2);
			var c = new openfl_geom_Vector3D(0,this.mansion.spire / 2,0);
			var h = Math.sin(this.orthoAngle) * this.mansion.radius + Math.cos(this.orthoAngle) * this.mansion.spire;
			(js_Boot.__cast(this.camera.get_lens() , away3d_cameras_lenses_OrthographicLens)).set_projectionHeight(h * 2 * this.orthoScale);
			var d = this.mansion.radius * 2;
			this.camera.set_x(c.x);
			this.camera.set_z(c.z + Math.cos(this.orthoAngle) * d);
			this.camera.set_y(c.y + Math.sin(this.orthoAngle) * d);
			this.camera.lookAt(c);
			break;
		default:
			this.camera.set_y(com_watabou_utils_MathUtils.gate(this.camera.get_y(),0.5,this.mansion.spire + 1));
			this.camera.lookAt(new openfl_geom_Vector3D(0,this.mansion.spire / 2,0));
		}
		this.view.sky.set_position(this.camera.get_position());
		this.view.sky.set_rotationY(this.view.content.get_rotationY());
	}
	,__class__: com_watabou_wintermansion_scenes_ViewScene
});
var com_watabou_wintermansion_svg_SVG = function(w,h) {
	this.root = Xml.createElement("svg");
	this.root.set("width",w == null ? "null" : "" + w);
	this.root.set("height",h == null ? "null" : "" + h);
	this.root.set("xmlns","http://www.w3.org/2000/svg");
};
$hxClasses["com.watabou.wintermansion.svg.SVG"] = com_watabou_wintermansion_svg_SVG;
com_watabou_wintermansion_svg_SVG.__name__ = ["com","watabou","wintermansion","svg","SVG"];
com_watabou_wintermansion_svg_SVG.pt2string = function(pt) {
	return pt.x + "," + pt.y;
};
com_watabou_wintermansion_svg_SVG.color = function(c) {
	return "#" + StringTools.hex(c,6);
};
com_watabou_wintermansion_svg_SVG.prototype = {
	root: null
	,setFill: function(xml,c) {
		xml.set("fill","#" + StringTools.hex(c,6));
		return xml;
	}
	,noFill: function(xml) {
		xml.set("fill","none");
		return xml;
	}
	,setStroke: function(xml,c,width,join,cap) {
		if(width == null) {
			width = 0.0;
		}
		xml.set("stroke","#" + StringTools.hex(c,6));
		if(width != 0.0) {
			xml.set("stroke-width",width == null ? "null" : "" + width);
		}
		this.joinNcap(xml,join,cap);
		return xml;
	}
	,noStroke: function(xml) {
		xml.set("stroke","none");
		return xml;
	}
	,joinNcap: function(xml,join,cap) {
		if(join != null) {
			xml.set("stroke-linejoin",join);
		}
		if(cap != null) {
			xml.set("stroke-linecap",cap);
		}
		return xml;
	}
	,setColor: function(xml,fillColor,strokeColor,strokeWidth) {
		if(strokeWidth == null) {
			strokeWidth = 1.0;
		}
		if(strokeColor == null) {
			strokeColor = -1;
		}
		this.setFill(xml,fillColor);
		this.setStroke(xml,strokeColor != -1 ? strokeColor : fillColor,strokeWidth);
		return xml;
	}
	,style: function(xml,style) {
		xml.set("style",style);
		return xml;
	}
	,addTransform: function(xml,addition) {
		var transform = xml.get("transform");
		xml.set("transform",transform == null ? addition : "" + addition + " " + transform);
		return xml;
	}
	,translate: function(xml,x,y) {
		return this.addTransform(xml,"translate(" + x + " " + y + ")");
	}
	,scale: function(xml,x,y) {
		return this.addTransform(xml,"scale(" + x + " " + y + ")");
	}
	,rotate: function(xml,a,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		return this.addTransform(xml,"rotate(" + a + " " + x + " " + y + ")");
	}
	,x: function(xml,value) {
		xml.set("x","" + value);
	}
	,y: function(xml,value) {
		xml.set("y","" + value);
	}
	,group: function(id) {
		var g = Xml.createElement("g");
		if(id != null) {
			g.set("id",id);
		}
		return g;
	}
	,text: function(txt,horizontal,vertical) {
		var t = Xml.createElement("text");
		var cdata = Xml.createPCData(txt);
		t.addChild(cdata);
		if(horizontal != null) {
			t.set("text-anchor",horizontal);
		}
		if(vertical != null) {
			t.set("dominant-baseline",vertical);
		}
		return t;
	}
	,line: function(x1,y1,x2,y2) {
		var line = Xml.createElement("line");
		line.set("x1",x1 == null ? "null" : "" + x1);
		line.set("y1",y1 == null ? "null" : "" + y1);
		line.set("x2",x2 == null ? "null" : "" + x2);
		line.set("y2",y2 == null ? "null" : "" + y2);
		return line;
	}
	,linePoints: function(p1,p2) {
		return this.line(p1.x,p1.y,p2.x,p2.y);
	}
	,rect: function(x,y,w,h) {
		var rect = Xml.createElement("rect");
		rect.set("x",x == null ? "null" : "" + x);
		rect.set("y",y == null ? "null" : "" + y);
		rect.set("width",w == null ? "null" : "" + w);
		rect.set("height",h == null ? "null" : "" + h);
		return rect;
	}
	,circle: function(cx,cy,r) {
		var circle = Xml.createElement("circle");
		circle.set("cx",cx == null ? "null" : "" + cx);
		circle.set("cy",cy == null ? "null" : "" + cy);
		circle.set("r",r == null ? "null" : "" + r);
		return circle;
	}
	,polygon: function(p) {
		var polygon = Xml.createElement("polygon");
		polygon.set("points",p.map(com_watabou_wintermansion_svg_SVG.pt2string).join(" "));
		return polygon;
	}
	,polyline: function(p) {
		var polyline = Xml.createElement("polyline");
		polyline.set("points",p.map(com_watabou_wintermansion_svg_SVG.pt2string).join(" "));
		return polyline;
	}
	,smoothPolygon: function(p) {
		var n = p.length;
		if(n < 3) {
			return null;
		}
		var poly = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new();
		var p1 = p[n - 3];
		var p2 = p[n - 2];
		var p3 = p[n - 1];
		var t2 = p3.subtract(p1);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"M " + p2.x + "," + p2.y);
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var p0 = p1;
			p1 = p2;
			p2 = p3;
			p3 = p[i];
			var t1 = t2;
			t2 = p3.subtract(p1);
			var l1 = t1.get_length();
			var l2 = t2.get_length();
			var l = p2.subtract(p1).get_length() / (l1 + l2) * 0.5;
			var p4 = t1;
			p4 = p4.clone();
			p4.normalize(l1 * l);
			var c1 = p1.add(p4);
			var p5 = t2;
			p5 = p5.clone();
			p5.normalize(l2 * l);
			var c2 = p2.subtract(p5);
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c1.x + "," + c1.y + " " + c2.x + "," + c2.y + " " + p2.x + "," + p2.y);
		}
		return poly;
	}
	,smoothPolyline: function(p,smoothness) {
		if(smoothness == null) {
			smoothness = 1.0;
		}
		if(p.length < 3) {
			return this.polyline(p);
		}
		var poly = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new();
		var p1 = p[0];
		var p2 = p[1];
		var p3 = p[2];
		var t2 = p3.subtract(p1);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"M " + p1.x + "," + p1.y);
		var f = smoothness * 0.333;
		var f2 = smoothness * 0.666;
		var p4 = t2;
		var length = p2.subtract(p1).get_length() * f;
		p4 = p4.clone();
		p4.normalize(length);
		var c = p2.subtract(p4);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c.x + "," + c.y + " " + c.x + "," + c.y + " " + p2.x + "," + p2.y);
		var _g1 = 3;
		var _g = p.length;
		while(_g1 < _g) {
			var i = _g1++;
			p1 = p2;
			p2 = p3;
			p3 = p[i];
			var t1 = t2;
			t2 = p3.subtract(p1);
			var l1 = t1.get_length();
			var l2 = t2.get_length();
			var l = p2.subtract(p1).get_length() / (l1 + l2) * f2;
			var p5 = t1;
			p5 = p5.clone();
			p5.normalize(l1 * l);
			var c1 = p1.add(p5);
			var p6 = t2;
			p6 = p6.clone();
			p6.normalize(l2 * l);
			var c2 = p2.subtract(p6);
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c1.x + "," + c1.y + " " + c2.x + "," + c2.y + " " + p2.x + "," + p2.y);
		}
		var p7 = t2;
		var length1 = p3.subtract(p2).get_length() * f;
		p7 = p7.clone();
		p7.normalize(length1);
		var c3 = p2.add(p7);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c3.x + "," + c3.y + " " + c3.x + "," + c3.y + " " + p3.x + "," + p3.y);
		return poly;
	}
	,smoothPolylineEx: function(p,smooth) {
		if(p.length < 3) {
			return this.polyline(p);
		}
		var poly = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new();
		var p1 = p[0];
		var p2 = p[1];
		var p3 = p[2];
		var t2;
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"M " + p1.x + "," + p1.y);
		if(smooth[0]) {
			t2 = p3.subtract(smooth[1] ? p1 : p2);
			var p4 = t2;
			var length = p2.subtract(p1).get_length() * 0.333;
			p4 = p4.clone();
			p4.normalize(length);
			var c = p2.subtract(p4);
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c.x + "," + c.y + " " + c.x + "," + c.y + " " + p2.x + "," + p2.y);
		} else {
			t2 = p2.subtract(p1);
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"L " + p2.x + "," + p2.y);
		}
		var _g1 = 3;
		var _g = p.length;
		while(_g1 < _g) {
			var i = _g1++;
			p1 = p2;
			p2 = p3;
			p3 = p[i];
			if(smooth[i - 2]) {
				var t1 = t2;
				t2 = p3.subtract(smooth[1] ? p1 : p2);
				var l1 = t1.get_length();
				var l2 = t2.get_length();
				var l = p2.subtract(p1).get_length() / (l1 + l2) * 0.666;
				var p5 = t1;
				p5 = p5.clone();
				p5.normalize(l1 * l);
				var c1 = p1.add(p5);
				var p6 = t2;
				p6 = p6.clone();
				p6.normalize(l2 * l);
				var c2 = p2.subtract(p6);
				com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c1.x + "," + c1.y + " " + c2.x + "," + c2.y + " " + p2.x + "," + p2.y);
			} else {
				t2 = p2.subtract(p1);
				com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"L " + p2.x + "," + p2.y);
			}
		}
		if(smooth[p.length - 2]) {
			var p7 = t2;
			var length1 = p3.subtract(p2).get_length() * 0.333;
			p7 = p7.clone();
			p7.normalize(length1);
			var c3 = p2.add(p7);
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"C " + c3.x + "," + c3.y + " " + c3.x + "," + c3.y + " " + p3.x + "," + p3.y);
		} else {
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"L " + p3.x + "," + p3.y);
		}
		return poly;
	}
	,polypoly: function(points) {
		var poly = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new();
		var _g = 0;
		while(_g < points.length) {
			var c = points[_g];
			++_g;
			var p = c[0];
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"M " + p.x + "," + p.y);
			var _g2 = 1;
			var _g1 = c.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var p1 = c[i];
				com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"L " + p1.x + "," + p1.y);
			}
			com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(poly,"Z");
		}
		return poly;
	}
	,add: function(child) {
		this.root.addChild(child);
	}
	,toString: function() {
		return haxe_xml_Printer.print(this.root);
	}
	,__class__: com_watabou_wintermansion_svg_SVG
};
var com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$ = {};
$hxClasses["com.watabou.wintermansion.svg._SVG.SVGPath_Impl_"] = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$;
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.__name__ = ["com","watabou","wintermansion","svg","_SVG","SVGPath_Impl_"];
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new = function() {
	var this1 = Xml.createElement("path");
	return this1;
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand = function(this1,command) {
	var d = this1.get("d");
	this1.set("d",d == null ? command : "" + d + " " + command);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.moveTo = function(this1,x,y) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"M " + x + "," + y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.moveToPoint = function(this1,p) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"M " + p.x + "," + p.y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.lineTo = function(this1,x,y) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"L " + x + "," + y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.lineToPoint = function(this1,p) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"L " + p.x + "," + p.y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.quadraticTo = function(this1,cx,cy,x,y) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"Q " + cx + "," + cy + " " + x + "," + y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.cubicTo = function(this1,c1x,c1y,c2x,c2y,x,y) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"C " + c1x + "," + c1y + " " + c2x + "," + c2y + " " + x + "," + y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.arcTo = function(this1,r,large,x,y) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"A " + r + " " + r + " 0 " + (large ? 1 : 0) + " " + (large ? 1 : 0) + " " + x + " " + y);
};
com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.close = function(this1) {
	com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(this1,"Z");
};
var com_watabou_wintermansion_svg_SvgPlan = function(mansion) {
	var size = mansion.size;
	com_watabou_wintermansion_svg_SVG.call(this,(size + 2) * com_watabou_wintermansion_svg_SvgPlan.SCALE,(size + 2) * mansion.height * com_watabou_wintermansion_svg_SvgPlan.SCALE);
	var _g1 = 0;
	var _g = mansion.height;
	while(_g1 < _g) {
		var i = _g1++;
		var top = i * (size + 2) * com_watabou_wintermansion_svg_SvgPlan.SCALE;
		if(i > 0) {
			var line = this.line(com_watabou_wintermansion_svg_SvgPlan.SCALE * 0.5,top,(size + 1.5) * com_watabou_wintermansion_svg_SvgPlan.SCALE,top);
			this.setStroke(line,0,0.01);
			line.set("stroke-dasharray","2,2");
			this.root.addChild(line);
		}
		var floorPlan = this.getFloorPlan(mansion,i);
		this.scale(floorPlan,com_watabou_wintermansion_svg_SvgPlan.SCALE,-com_watabou_wintermansion_svg_SvgPlan.SCALE);
		this.translate(floorPlan,com_watabou_wintermansion_svg_SvgPlan.SCALE,((i + 1) * (size + 2) - 1) * com_watabou_wintermansion_svg_SvgPlan.SCALE);
		this.root.addChild(floorPlan);
		var number = this.text(Std.string(i + 1),"end","hanging");
		this.style(number,"font: bold 72px serif");
		this.setFill(number,13421772);
		this.translate(number,(size + 2 - 0.5) * com_watabou_wintermansion_svg_SvgPlan.SCALE,top + 0.5 * com_watabou_wintermansion_svg_SvgPlan.SCALE);
		this.root.addChild(number);
	}
};
$hxClasses["com.watabou.wintermansion.svg.SvgPlan"] = com_watabou_wintermansion_svg_SvgPlan;
com_watabou_wintermansion_svg_SvgPlan.__name__ = ["com","watabou","wintermansion","svg","SvgPlan"];
com_watabou_wintermansion_svg_SvgPlan.g2r = function(g) {
	return g / 180 * Math.PI;
};
com_watabou_wintermansion_svg_SvgPlan.__super__ = com_watabou_wintermansion_svg_SVG;
com_watabou_wintermansion_svg_SvgPlan.prototype = $extend(com_watabou_wintermansion_svg_SVG.prototype,{
	getFloorPlan: function(mansion,n) {
		var plan = this.group(Std.string(n + 1));
		var _g = 0;
		var _g1 = mansion.wings;
		while(_g < _g1.length) {
			var wing = _g1[_g];
			++_g;
			if(n < wing.ground) {
				var shadow = this.rect(wing.x,wing.y,wing.w,wing.h);
				this.setFill(shadow,13421772);
				plan.addChild(shadow);
				if(wing.ground <= 1 && !wing.get_bridge()) {
					var support = this.group();
					this.setFill(support,8947848);
					this.setStroke(support,0,0.01);
					plan.addChild(support);
					var r = new openfl_geom_Rectangle(wing.x,wing.y,wing.w,wing.h);
					r.inflate(-0.1,-0.1);
					var pp = wing.parentA == null ? wing.orientation ? [r.get_topLeft(),new openfl_geom_Point(r.x,r.y + r.height)] : [r.get_topLeft(),new openfl_geom_Point(r.x + r.width,r.y)] : wing.orientation ? [new openfl_geom_Point(r.x + r.width,r.y),r.get_bottomRight()] : [new openfl_geom_Point(r.x,r.y + r.height),r.get_bottomRight()];
					var _g2 = 0;
					while(_g2 < pp.length) {
						var p = pp[_g2];
						++_g2;
						support.addChild(this.centerRect(p.x,p.y,0.1));
					}
				}
			}
		}
		var _g3 = 0;
		var _g11 = mansion.wings;
		while(_g3 < _g11.length) {
			var wing1 = _g11[_g3];
			++_g3;
			if(n >= wing1.height) {
				var roof = this.rect(wing1.x,wing1.y,wing1.w,wing1.h);
				this.setFill(roof,8947848);
				this.setStroke(roof,8947848,0.1);
				plan.addChild(roof);
				var ridge = this.group();
				this.setStroke(ridge,0,0.01);
				plan.addChild(ridge);
				var o = (wing1.orientation ? wing1.h : wing1.w) / 2;
				if(wing1.tower) {
					ridge.addChild(this.line(wing1.x,wing1.y,wing1.x + wing1.w,wing1.y + wing1.h));
					ridge.addChild(this.line(wing1.x,wing1.y + wing1.h,wing1.x + wing1.w,wing1.y));
				} else if(wing1.orientation) {
					ridge.addChild(this.line(wing1.x - (wing1.parentA != null && !wing1.parentA.orientation ? o : 0),wing1.y + wing1.h / 2,wing1.x + wing1.w + (wing1.parentB != null && !wing1.parentB.orientation ? o : 0),wing1.y + wing1.h / 2));
				} else {
					ridge.addChild(this.line(wing1.x + wing1.w / 2,wing1.y - (wing1.parentA != null && wing1.parentA.orientation ? o : 0),wing1.x + wing1.w / 2,wing1.y + wing1.h + (wing1.parentB != null && wing1.parentB.orientation ? o : 0)));
				}
			}
		}
		var _g4 = 0;
		var _g12 = mansion.wings;
		while(_g4 < _g12.length) {
			var wing2 = _g12[_g4];
			++_g4;
			if(n >= wing2.ground && n < wing2.height) {
				if(wing2.door != null && wing2.door.h == n) {
					var steps = this.group();
					this.setFill(steps,16777215);
					this.setStroke(steps,0,0.01);
					plan.addChild(steps);
					var sw = wing2.door.dx == 0 ? 0.4 : 0.08;
					var sh = wing2.door.dy == 0 ? 0.4 : 0.08;
					var _g21 = 0;
					while(_g21 < 3) {
						var i = _g21++;
						var x = wing2.door.x + 0.5 + wing2.door.dx * (sw * (0.5 + i) + 0.5);
						var y = wing2.door.y + 0.5 + wing2.door.dy * (sh * (0.5 + i) + 0.5);
						steps.addChild(this.centerRect(x,y,sw,sh));
					}
				}
				plan.addChild(this.drawPlanks(wing2));
				var walls = this.rect(wing2.x,wing2.y,wing2.w,wing2.h);
				this.noFill(walls);
				this.setStroke(walls,0,0.1);
				plan.addChild(walls);
			}
		}
		var _g5 = 0;
		var _g13 = mansion.wings;
		while(_g5 < _g13.length) {
			var wing3 = _g13[_g5];
			++_g5;
			if(n >= wing3.ground && n < wing3.height) {
				var walls1 = this.rect(wing3.x,wing3.y,wing3.w,wing3.h);
				this.noFill(walls1);
				this.setStroke(walls1,8947848,0.08);
				plan.addChild(walls1);
				if(wing3.parentA != null) {
					if(wing3.orientation) {
						plan.addChild(this.drawPassage(wing3.x,wing3.y + 0.2,wing3.x,wing3.y + wing3.h - 0.2));
					} else {
						plan.addChild(this.drawPassage(wing3.x + 0.2,wing3.y,wing3.x + wing3.w - 0.2,wing3.y));
					}
				}
				if(wing3.parentB != null) {
					if(wing3.orientation) {
						plan.addChild(this.drawPassage(wing3.x + wing3.w,wing3.y + 0.2,wing3.x + wing3.w,wing3.y + wing3.h - 0.2));
					} else {
						plan.addChild(this.drawPassage(wing3.x + 0.2,wing3.y + wing3.h,wing3.x + wing3.w - 0.2,wing3.y + wing3.h));
					}
				}
				if(wing3.door != null && wing3.door.h == n) {
					var _g22 = wing3.door.r();
					switch(_g22) {
					case 0:
						plan.addChild(this.drawDoor(wing3.door.x + 0.35,wing3.door.y + 1,wing3.door.x + 0.65,wing3.door.y + 1));
						break;
					case 1:
						plan.addChild(this.drawDoor(wing3.door.x + 1,wing3.door.y + 0.35,wing3.door.x + 1,wing3.door.y + 0.65));
						break;
					case 2:
						plan.addChild(this.drawDoor(wing3.door.x + 0.35,wing3.door.y,wing3.door.x + 0.65,wing3.door.y));
						break;
					case 3:
						plan.addChild(this.drawDoor(wing3.door.x,wing3.door.y + 0.35,wing3.door.x,wing3.door.y + 0.65));
						break;
					}
				}
				var _g23 = 0;
				var _g31 = wing3.windows;
				while(_g23 < _g31.length) {
					var win = _g31[_g23];
					++_g23;
					if(win.h == n) {
						var _g41 = win.r();
						switch(_g41) {
						case 0:
							plan.addChild(this.drawWindow(win.x + 0.4,win.y + 1,win.x + 0.6,win.y + 1));
							break;
						case 1:
							plan.addChild(this.drawWindow(win.x + 1,win.y + 0.4,win.x + 1,win.y + 0.6));
							break;
						case 2:
							plan.addChild(this.drawWindow(win.x + 0.4,win.y,win.x + 0.6,win.y));
							break;
						case 3:
							plan.addChild(this.drawWindow(win.x,win.y + 0.4,win.x,win.y + 0.6));
							break;
						}
					}
				}
			}
		}
		var _g6 = 0;
		var _g14 = mansion.innerDoors;
		while(_g6 < _g14.length) {
			var door = _g14[_g6];
			++_g6;
			if(door.h == n) {
				var _g24 = door.r();
				switch(_g24) {
				case 0:
					plan.addChild(this.drawDoor(door.x + 0.35,door.y + 1,door.x + 0.65,door.y + 1));
					break;
				case 1:
					plan.addChild(this.drawDoor(door.x + 1,door.y + 0.35,door.x + 1,door.y + 0.65));
					break;
				case 2:
					plan.addChild(this.drawDoor(door.x + 0.35,door.y,door.x + 0.65,door.y));
					break;
				case 3:
					plan.addChild(this.drawDoor(door.x,door.y + 0.35,door.x,door.y + 0.65));
					break;
				}
			}
		}
		var _g7 = 0;
		var _g15 = mansion.stairs;
		while(_g7 < _g15.length) {
			var stair = _g15[_g7];
			++_g7;
			var wing4 = mansion.getWing(stair.x,stair.y);
			if(wing4.height > n) {
				var a = NaN;
				var r1 = 0.35;
				var _g25 = 0;
				var _g32 = mansion.doors;
				while(_g25 < _g32.length) {
					var door1 = _g32[_g25];
					++_g25;
					if(door1.cell().equals(stair)) {
						a = 180 - wing4.door.r() * 90;
						r1 = 0.45;
						break;
					}
				}
				if(isNaN(a)) {
					var _g26 = 0;
					var _g33 = mansion.innerDoors;
					while(_g26 < _g33.length) {
						var door2 = _g33[_g26];
						++_g26;
						if(door2.cell().equals(stair)) {
							a = 180 - door2.r() * 90;
							break;
						} else if(door2.dest().equals(stair)) {
							a = 360 - door2.r() * 90;
							break;
						}
					}
				}
				if(!isNaN(a)) {
					plan.addChild(this.drawSpiral(stair.x + 0.5,stair.y + 0.5,a,r1));
				} else {
					var s = this.getStair(0.35000000000000003,0.5);
					if(mansion.getWing(stair.x,stair.y - 1) != wing4 && mansion.getWing(stair.x,stair.y + 1) != wing4) {
						this.rotate(s,90);
					}
					this.translate(s,stair.x + 0.5,stair.y + 0.5);
					plan.addChild(s);
				}
			}
		}
		return plan;
	}
	,drawPlanks: function(wing) {
		var planks = this.group();
		this.setStroke(planks,13421772,0.01);
		var plank = 0.09;
		if(wing.orientation) {
			var n = (wing.w - 0.1) / plank | 0;
			var _g1 = 1;
			var _g = n;
			while(_g1 < _g) {
				var i = _g1++;
				var p = wing.x + 0.05 + i * plank;
				planks.addChild(this.line(p,wing.y + wing.h * Math.random(),p,wing.y + wing.h * Math.random()));
			}
		} else {
			var n1 = (wing.h - 0.1) / plank | 0;
			var _g11 = 1;
			var _g2 = n1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var p1 = wing.y + 0.05 + i1 * plank;
				planks.addChild(this.line(wing.x + wing.w * Math.random(),p1,wing.x + wing.w * Math.random(),p1));
			}
		}
		return planks;
	}
	,drawPassage: function(x1,y1,x2,y2) {
		var passage = this.group();
		var l1 = this.dLine(x1,y1,x2,y2,-0.01);
		this.setStroke(l1,0,0.1);
		passage.addChild(l1);
		var l2 = this.line(x1,y1,x2,y2);
		this.setStroke(l2,16777215,0.12);
		passage.addChild(l2);
		return passage;
	}
	,drawDoor: function(x1,y1,x2,y2) {
		var passage = this.drawPassage(x1,y1,x2,y2);
		var door = this.dLine(x1,y1,x2,y2,-0.01);
		this.setStroke(door,0,0.04);
		passage.addChild(door);
		return passage;
	}
	,drawWindow: function(x1,y1,x2,y2) {
		var win = this.group();
		var l = this.dLine(x1,y1,x2,y2,-0.01);
		this.setStroke(l,0,0.1);
		win.addChild(l);
		var l1 = this.line(x1,y1,x2,y2);
		this.setStroke(l1,16777215,0.08);
		win.addChild(l1);
		var l2 = this.line(x1,y1,x2,y2);
		this.setStroke(l2,0,0.01);
		win.addChild(l2);
		var r = this.centerRect((x1 + x2) / 2,(y1 + y2) / 2,0.02);
		this.setFill(r,8947848);
		this.setStroke(r,0,0.01);
		win.addChild(r);
		return win;
	}
	,drawSpiral: function(x,y,sa,r) {
		r -= 0.05;
		var stair = this.group();
		this.setStroke(stair,0,0.01);
		var sector = com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$._new();
		this.setFill(sector,16777215);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(sector,"M " + x + "," + y);
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(sector,"L " + (x + r * Math.cos(sa / 180 * Math.PI)) + "," + (y + r * Math.sin(sa / 180 * Math.PI)));
		com_watabou_wintermansion_svg__$SVG_SVGPath_$Impl_$.appendCommand(sector,"A " + r + " " + r + " 0 " + 1 + " " + 1 + " " + (x + r * Math.cos((sa + 240) / 180 * Math.PI)) + " " + (y + r * Math.sin((sa + 240) / 180 * Math.PI)));
		stair.addChild(sector);
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			var a = (i * 22.5 + sa) / 180 * Math.PI;
			var l = this.line(x,y,x + r * Math.cos(a),y + r * Math.sin(a));
			l.set("stroke-opacity",Std.string((12 - i) / 12));
			stair.addChild(l);
		}
		var pole = this.circle(x,y,0.05);
		this.setFill(pole,8947848);
		stair.addChild(pole);
		return stair;
	}
	,getStair: function(w,h) {
		var stair = this.group();
		this.setFill(stair,16777215);
		this.setStroke(stair,0,0.01);
		stair.addChild(this.centerRect(0,0,w,h));
		var n = h / 0.08 | 0;
		var _g1 = 1;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			stair.addChild(this.line(-w / 2,-h / 2 + i / n * h,w / 2,-h / 2 + i / n * h));
		}
		return stair;
	}
	,centerRect: function(x,y,w,h) {
		if(h == null) {
			h = 0.0;
		}
		if(h == 0) {
			h = w;
		}
		return this.rect(x - w / 2,y - h / 2,w,h);
	}
	,dLine: function(x1,y1,x2,y2,d) {
		if(d == null) {
			d = 0.0;
		}
		if(d != 0) {
			var v = new openfl_geom_Point(x2 - x1,y2 - y1);
			v.normalize(d);
			x1 += v.x;
			y1 += v.y;
			x2 -= v.x;
			y2 -= v.y;
		}
		return this.line(x1,y1,x2,y2);
	}
	,__class__: com_watabou_wintermansion_svg_SvgPlan
});
var com_watabou_wintermansion_utils3d_Decal = function(poly) {
	this.polies = [];
	if(poly != null) {
		this.addPoly(poly);
	}
};
$hxClasses["com.watabou.wintermansion.utils3d.Decal"] = com_watabou_wintermansion_utils3d_Decal;
com_watabou_wintermansion_utils3d_Decal.__name__ = ["com","watabou","wintermansion","utils3d","Decal"];
com_watabou_wintermansion_utils3d_Decal.prototype = {
	polies: null
	,curPoly: null
	,addPoly: function(poly) {
		this.polies.push(poly);
	}
	,addPoint: function(x,y) {
		if(this.curPoly == null) {
			this.curPoly = [new openfl_geom_Point(x,y)];
		} else {
			this.curPoly.push(new openfl_geom_Point(x,y));
		}
	}
	,push: function() {
		if(this.curPoly != null) {
			this.polies.push(this.curPoly);
			this.curPoly = null;
		}
	}
	,clear: function() {
		this.polies = [];
		this.curPoly = null;
	}
	,subGeometry: function(unit,r,top) {
		if(top == null) {
			top = false;
		}
		if(r == null) {
			r = 0.0;
		}
		if(unit == null) {
			unit = 1.0;
		}
		this.push();
		var fa = new com_watabou_wintermansion_utils3d_FaceAdder();
		var _g = 0;
		var _g1 = this.polies;
		while(_g < _g1.length) {
			var poly = _g1[_g];
			++_g;
			var _g2 = [];
			var p = HxOverrides.iter(poly);
			while(p.hasNext()) {
				var p1 = p.next();
				_g2.push(new openfl_geom_Vector3D(unit * p1.x,unit * p1.y,unit * 0.005));
			}
			fa.addPolygon(_g2);
		}
		var g = new away3d_core_base_CompactSubGeometry();
		g.updateData(fa.data);
		g.updateIndexData(fa.indices);
		if(top || r != 0) {
			var m = new openfl_geom_Matrix3D();
			if(top) {
				m.appendRotation(-90,new openfl_geom_Vector3D(1,0,0));
			}
			if(r != 0) {
				m.appendRotation(r * 90,new openfl_geom_Vector3D(0,1,0));
			}
			g.applyTransformation(m);
		}
		return g;
	}
	,geometry: function(unit,r,top) {
		if(top == null) {
			top = false;
		}
		if(r == null) {
			r = 0.0;
		}
		if(unit == null) {
			unit = 1.0;
		}
		var g = new away3d_core_base_Geometry();
		g.addSubGeometry(this.subGeometry(unit,r,top));
		return g;
	}
	,__class__: com_watabou_wintermansion_utils3d_Decal
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.b[pos++] = value & 255;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		var _g = to;
		while(_g1 < _g) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = ["haxe","xml","Printer"];
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		var _g = value.nodeType;
		switch(_g) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + value.nodeType);
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var input2 = StringTools.trim(value.nodeValue);
			this.output.b += Std.string(input2);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input3 = StringTools.trim(commentContent);
			this.output.b += Std.string(input3);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + value.nodeType);
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + value.nodeType);
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			var _g = child1.nodeType;
			switch(_g) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + child1.nodeType);
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Float64Array = function() { };
$hxClasses["js.html.compat.Float64Array"] = js_html_compat_Float64Array;
js_html_compat_Float64Array.__name__ = ["js","html","compat","Float64Array"];
js_html_compat_Float64Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 3;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 3;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val1 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			var val2 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i64ToDouble(val1,val2));
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var v = haxe_io_FPHelper.doubleToI64(f);
			var i3 = v.low;
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
			var i4 = v.high;
			buffer1.push(i4 & 255);
			buffer1.push(i4 >> 8 & 255);
			buffer1.push(i4 >> 16 & 255);
			buffer1.push(i4 >>> 24);
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float64Array._subarray;
	arr.set = js_html_compat_Float64Array._set;
	return arr;
};
js_html_compat_Float64Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float64Array._subarray = function(start,end) {
	var a = js_html_compat_Float64Array._new(this.slice(start,end));
	a.byteOffset = start * 8;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = ["lime","_internal","backend","html5","GameDeviceData"];
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = ["lime","_internal","backend","html5","HTML5AudioSource"];
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.pause(this.id);
		}
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && ($_=this.parent.buffer.__srcHowl,$bind($_,$_.pos)) != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = ["lime","_internal","backend","html5","HTML5HTTPRequest"];
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(window.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(window.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(window.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,cancel: function() {
		if(this.request != null) {
			this.request.abort();
		}
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				var query1 = encodeURIComponent(key1) + "=";
				var _this = this.parent.formData;
				var s = Std.string(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				query += query1 + encodeURIComponent(s);
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(js_Boot.__instanceof(element,HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style1 = this.div.style;
		style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style1.setProperty("transform","translate3D(0,0,0)",null);
		style1.position = "relative";
		style1.overflow = "hidden";
		style1.setProperty("-webkit-user-select","none",null);
		style1.setProperty("-moz-user-select","none",null);
		style1.setProperty("-ms-user-select","none",null);
		style1.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		window.document.addEventListener("dragstart",function(e) {
			if(e.target.nodeName.toLowerCase() == "img" && e.cancelable) {
				e.preventDefault();
				return false;
			}
			return true;
		},false);
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = ["lime","_internal","backend","html5","HTML5Window"];
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,isFullscreen: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,requestedFullscreen: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing");
				var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil, preserveDrawingBuffer : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options1);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,focus: function() {
	}
	,getCursor: function() {
		return this.cursor;
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getDisplayMode: function() {
		return lime_system_System.getDisplay(0).currentMode;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,getMouseLock: function() {
		return false;
	}
	,getTextInputEnabled: function() {
		return this.textInputEnabled;
	}
	,handleContextEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g1 = 0;
			var _g = changeEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			var _g1 = event.deltaMode;
			switch(_g1) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,move: function(x,y) {
	}
	,readPixels: function(rect) {
		if(this.canvas != null) {
			var stageRect = new lime_math_Rectangle(0,0,this.canvas.width,this.canvas.height);
			if(rect == null) {
				rect = stageRect;
			} else {
				rect.intersection(stageRect,rect);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas2 = window.document.createElement("canvas");
				canvas2.width = rect.width | 0;
				canvas2.height = rect.height | 0;
				var context = canvas2.getContext("2d");
				context.drawImage(this.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas2);
			}
		}
		return null;
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setClipboard: function(value) {
		var inputEnabled = this.textInputEnabled;
		this.setTextInputEnabled(true);
		var cacheText = lime__$internal_backend_html5_HTML5Window.textInput.value;
		lime__$internal_backend_html5_HTML5Window.textInput.value = value;
		lime__$internal_backend_html5_HTML5Window.textInput.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
		lime__$internal_backend_html5_HTML5Window.textInput.value = cacheText;
		this.setTextInputEnabled(inputEnabled);
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setDisplayMode: function(value) {
		return value;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.__window) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.__window) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setIcon: function(image) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
		var link = window.document.querySelector("link[rel*='icon']");
		if(link == null) {
			link = window.document.createElement("link");
		}
		link.type = "image/x-icon";
		link.rel = "shortcut icon";
		link.href = image.buffer.get_src().toDataURL("image/x-icon");
		window.document.getElementsByTagName("head")[0].appendChild(link);
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setMouseLock: function(value) {
	}
	,setResizable: function(value) {
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,setTitle: function(value) {
		if(value != null) {
			window.document.title = value;
		}
		return value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,warpMouse: function(x,y) {
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_backend_native_NativeCFFI = function() { };
$hxClasses["lime._internal.backend.native.NativeCFFI"] = lime__$internal_backend_native_NativeCFFI;
lime__$internal_backend_native_NativeCFFI.__name__ = ["lime","_internal","backend","native","NativeCFFI"];
var lime__$internal_format_BMP = function() { };
$hxClasses["lime._internal.format.BMP"] = lime__$internal_format_BMP;
lime__$internal_format_BMP.__name__ = ["lime","_internal","format","BMP"];
lime__$internal_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime__$internal_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = (image.width * 3 + image.width * 3 % 4) * image.height;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.b[position++] = 66;
		data.b[position++] = 77;
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime__$internal_format_BMPType.ICO ? image.height * 2 : image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime__$internal_format_BMPType.RGB ? 24 : 32);
	position += 2;
	data.setInt32(position,type == lime__$internal_format_BMPType.BITFIELD ? 3 : 0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime__$internal_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				var y = _g1++;
				readPosition = (image.height - 1 - y) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					var x = _g3++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					var i1 = _g31++;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				readPosition = (image.height - 1 - y1) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					var x1 = _g32++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				readPosition = (image.height - 1 - y2) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					var x2 = _g33++;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime__$internal_format_BMPType = $hxClasses["lime._internal.format.BMPType"] = { __ename__ : ["lime","_internal","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime__$internal_format_BMPType.RGB = ["RGB",0];
lime__$internal_format_BMPType.RGB.toString = $estr;
lime__$internal_format_BMPType.RGB.__enum__ = lime__$internal_format_BMPType;
lime__$internal_format_BMPType.BITFIELD = ["BITFIELD",1];
lime__$internal_format_BMPType.BITFIELD.toString = $estr;
lime__$internal_format_BMPType.BITFIELD.__enum__ = lime__$internal_format_BMPType;
lime__$internal_format_BMPType.ICO = ["ICO",2];
lime__$internal_format_BMPType.ICO.toString = $estr;
lime__$internal_format_BMPType.ICO.__enum__ = lime__$internal_format_BMPType;
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = ["lime","_internal","format","Deflate"];
lime__$internal_format_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = ["lime","_internal","format","GZip"];
lime__$internal_format_GZip.compress = function(bytes) {
	var data = pako.gzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_JPEG = function() { };
$hxClasses["lime._internal.format.JPEG"] = lime__$internal_format_JPEG;
lime__$internal_format_JPEG.__name__ = ["lime","_internal","format","JPEG"];
lime__$internal_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = ["lime","_internal","format","LZMA"];
lime__$internal_format_LZMA.compress = function(bytes) {
	return null;
};
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_PNG = function() { };
$hxClasses["lime._internal.format.PNG"] = lime__$internal_format_PNG;
lime__$internal_format_PNG.__name__ = ["lime","_internal","format","PNG"];
lime__$internal_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime__$internal_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = HxOverrides.cca(buffer,i);
			bytes.b[i] = v & 255;
		}
		return bytes;
	}
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = ["lime","_internal","format","Zlib"];
lime__$internal_format_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = ["lime","_internal","graphics","ImageDataUtil"];
lime__$internal_graphics_ImageDataUtil.displaceMap = function(target,source,map,mapPoint,componentX,componentY,smooth) {
	var targetData = target.buffer.data;
	var sourceData = source.buffer.data;
	var mapData = map.buffer.data;
	var targetFormat = target.buffer.format;
	var sourceFormat = source.buffer.format;
	var mapFormat = map.buffer.format;
	var targetPremultiplied = target.get_premultiplied();
	var sourcePremultiplied = source.get_premultiplied();
	var mapPremultiplied = map.get_premultiplied();
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(source);
	var mapView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(map);
	var row;
	var sourceOffset;
	var sourcePixel;
	var mapPixel;
	var targetPixel;
	var mapPixelX;
	var mapPixelY;
	var mapPixelA;
	var s1;
	var s2;
	var s3;
	var s4;
	var mPointXFloor;
	var mPointYFloor;
	var disOffsetXFloor;
	var disOffsetYFloor;
	var disX;
	var disY;
	var _g1 = 0;
	var _g = sourceView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = sourceView.byteOffset + sourceView.stride * y;
		var _g3 = 0;
		var _g2 = sourceView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceOffset = row + x * 4;
			mPointXFloor = mapPoint.x | 0;
			mPointYFloor = mapPoint.y | 0;
			if(smooth) {
				var offset = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor) * 4;
				switch(mapFormat) {
				case 0:
					s1 = (mapData[offset] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset + 2] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				case 1:
					s1 = (mapData[offset + 1] & 255) << 24 | (mapData[offset + 2] & 255) << 16 | (mapData[offset + 3] & 255) << 8 | mapData[offset] & 255;
					break;
				case 2:
					s1 = (mapData[offset + 2] & 255) << 24 | (mapData[offset + 1] & 255) << 16 | (mapData[offset] & 255) << 8 | mapData[offset + 3] & 255;
					break;
				}
				if(mapPremultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset1 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor + 1) * 4;
				switch(mapFormat) {
				case 0:
					s2 = (mapData[offset1] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1 + 2] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				case 1:
					s2 = (mapData[offset1 + 1] & 255) << 24 | (mapData[offset1 + 2] & 255) << 16 | (mapData[offset1 + 3] & 255) << 8 | mapData[offset1] & 255;
					break;
				case 2:
					s2 = (mapData[offset1 + 2] & 255) << 24 | (mapData[offset1 + 1] & 255) << 16 | (mapData[offset1] & 255) << 8 | mapData[offset1 + 3] & 255;
					break;
				}
				if(mapPremultiplied) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset2 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor + 1) + (x - mPointXFloor + 1) * 4;
				switch(mapFormat) {
				case 0:
					s3 = (mapData[offset2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2 + 2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				case 1:
					s3 = (mapData[offset2 + 1] & 255) << 24 | (mapData[offset2 + 2] & 255) << 16 | (mapData[offset2 + 3] & 255) << 8 | mapData[offset2] & 255;
					break;
				case 2:
					s3 = (mapData[offset2 + 2] & 255) << 24 | (mapData[offset2 + 1] & 255) << 16 | (mapData[offset2] & 255) << 8 | mapData[offset2 + 3] & 255;
					break;
				}
				if(mapPremultiplied) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset3 = sourceView.byteOffset + sourceView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				switch(mapFormat) {
				case 0:
					s4 = (mapData[offset3] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3 + 2] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				case 1:
					s4 = (mapData[offset3 + 1] & 255) << 24 | (mapData[offset3 + 2] & 255) << 16 | (mapData[offset3 + 3] & 255) << 8 | mapData[offset3] & 255;
					break;
				case 2:
					s4 = (mapData[offset3 + 2] & 255) << 24 | (mapData[offset3 + 1] & 255) << 16 | (mapData[offset3] & 255) << 8 | mapData[offset3 + 3] & 255;
					break;
				}
				if(mapPremultiplied) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				mapPixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,mapPoint.x - mPointXFloor,mapPoint.y - mPointYFloor);
			} else {
				var offset4 = mapView.byteOffset + mapView.stride * (y - mPointYFloor) + (x - mPointXFloor) * 4;
				switch(mapFormat) {
				case 0:
					mapPixel = (mapData[offset4] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4 + 2] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				case 1:
					mapPixel = (mapData[offset4 + 1] & 255) << 24 | (mapData[offset4 + 2] & 255) << 16 | (mapData[offset4 + 3] & 255) << 8 | mapData[offset4] & 255;
					break;
				case 2:
					mapPixel = (mapData[offset4 + 2] & 255) << 24 | (mapData[offset4 + 1] & 255) << 16 | (mapData[offset4] & 255) << 8 | mapData[offset4 + 3] & 255;
					break;
				}
				if(mapPremultiplied) {
					if((mapPixel & 255) != 0 && (mapPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (mapPixel & 255);
						mapPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((mapPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | mapPixel & 255 & 255;
					}
				}
			}
			mapPixelA = (mapPixel & 255) / 255.0;
			mapPixelX = ((mapPixel >>> 24 & 255) - 128) / 255.0 * mapPixelA;
			mapPixelY = ((mapPixel >>> 16 & 255) - 128) / 255.0 * mapPixelA;
			disX = mapPixelX * componentX.x + mapPixelY * componentY.x;
			disY = mapPixelX * componentX.y + mapPixelY * componentY.y;
			disOffsetXFloor = Math.floor(disX * sourceView.width);
			disOffsetYFloor = Math.floor(disY * sourceView.height);
			if(smooth) {
				var offset5 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor) * 4;
				switch(sourceFormat) {
				case 0:
					s1 = (sourceData[offset5] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5 + 2] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				case 1:
					s1 = (sourceData[offset5 + 1] & 255) << 24 | (sourceData[offset5 + 2] & 255) << 16 | (sourceData[offset5 + 3] & 255) << 8 | sourceData[offset5] & 255;
					break;
				case 2:
					s1 = (sourceData[offset5 + 2] & 255) << 24 | (sourceData[offset5 + 1] & 255) << 16 | (sourceData[offset5] & 255) << 8 | sourceData[offset5 + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((s1 & 255) != 0 && (s1 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s1 & 255);
						s1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s1 & 255 & 255;
					}
				}
				var offset6 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor + 1) * 4;
				switch(sourceFormat) {
				case 0:
					s2 = (sourceData[offset6] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6 + 2] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				case 1:
					s2 = (sourceData[offset6 + 1] & 255) << 24 | (sourceData[offset6 + 2] & 255) << 16 | (sourceData[offset6 + 3] & 255) << 8 | sourceData[offset6] & 255;
					break;
				case 2:
					s2 = (sourceData[offset6 + 2] & 255) << 24 | (sourceData[offset6 + 1] & 255) << 16 | (sourceData[offset6] & 255) << 8 | sourceData[offset6 + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((s2 & 255) != 0 && (s2 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s2 & 255);
						s2 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s2 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s2 & 255 & 255;
					}
				}
				var offset7 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor + 1) + (x + disOffsetXFloor + 1) * 4;
				switch(sourceFormat) {
				case 0:
					s3 = (sourceData[offset7] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7 + 2] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				case 1:
					s3 = (sourceData[offset7 + 1] & 255) << 24 | (sourceData[offset7 + 2] & 255) << 16 | (sourceData[offset7 + 3] & 255) << 8 | sourceData[offset7] & 255;
					break;
				case 2:
					s3 = (sourceData[offset7 + 2] & 255) << 24 | (sourceData[offset7 + 1] & 255) << 16 | (sourceData[offset7] & 255) << 8 | sourceData[offset7 + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((s3 & 255) != 0 && (s3 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s3 & 255);
						s3 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s3 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s3 & 255 & 255;
					}
				}
				var offset8 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				switch(sourceFormat) {
				case 0:
					s4 = (sourceData[offset8] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8 + 2] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				case 1:
					s4 = (sourceData[offset8 + 1] & 255) << 24 | (sourceData[offset8 + 2] & 255) << 16 | (sourceData[offset8 + 3] & 255) << 8 | sourceData[offset8] & 255;
					break;
				case 2:
					s4 = (sourceData[offset8 + 2] & 255) << 24 | (sourceData[offset8 + 1] & 255) << 16 | (sourceData[offset8] & 255) << 8 | sourceData[offset8 + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((s4 & 255) != 0 && (s4 & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (s4 & 255);
						s4 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((s4 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | s4 & 255 & 255;
					}
				}
				sourcePixel = lime__$internal_graphics_ImageDataUtil.bilinear(s1,s2,s3,s4,disX * sourceView.width - disOffsetXFloor,disY * sourceView.height - disOffsetYFloor);
			} else {
				var offset9 = sourceView.byteOffset + sourceView.stride * (y + disOffsetYFloor) + (x + disOffsetXFloor) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[offset9] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9 + 2] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[offset9 + 1] & 255) << 24 | (sourceData[offset9 + 2] & 255) << 16 | (sourceData[offset9 + 3] & 255) << 8 | sourceData[offset9] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[offset9 + 2] & 255) << 24 | (sourceData[offset9 + 1] & 255) << 16 | (sourceData[offset9] & 255) << 8 | sourceData[offset9 + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
			}
			if(targetPremultiplied) {
				if((sourcePixel & 255) == 0) {
					if(sourcePixel != 0) {
						sourcePixel = 0;
					}
				} else if((sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
					sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(targetFormat) {
			case 0:
				targetData[sourceOffset] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			case 1:
				targetData[sourceOffset] = sourcePixel & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 3] = sourcePixel >>> 8 & 255;
				break;
			case 2:
				targetData[sourceOffset] = sourcePixel >>> 8 & 255;
				targetData[sourceOffset + 1] = sourcePixel >>> 16 & 255;
				targetData[sourceOffset + 2] = sourcePixel >>> 24 & 255;
				targetData[sourceOffset + 3] = sourcePixel & 255;
				break;
			}
		}
	}
	target.dirty = true;
	target.version++;
};
lime__$internal_graphics_ImageDataUtil.bilinear = function(s1,s2,s3,s4,su,sv) {
	return lime__$internal_graphics_ImageDataUtil.lerpRGBA(lime__$internal_graphics_ImageDataUtil.lerpRGBA(s4,s2,su),lime__$internal_graphics_ImageDataUtil.lerpRGBA(s1,s3,su),sv);
};
lime__$internal_graphics_ImageDataUtil.lerpRGBA = function(v0,v1,x) {
	var this1 = 0;
	var result = this1;
	var value = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 24 & 255,v1 >>> 24 & 255,x));
	result = (value & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value1 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 16 & 255,v1 >>> 16 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | result & 255 & 255;
	var value2 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 >>> 8 & 255,v1 >>> 8 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | result & 255 & 255;
	var value3 = Math.floor(lime__$internal_graphics_ImageDataUtil.lerp(v0 & 255,v1 & 255,x));
	result = (result >>> 24 & 255 & 255) << 24 | (result >>> 16 & 255 & 255) << 16 | (result >>> 8 & 255 & 255) << 8 | value3 & 255;
	return result;
};
lime__$internal_graphics_ImageDataUtil.lerp4f = function(v0,v1,x) {
	return new lime_math_Vector4(lime__$internal_graphics_ImageDataUtil.lerp(v0.x,v1.x,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.y,v1.y,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.z,v1.z,x),lime__$internal_graphics_ImageDataUtil.lerp(v0.w,v1.w,x));
};
lime__$internal_graphics_ImageDataUtil.lerp = function(v0,v1,x) {
	return (1.0 - x) * v0 + x * v1;
};
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						var x = _g3++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y1;
					destPosition = destView.byteOffset + destView.stride * y1;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y2;
					destPosition = destView.byteOffset + destView.stride * y2;
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						var x1 = _g31++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y3;
					destPosition = destView.byteOffset + destView.stride * y3;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y3;
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						var x2 = _g32++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y4;
					destPosition = destView.byteOffset + destView.stride * y4;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y4;
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						var x3 = _g33++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >>> 24 & 255 & 255) << 24 | (hitColor >>> 16 & 255 & 255) << 16 | (hitColor >>> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >>> 24 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >>> 24 & 255;
					data[nextPointOffset + 2] = fillColor >>> 16 & 255;
					data[nextPointOffset + 3] = fillColor >>> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >>> 8 & 255;
					data[nextPointOffset + 1] = fillColor >>> 16 & 255;
					data[nextPointOffset + 2] = fillColor >>> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	var sourceImagePremultiplied = sourceImage.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	if(sourceImagePremultiplied) {
		sourceImage.set_premultiplied(false);
	}
	var imgB = image.get_data();
	var imgA = sourceImage.get_data();
	var w = sourceRect.width | 0;
	var h = sourceRect.height | 0;
	var bx = blurX | 0;
	var by = blurY | 0;
	var oX = destPoint.x | 0;
	var oY = destPoint.y | 0;
	var n = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur(bx * rng,n);
	var bys = lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur(by * rng,n);
	var offset = (w * oY + oX) * 4 | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlur(imgA,imgB,w,h,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g1 = 0;
	var _g = n / 2 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		lime__$internal_graphics_ImageDataUtil.__boxBlur(imgB,imgA,w,h,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		lime__$internal_graphics_ImageDataUtil.__boxBlur(imgA,imgB,w,h,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var x;
	var y;
	if(offset != 0 || strength != 1) {
		if(offset <= 0) {
			y = 0;
			while(y < h) {
				x = 0;
				while(x < w) {
					lime__$internal_graphics_ImageDataUtil.__translatePixel(imgB,sourceImage.get_rect(),image.get_rect(),destPoint,x,y,strength);
					++x;
				}
				++y;
			}
		} else {
			y = h - 1;
			while(y >= 0) {
				x = w - 1;
				while(x >= 0) {
					lime__$internal_graphics_ImageDataUtil.__translatePixel(imgB,sourceImage.get_rect(),image.get_rect(),destPoint,x,y,strength);
					--x;
				}
				--y;
			}
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	if(sourceImagePremultiplied) {
		sourceImage.set_premultiplied(true);
	}
	if(imgB == image.get_data()) {
		return image;
	}
	return sourceImage;
};
lime__$internal_graphics_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >>> 24 & 255 & 255) << 24 | (_color >>> 16 & 255 & 255) << 16 | (_color >>> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >>> 24 & 255 & 255) << 24 | (_mask >>> 16 & 255 & 255) << 16 | (_mask >>> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y2 < top) {
					top = y2;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this2 = 0;
		var bgra = this2;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var this1 = 0;
				var argb1 = this1;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var this2 = 0;
				var bgra1 = this2;
				bgra1 = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >>> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >>> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime__$internal_graphics_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.byteOffset + sourceView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >>> 24 & 255) * redMultiplier + (destPixel >>> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value1 = ((sourcePixel >>> 16 & 255) * greenMultiplier + (destPixel >>> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			var value2 = ((sourcePixel >>> 8 & 255) * blueMultiplier + (destPixel >>> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newBuffer = new lime_graphics_ImageBuffer(this1,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	var _g = newHeight;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = newWidth;
		while(_g3 < _g2) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) {
		this1 = new Uint8Array(elements);
	} else {
		this1 = null;
	}
	var newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	var _g1 = length;
	while(_g2 < _g1) {
		var i = _g2++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var this3 = 0;
	var source = this3;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data1[offset1] = pixel >>> 24 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >>> 24 & 255;
		data1[offset1 + 2] = pixel >>> 16 & 255;
		data1[offset1 + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >>> 8 & 255;
		data1[offset1 + 1] = pixel >>> 16 & 255;
		data1[offset1 + 2] = pixel >>> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data[offset] = pixel >>> 24 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >>> 24 & 255;
		data[offset + 2] = pixel >>> 16 & 255;
		data[offset + 3] = pixel >>> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >>> 8 & 255;
		data[offset + 1] = pixel >>> 16 & 255;
		data[offset + 2] = pixel >>> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setPixels = function(image,rect,bytePointer,format,endian) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var bytes = bytePointer.bytes;
	var dataPosition = bytePointer.offset;
	var littleEndian = endian != lime_system_Endian.BIG_ENDIAN;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			if(littleEndian) {
				color = bytes.getInt32(dataPosition);
			} else {
				color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			}
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var this1 = 0;
				var rgba = this1;
				rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var this2 = 0;
				var rgba1 = this2;
				rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (argb1 >>> 16 & 255 & 255) << 24 | (argb1 >>> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >>> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var this3 = 0;
		var rgba2 = this3;
		rgba2 = (argb2 >>> 16 & 255 & 255) << 24 | (argb2 >>> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >>> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var this4 = 0;
		var rgba3 = this4;
		rgba3 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var this5 = 0;
		var rgba4 = this5;
		rgba4 = (bgra1 >>> 8 & 255 & 255) << 24 | (bgra1 >>> 16 & 255 & 255) << 16 | (bgra1 >>> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var this6 = 0;
		var rgba5 = this6;
		rgba5 = (bgra2 >>> 8 & 255 & 255) << 24 | (bgra2 >>> 16 & 255 & 255) << 16 | (bgra2 >>> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >>> 24 & 255;
			tmp2 = _threshold >>> 24 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >>> 16 & 255;
				tmp2 = _threshold >>> 16 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >>> 8 & 255;
					tmp2 = _threshold >>> 8 & 255;
					if(tmp1 != tmp2) {
						if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >>> 24 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >>> 24 & 255;
					destData[destPosition + 2] = _color >>> 16 & 255;
					destData[destPosition + 3] = _color >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >>> 8 & 255;
					destData[destPosition + 1] = _color >>> 16 & 255;
					destData[destPosition + 2] = _color >>> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >>> 24 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >>> 24 & 255;
					destData[destPosition + 2] = srcPixel >>> 16 & 255;
					destData[destPosition + 3] = srcPixel >>> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >>> 8 & 255;
					destData[destPosition + 1] = srcPixel >>> 16 & 255;
					destData[destPosition + 2] = srcPixel >>> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.__boxBlur = function(imgA,imgB,w,h,bx,by) {
	imgB.set(imgA);
	var bx1 = bx | 0;
	var by1 = by | 0;
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,0);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,1);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,2);
	lime__$internal_graphics_ImageDataUtil.__boxBlurH(imgB,imgA,w,h,bx1,3);
	var iarr = 1 / (by1 + by1 + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g1 = 0;
	var _g = w;
	while(_g1 < _g) {
		var i = _g1++;
		ti = i * 4;
		li = ti;
		ri = ti + by1 * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (by1 + 1) * fv;
		var _g3 = 0;
		var _g2 = by1;
		while(_g3 < _g2) {
			var j = _g3++;
			val = val + imgA[ti + j * ws];
		}
		var _g31 = 0;
		var _g21 = by1 + 1;
		while(_g31 < _g21) {
			var j1 = _g31++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g32 = by1 + 1;
		var _g22 = h - by1;
		while(_g32 < _g22) {
			var j2 = _g32++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g33 = h - by1;
		var _g23 = h;
		while(_g33 < _g23) {
			var j3 = _g33++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
	var iarr1 = 1 / (by1 + by1 + 1);
	var ws1 = w * 4;
	var ti1;
	var li1;
	var ri1;
	var fv1;
	var lv1;
	var val1;
	var _g11 = 0;
	var _g4 = w;
	while(_g11 < _g4) {
		var i1 = _g11++;
		ti1 = i1 * 4 + 1;
		li1 = ti1;
		ri1 = ti1 + by1 * ws1;
		fv1 = imgA[ti1];
		lv1 = imgA[ti1 + ws1 * (h - 1)];
		val1 = (by1 + 1) * fv1;
		var _g34 = 0;
		var _g24 = by1;
		while(_g34 < _g24) {
			var j4 = _g34++;
			val1 = val1 + imgA[ti1 + j4 * ws1];
		}
		var _g35 = 0;
		var _g25 = by1 + 1;
		while(_g35 < _g25) {
			var j5 = _g35++;
			val1 = val1 + (imgA[ri1] - fv1);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g36 = by1 + 1;
		var _g26 = h - by1;
		while(_g36 < _g26) {
			var j6 = _g36++;
			val1 = val1 + (imgA[ri1] - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ri1 += ws1;
			ti1 += ws1;
		}
		var _g37 = h - by1;
		var _g27 = h;
		while(_g37 < _g27) {
			var j7 = _g37++;
			val1 = val1 + (lv1 - imgA[li1]);
			imgB[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
			li1 += ws1;
			ti1 += ws1;
		}
	}
	var iarr2 = 1 / (by1 + by1 + 1);
	var ws2 = w * 4;
	var ti2;
	var li2;
	var ri2;
	var fv2;
	var lv2;
	var val2;
	var _g12 = 0;
	var _g5 = w;
	while(_g12 < _g5) {
		var i2 = _g12++;
		ti2 = i2 * 4 + 2;
		li2 = ti2;
		ri2 = ti2 + by1 * ws2;
		fv2 = imgA[ti2];
		lv2 = imgA[ti2 + ws2 * (h - 1)];
		val2 = (by1 + 1) * fv2;
		var _g38 = 0;
		var _g28 = by1;
		while(_g38 < _g28) {
			var j8 = _g38++;
			val2 = val2 + imgA[ti2 + j8 * ws2];
		}
		var _g39 = 0;
		var _g29 = by1 + 1;
		while(_g39 < _g29) {
			var j9 = _g39++;
			val2 = val2 + (imgA[ri2] - fv2);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g310 = by1 + 1;
		var _g210 = h - by1;
		while(_g310 < _g210) {
			var j10 = _g310++;
			val2 = val2 + (imgA[ri2] - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ri2 += ws2;
			ti2 += ws2;
		}
		var _g311 = h - by1;
		var _g211 = h;
		while(_g311 < _g211) {
			var j11 = _g311++;
			val2 = val2 + (lv2 - imgA[li2]);
			imgB[ti2] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val2) * iarr2);
			li2 += ws2;
			ti2 += ws2;
		}
	}
	var iarr3 = 1 / (by1 + by1 + 1);
	var ws3 = w * 4;
	var ti3;
	var li3;
	var ri3;
	var fv3;
	var lv3;
	var val3;
	var _g13 = 0;
	var _g6 = w;
	while(_g13 < _g6) {
		var i3 = _g13++;
		ti3 = i3 * 4 + 3;
		li3 = ti3;
		ri3 = ti3 + by1 * ws3;
		fv3 = imgA[ti3];
		lv3 = imgA[ti3 + ws3 * (h - 1)];
		val3 = (by1 + 1) * fv3;
		var _g312 = 0;
		var _g212 = by1;
		while(_g312 < _g212) {
			var j12 = _g312++;
			val3 = val3 + imgA[ti3 + j12 * ws3];
		}
		var _g313 = 0;
		var _g213 = by1 + 1;
		while(_g313 < _g213) {
			var j13 = _g313++;
			val3 = val3 + (imgA[ri3] - fv3);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g314 = by1 + 1;
		var _g214 = h - by1;
		while(_g314 < _g214) {
			var j14 = _g314++;
			val3 = val3 + (imgA[ri3] - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ri3 += ws3;
			ti3 += ws3;
		}
		var _g315 = h - by1;
		var _g215 = h;
		while(_g315 < _g215) {
			var j15 = _g315++;
			val3 = val3 + (lv3 - imgA[li3]);
			imgB[ti3] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val3) * iarr3);
			li3 += ws3;
			ti3 += ws3;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurH = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g1 = 0;
	var _g = h;
	while(_g1 < _g) {
		var i = _g1++;
		ti = i * w;
		li = ti;
		ri = ti + r;
		fv = imgA[ti * 4 + off];
		lv = imgA[(ti + w - 1) * 4 + off];
		val = (r + 1) * fv;
		var _g3 = 0;
		var _g2 = r;
		while(_g3 < _g2) {
			var j = _g3++;
			val = val + imgA[(ti + j) * 4 + off];
		}
		var _g31 = 0;
		var _g21 = r + 1;
		while(_g31 < _g21) {
			var j1 = _g31++;
			val = val + (imgA[ri * 4 + off] - fv);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++ti;
		}
		var _g32 = r + 1;
		var _g22 = w - r;
		while(_g32 < _g22) {
			var j2 = _g32++;
			val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++ri;
			++li;
			++ti;
		}
		var _g33 = w - r;
		var _g23 = w;
		while(_g33 < _g23) {
			var j3 = _g33++;
			val = val + (lv - imgA[li * 4 + off]);
			imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			++li;
			++ti;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__boxBlurT = function(imgA,imgB,w,h,r,off) {
	var iarr = 1 / (r + r + 1);
	var ws = w * 4;
	var ti;
	var li;
	var ri;
	var fv;
	var lv;
	var val;
	var _g1 = 0;
	var _g = w;
	while(_g1 < _g) {
		var i = _g1++;
		ti = i * 4 + off;
		li = ti;
		ri = ti + r * ws;
		fv = imgA[ti];
		lv = imgA[ti + ws * (h - 1)];
		val = (r + 1) * fv;
		var _g3 = 0;
		var _g2 = r;
		while(_g3 < _g2) {
			var j = _g3++;
			val = val + imgA[ti + j * ws];
		}
		var _g31 = 0;
		var _g21 = r + 1;
		while(_g31 < _g21) {
			var j1 = _g31++;
			val = val + (imgA[ri] - fv);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			ri += ws;
			ti += ws;
		}
		var _g32 = r + 1;
		var _g22 = h - r;
		while(_g32 < _g22) {
			var j2 = _g32++;
			val = val + (imgA[ri] - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ri += ws;
			ti += ws;
		}
		var _g33 = h - r;
		var _g23 = h;
		while(_g33 < _g23) {
			var j3 = _g33++;
			val = val + (lv - imgA[li]);
			imgB[ti] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
			li += ws;
			ti += ws;
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - (destPoint.x | 0);
	var sourceY = destY - (destPoint.y | 0);
	var offset = 0;
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		offset = -1;
	} else {
		offset = 4 * (sourceY * (sourceRect.width | 0) + sourceX);
	}
	return offset;
};
lime__$internal_graphics_ImageDataUtil.__getBoxesForGaussianBlur = function(sigma,n) {
	var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
	var wl = Math.floor(wIdeal);
	if(wl % 2 == 0) {
		--wl;
	}
	var wu = wl + 2;
	var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
	var m = Math.round(mIdeal);
	var sizes = [];
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		sizes.push(i < m ? wl : wu);
	}
	return sizes;
};
lime__$internal_graphics_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >>> 24 & 255;
	tmp2 = n2 >>> 24 & 255;
	if(tmp1 != tmp2) {
		if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >>> 16 & 255;
		tmp2 = n2 >>> 16 & 255;
		if(tmp1 != tmp2) {
			if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >>> 8 & 255;
			tmp2 = n2 >>> 8 & 255;
			if(tmp1 != tmp2) {
				if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
lime__$internal_graphics_ImageDataUtil.__translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * (destRect.width | 0) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.__calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = _$UInt_UInt_$Impl_$.toFloat(imgB[s + 3]) * strength | 0;
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = ["lime","_internal","graphics","_ImageDataUtil","ImageDataView"];
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,hasRow: function(y) {
		if(y >= 0) {
			return y < this.height;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_macros_AssetsMacro = function() { };
$hxClasses["lime._internal.macros.AssetsMacro"] = lime__$internal_macros_AssetsMacro;
lime__$internal_macros_AssetsMacro.__name__ = ["lime","_internal","macros","AssetsMacro"];
var lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$ = {};
$hxClasses["lime._internal.unifill._CodePoint.CodePoint_Impl_"] = lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$;
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.__name__ = ["lime","_internal","unifill","_CodePoint","CodePoint_Impl_"];
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.fromInt = function(code) {
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.cons = function(a,b) {
	var this1;
	if(a <= 65535) {
		var this2 = String.fromCharCode(a);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((a >> 10) + 55232) + String.fromCharCode(a & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return this1 + b;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.snoc = function(a,b) {
	var this1;
	if(b <= 65535) {
		var this2 = String.fromCharCode(b);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((b >> 10) + 55232) + String.fromCharCode(b & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return a + this1;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.addInt = function(a,b) {
	var code = a + b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.sub = function(a,b) {
	return a - b;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.subInt = function(a,b) {
	var code = a - b;
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	return this1;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$._new = function(code) {
	var this1 = code;
	return this1;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.toString = function(this1) {
	var this2;
	if(this1 <= 65535) {
		var this3 = String.fromCharCode(this1);
		var this4 = this3;
		this2 = this4;
	} else {
		var this5 = String.fromCharCode((this1 >> 10) + 55232) + String.fromCharCode(this1 & 1023 | 56320);
		var this6 = this5;
		this2 = this6;
	}
	return this2;
};
lime__$internal_unifill__$CodePoint_CodePoint_$Impl_$.toInt = function(this1) {
	return this1;
};
var lime__$internal_unifill_CodePointIter = function(s) {
	this.i = 0;
	this.string = s;
	this.index = 0;
	this.endIndex = s.length;
};
$hxClasses["lime._internal.unifill.CodePointIter"] = lime__$internal_unifill_CodePointIter;
lime__$internal_unifill_CodePointIter.__name__ = ["lime","_internal","unifill","CodePointIter"];
lime__$internal_unifill_CodePointIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		var tmp = this;
		var tmp1 = tmp.index;
		var this1 = this.string;
		var this2 = this1;
		var c = this2.charCodeAt(this.index);
		tmp.index = tmp1 + (!(55296 <= c && c <= 56319) ? 1 : 2);
		var this3 = this.string;
		var this4 = this3;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this4,this.i);
	}
	,__class__: lime__$internal_unifill_CodePointIter
};
var lime__$internal_unifill_Exception = function() {
};
$hxClasses["lime._internal.unifill.Exception"] = lime__$internal_unifill_Exception;
lime__$internal_unifill_Exception.__name__ = ["lime","_internal","unifill","Exception"];
lime__$internal_unifill_Exception.prototype = {
	toString: function() {
		throw new js__$Boot_HaxeError(null);
	}
	,__class__: lime__$internal_unifill_Exception
};
var lime__$internal_unifill_InvalidCodePoint = function(code) {
	lime__$internal_unifill_Exception.call(this);
	this.code = code;
};
$hxClasses["lime._internal.unifill.InvalidCodePoint"] = lime__$internal_unifill_InvalidCodePoint;
lime__$internal_unifill_InvalidCodePoint.__name__ = ["lime","_internal","unifill","InvalidCodePoint"];
lime__$internal_unifill_InvalidCodePoint.__super__ = lime__$internal_unifill_Exception;
lime__$internal_unifill_InvalidCodePoint.prototype = $extend(lime__$internal_unifill_Exception.prototype,{
	code: null
	,toString: function() {
		return "InvalidCodePoint(code: " + this.code + ")";
	}
	,__class__: lime__$internal_unifill_InvalidCodePoint
});
var lime__$internal_unifill_InvalidCodeUnitSequence = function(index) {
	lime__$internal_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime._internal.unifill.InvalidCodeUnitSequence"] = lime__$internal_unifill_InvalidCodeUnitSequence;
lime__$internal_unifill_InvalidCodeUnitSequence.__name__ = ["lime","_internal","unifill","InvalidCodeUnitSequence"];
lime__$internal_unifill_InvalidCodeUnitSequence.__super__ = lime__$internal_unifill_Exception;
lime__$internal_unifill_InvalidCodeUnitSequence.prototype = $extend(lime__$internal_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime__$internal_unifill_InvalidCodeUnitSequence
});
var lime__$internal_unifill_InternalEncoding = function() { };
$hxClasses["lime._internal.unifill.InternalEncoding"] = lime__$internal_unifill_InternalEncoding;
lime__$internal_unifill_InternalEncoding.__name__ = ["lime","_internal","unifill","InternalEncoding"];
lime__$internal_unifill_InternalEncoding.get_internalEncoding = function() {
	return "UTF-16";
};
lime__$internal_unifill_InternalEncoding.codeUnitAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	return this2.charCodeAt(index);
};
lime__$internal_unifill_InternalEncoding.codePointAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this2,index);
};
lime__$internal_unifill_InternalEncoding.charAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var c = this3.charCodeAt(index);
	var this4 = HxOverrides.substr(this3,index,!(55296 <= c && c <= 56319) ? 1 : 2);
	var this5 = this4;
	return this5;
};
lime__$internal_unifill_InternalEncoding.codePointCount = function(s,beginIndex,endIndex) {
	var this1 = s;
	var this2 = this1;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this2,beginIndex,endIndex);
};
lime__$internal_unifill_InternalEncoding.codePointWidthAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var c = this2.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill_InternalEncoding.codePointWidthBefore = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var c = this2.charCodeAt(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill_InternalEncoding.offsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime__$internal_unifill_InternalEncoding.backwardOffsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var codePointOffset1 = -codePointOffset;
	if(codePointOffset1 >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < codePointOffset1 && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset1 && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime__$internal_unifill_InternalEncoding.fromCodePoint = function(codePoint) {
	var this1;
	if(codePoint <= 65535) {
		var this2 = String.fromCharCode(codePoint);
		var this3 = this2;
		this1 = this3;
	} else {
		var this4 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		var this5 = this4;
		this1 = this5;
	}
	return this1;
};
lime__$internal_unifill_InternalEncoding.fromCodePoints = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime__$internal_unifill_InternalEncoding.validate = function(s) {
	var this1 = s;
	var this2 = this1;
	lime__$internal_unifill__$Utf16_Utf16_$Impl_$.validate(this2);
};
lime__$internal_unifill_InternalEncoding.isValidString = function(s) {
	try {
		var this1 = s;
		var this2 = this1;
		lime__$internal_unifill__$Utf16_Utf16_$Impl_$.validate(this2);
		return true;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,lime__$internal_unifill_InvalidCodeUnitSequence) ) {
			return false;
		} else throw(e);
	}
};
lime__$internal_unifill_InternalEncoding.encodeWith = function(f,c) {
	if(c <= 65535) {
		f(c);
	} else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
var lime__$internal_unifill_InternalEncodingIter = function(s,beginIndex,endIndex) {
	this.i = 0;
	this.string = s;
	this.index = beginIndex;
	this.endIndex = endIndex;
};
$hxClasses["lime._internal.unifill.InternalEncodingIter"] = lime__$internal_unifill_InternalEncodingIter;
lime__$internal_unifill_InternalEncodingIter.__name__ = ["lime","_internal","unifill","InternalEncodingIter"];
lime__$internal_unifill_InternalEncodingIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		var tmp = this;
		var tmp1 = tmp.index;
		var this1 = this.string;
		var this2 = this1;
		var c = this2.charCodeAt(this.index);
		tmp.index = tmp1 + (!(55296 <= c && c <= 56319) ? 1 : 2);
		return this.i;
	}
	,__class__: lime__$internal_unifill_InternalEncodingIter
};
var lime__$internal_unifill_Unicode = function() { };
$hxClasses["lime._internal.unifill.Unicode"] = lime__$internal_unifill_Unicode;
lime__$internal_unifill_Unicode.__name__ = ["lime","_internal","unifill","Unicode"];
lime__$internal_unifill_Unicode.decodeSurrogate = function(hi,lo) {
	return hi - 55232 << 10 | lo & 1023;
};
lime__$internal_unifill_Unicode.encodeHighSurrogate = function(c) {
	return (c >> 10) + 55232;
};
lime__$internal_unifill_Unicode.encodeLowSurrogate = function(c) {
	return c & 1023 | 56320;
};
lime__$internal_unifill_Unicode.isScalar = function(code) {
	if(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319)) {
		return !(56320 <= code && code <= 57343);
	} else {
		return false;
	}
};
lime__$internal_unifill_Unicode.isHighSurrogate = function(code) {
	if(55296 <= code) {
		return code <= 56319;
	} else {
		return false;
	}
};
lime__$internal_unifill_Unicode.isLowSurrogate = function(code) {
	if(56320 <= code) {
		return code <= 57343;
	} else {
		return false;
	}
};
var lime__$internal_unifill_Unifill = function() { };
$hxClasses["lime._internal.unifill.Unifill"] = lime__$internal_unifill_Unifill;
lime__$internal_unifill_Unifill.__name__ = ["lime","_internal","unifill","Unifill"];
lime__$internal_unifill_Unifill.uLength = function(s) {
	var this1 = s;
	var this2 = this1;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this2,0,s.length);
};
lime__$internal_unifill_Unifill.uCharAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	var this6 = this5;
	var c2 = this6.charCodeAt(i);
	var this7 = HxOverrides.substr(this6,i,!(55296 <= c2 && c2 <= 56319) ? 1 : 2);
	var this8 = this7;
	return this8;
};
lime__$internal_unifill_Unifill.uCharCodeAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this5,i);
};
lime__$internal_unifill_Unifill.uCodePointAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this4 = s;
	var this5 = this4;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this5,i);
};
lime__$internal_unifill_Unifill.uIndexOf = function(s,value,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = s.indexOf(value,index);
	if(index3 >= 0) {
		var this4 = s;
		var this5 = this4;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this5,0,index3);
	} else {
		return -1;
	}
};
lime__$internal_unifill_Unifill.uLastIndexOf = function(s,value,startIndex) {
	if(startIndex == null) {
		startIndex = s.length - 1;
	}
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = s.lastIndexOf(value,index);
	if(index3 >= 0) {
		var this4 = s;
		var this5 = this4;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this5,0,index3);
	} else {
		return -1;
	}
};
lime__$internal_unifill_Unifill.uSplit = function(s,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_string;
		var _g1_index;
		var _g1_i;
		var _g1_endIndex;
		_g1_i = 0;
		_g1_string = s;
		_g1_index = 0;
		_g1_endIndex = s.length;
		while(_g1_index < _g1_endIndex) {
			_g1_i = _g1_index;
			var this1 = _g1_string;
			var this2 = this1;
			var c = this2.charCodeAt(_g1_index);
			_g1_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var i = _g1_i;
			var this3 = s;
			var this4 = this3;
			var this5 = this4;
			var c1 = this5.charCodeAt(i);
			var this6 = HxOverrides.substr(this5,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2);
			var this7 = this6;
			_g.push(this7);
		}
		return _g;
	} else {
		return s.split(delimiter);
	}
};
lime__$internal_unifill_Unifill.uSubstr = function(s,startIndex,length) {
	var index = startIndex >= 0 ? 0 : s.length;
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var si;
	if(startIndex >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this3.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		si = index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this3.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		si = index2;
	}
	var ei;
	if(length == null) {
		ei = s.length;
	} else if(length < 0) {
		ei = si;
	} else {
		var this4 = s;
		var this5 = this4;
		var this6 = this5;
		if(length >= 0) {
			var index3 = si;
			var len1 = this6.length;
			var i1 = 0;
			while(i1 < length && index3 < len1) {
				var c2 = this6.charCodeAt(index3);
				index3 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index3;
		} else {
			var index4 = si;
			var count1 = 0;
			while(count1 < -length && 0 < index4) {
				var c3 = this6.charCodeAt(index4 - 1);
				index4 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index4;
		}
	}
	return s.substring(si,ei);
};
lime__$internal_unifill_Unifill.uSubstring = function(s,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var this1 = s;
		var this2 = this1;
		var this3 = this2;
		if(startIndex >= 0) {
			var index = 0;
			var len = this3.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = this3.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			var index1 = 0;
			var count = 0;
			while(count < -startIndex && 0 < index1) {
				var c1 = this3.charCodeAt(index1 - 1);
				index1 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
				++count;
			}
			si = index1;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = s.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var this4 = s;
		var this5 = this4;
		var this6 = this5;
		if(endIndex >= 0) {
			var index2 = 0;
			var len1 = this6.length;
			var i1 = 0;
			while(i1 < endIndex && index2 < len1) {
				var c2 = this6.charCodeAt(index2);
				index2 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index2;
		} else {
			var index3 = 0;
			var count1 = 0;
			while(count1 < -endIndex && 0 < index3) {
				var c3 = this6.charCodeAt(index3 - 1);
				index3 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index3;
		}
	}
	return s.substring(si,ei);
};
lime__$internal_unifill_Unifill.uIterator = function(s) {
	return new lime__$internal_unifill_CodePointIter(s);
};
lime__$internal_unifill_Unifill.uCompare = function(a,b) {
	var aiter_string;
	var aiter_index;
	var aiter_i;
	var aiter_endIndex;
	aiter_i = 0;
	aiter_string = a;
	aiter_index = 0;
	aiter_endIndex = a.length;
	var biter_string;
	var biter_index;
	var biter_i;
	var biter_endIndex;
	biter_i = 0;
	biter_string = b;
	biter_index = 0;
	biter_endIndex = b.length;
	while(aiter_index < aiter_endIndex && biter_index < biter_endIndex) {
		aiter_i = aiter_index;
		var this1 = aiter_string;
		var this2 = this1;
		var c = this2.charCodeAt(aiter_index);
		aiter_index += !(55296 <= c && c <= 56319) ? 1 : 2;
		var this3 = a;
		var this4 = this3;
		var acode = lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this4,aiter_i);
		biter_i = biter_index;
		var this5 = biter_string;
		var this6 = this5;
		var c1 = this6.charCodeAt(biter_index);
		biter_index += !(55296 <= c1 && c1 <= 56319) ? 1 : 2;
		var this7 = b;
		var this8 = this7;
		var bcode = lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,biter_i);
		if(acode < bcode) {
			return -1;
		}
		if(acode > bcode) {
			return 1;
		}
	}
	if(biter_index < biter_endIndex) {
		return -1;
	}
	if(aiter_index < aiter_endIndex) {
		return 1;
	}
	return 0;
};
lime__$internal_unifill_Unifill.uToString = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime__$internal_unifill_Unifill.uAddChar = function(sb,c) {
	var c1 = c;
	if(c1 <= 65535) {
		sb.b += String.fromCharCode(c1);
	} else {
		sb.b += String.fromCharCode((c1 >> 10) + 55232);
		sb.b += String.fromCharCode(c1 & 1023 | 56320);
	}
};
var lime__$internal_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime._internal.unifill._Utf16.Utf16_Impl_"] = lime__$internal_unifill__$Utf16_Utf16_$Impl_$;
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","_internal","unifill","_Utf16","Utf16_Impl_"];
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.fromCodePoint = function(codePoint) {
	if(codePoint <= 65535) {
		var this1 = String.fromCharCode(codePoint);
		var this2 = this1;
		return this2;
	} else {
		var this3 = String.fromCharCode((codePoint >> 10) + 55232) + String.fromCharCode(codePoint & 1023 | 56320);
		var this4 = this3;
		return this4;
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.fromCodePoints = function(codePoints) {
	var this1 = new StringBuf();
	var buf = this1;
	var c = $iterator(codePoints)();
	while(c.hasNext()) {
		var c1 = c.next();
		if(c1 <= 65535) {
			buf.b += String.fromCharCode(c1);
		} else {
			buf.b += String.fromCharCode((c1 >> 10) + 55232);
			buf.b += String.fromCharCode(c1 & 1023 | 56320);
		}
	}
	var this2 = buf.b;
	var this3 = this2;
	return this3;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.fromString = function(s) {
	var this1 = s;
	var this2 = this1;
	return this2;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.fromArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	var this2 = this1;
	return this2;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.encodeWith = function(f,c) {
	if(c <= 65535) {
		f(c);
	} else {
		f((c >> 10) + 55232);
		f(c & 1023 | 56320);
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime__$internal_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return this1.charCodeAt(i);
	},index);
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.charAt = function(this1,index) {
	var c = this1.charCodeAt(index);
	var this2 = HxOverrides.substr(this1,index,!(55296 <= c && c <= 56319) ? 1 : 2);
	var this3 = this2;
	return this3;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return i;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointWidthAt = function(this1,index) {
	var c = this1.charCodeAt(index);
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointWidthBefore = function(this1,index) {
	var c = this1.charCodeAt(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.offsetByCodePoints = function(this1,index,codePointOffset) {
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this1.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = this1.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			var c1 = this1.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		return index2;
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.substr = function(this1,index,len) {
	var this2 = HxOverrides.substr(this1,index,len);
	var this3 = this2;
	return this3;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.validate = function(this1) {
	var len = this1.length;
	var accessor = function(i) {
		return this1.charCodeAt(i);
	};
	var i1 = 0;
	while(i1 < len) {
		lime__$internal_unifill__$Utf16_Utf16Impl.decode_code_point(len,accessor,i1);
		var c = this1.charCodeAt(i1);
		i1 += !(55296 <= c && c <= 56319) ? 1 : 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.toString = function(this1) {
	return this1;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(this1.charCodeAt(i++));
	return _g;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.forward_offset_by_code_points = function(this1,index,codePointOffset) {
	var len = this1.length;
	var i = 0;
	while(i < codePointOffset && index < len) {
		var c = this1.charCodeAt(index);
		index += !(55296 <= c && c <= 56319) ? 1 : 2;
		++i;
	}
	return index;
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.backward_offset_by_code_points = function(this1,index,codePointOffset) {
	var count = 0;
	while(count < codePointOffset && 0 < index) {
		var c = this1.charCodeAt(index - 1);
		index -= !(56320 <= c && c <= 57343) ? 1 : 2;
		++count;
	}
	return index;
};
var lime__$internal_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime._internal.unifill._Utf16.Utf16Impl"] = lime__$internal_unifill__$Utf16_Utf16Impl;
lime__$internal_unifill__$Utf16_Utf16Impl.__name__ = ["lime","_internal","unifill","_Utf16","Utf16Impl"];
lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width = function(c) {
	if(!(55296 <= c && c <= 56319)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!(56320 <= c && c <= 57343)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16Impl.encode_code_point = function(addUnit,codePoint) {
	if(codePoint <= 65535) {
		addUnit(codePoint);
	} else {
		addUnit((codePoint >> 10) + 55232);
		addUnit(codePoint & 1023 | 56320);
	}
};
lime__$internal_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(55296 <= hi && hi <= 56319) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(56320 <= lo && lo <= 57343) {
			return hi - 55232 << 10 | lo & 1023;
		} else {
			throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
		}
	} else if(56320 <= hi && hi <= 57343) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$ = {};
$hxClasses["lime._internal.unifill._Utf16.StringU16Buffer_Impl_"] = lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$;
lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$.__name__ = ["lime","_internal","unifill","_Utf16","StringU16Buffer_Impl_"];
lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$._new = function() {
	var this1 = new StringBuf();
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$.addUnit = function(this1,unit) {
	this1.b += String.fromCharCode(unit);
};
lime__$internal_unifill__$Utf16_StringU16Buffer_$Impl_$.getStringU16 = function(this1) {
	var this2 = this1.b;
	return this2;
};
var lime__$internal_unifill__$Utf16_StringU16_$Impl_$ = {};
$hxClasses["lime._internal.unifill._Utf16.StringU16_Impl_"] = lime__$internal_unifill__$Utf16_StringU16_$Impl_$;
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.__name__ = ["lime","_internal","unifill","_Utf16","StringU16_Impl_"];
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.fromString = function(s) {
	var this1 = s;
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.fromCodeUnit = function(u) {
	var this1 = String.fromCharCode(u);
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.fromTwoCodeUnits = function(u0,u1) {
	var this1 = String.fromCharCode(u0) + String.fromCharCode(u1);
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.ofArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.fromArray = function(a) {
	var buf_b = "";
	var _g = 0;
	while(_g < a.length) {
		var x = a[_g];
		++_g;
		buf_b += String.fromCharCode(x);
	}
	var this1 = buf_b;
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.codeUnitAt = function(this1,index) {
	return this1.charCodeAt(index);
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.substr = function(this1,index,len) {
	var this2 = HxOverrides.substr(this1,index,len);
	return this2;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.toString = function(this1) {
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.toArray = function(this1) {
	var i = 0;
	var len = this1.length;
	var _g = [];
	while(i < len) _g.push(this1.charCodeAt(i++));
	return _g;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
lime__$internal_unifill__$Utf16_StringU16_$Impl_$.get_length = function(this1) {
	return this1.length;
};
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) {
		onError.add(function(error) {
			promise.error(error);
		},true);
	}
	if(onProgress != null) {
		onProgress.add(function(progress,total) {
			promise.progress(progress,total);
		},true);
	}
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		if(this.isComplete || this.isError) {
			return this;
		} else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 239, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) {
			waitTime = -1;
		}
		this.ready(waitTime);
		if(this.isComplete) {
			return this.value;
		} else {
			return null;
		}
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = ["lime","app","_Event_Float_Float_lime_ui_MouseButton_Void"];
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = ["lime","app","_Event_Float_Float_lime_ui_MouseWheelMode_Void"];
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = ["lime","app","_Event_lime_ui_Window_Void"];
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._CairoRenderContext.CairoRenderContext_Impl_"] = lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$;
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.__name__ = ["lime","graphics","_CairoRenderContext","CairoRenderContext_Impl_"];
lime_graphics__$CairoRenderContext_CairoRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.cairo;
};
var lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._Canvas2DRenderContext.Canvas2DRenderContext_Impl_"] = lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$;
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.__name__ = ["lime","graphics","_Canvas2DRenderContext","Canvas2DRenderContext_Impl_"];
lime_graphics__$Canvas2DRenderContext_Canvas2DRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.canvas2D;
};
var lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._DOMRenderContext.DOMRenderContext_Impl_"] = lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$;
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.__name__ = ["lime","graphics","_DOMRenderContext","DOMRenderContext_Impl_"];
lime_graphics__$DOMRenderContext_DOMRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.dom;
};
var lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._FlashRenderContext.FlashRenderContext_Impl_"] = lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$;
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.__name__ = ["lime","graphics","_FlashRenderContext","FlashRenderContext_Impl_"];
lime_graphics__$FlashRenderContext_FlashRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageFileFormat = $hxClasses["lime.graphics.ImageFileFormat"] = { __ename__ : ["lime","graphics","ImageFileFormat"], __constructs__ : ["BMP","JPEG","PNG"] };
lime_graphics_ImageFileFormat.BMP = ["BMP",0];
lime_graphics_ImageFileFormat.BMP.toString = $estr;
lime_graphics_ImageFileFormat.BMP.__enum__ = lime_graphics_ImageFileFormat;
lime_graphics_ImageFileFormat.JPEG = ["JPEG",1];
lime_graphics_ImageFileFormat.JPEG.toString = $estr;
lime_graphics_ImageFileFormat.JPEG.__enum__ = lime_graphics_ImageFileFormat;
lime_graphics_ImageFileFormat.PNG = ["PNG",2];
lime_graphics_ImageFileFormat.PNG.toString = $estr;
lime_graphics_ImageFileFormat.PNG.__enum__ = lime_graphics_ImageFileFormat;
var lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES2RenderContext.OpenGLES2RenderContext_Impl_"] = lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$;
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.__name__ = ["lime","graphics","_OpenGLES2RenderContext","OpenGLES2RenderContext_Impl_"];
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromOpenGLES3RenderContext = function(gl) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES2RenderContext_OpenGLES2RenderContext_$Impl_$.fromWebGLRenderContext = function(gl) {
	return null;
};
var lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLES3RenderContext.OpenGLES3RenderContext_Impl_"] = lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$;
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.__name__ = ["lime","graphics","_OpenGLES3RenderContext","OpenGLES3RenderContext_Impl_"];
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromOpenGLES2RenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGLRenderContext = function(context) {
	return null;
};
lime_graphics__$OpenGLES3RenderContext_OpenGLES3RenderContext_$Impl_$.fromWebGL2RenderContext = function(context) {
	return null;
};
var lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._OpenGLRenderContext.OpenGLRenderContext_Impl_"] = lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$;
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.__name__ = ["lime","graphics","_OpenGLRenderContext","OpenGLRenderContext_Impl_"];
lime_graphics__$OpenGLRenderContext_OpenGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return null;
};
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = ["lime","graphics","RenderContext"];
lime_graphics_RenderContext.prototype = {
	attributes: null
	,cairo: null
	,canvas2D: null
	,dom: null
	,flash: null
	,gl: null
	,gles2: null
	,gles3: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_"] = lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$;
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.__name__ = ["lime","graphics","_WebGL2RenderContext","WebGL2RenderContext_Impl_"];
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.bufferSubData = function(this1,target,dstByteOffset,srcData,srcOffset,length) {
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.getBufferSubData = function(this1,target,srcByteOffset,dstData,srcOffset,length) {
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels,dstOffset) {
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform1iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform3iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform4iv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromGL = function(gl) {
	return null;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl2;
};
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.toWebGLRenderContext = function(gl) {
	return gl;
};
var lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_"] = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.__name__ = ["lime","graphics","_WebGLRenderContext","WebGLRenderContext_Impl_"];
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferData(target,srcData,usage);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferSubData = function(this1,target,offset,srcData) {
	this1.bufferSubData(target,offset,srcData);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D = function(this1,target,level,internalformat,width,height,border,srcData) {
	this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,srcData) {
	this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.readPixels = function(this1,x,y,width,height,format,type,pixels) {
	this1.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texSubImage2D = function(this1,target,level,xoffset,yoffset,width,height,format,type,srcData) {
	if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	this1.uniformMatrix2fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	this1.uniformMatrix3fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext = function(gl) {
	return gl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromRenderContext = function(context) {
	return context.webgl;
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromGL = function(gl) {
	return lime_graphics_opengl_GL.context;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,getOperator: function() {
		return 0;
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,moveTo: function(x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,rotate: function(amount) {
	}
	,save: function() {
	}
	,scale: function(x,y) {
	}
	,setFontSize: function(size) {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,textPath: function(utf8) {
	}
	,transform: function(matrix) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	var this1 = 0;
	return this1;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(0);
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.beginQuery = function(target,query) {
	lime_graphics_opengl_GL.context.beginQuery(target,query);
};
lime_graphics_opengl_GL.beginTransformFeedback = function(primitiveNode) {
	lime_graphics_opengl_GL.context.beginTransformFeedback(primitiveNode);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindBufferBase = function(target,index,buffer) {
	lime_graphics_opengl_GL.context.bindBufferBase(target,index,buffer);
};
lime_graphics_opengl_GL.bindBufferRange = function(target,index,buffer,offset,size) {
	lime_graphics_opengl_GL.context.bindBufferRange(target,index,buffer,offset,lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(size));
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindSampler = function(unit,sampler) {
	lime_graphics_opengl_GL.context.bindSampler(unit,sampler);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.bindTransformFeedback = function(target,transformFeedback) {
	lime_graphics_opengl_GL.context.bindTransformFeedback(target,transformFeedback);
};
lime_graphics_opengl_GL.bindVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.bindVertexArray(vertexArray);
};
lime_graphics_opengl_GL.blitFramebuffer = function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
	lime_graphics_opengl_GL.context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferDataWEBGL = function(target,srcData,usage,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,length);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_opengl_GL.bufferSubDataWEBGL = function(target,dstByteOffset,srcData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
	} else {
		this1.bufferSubData(target,dstByteOffset,srcData);
	}
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearBufferfi = function(buffer,drawbuffer,depth,stencil) {
	lime_graphics_opengl_GL.context.clearBufferfi(buffer,drawbuffer,depth,stencil);
};
lime_graphics_opengl_GL.clearBufferfvWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearBufferuivWEBGL = function(buffer,drawbuffer,values,srcOffset) {
	lime_graphics_opengl_GL.context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.clientWaitSync = function(sync,flags,timeout) {
	return lime_graphics_opengl_GL.context.clientWaitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2DWEBGL = function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.compressedTexSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
	} else {
		this1.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
	}
};
lime_graphics_opengl_GL.compressedTexSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
	lime_graphics_opengl_GL.context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.copyTexSubImage3D = function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createQuery = function() {
	return lime_graphics_opengl_GL.context.createQuery();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createSampler = function() {
	return lime_graphics_opengl_GL.context.createSampler();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.createTransformFeedback = function() {
	return lime_graphics_opengl_GL.context.createTransformFeedback();
};
lime_graphics_opengl_GL.createVertexArray = function() {
	return lime_graphics_opengl_GL.context.createVertexArray();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteQuery = function(query) {
	lime_graphics_opengl_GL.context.deleteQuery(query);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteSampler = function(sampler) {
	lime_graphics_opengl_GL.context.deleteSampler(sampler);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteSync = function(sync) {
	lime_graphics_opengl_GL.context.deleteSync(sync);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.deleteTransformFeedback = function(transformFeedback) {
	lime_graphics_opengl_GL.context.deleteTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.deleteVertexArray = function(vertexArray) {
	lime_graphics_opengl_GL.context.deleteVertexArray(vertexArray);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawArraysInstanced = function(mode,first,count,instanceCount) {
	lime_graphics_opengl_GL.context.drawArraysInstanced(mode,first,count,instanceCount);
};
lime_graphics_opengl_GL.drawBuffers = function(buffers) {
	lime_graphics_opengl_GL.context.drawBuffers(buffers);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.drawElementsInstanced = function(mode,count,type,offset,instanceCount) {
	lime_graphics_opengl_GL.context.drawElementsInstanced(mode,count,type,offset,instanceCount);
};
lime_graphics_opengl_GL.drawRangeElements = function(mode,start,end,count,type,offset) {
	lime_graphics_opengl_GL.context.drawRangeElements(mode,start,end,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.endQuery = function(target) {
	lime_graphics_opengl_GL.context.endQuery(target);
};
lime_graphics_opengl_GL.endTransformFeedback = function() {
	lime_graphics_opengl_GL.context.endTransformFeedback();
};
lime_graphics_opengl_GL.fenceSync = function(condition,flags) {
	return lime_graphics_opengl_GL.context.fenceSync(condition,flags);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.framebufferTextureLayer = function(target,attachment,texture,level,layer) {
	lime_graphics_opengl_GL.context.framebufferTextureLayer(target,attachment,texture,level,layer);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getActiveUniformBlockName = function(program,uniformBlockIndex) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockName(program,uniformBlockIndex);
};
lime_graphics_opengl_GL.getActiveUniformBlockParameter = function(program,uniformBlockIndex,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
};
lime_graphics_opengl_GL.getActiveUniforms = function(program,uniformIndices,pname) {
	return lime_graphics_opengl_GL.context.getActiveUniforms(program,uniformIndices,pname);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getBufferSubDataWEBGL = function(target,srcByteOffset,dstData,srcOffset,length) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
	} else {
		this1.getBufferSubData(target,srcByteOffset,dstData);
	}
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFragDataLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getFragDataLocation(program,name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getIndexedParameter = function(target,index) {
	return lime_graphics_opengl_GL.context.getIndexedParameter(target,index);
};
lime_graphics_opengl_GL.getInternalformatParameter = function(target,internalformat,pname) {
	return lime_graphics_opengl_GL.context.getInternalformatParameter(target,internalformat,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getQuery = function(target,pname) {
	return lime_graphics_opengl_GL.context.getQuery(target,pname);
};
lime_graphics_opengl_GL.getQueryParameter = function(query,pname) {
	return lime_graphics_opengl_GL.context.getQueryParameter(query,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getSamplerParameter = function(sampler,pname) {
	return lime_graphics_opengl_GL.context.getSamplerParameter(sampler,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getSyncParameter = function(sync,pname) {
	return lime_graphics_opengl_GL.context.getSyncParameter(sync,pname);
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getTransformFeedbackVarying = function(program,index) {
	return lime_graphics_opengl_GL.context.getTransformFeedbackVarying(program,index);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformBlockIndex = function(program,uniformBlockName) {
	return lime_graphics_opengl_GL.context.getUniformBlockIndex(program,uniformBlockName);
};
lime_graphics_opengl_GL.getUniformIndices = function(program,uniformNames) {
	return lime_graphics_opengl_GL.context.getUniformIndices(program,uniformNames);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt(lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname));
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.invalidateFramebuffer = function(target,attachments) {
	lime_graphics_opengl_GL.context.invalidateFramebuffer(target,attachments);
};
lime_graphics_opengl_GL.invalidateSubFramebuffer = function(target,attachments,x,y,width,height) {
	lime_graphics_opengl_GL.context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isQuery = function(query) {
	return lime_graphics_opengl_GL.context.isQuery(query);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isSampler = function(sampler) {
	return lime_graphics_opengl_GL.context.isSampler(sampler);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isSync = function(sync) {
	return lime_graphics_opengl_GL.context.isSync(sync);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.isTransformFeedback = function(transformFeedback) {
	return lime_graphics_opengl_GL.context.isTransformFeedback(transformFeedback);
};
lime_graphics_opengl_GL.isVertexArray = function(vertexArray) {
	return lime_graphics_opengl_GL.context.isVertexArray(vertexArray);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pauseTransformFeedback = function() {
	lime_graphics_opengl_GL.context.pauseTransformFeedback();
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readBuffer = function(src) {
	lime_graphics_opengl_GL.context.readBuffer(src);
};
lime_graphics_opengl_GL.readPixelsWEBGL = function(x,y,width,height,format,type,pixels,dstOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(dstOffset != null) {
		this1.readPixels(x,y,width,height,format,type,pixels,dstOffset);
	} else {
		this1.readPixels(x,y,width,height,format,type,pixels);
	}
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.renderbufferStorageMultisample = function(target,samples,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorageMultisample(target,samples,internalformat,width,height);
};
lime_graphics_opengl_GL.resumeTransformFeedback = function() {
	lime_graphics_opengl_GL.context.resumeTransformFeedback();
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.samplerParameterf = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameterf(sampler,pname,param);
};
lime_graphics_opengl_GL.samplerParameteri = function(sampler,pname,param) {
	lime_graphics_opengl_GL.context.samplerParameteri(sampler,pname,param);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2DWEBGL = function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_opengl_GL.texImage3DWEBGL = function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
	lime_graphics_opengl_GL.context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
};
lime_graphics_opengl_GL.texStorage2D = function(target,level,internalformat,width,height) {
	lime_graphics_opengl_GL.context.texStorage2D(target,level,internalformat,width,height);
};
lime_graphics_opengl_GL.texStorage3D = function(target,level,internalformat,width,height,depth) {
	lime_graphics_opengl_GL.context.texStorage3D(target,level,internalformat,width,height,depth);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2DWEBGL = function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
	} else if(type != null) {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
	} else {
		this1.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
	}
};
lime_graphics_opengl_GL.texSubImage3DWEBGL = function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
	lime_graphics_opengl_GL.context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
};
lime_graphics_opengl_GL.transformFeedbackVaryings = function(program,varyings,bufferMode) {
	lime_graphics_opengl_GL.context.transformFeedbackVaryings(program,varyings,bufferMode);
};
lime_graphics_opengl_GL.uniform1f = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1f(location,v0);
};
lime_graphics_opengl_GL.uniform1fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1i = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1i(location,v0);
};
lime_graphics_opengl_GL.uniform1ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform1iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform1iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform1ui = function(location,v0) {
	lime_graphics_opengl_GL.context.uniform1ui(location,v0);
};
lime_graphics_opengl_GL.uniform1uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform1uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2f = function(location,v0,v1) {
	lime_graphics_opengl_GL.context.uniform2f(location,v0,v1);
};
lime_graphics_opengl_GL.uniform2fvWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv(lime_graphics_opengl_GL.context,location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform2iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform2ui = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2ui(location,x,y);
};
lime_graphics_opengl_GL.uniform2uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform2uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform3f = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3f(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3i = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3i(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform3iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform3iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform3ui = function(location,v0,v1,v2) {
	lime_graphics_opengl_GL.context.uniform3ui(location,v0,v1,v2);
};
lime_graphics_opengl_GL.uniform3uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform3uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniform4f = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4f(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4fvWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4fv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4i = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4i(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4ivWEBGL = function(location,data,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniform4iv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform4iv(location,data);
	}
};
lime_graphics_opengl_GL.uniform4ui = function(location,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.uniform4ui(location,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.uniform4uivWEBGL = function(location,data,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniform4uiv(location,data,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformBlockBinding = function(program,uniformBlockIndex,uniformBlockBinding) {
	lime_graphics_opengl_GL.context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
};
lime_graphics_opengl_GL.uniformMatrix2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix2fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix2x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix2x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix2x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix3fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix3x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix3x4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix3x4fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	var this1 = lime_graphics_opengl_GL.context;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,v,srcOffset,srcLength);
	} else {
		this1.uniformMatrix4fv(location,transpose,v);
	}
};
lime_graphics_opengl_GL.uniformMatrix4x2fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x2fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.uniformMatrix4x3fvWEBGL = function(location,transpose,v,srcOffset,srcLength) {
	lime_graphics_opengl_GL.context.uniformMatrix4x3fv(location,transpose,v,srcOffset,srcLength);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(index,v0) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(index,v0);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib1fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(index,v0,v1) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(index,v0,v1);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib2fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(index,v0,v1,v2) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(index,v0,v1,v2);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib3fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttrib4fvWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(index,v);
};
lime_graphics_opengl_GL.vertexAttribDivisor = function(index,divisor) {
	lime_graphics_opengl_GL.context.vertexAttribDivisor(index,divisor);
};
lime_graphics_opengl_GL.vertexAttribI4i = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4i(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4iv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4iv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4ui = function(index,v0,v1,v2,v3) {
	lime_graphics_opengl_GL.context.vertexAttribI4ui(index,v0,v1,v2,v3);
};
lime_graphics_opengl_GL.vertexAttribI4uiv = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribI4uivWEBGL = function(index,v) {
	lime_graphics_opengl_GL.context.vertexAttribI4uiv(index,v);
};
lime_graphics_opengl_GL.vertexAttribIPointer = function(index,size,type,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribIPointer(index,size,type,stride,offset);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(index,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(index,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.waitSync = function(sync,flags,timeout) {
	lime_graphics_opengl_GL.context.waitSync(sync,flags,timeout);
};
lime_graphics_opengl_GL.__getObjectID = function(object) {
	if(object == null) {
		return 0;
	} else {
		return object.id;
	}
};
var lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLProgram.GLProgram_Impl_"] = lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$;
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.__name__ = ["lime","graphics","opengl","_GLProgram","GLProgram_Impl_"];
lime_graphics_opengl__$GLProgram_GLProgram_$Impl_$.fromSources = function(gl,vertexSource,fragmentSource) {
	var vertexShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,vertexSource,gl.VERTEX_SHADER);
	var fragmentShader = lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource(gl,fragmentSource,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	gl.attachShader(program,vertexShader);
	gl.attachShader(program,fragmentShader);
	gl.linkProgram(program);
	if(gl.getProgramParameter(program,35714) == 0) {
		var message = "Unable to initialize the shader program";
		message += "\n" + lime_graphics_opengl_GL.context.getProgramInfoLog(program);
		lime_utils_Log.error(message,{ fileName : "GLProgram.hx", lineNumber : 40, className : "lime.graphics.opengl._GLProgram.GLProgram_Impl_", methodName : "fromSources"});
	}
	return program;
};
var lime_graphics_opengl__$GLShader_GLShader_$Impl_$ = {};
$hxClasses["lime.graphics.opengl._GLShader.GLShader_Impl_"] = lime_graphics_opengl__$GLShader_GLShader_$Impl_$;
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.__name__ = ["lime","graphics","opengl","_GLShader","GLShader_Impl_"];
lime_graphics_opengl__$GLShader_GLShader_$Impl_$.fromSource = function(gl,source,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,source);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		var message;
		if(type == gl.VERTEX_SHADER) {
			message = "Error compiling vertex shader";
		} else if(type == gl.FRAGMENT_SHADER) {
			message = "Error compiling fragment shader";
		} else {
			message = "Error compiling unknown shader type";
		}
		message += "\n" + gl.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLShader.hx", lineNumber : 41, className : "lime.graphics.opengl._GLShader.GLShader_Impl_", methodName : "fromSource"});
	}
	return shader;
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = ["lime","graphics","opengl","ext","KHR_debug"];
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	DEBUG_OUTPUT_SYNCHRONOUS: null
	,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null
	,DEBUG_CALLBACK_FUNCTION: null
	,DEBUG_CALLBACK_USER_PARAM: null
	,DEBUG_SOURCE_API: null
	,DEBUG_SOURCE_WINDOW_SYSTEM: null
	,DEBUG_SOURCE_SHADER_COMPILER: null
	,DEBUG_SOURCE_THIRD_PARTY: null
	,DEBUG_SOURCE_APPLICATION: null
	,DEBUG_SOURCE_OTHER: null
	,DEBUG_TYPE_ERROR: null
	,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null
	,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null
	,DEBUG_TYPE_PORTABILITY: null
	,DEBUG_TYPE_PERFORMANCE: null
	,DEBUG_TYPE_OTHER: null
	,DEBUG_TYPE_MARKER: null
	,DEBUG_TYPE_PUSH_GROUP: null
	,DEBUG_TYPE_POP_GROUP: null
	,DEBUG_SEVERITY_NOTIFICATION: null
	,MAX_DEBUG_GROUP_STACK_DEPTH: null
	,DEBUG_GROUP_STACK_DEPTH: null
	,BUFFER: null
	,SHADER: null
	,PROGRAM: null
	,QUERY: null
	,SAMPLER: null
	,MAX_LABEL_LENGTH: null
	,MAX_DEBUG_MESSAGE_LENGTH: null
	,MAX_DEBUG_LOGGED_MESSAGES: null
	,DEBUG_LOGGED_MESSAGES: null
	,DEBUG_SEVERITY_HIGH: null
	,DEBUG_SEVERITY_MEDIUM: null
	,DEBUG_SEVERITY_LOW: null
	,DEBUG_OUTPUT: null
	,CONTEXT_FLAG_DEBUG_BIT: null
	,STACK_OVERFLOW: null
	,STACK_UNDERFLOW: null
	,__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math._ARGB.ARGB_Impl_"] = lime_math__$ARGB_ARGB_$Impl_$;
lime_math__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","_ARGB","ARGB_Impl_"];
lime_math__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	var this1 = argb;
	return this1;
};
lime_math__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var this1 = 0;
	var argb = this1;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
		this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
			this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >>> 24 & 255) != 0 && (this1 >>> 24 & 255) != 255) {
		lime_math__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >>> 24 & 255);
		this1 = (this1 >>> 24 & 255 & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >>> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >>> 24 & 255) != 255) {
			lime_math__$ARGB_ARGB_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 >>> 24 & 255];
			this1 = (this1 >>> 24 & 255 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 16 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	}
};
lime_math__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var argb = this1;
	argb = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var argb = this1;
	argb = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
	return argb;
};
lime_math__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math._BGRA.BGRA_Impl_"] = lime_math__$BGRA_BGRA_$Impl_$;
lime_math__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","_BGRA","BGRA_Impl_"];
lime_math__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	var this1 = bgra;
	return this1;
};
lime_math__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var this1 = 0;
	var bgra = this1;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math__$BGRA_BGRA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 8 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var bgra = this1;
	bgra = (argb & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb >>> 16 & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var this1 = 0;
	var bgra = this1;
	bgra = (rgba >>> 8 & 255 & 255) << 24 | (rgba >>> 16 & 255 & 255) << 16 | (rgba >>> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this2);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] += second[0];
	var _g1 = this1;
	_g1[6] += second[6];
	var _g2 = this1;
	_g2[12] += second[12];
	var _g3 = this1;
	_g3[18] += second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] += x;
	this1[13] += y;
	this1[14] += z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	var this2;
	if(this1 != null) {
		this2 = new Float32Array(this1);
	} else {
		this2 = null;
	}
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this2);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 185, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Column " + column + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 231, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyColumnTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 288, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowFrom"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		lime_utils_Log.error("Row " + row + " out of bounds [0, ..., 3]",{ fileName : "Matrix4.hx", lineNumber : 334, className : "lime.math._Matrix4.Matrix4_Impl_", methodName : "copyRowTo"});
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(this1,a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	this1[0] = a;
	this1[1] = b;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = c;
	this1[5] = d;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = tx;
	this1[13] = ty;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[3];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[7];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[11];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.fromMatrix3 = function(matrix3) {
	var mat = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.create2D(mat,matrix3.a,matrix3.b,matrix3.c,matrix3.d,matrix3.tx,matrix3.ty);
	return mat;
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent,result) {
	if(result == null) {
		result = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	}
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(result,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] += (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,1,0);
	}
	var result = null;
	if(result == null) {
		result = new lime_math_Vector4();
	}
	result.x = pos.x - at.x;
	result.y = pos.y - at.y;
	result.z = pos.z - at.z;
	var dir = result;
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	var result1 = null;
	if(result1 == null) {
		result1 = new lime_math_Vector4();
	}
	result1.x = vup.x - dir2.x;
	result1.y = vup.y - dir2.y;
	result1.z = vup.z - dir2.z;
	vup = result1;
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	var result2 = null;
	if(result2 == null) {
		result2 = new lime_math_Vector4();
	}
	var ya = vup.z * dir.x - vup.x * dir.z;
	var za = vup.x * dir.y - vup.y * dir.x;
	result2.x = vup.y * dir.z - vup.z * dir.y;
	result2.y = ya;
	result2.z = za;
	result2.w = 1;
	right = result2;
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation(this1,axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	var this2;
	if(array != null) {
		this2 = new Float32Array(array);
	} else {
		this2 = null;
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(this2));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v,result) {
	if(result == null) {
		result = new lime_math_Vector4();
	}
	var x = v.x;
	var y = v.y;
	var z = v.z;
	result.x = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
	result.y = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
	result.z = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
	result.w = x * this1[3] + y * this1[7] + z * this1[11] + this1[15];
	return result;
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	var x;
	var y;
	var z;
	while(i + 3 <= ain.length) {
		x = ain[i];
		y = ain[i + 1];
		z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var temp = this1[1];
	this1[1] = this1[4];
	this1[4] = temp;
	var temp1 = this1[2];
	this1[2] = this1[8];
	this1[8] = temp1;
	var temp2 = this1[3];
	this1[3] = this1[12];
	this1[12] = temp2;
	var temp3 = this1[6];
	this1[6] = this1[9];
	this1[9] = temp3;
	var temp4 = this1[7];
	this1[7] = this1[13];
	this1[13] = temp4;
	var temp5 = this1[11];
	this1[11] = this1[14];
	this1[14] = temp5;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__getAxisRotation = function(this1,x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.__swap = function(this1,a,b) {
	var temp = this1[a];
	this1[a] = this1[b];
	this1[b] = temp;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math._RGBA.RGBA_Impl_"] = lime_math__$RGBA_RGBA_$Impl_$;
lime_math__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","_RGBA","RGBA_Impl_"];
lime_math__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	var this1 = rgba;
	return this1;
};
lime_math__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var this1 = 0;
	var rgba = this1;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >>> 24 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >>> 24 & 255;
		data[offset + 2] = this1 >>> 16 & 255;
		data[offset + 3] = this1 >>> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >>> 8 & 255;
		data[offset + 1] = this1 >>> 16 & 255;
		data[offset + 2] = this1 >>> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var this1 = 0;
	var rgba = this1;
	rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var this1 = 0;
	var rgba = this1;
	rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >>> 8 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >>> 16 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >>> 24 & 255;
};
lime_math__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >>> 16 & 255 & 255) << 16 | (this1 >>> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.distanceSquared = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return x * x + y * y + z * z;
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x + a.x;
		result.y = this.y + a.y;
		result.z = this.z + a.z;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		var ya = this.z * a.x - this.x * a.z;
		var za = this.x * a.y - this.y * a.x;
		result.x = this.y * a.z - this.z * a.y;
		result.y = ya;
		result.z = za;
		result.w = 1;
		return result;
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a,result) {
		if(result == null) {
			result = new lime_math_Vector4();
		}
		result.x = this.x - a.x;
		result.y = this.y - a.y;
		result.z = this.z - a.z;
		return result;
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[2];
			var _g1 = bytes.b[1];
			var _g2 = bytes.b[0];
			switch(_g2) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g3 = bytes.b[2];
		var _g11 = bytes.b[1];
		var _g21 = bytes.b[0];
		switch(_g21) {
		case 73:
			if(_g11 == 68) {
				if(_g3 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 443, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcHowl: null
	,__srcSound: null
	,__srcVorbisFile: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = ["lime","media","AudioContext"];
lime_media_AudioContext.prototype = {
	custom: null
	,flash: null
	,html5: null
	,openal: null
	,type: null
	,web: null
	,__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
lime_media_AudioManager.resume = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.resumeDevice(device);
			alc.processContext(currentContext);
		}
	}
};
lime_media_AudioManager.shutdown = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			var device = alc.getContextsDevice(currentContext);
			alc.makeContextCurrent(null);
			alc.destroyContext(currentContext);
			if(device != null) {
				alc.closeDevice(device);
			}
		}
	}
	lime_media_AudioManager.context = null;
};
lime_media_AudioManager.suspend = function() {
	if(lime_media_AudioManager.context != null && lime_media_AudioManager.context.type == "openal") {
		var alc = lime_media_AudioManager.context.openal;
		var currentContext = alc.getCurrentContext();
		if(currentContext != null) {
			alc.suspendContext(currentContext);
			var device = alc.getContextsDevice(currentContext);
			alc.pauseDevice(device);
		}
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,__backend: null
	,dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,pause: function() {
		this.__backend.pause();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,get_length: function() {
		return this.__backend.getLength();
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,get_loops: function() {
		return this.__backend.getLoops();
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
};
var lime_media_FlashAudioContext = function() {
};
$hxClasses["lime.media.FlashAudioContext"] = lime_media_FlashAudioContext;
lime_media_FlashAudioContext.__name__ = ["lime","media","FlashAudioContext"];
lime_media_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_media_FlashAudioContext
};
var lime_media_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_media_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) {
			return buffer.__srcAudio.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.load();
		}
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.pause();
		}
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.play();
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) {
			buffer.__srcAudio.volume = value;
		}
	}
	,__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = ["lime","media","OpenALAudioContext"];
lime_media_OpenALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_media_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_media_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_media_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_media_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_media_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_media_openal_AL.bufferiv(buffer,param,values);
	}
	,closeDevice: function(device) {
		return lime_media_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,createBuffer: function() {
		return lime_media_openal_AL.createBuffer();
	}
	,createSource: function() {
		return lime_media_openal_AL.createSource();
	}
	,deleteBuffer: function(buffer) {
		lime_media_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_media_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_media_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_media_openal_AL.deleteSources(sources);
	}
	,destroyContext: function(context) {
		if(context == null) {
			return;
		}
		lime_media_openal_ALC.destroyContext(context);
	}
	,disable: function(capability) {
		lime_media_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_media_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_media_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_media_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_media_openal_AL.enable(capability);
	}
	,genSource: function() {
		return this.createSource();
	}
	,genSources: function(n) {
		return lime_media_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return this.createBuffer();
	}
	,genBuffers: function(n) {
		return lime_media_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_media_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_media_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_media_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_media_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getBufferiv(buffer,param,count);
	}
	,getContextsDevice: function(context) {
		if(context == null) {
			return null;
		}
		return lime_media_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_media_openal_ALC.getCurrentContext();
	}
	,getDouble: function(param) {
		return lime_media_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_media_openal_AL.getEnumValue(ename);
	}
	,getError: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getError();
		} else {
			return lime_media_openal_ALC.getError(device);
		}
	}
	,getErrorString: function(device) {
		if(device == null) {
			return lime_media_openal_AL.getErrorString();
		} else {
			return lime_media_openal_ALC.getErrorString(device);
		}
	}
	,getFloat: function(param) {
		return lime_media_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_media_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count,device) {
		if(count == null) {
			count = 1;
		}
		if(device == null) {
			return lime_media_openal_AL.getIntegerv(param,count);
		} else {
			return lime_media_openal_ALC.getIntegerv(device,param,count);
		}
	}
	,getListener3f: function(param) {
		return lime_media_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_media_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_media_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_media_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_media_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_media_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_media_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_media_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_media_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_media_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param,device) {
		if(device == null) {
			return lime_media_openal_AL.getString(param);
		} else {
			return lime_media_openal_ALC.getString(device,param);
		}
	}
	,isBuffer: function(buffer) {
		return lime_media_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_media_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_media_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_media_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_media_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_media_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_media_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_media_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_media_openal_AL.listeneriv(param,values);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_media_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_media_openal_ALC.resumeDevice(device);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_media_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_media_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_media_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_media_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_media_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_media_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_media_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_media_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_media_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_media_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_media_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_media_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_media_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_media_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_media_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_media_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_media_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_media_openal_AL.speedOfSound(value);
	}
	,suspendContext: function(context) {
		lime_media_openal_ALC.suspendContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_AL = function() { };
$hxClasses["lime.media.openal.AL"] = lime_media_openal_AL;
lime_media_openal_AL.__name__ = ["lime","media","openal","AL"];
lime_media_openal_AL.removeDirectFilter = function(source) {
};
lime_media_openal_AL.removeSend = function(source,index) {
};
lime_media_openal_AL.auxf = function(aux,param,value) {
};
lime_media_openal_AL.auxfv = function(aux,param,values) {
};
lime_media_openal_AL.auxi = function(aux,param,value) {
};
lime_media_openal_AL.auxiv = function(aux,param,values) {
};
lime_media_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_media_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_media_openal_AL.bufferf = function(buffer,param,value) {
};
lime_media_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_media_openal_AL.bufferi = function(buffer,param,value) {
};
lime_media_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_media_openal_AL.createAux = function() {
	return null;
};
lime_media_openal_AL.createBuffer = function() {
	return null;
};
lime_media_openal_AL.createEffect = function() {
	return null;
};
lime_media_openal_AL.createFilter = function() {
	return null;
};
lime_media_openal_AL.createSource = function() {
	return null;
};
lime_media_openal_AL.deleteBuffer = function(buffer) {
};
lime_media_openal_AL.deleteBuffers = function(buffers) {
};
lime_media_openal_AL.deleteSource = function(source) {
};
lime_media_openal_AL.deleteSources = function(sources) {
};
lime_media_openal_AL.disable = function(capability) {
};
lime_media_openal_AL.distanceModel = function(distanceModel) {
};
lime_media_openal_AL.dopplerFactor = function(value) {
};
lime_media_openal_AL.dopplerVelocity = function(value) {
};
lime_media_openal_AL.effectf = function(effect,param,value) {
};
lime_media_openal_AL.effectfv = function(effect,param,values) {
};
lime_media_openal_AL.effecti = function(effect,param,value) {
};
lime_media_openal_AL.effectiv = function(effect,param,values) {
};
lime_media_openal_AL.enable = function(capability) {
};
lime_media_openal_AL.genSource = function() {
	return null;
};
lime_media_openal_AL.genSources = function(n) {
	return null;
};
lime_media_openal_AL.genBuffer = function() {
	return null;
};
lime_media_openal_AL.genBuffers = function(n) {
	return null;
};
lime_media_openal_AL.getBoolean = function(param) {
	return false;
};
lime_media_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_media_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_media_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getDouble = function(param) {
	return 0;
};
lime_media_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_media_openal_AL.getError = function() {
	return 0;
};
lime_media_openal_AL.getErrorString = function() {
	var _g = lime_media_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_AL.getFilteri = function(filter,param) {
	return 0;
};
lime_media_openal_AL.getFloat = function(param) {
	return 0;
};
lime_media_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getInteger = function(param) {
	return 0;
};
lime_media_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListener3f = function(param) {
	return null;
};
lime_media_openal_AL.getListener3i = function(param) {
	return null;
};
lime_media_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_media_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_media_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getParameter = function(param) {
	return null;
};
lime_media_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_media_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_media_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_media_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_media_openal_AL.getString = function(param) {
	return null;
};
lime_media_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_media_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_media_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_media_openal_AL.isAux = function(aux) {
	return false;
};
lime_media_openal_AL.isEffect = function(effect) {
	return false;
};
lime_media_openal_AL.isFilter = function(filter) {
	return false;
};
lime_media_openal_AL.isSource = function(source) {
	return false;
};
lime_media_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_media_openal_AL.listenerf = function(param,value) {
};
lime_media_openal_AL.listenerfv = function(param,values) {
};
lime_media_openal_AL.listeneri = function(param,value) {
};
lime_media_openal_AL.listeneriv = function(param,values) {
};
lime_media_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_media_openal_AL.sourcef = function(source,param,value) {
};
lime_media_openal_AL.sourcefv = function(source,param,values) {
};
lime_media_openal_AL.sourcei = function(source,param,value) {
};
lime_media_openal_AL.filteri = function(filter,param,value) {
};
lime_media_openal_AL.filterf = function(filter,param,value) {
};
lime_media_openal_AL.sourceiv = function(source,param,values) {
};
lime_media_openal_AL.sourcePlay = function(source) {
};
lime_media_openal_AL.sourcePlayv = function(sources) {
};
lime_media_openal_AL.sourceStop = function(source) {
};
lime_media_openal_AL.sourceStopv = function(sources) {
};
lime_media_openal_AL.sourceRewind = function(source) {
};
lime_media_openal_AL.sourceRewindv = function(sources) {
};
lime_media_openal_AL.sourcePause = function(source) {
};
lime_media_openal_AL.sourcePausev = function(sources) {
};
lime_media_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_media_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_media_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_media_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_media_openal_AL.speedOfSound = function(value) {
};
var lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$ = {};
$hxClasses["lime.media.openal._ALAuxiliaryEffectSlot.ALAuxiliaryEffectSlot_Impl_"] = lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$;
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$.__name__ = ["lime","media","openal","_ALAuxiliaryEffectSlot","ALAuxiliaryEffectSlot_Impl_"];
lime_media_openal__$ALAuxiliaryEffectSlot_ALAuxiliaryEffectSlot_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.media.openal._ALBuffer.ALBuffer_Impl_"] = lime_media_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","media","openal","_ALBuffer","ALBuffer_Impl_"];
lime_media_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = ["lime","media","openal","ALC"];
lime_media_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.destroyContext = function(context) {
};
lime_media_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_media_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_media_openal_ALC.getError = function(device) {
	return 0;
};
lime_media_openal_ALC.getErrorString = function(device) {
	var _g = lime_media_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_media_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_media_openal_ALC.getString = function(device,param) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.pauseDevice = function(device) {
};
lime_media_openal_ALC.processContext = function(context) {
};
lime_media_openal_ALC.resumeDevice = function(device) {
};
lime_media_openal_ALC.suspendContext = function(context) {
};
var lime_media_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.media.openal._ALContext.ALContext_Impl_"] = lime_media_openal__$ALContext_ALContext_$Impl_$;
lime_media_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","media","openal","_ALContext","ALContext_Impl_"];
lime_media_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.media.openal._ALDevice.ALDevice_Impl_"] = lime_media_openal__$ALDevice_ALDevice_$Impl_$;
lime_media_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","media","openal","_ALDevice","ALDevice_Impl_"];
lime_media_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALEffect_ALEffect_$Impl_$ = {};
$hxClasses["lime.media.openal._ALEffect.ALEffect_Impl_"] = lime_media_openal__$ALEffect_ALEffect_$Impl_$;
lime_media_openal__$ALEffect_ALEffect_$Impl_$.__name__ = ["lime","media","openal","_ALEffect","ALEffect_Impl_"];
lime_media_openal__$ALEffect_ALEffect_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALFilter_ALFilter_$Impl_$ = {};
$hxClasses["lime.media.openal._ALFilter.ALFilter_Impl_"] = lime_media_openal__$ALFilter_ALFilter_$Impl_$;
lime_media_openal__$ALFilter_ALFilter_$Impl_$.__name__ = ["lime","media","openal","_ALFilter","ALFilter_Impl_"];
lime_media_openal__$ALFilter_ALFilter_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.media.openal._ALSource.ALSource_Impl_"] = lime_media_openal__$ALSource_ALSource_$Impl_$;
lime_media_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","media","openal","_ALSource","ALSource_Impl_"];
lime_media_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
var lime_media_vorbis_VorbisComment = function() {
};
$hxClasses["lime.media.vorbis.VorbisComment"] = lime_media_vorbis_VorbisComment;
lime_media_vorbis_VorbisComment.__name__ = ["lime","media","vorbis","VorbisComment"];
lime_media_vorbis_VorbisComment.prototype = {
	userComments: null
	,vendor: null
	,__class__: lime_media_vorbis_VorbisComment
};
var lime_media_vorbis_VorbisFile = function(handle) {
	this.handle = handle;
};
$hxClasses["lime.media.vorbis.VorbisFile"] = lime_media_vorbis_VorbisFile;
lime_media_vorbis_VorbisFile.__name__ = ["lime","media","vorbis","VorbisFile"];
lime_media_vorbis_VorbisFile.fromBytes = function(bytes) {
	return null;
};
lime_media_vorbis_VorbisFile.fromFile = function(path) {
	return null;
};
lime_media_vorbis_VorbisFile.prototype = {
	bitstream: null
	,handle: null
	,bitrate: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,bitrateInstant: function() {
		return 0;
	}
	,clear: function() {
	}
	,comment: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,crosslap: function(other) {
		return 0;
	}
	,info: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return null;
	}
	,pcmSeek: function(pos) {
		return 0;
	}
	,pcmSeekLap: function(pos) {
		return 0;
	}
	,pcmSeekPage: function(pos) {
		return 0;
	}
	,pcmSeekPageLap: function(pos) {
		return 0;
	}
	,pcmTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,pcmTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawSeek: function(pos) {
		return 0;
	}
	,rawSeekLap: function(pos) {
		return 0;
	}
	,rawTell: function() {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,rawTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,read: function(buffer,position,length,bigEndianPacking,wordSize,signed) {
		if(signed == null) {
			signed = true;
		}
		if(wordSize == null) {
			wordSize = 2;
		}
		if(bigEndianPacking == null) {
			bigEndianPacking = false;
		}
		if(length == null) {
			length = 4096;
		}
		return 0;
	}
	,readFloat: function(pcmChannels,samples) {
		return 0;
	}
	,seekable: function() {
		return false;
	}
	,serialNumber: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,streams: function() {
		return 0;
	}
	,timeSeek: function(s) {
		return 0;
	}
	,timeSeekLap: function(s) {
		return 0;
	}
	,timeSeekPage: function(s) {
		return 0;
	}
	,timeSeekPageLap: function(s) {
		return 0;
	}
	,timeTell: function() {
		return 0;
	}
	,timeTotal: function(bitstream) {
		if(bitstream == null) {
			bitstream = -1;
		}
		return 0;
	}
	,__class__: lime_media_vorbis_VorbisFile
};
var lime_media_vorbis_VorbisInfo = function() {
};
$hxClasses["lime.media.vorbis.VorbisInfo"] = lime_media_vorbis_VorbisInfo;
lime_media_vorbis_VorbisInfo.__name__ = ["lime","media","vorbis","VorbisInfo"];
lime_media_vorbis_VorbisInfo.prototype = {
	bitrateLower: null
	,bitrateNominal: null
	,bitrateUpper: null
	,channels: null
	,rate: null
	,version: null
	,__class__: lime_media_vorbis_VorbisInfo
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__backend: null
	,cancel: function() {
		this.__backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$text_$Font = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_text_Font"] = lime_net__$HTTPRequest_$lime_$text_$Font;
lime_net__$HTTPRequest_$lime_$text_$Font.__name__ = ["lime","net","_HTTPRequest_lime_text_Font"];
lime_net__$HTTPRequest_$lime_$text_$Font.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$text_$Font.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_text_Font.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$text_$Font
});
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	var this1 = handle;
	return this1;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	var tmp = this1 != null;
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_JNI = function() { };
$hxClasses["lime.system.JNI"] = lime_system_JNI;
lime_system_JNI.__name__ = ["lime","system","JNI"];
lime_system_JNI.callMember = function(method,jobject,a) {
	var _g = a.length;
	switch(_g) {
	case 0:
		return method(jobject);
	case 1:
		return method(jobject,a[0]);
	case 2:
		return method(jobject,a[0],a[1]);
	case 3:
		return method(jobject,a[0],a[1],a[2]);
	case 4:
		return method(jobject,a[0],a[1],a[2],a[3]);
	case 5:
		return method(jobject,a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(jobject,a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.callStatic = function(method,a) {
	var _g = a.length;
	switch(_g) {
	case 0:
		return method();
	case 1:
		return method(a[0]);
	case 2:
		return method(a[0],a[1]);
	case 3:
		return method(a[0],a[1],a[2]);
	case 4:
		return method(a[0],a[1],a[2],a[3]);
	case 5:
		return method(a[0],a[1],a[2],a[3],a[4]);
	case 6:
		return method(a[0],a[1],a[2],a[3],a[4],a[5]);
	case 7:
		return method(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);
	default:
		return null;
	}
};
lime_system_JNI.createMemberField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createMemberMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticField = function(className,memberName,signature) {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.createStaticMethod = function(className,memberName,signature,useArray,quietFail) {
	if(quietFail == null) {
		quietFail = false;
	}
	if(useArray == null) {
		useArray = false;
	}
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.getEnv = function() {
	lime_system_JNI.init();
	return null;
};
lime_system_JNI.init = function() {
	if(!lime_system_JNI.initialized) {
		lime_system_JNI.initialized = true;
	}
};
lime_system_JNI.onCallback = function(object,method,args) {
	var field = Reflect.field(object,method);
	if(field != null) {
		if(args == null) {
			args = [];
		}
		return field.apply(object,args);
	}
	haxe_Log.trace("onCallback - unknown field " + method,{ fileName : "JNI.hx", lineNumber : 184, className : "lime.system.JNI", methodName : "onCallback"});
	return null;
};
lime_system_JNI.postUICallback = function(callback) {
	callback();
};
var lime_system_JNIMemberField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIMemberField"] = lime_system_JNIMemberField;
lime_system_JNIMemberField.__name__ = ["lime","system","JNIMemberField"];
lime_system_JNIMemberField.prototype = {
	field: null
	,get: function(jobject) {
		return null;
	}
	,set: function(jobject,value) {
		return value;
	}
	,__class__: lime_system_JNIMemberField
};
var lime_system_JNIStaticField = function(field) {
	this.field = field;
};
$hxClasses["lime.system.JNIStaticField"] = lime_system_JNIStaticField;
lime_system_JNIStaticField.__name__ = ["lime","system","JNIStaticField"];
lime_system_JNIStaticField.prototype = {
	field: null
	,get: function() {
		return null;
	}
	,set: function(value) {
		return value;
	}
	,__class__: lime_system_JNIStaticField
};
var lime_system_JNIMethod = function(method) {
	this.method = method;
};
$hxClasses["lime.system.JNIMethod"] = lime_system_JNIMethod;
lime_system_JNIMethod.__name__ = ["lime","system","JNIMethod"];
lime_system_JNIMethod.prototype = {
	method: null
	,callMember: function(args) {
		return null;
	}
	,callStatic: function(args) {
		return null;
	}
	,getMemberMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callMember);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callMember));
		}
	}
	,getStaticMethod: function(useArray) {
		if(useArray) {
			return $bind(this,this.callStatic);
		} else {
			return Reflect.makeVarArgs($bind(this,this.callStatic));
		}
	}
	,__class__: lime_system_JNIMethod
};
var lime_system__$Locale_Locale_$Impl_$ = {};
$hxClasses["lime.system._Locale.Locale_Impl_"] = lime_system__$Locale_Locale_$Impl_$;
lime_system__$Locale_Locale_$Impl_$.__name__ = ["lime","system","_Locale","Locale_Impl_"];
lime_system__$Locale_Locale_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.equals = function(a,b) {
	var language = lime_system__$Locale_Locale_$Impl_$.get_language(a);
	var region = lime_system__$Locale_Locale_$Impl_$.get_region(a);
	var language2 = lime_system__$Locale_Locale_$Impl_$.get_language(b);
	var region2 = lime_system__$Locale_Locale_$Impl_$.get_region(b);
	var languageMatch = language == language2;
	var regionMatch = region == region2;
	if(!languageMatch && language != null && language2 != null) {
		languageMatch = language.toLowerCase() == language2.toLowerCase();
	}
	if(!regionMatch && region != null && region2 != null) {
		regionMatch = region.toLowerCase() == region2.toLowerCase();
	}
	if(languageMatch) {
		return regionMatch;
	} else {
		return false;
	}
};
lime_system__$Locale_Locale_$Impl_$.__init = function() {
	if(lime_system__$Locale_Locale_$Impl_$.__systemLocale == null) {
		var locale = null;
		locale = navigator.language;
		if(locale != null) {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = locale;
		} else {
			lime_system__$Locale_Locale_$Impl_$.__systemLocale = "en-US";
		}
		lime_system__$Locale_Locale_$Impl_$.set_currentLocale(lime_system__$Locale_Locale_$Impl_$.__systemLocale);
	}
};
lime_system__$Locale_Locale_$Impl_$.get_language = function(this1) {
	if(this1 != null) {
		var index = this1.indexOf("_");
		if(index > -1) {
			var dashIndex = this1.indexOf("-");
			if(dashIndex > -1 && dashIndex < index) {
				index = dashIndex;
			}
			return this1.substring(0,index);
		}
		index = this1.indexOf("-");
		if(index > -1) {
			return this1.substring(0,index);
		}
	}
	return this1;
};
lime_system__$Locale_Locale_$Impl_$.get_region = function(this1) {
	if(this1 != null) {
		var underscoreIndex = this1.indexOf("_");
		var dotIndex = this1.indexOf(".");
		var dashIndex = this1.indexOf("-");
		if(underscoreIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(underscoreIndex + 1,dotIndex);
			} else {
				return this1.substring(underscoreIndex + 1);
			}
		} else if(dashIndex > -1) {
			if(dotIndex > -1) {
				return this1.substring(dashIndex + 1,dotIndex);
			} else {
				return this1.substring(dashIndex + 1);
			}
		}
	}
	return null;
};
lime_system__$Locale_Locale_$Impl_$.get_currentLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale;
};
lime_system__$Locale_Locale_$Impl_$.set_currentLocale = function(value) {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.currentLocale = value;
};
lime_system__$Locale_Locale_$Impl_$.get_systemLocale = function() {
	lime_system__$Locale_Locale_$Impl_$.__init();
	return lime_system__$Locale_Locale_$Impl_$.__systemLocale;
};
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = ["lime","system","Sensor"];
lime_system_Sensor.getSensors = function(type) {
	if(type == null) {
		return lime_system_Sensor.sensors.slice();
	} else {
		var result = [];
		var _g = 0;
		var _g1 = lime_system_Sensor.sensors;
		while(_g < _g1.length) {
			var sensor = _g1[_g];
			++_g;
			if(sensor.type == type) {
				result.push(sensor);
			}
		}
		return result;
	}
};
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	id: null
	,onUpdate: null
	,type: null
	,__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxClasses["lime.system.SensorType"] = { __ename__ : ["lime","system","SensorType"], __constructs__ : ["ACCELEROMETER"] };
lime_system_SensorType.ACCELEROMETER = ["ACCELEROMETER",0];
lime_system_SensorType.ACCELEROMETER.toString = $estr;
lime_system_SensorType.ACCELEROMETER.__enum__ = lime_system_SensorType;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null ? _this.existsReserved(projectName) : _this.h.hasOwnProperty(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		var _this1 = lime_system_System.__applicationEntryPoint;
		(__map_reserved[projectName] != null ? _this1.getReserved(projectName) : _this1.h[projectName])(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96 * window.devicePixelRatio;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) {
		window.open(path,"_blank");
	}
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__copyMissingFields = function(target,source) {
	if(source == null || target == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(source);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(!Object.prototype.hasOwnProperty.call(target,field)) {
			target[field] = Reflect.field(source,field);
		}
	}
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.__parseBool = function(value) {
	return value == "true";
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	var _this = lime_system_System.__applicationEntryPoint;
	if(__map_reserved[projectName] != null) {
		_this.setReserved(projectName,entryPoint);
	} else {
		_this.h[projectName] = entryPoint;
	}
};
lime_system_System.__runProcess = function(command,args) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	if(lime_system_System.__applicationDirectory == null) {
		lime_system_System.__applicationDirectory = lime_system_System.__getDirectory(0);
	}
	return lime_system_System.__applicationDirectory;
};
lime_system_System.get_applicationStorageDirectory = function() {
	if(lime_system_System.__applicationStorageDirectory == null) {
		lime_system_System.__applicationStorageDirectory = lime_system_System.__getDirectory(1);
	}
	return lime_system_System.__applicationStorageDirectory;
};
lime_system_System.get_deviceModel = function() {
	var tmp = lime_system_System.__deviceModel == null;
	return lime_system_System.__deviceModel;
};
lime_system_System.get_deviceVendor = function() {
	var tmp = lime_system_System.__deviceVendor == null;
	return lime_system_System.__deviceVendor;
};
lime_system_System.get_desktopDirectory = function() {
	if(lime_system_System.__desktopDirectory == null) {
		lime_system_System.__desktopDirectory = lime_system_System.__getDirectory(2);
	}
	return lime_system_System.__desktopDirectory;
};
lime_system_System.get_documentsDirectory = function() {
	if(lime_system_System.__documentsDirectory == null) {
		lime_system_System.__documentsDirectory = lime_system_System.__getDirectory(3);
	}
	return lime_system_System.__documentsDirectory;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var this1;
		if(arrayBuffer != null) {
			this1 = new Uint8Array(arrayBuffer,0);
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var this2;
		if(arrayBuffer != null) {
			this2 = new Uint16Array(arrayBuffer,0);
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
lime_system_System.get_fontsDirectory = function() {
	if(lime_system_System.__fontsDirectory == null) {
		lime_system_System.__fontsDirectory = lime_system_System.__getDirectory(4);
	}
	return lime_system_System.__fontsDirectory;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_platformLabel = function() {
	if(lime_system_System.__platformLabel == null) {
		var name = lime_system_System.get_platformName();
		var version = lime_system_System.get_platformVersion();
		if(name != null && version != null) {
			lime_system_System.__platformLabel = name + " " + version;
		} else if(name != null) {
			lime_system_System.__platformLabel = name;
		}
	}
	return lime_system_System.__platformLabel;
};
lime_system_System.get_platformName = function() {
	if(lime_system_System.__platformName == null) {
		lime_system_System.__platformName = "HTML5";
	}
	return lime_system_System.__platformName;
};
lime_system_System.get_platformVersion = function() {
	var tmp = lime_system_System.__platformVersion == null;
	return lime_system_System.__platformVersion;
};
lime_system_System.get_userDirectory = function() {
	if(lime_system_System.__userDirectory == null) {
		lime_system_System.__userDirectory = lime_system_System.__getDirectory(5);
	}
	return lime_system_System.__userDirectory;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onProgress = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = window.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 549, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 585, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	var this1 = i;
	return this1;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$._new = function(str) {
	var this1 = new String(str);
	return this1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this5 = this1;
	var this6 = this5;
	var this7 = this6;
	var c2 = this7.charCodeAt(i);
	var this8 = HxOverrides.substr(this7,i,!(55296 <= c2 && c2 <= 56319) ? 1 : 2);
	var this9 = this8;
	return this9;
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	var tmp;
	if(index >= 0) {
		var this2 = this1;
		var this3 = this2;
		tmp = index >= lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this3,0,this1.length);
	} else {
		tmp = true;
	}
	if(tmp) {
		return null;
	}
	var this4 = this1;
	var this5 = this4;
	var this6 = this5;
	var i;
	if(index >= 0) {
		var index1 = 0;
		var len = this6.length;
		var i1 = 0;
		while(i1 < index && index1 < len) {
			var c = this6.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i1;
		}
		i = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -index && 0 < index2) {
			var c1 = this6.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		i = index2;
	}
	var this7 = this1;
	var this8 = this7;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this8,i);
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCode = function(code) {
	if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodePoint(code));
	}
	var this1 = code;
	var this2 = this1;
	var this3;
	if(this2 <= 65535) {
		var this4 = String.fromCharCode(this2);
		var this5 = this4;
		this3 = this5;
	} else {
		var this6 = String.fromCharCode((this2 >> 10) + 55232) + String.fromCharCode(this2 & 1023 | 56320);
		var this7 = this6;
		this3 = this7;
	}
	return this3;
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromCharCodes = function(codes) {
	var s = "";
	var _g = 0;
	while(_g < codes.length) {
		var code = codes[_g];
		++_g;
		if(!(0 <= code && code <= 1114111 && !(55296 <= code && code <= 56319) && !(56320 <= code && code <= 57343))) {
			throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodePoint(code));
		}
		var this1 = code;
		var b = this1;
		var this2;
		if(b <= 65535) {
			var this3 = String.fromCharCode(b);
			var this4 = this3;
			this2 = this4;
		} else {
			var this5 = String.fromCharCode((b >> 10) + 55232) + String.fromCharCode(b & 1023 | 56320);
			var this6 = this5;
			this2 = this6;
		}
		s += this2;
	}
	return s;
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var index;
	if(startIndex >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i = 0;
		while(i < startIndex && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = this1.indexOf(str,index);
	if(index3 >= 0) {
		var this5 = this1;
		var this6 = this5;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this6,0,index3);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.lastIndexOf = function(this1,str,startIndex) {
	var startIndex1 = startIndex;
	if(startIndex1 == null) {
		startIndex1 = this1.length - 1;
	}
	var this2 = this1;
	var this3 = this2;
	var this4 = this3;
	var index;
	if(startIndex1 >= 0) {
		var index1 = 0;
		var len = this4.length;
		var i = 0;
		while(i < startIndex1 && index1 < len) {
			var c = this4.charCodeAt(index1);
			index1 += !(55296 <= c && c <= 56319) ? 1 : 2;
			++i;
		}
		index = index1;
	} else {
		var index2 = 0;
		var count = 0;
		while(count < -startIndex1 && 0 < index2) {
			var c1 = this4.charCodeAt(index2 - 1);
			index2 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
			++count;
		}
		index = index2;
	}
	var index3 = this1.lastIndexOf(str,index);
	if(index3 >= 0) {
		var this5 = this1;
		var this6 = this5;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this6,0,index3);
	} else {
		return -1;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.split = function(this1,delimiter) {
	if(delimiter.length == 0) {
		var _g = [];
		var _g1_string;
		var _g1_index;
		var _g1_i;
		var _g1_endIndex;
		_g1_i = 0;
		_g1_string = this1;
		_g1_index = 0;
		_g1_endIndex = this1.length;
		while(_g1_index < _g1_endIndex) {
			_g1_i = _g1_index;
			var this2 = _g1_string;
			var this3 = this2;
			var c = this3.charCodeAt(_g1_index);
			_g1_index += !(55296 <= c && c <= 56319) ? 1 : 2;
			var i = _g1_i;
			var this4 = this1;
			var this5 = this4;
			var this6 = this5;
			var c1 = this6.charCodeAt(i);
			var this7 = HxOverrides.substr(this6,i,!(55296 <= c1 && c1 <= 56319) ? 1 : 2);
			var this8 = this7;
			_g.push(this8);
		}
		return _g;
	} else {
		return this1.split(delimiter);
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	if(len == null) {
		len = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this1) - pos;
	}
	return HxOverrides.substr(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	var si;
	if(startIndex < 0) {
		si = 0;
	} else {
		var this2 = this1;
		var this3 = this2;
		var this4 = this3;
		if(startIndex >= 0) {
			var index = 0;
			var len = this4.length;
			var i = 0;
			while(i < startIndex && index < len) {
				var c = this4.charCodeAt(index);
				index += !(55296 <= c && c <= 56319) ? 1 : 2;
				++i;
			}
			si = index;
		} else {
			var index1 = 0;
			var count = 0;
			while(count < -startIndex && 0 < index1) {
				var c1 = this4.charCodeAt(index1 - 1);
				index1 -= !(56320 <= c1 && c1 <= 57343) ? 1 : 2;
				++count;
			}
			si = index1;
		}
	}
	var ei;
	if(endIndex == null) {
		ei = this1.length;
	} else if(endIndex < 0) {
		ei = 0;
	} else {
		var this5 = this1;
		var this6 = this5;
		var this7 = this6;
		if(endIndex >= 0) {
			var index2 = 0;
			var len1 = this7.length;
			var i1 = 0;
			while(i1 < endIndex && index2 < len1) {
				var c2 = this7.charCodeAt(index2);
				index2 += !(55296 <= c2 && c2 <= 56319) ? 1 : 2;
				++i1;
			}
			ei = index2;
		} else {
			var index3 = 0;
			var count1 = 0;
			while(count1 < -endIndex && 0 < index3) {
				var c3 = this7.charCodeAt(index3 - 1);
				index3 -= !(56320 <= c3 && c3 <= 57343) ? 1 : 2;
				++count1;
			}
			ei = index3;
		}
	}
	return this1.substring(si,ei);
};
lime_text__$UTF8String_UTF8String_$Impl_$.toLowerCase = function(this1,locale) {
	return this1.toLowerCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.toLowerCaseLocaleFixes = function(v,locale) {
	var _g = lime_system__$Locale_Locale_$Impl_$.get_language(locale);
	if(_g == "tr") {
		if(v == 50352) {
			return 105;
		} else {
			return v;
		}
	} else {
		return v;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.toString = function(this1) {
	return this1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.toUpperCase = function(this1,locale) {
	return this1.toUpperCase();
};
lime_text__$UTF8String_UTF8String_$Impl_$.toUpperCaseLocaleFixes = function(v,locale) {
	var _g = lime_system__$Locale_Locale_$Impl_$.get_language(locale);
	if(_g == "tr") {
		if(v == 105) {
			return 50352;
		} else {
			return v;
		}
	} else {
		return v;
	}
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lt = function(a,b) {
	if(b == null) {
		return false;
	}
	if(a == null) {
		return true;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) == -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gt = function(a,b) {
	if(a == null) {
		return false;
	}
	if(b == null) {
		return true;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) == 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.lteq = function(a,b) {
	if(b == null) {
		return a == null;
	}
	if(a == null) {
		return true;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) != 1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.gteq = function(a,b) {
	if(a == null) {
		return b == null;
	}
	if(b == null) {
		return true;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) != -1;
};
lime_text__$UTF8String_UTF8String_$Impl_$.plus = function(a,b) {
	if(a == null && b == null) {
		return null;
	}
	if(a == null) {
		return b;
	}
	if(b == null) {
		return a;
	}
	var sb_b = "";
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(a));
	sb_b += Std.string(lime_text__$UTF8String_UTF8String_$Impl_$.toString(b));
	return sb_b;
};
lime_text__$UTF8String_UTF8String_$Impl_$.fromDynamic = function(value) {
	return Std.string(value);
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		var this2 = this1;
		var this3 = this2;
		return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this3,0,this1.length);
	}
};
var lime_text__$UTF8String_Utf8Ext = function() { };
$hxClasses["lime.text._UTF8String.Utf8Ext"] = lime_text__$UTF8String_Utf8Ext;
lime_text__$UTF8String_Utf8Ext.__name__ = ["lime","text","_UTF8String","Utf8Ext"];
lime_text__$UTF8String_Utf8Ext.fillUpperToLowerMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 97 + i1;
		map.h[65 + i1] = v;
	}
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 224 + i2;
		map.h[192 + i2] = v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 248 + i3;
		map.h[216 + i3] = v2;
	}
	while(i < 48) {
		var v3 = 257 + i;
		map.h[256 + i] = v3;
		i += 2;
	}
	i = 0;
	map.h[304] = 105;
	while(i < 6) {
		var v4 = 307 + i;
		map.h[306 + i] = v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 314 + i;
		map.h[313 + i] = v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 331 + i;
		map.h[330 + i] = v6;
		i += 2;
	}
	i = 0;
	map.h[376] = 255;
	while(i < 6) {
		var v7 = 378 + i;
		map.h[377 + i] = v7;
		i += 2;
	}
	i = 0;
	map.h[385] = 595;
	while(i < 4) {
		var v8 = 387 + i;
		map.h[386 + i] = v8;
		i += 2;
	}
	i = 0;
	map.h[390] = 596;
	map.h[391] = 392;
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v9 = 598 + i4;
		map.h[393 + i4] = v9;
	}
	map.h[395] = 396;
	map.h[398] = 477;
	map.h[399] = 601;
	map.h[400] = 603;
	map.h[401] = 402;
	map.h[403] = 608;
	map.h[404] = 611;
	map.h[406] = 617;
	map.h[407] = 616;
	map.h[408] = 409;
	map.h[412] = 623;
	map.h[413] = 626;
	map.h[415] = 629;
	while(i < 6) {
		var v10 = 417 + i;
		map.h[416 + i] = v10;
		i += 2;
	}
	i = 0;
	map.h[422] = 640;
	map.h[423] = 424;
	map.h[425] = 643;
	map.h[428] = 429;
	map.h[430] = 648;
	map.h[431] = 432;
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v11 = 650 + i5;
		map.h[433 + i5] = v11;
	}
	while(i < 4) {
		var v12 = 436 + i;
		map.h[435 + i] = v12;
		i += 2;
	}
	i = 0;
	map.h[439] = 658;
	map.h[440] = 441;
	map.h[444] = 445;
	map.h[452] = 454;
	map.h[455] = 457;
	map.h[458] = 460;
	while(i < 16) {
		var v13 = 462 + i;
		map.h[461 + i] = v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 479 + i;
		map.h[478 + i] = v14;
		i += 2;
	}
	i = 0;
	map.h[497] = 499;
	map.h[500] = 501;
	map.h[502] = 405;
	map.h[503] = 447;
	while(i < 40) {
		var v15 = 505 + i;
		map.h[504 + i] = v15;
		i += 2;
	}
	i = 0;
	map.h[544] = 414;
	while(i < 18) {
		var v16 = 547 + i;
		map.h[546 + i] = v16;
		i += 2;
	}
	i = 0;
	map.h[570] = 11365;
	map.h[571] = 572;
	map.h[573] = 410;
	map.h[574] = 11366;
	map.h[577] = 578;
	map.h[579] = 384;
	map.h[580] = 649;
	map.h[581] = 652;
	while(i < 10) {
		var v17 = 583 + i;
		map.h[582 + i] = v17;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v18 = 881 + i;
		map.h[880 + i] = v18;
		i += 2;
	}
	i = 0;
	map.h[886] = 887;
	map.h[895] = 1011;
	map.h[902] = 940;
	var _g5 = 0;
	while(_g5 < 3) {
		var i6 = _g5++;
		var v19 = 941 + i6;
		map.h[904 + i6] = v19;
	}
	map.h[908] = 972;
	var _g6 = 0;
	while(_g6 < 2) {
		var i7 = _g6++;
		var v20 = 973 + i7;
		map.h[910 + i7] = v20;
	}
	var _g7 = 0;
	while(_g7 < 17) {
		var i8 = _g7++;
		var v21 = 945 + i8;
		map.h[913 + i8] = v21;
	}
	var _g8 = 0;
	while(_g8 < 9) {
		var i9 = _g8++;
		var v22 = 963 + i9;
		map.h[931 + i9] = v22;
	}
	map.h[975] = 983;
	while(i < 24) {
		var v23 = 985 + i;
		map.h[984 + i] = v23;
		i += 2;
	}
	i = 0;
	map.h[1012] = 952;
	map.h[1015] = 1016;
	map.h[1017] = 1010;
	map.h[1018] = 1019;
	var _g9 = 0;
	while(_g9 < 3) {
		var i10 = _g9++;
		var v24 = 891 + i10;
		map.h[1021 + i10] = v24;
	}
	var _g10 = 0;
	while(_g10 < 16) {
		var i11 = _g10++;
		var v25 = 1104 + i11;
		map.h[1024 + i11] = v25;
	}
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1072 + i12;
		map.h[1040 + i12] = v26;
	}
	while(i < 34) {
		var v27 = 1121 + i;
		map.h[1120 + i] = v27;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v28 = 1163 + i;
		map.h[1162 + i] = v28;
		i += 2;
	}
	i = 0;
	map.h[1216] = 1231;
	while(i < 14) {
		var v29 = 1218 + i;
		map.h[1217 + i] = v29;
		i += 2;
	}
	i = 0;
	while(i < 96) {
		var v30 = 1233 + i;
		map.h[1232 + i] = v30;
		i += 2;
	}
	i = 0;
	var _g12 = 0;
	while(_g12 < 38) {
		var i13 = _g12++;
		var v31 = 1377 + i13;
		map.h[1329 + i13] = v31;
	}
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 11520 + i14;
		map.h[4256 + i14] = v32;
	}
	map.h[4295] = 11559;
	map.h[4301] = 11565;
	var _g14 = 0;
	while(_g14 < 80) {
		var i15 = _g14++;
		var v33 = 43888 + i15;
		map.h[5024 + i15] = v33;
	}
	var _g15 = 0;
	while(_g15 < 6) {
		var i16 = _g15++;
		var v34 = 5112 + i16;
		map.h[5104 + i16] = v34;
	}
	while(i < 150) {
		var v35 = 7681 + i;
		map.h[7680 + i] = v35;
		i += 2;
	}
	i = 0;
	map.h[7838] = 223;
	while(i < 96) {
		var v36 = 7841 + i;
		map.h[7840 + i] = v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7936 + i17;
		map.h[7944 + i17] = v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7952 + i18;
		map.h[7960 + i18] = v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7968 + i19;
		map.h[7976 + i19] = v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7984 + i20;
		map.h[7992 + i20] = v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8000 + i21;
		map.h[8008 + i21] = v41;
	}
	while(i < 8) {
		var v42 = 8017 + i;
		map.h[8025 + i] = v42;
		i += 2;
	}
	i = 0;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v43 = 8032 + i22;
		map.h[8040 + i22] = v43;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v44 = 8112 + i23;
		map.h[8120 + i23] = v44;
	}
	var _g23 = 0;
	while(_g23 < 2) {
		var i24 = _g23++;
		var v45 = 8048 + i24;
		map.h[8122 + i24] = v45;
	}
	var _g24 = 0;
	while(_g24 < 4) {
		var i25 = _g24++;
		var v46 = 8050 + i25;
		map.h[8136 + i25] = v46;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v47 = 8144 + i26;
		map.h[8152 + i26] = v47;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v48 = 8054 + i27;
		map.h[8154 + i27] = v48;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v49 = 8160 + i28;
		map.h[8168 + i28] = v49;
	}
	var _g28 = 0;
	while(_g28 < 2) {
		var i29 = _g28++;
		var v50 = 8058 + i29;
		map.h[8170 + i29] = v50;
	}
	map.h[8172] = 8165;
	var _g29 = 0;
	while(_g29 < 2) {
		var i30 = _g29++;
		var v51 = 8056 + i30;
		map.h[8184 + i30] = v51;
	}
	var _g30 = 0;
	while(_g30 < 2) {
		var i31 = _g30++;
		var v52 = 8060 + i31;
		map.h[8186 + i31] = v52;
	}
	map.h[8486] = 969;
	map.h[8490] = 107;
	map.h[8491] = 229;
	map.h[8498] = 8526;
	map.h[8579] = 8580;
	var _g31 = 0;
	while(_g31 < 47) {
		var i32 = _g31++;
		var v53 = 11312 + i32;
		map.h[11264 + i32] = v53;
	}
	map.h[11360] = 11361;
	map.h[11362] = 619;
	map.h[11363] = 7549;
	map.h[11364] = 637;
	while(i < 6) {
		var v54 = 11368 + i;
		map.h[11367 + i] = v54;
		i += 2;
	}
	i = 0;
	map.h[11373] = 593;
	map.h[11374] = 625;
	map.h[11375] = 592;
	map.h[11376] = 594;
	map.h[11378] = 11379;
	map.h[11381] = 11382;
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v55 = 575 + i33;
		map.h[11390 + i33] = v55;
	}
	while(i < 100) {
		var v56 = 11393 + i;
		map.h[11392 + i] = v56;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v57 = 11500 + i;
		map.h[11499 + i] = v57;
		i += 2;
	}
	i = 0;
	map.h[11506] = 11507;
	while(i < 46) {
		var v58 = 42561 + i;
		map.h[42560 + i] = v58;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v59 = 42625 + i;
		map.h[42624 + i] = v59;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v60 = 42787 + i;
		map.h[42786 + i] = v60;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v61 = 42803 + i;
		map.h[42802 + i] = v61;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v62 = 42874 + i;
		map.h[42873 + i] = v62;
		i += 2;
	}
	i = 0;
	map.h[42877] = 7545;
	while(i < 10) {
		var v63 = 42879 + i;
		map.h[42878 + i] = v63;
		i += 2;
	}
	i = 0;
	map.h[42891] = 42892;
	map.h[42893] = 613;
	while(i < 4) {
		var v64 = 42897 + i;
		map.h[42896 + i] = v64;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v65 = 42903 + i;
		map.h[42902 + i] = v65;
		i += 2;
	}
	i = 0;
	map.h[42922] = 614;
	map.h[42923] = 604;
	map.h[42924] = 609;
	map.h[42925] = 620;
	map.h[42926] = 618;
	map.h[42928] = 670;
	map.h[42929] = 647;
	map.h[42930] = 669;
	map.h[42931] = 43859;
	while(i < 4) {
		var v66 = 42933 + i;
		map.h[42932 + i] = v66;
		i += 2;
	}
	i = 0;
	var _g33 = 0;
	while(_g33 < 26) {
		var i34 = _g33++;
		var v67 = 65345 + i34;
		map.h[65313 + i34] = v67;
	}
	var _g34 = 0;
	while(_g34 < 40) {
		var i35 = _g34++;
		var v68 = 66600 + i35;
		map.h[66560 + i35] = v68;
	}
	var _g35 = 0;
	while(_g35 < 36) {
		var i36 = _g35++;
		var v69 = 66776 + i36;
		map.h[66736 + i36] = v69;
	}
	var _g36 = 0;
	while(_g36 < 51) {
		var i37 = _g36++;
		var v70 = 68800 + i37;
		map.h[68736 + i37] = v70;
	}
	var _g37 = 0;
	while(_g37 < 32) {
		var i38 = _g37++;
		var v71 = 71872 + i38;
		map.h[71840 + i38] = v71;
	}
	var _g38 = 0;
	while(_g38 < 34) {
		var i39 = _g38++;
		var v72 = 125218 + i39;
		map.h[125184 + i39] = v72;
	}
};
lime_text__$UTF8String_Utf8Ext.fillLowerToUpperMap = function(map) {
	var i = 0;
	var _g = 0;
	while(_g < 26) {
		var i1 = _g++;
		var v = 65 + i1;
		map.h[97 + i1] = v;
	}
	map.h[181] = 924;
	var _g1 = 0;
	while(_g1 < 23) {
		var i2 = _g1++;
		var v1 = 192 + i2;
		map.h[224 + i2] = v1;
	}
	var _g2 = 0;
	while(_g2 < 7) {
		var i3 = _g2++;
		var v2 = 216 + i3;
		map.h[248 + i3] = v2;
	}
	map.h[255] = 376;
	while(i < 48) {
		var v3 = 256 + i;
		map.h[257 + i] = v3;
		i += 2;
	}
	i = 0;
	map.h[305] = 73;
	while(i < 6) {
		var v4 = 306 + i;
		map.h[307 + i] = v4;
		i += 2;
	}
	i = 0;
	while(i < 16) {
		var v5 = 313 + i;
		map.h[314 + i] = v5;
		i += 2;
	}
	i = 0;
	while(i < 46) {
		var v6 = 330 + i;
		map.h[331 + i] = v6;
		i += 2;
	}
	i = 0;
	while(i < 6) {
		var v7 = 377 + i;
		map.h[378 + i] = v7;
		i += 2;
	}
	i = 0;
	map.h[383] = 83;
	map.h[384] = 579;
	while(i < 4) {
		var v8 = 386 + i;
		map.h[387 + i] = v8;
		i += 2;
	}
	i = 0;
	map.h[392] = 391;
	map.h[396] = 395;
	map.h[402] = 401;
	map.h[405] = 502;
	map.h[409] = 408;
	map.h[410] = 573;
	map.h[414] = 544;
	while(i < 6) {
		var v9 = 416 + i;
		map.h[417 + i] = v9;
		i += 2;
	}
	i = 0;
	map.h[424] = 423;
	map.h[429] = 428;
	map.h[432] = 431;
	while(i < 4) {
		var v10 = 435 + i;
		map.h[436 + i] = v10;
		i += 2;
	}
	i = 0;
	map.h[441] = 440;
	map.h[445] = 444;
	map.h[447] = 503;
	map.h[454] = 452;
	map.h[457] = 455;
	map.h[460] = 458;
	while(i < 16) {
		var v11 = 461 + i;
		map.h[462 + i] = v11;
		i += 2;
	}
	i = 0;
	map.h[477] = 398;
	while(i < 18) {
		var v12 = 478 + i;
		map.h[479 + i] = v12;
		i += 2;
	}
	i = 0;
	map.h[496] = 74;
	map.h[499] = 497;
	map.h[501] = 500;
	while(i < 40) {
		var v13 = 504 + i;
		map.h[505 + i] = v13;
		i += 2;
	}
	i = 0;
	while(i < 18) {
		var v14 = 546 + i;
		map.h[547 + i] = v14;
		i += 2;
	}
	i = 0;
	map.h[572] = 571;
	var _g3 = 0;
	while(_g3 < 2) {
		var i4 = _g3++;
		var v15 = 11390 + i4;
		map.h[575 + i4] = v15;
	}
	map.h[578] = 577;
	while(i < 10) {
		var v16 = 582 + i;
		map.h[583 + i] = v16;
		i += 2;
	}
	i = 0;
	map.h[592] = 11375;
	map.h[593] = 11373;
	map.h[594] = 11376;
	map.h[595] = 385;
	map.h[596] = 390;
	var _g4 = 0;
	while(_g4 < 2) {
		var i5 = _g4++;
		var v17 = 393 + i5;
		map.h[598 + i5] = v17;
	}
	map.h[601] = 399;
	map.h[603] = 400;
	map.h[604] = 42923;
	map.h[608] = 403;
	map.h[609] = 42924;
	map.h[611] = 404;
	map.h[613] = 42893;
	map.h[614] = 42922;
	map.h[616] = 407;
	map.h[617] = 406;
	map.h[618] = 42926;
	map.h[619] = 11362;
	map.h[620] = 42925;
	map.h[623] = 412;
	map.h[625] = 11374;
	map.h[626] = 413;
	map.h[629] = 415;
	map.h[637] = 11364;
	map.h[640] = 422;
	map.h[643] = 425;
	map.h[647] = 42929;
	map.h[648] = 430;
	map.h[649] = 580;
	var _g5 = 0;
	while(_g5 < 2) {
		var i6 = _g5++;
		var v18 = 433 + i6;
		map.h[650 + i6] = v18;
	}
	map.h[652] = 581;
	map.h[658] = 439;
	map.h[669] = 42930;
	map.h[670] = 42928;
	while(i < 4) {
		var v19 = 880 + i;
		map.h[881 + i] = v19;
		i += 2;
	}
	i = 0;
	map.h[887] = 886;
	var _g6 = 0;
	while(_g6 < 3) {
		var i7 = _g6++;
		var v20 = 1021 + i7;
		map.h[891 + i7] = v20;
	}
	map.h[912] = 938;
	map.h[940] = 902;
	var _g7 = 0;
	while(_g7 < 3) {
		var i8 = _g7++;
		var v21 = 904 + i8;
		map.h[941 + i8] = v21;
	}
	map.h[944] = 939;
	var _g8 = 0;
	while(_g8 < 17) {
		var i9 = _g8++;
		var v22 = 913 + i9;
		map.h[945 + i9] = v22;
	}
	map.h[962] = 931;
	var _g9 = 0;
	while(_g9 < 9) {
		var i10 = _g9++;
		var v23 = 931 + i10;
		map.h[963 + i10] = v23;
	}
	map.h[972] = 908;
	var _g10 = 0;
	while(_g10 < 2) {
		var i11 = _g10++;
		var v24 = 910 + i11;
		map.h[973 + i11] = v24;
	}
	map.h[976] = 914;
	map.h[977] = 920;
	map.h[981] = 934;
	map.h[982] = 928;
	map.h[983] = 975;
	while(i < 24) {
		var v25 = 984 + i;
		map.h[985 + i] = v25;
		i += 2;
	}
	i = 0;
	map.h[1008] = 922;
	map.h[1009] = 929;
	map.h[1010] = 1017;
	map.h[1011] = 895;
	map.h[1013] = 917;
	map.h[1016] = 1015;
	map.h[1019] = 1018;
	var _g11 = 0;
	while(_g11 < 32) {
		var i12 = _g11++;
		var v26 = 1040 + i12;
		map.h[1072 + i12] = v26;
	}
	var _g12 = 0;
	while(_g12 < 16) {
		var i13 = _g12++;
		var v27 = 1024 + i13;
		map.h[1104 + i13] = v27;
	}
	while(i < 34) {
		var v28 = 1120 + i;
		map.h[1121 + i] = v28;
		i += 2;
	}
	i = 0;
	while(i < 54) {
		var v29 = 1162 + i;
		map.h[1163 + i] = v29;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v30 = 1217 + i;
		map.h[1218 + i] = v30;
		i += 2;
	}
	i = 0;
	map.h[1231] = 1216;
	while(i < 96) {
		var v31 = 1232 + i;
		map.h[1233 + i] = v31;
		i += 2;
	}
	i = 0;
	var _g13 = 0;
	while(_g13 < 38) {
		var i14 = _g13++;
		var v32 = 1329 + i14;
		map.h[1377 + i14] = v32;
	}
	var _g14 = 0;
	while(_g14 < 6) {
		var i15 = _g14++;
		var v33 = 5104 + i15;
		map.h[5112 + i15] = v33;
	}
	map.h[7296] = 1042;
	map.h[7297] = 1044;
	map.h[7298] = 1054;
	var _g15 = 0;
	while(_g15 < 2) {
		var i16 = _g15++;
		var v34 = 1057 + i16;
		map.h[7299 + i16] = v34;
	}
	map.h[7301] = 1058;
	map.h[7302] = 1066;
	map.h[7303] = 1122;
	map.h[7304] = 42570;
	map.h[7545] = 42877;
	map.h[7549] = 11363;
	while(i < 150) {
		var v35 = 7680 + i;
		map.h[7681 + i] = v35;
		i += 2;
	}
	i = 0;
	map.h[7830] = 72;
	map.h[7831] = 84;
	map.h[7832] = 87;
	map.h[7833] = 89;
	map.h[7835] = 7776;
	while(i < 96) {
		var v36 = 7840 + i;
		map.h[7841 + i] = v36;
		i += 2;
	}
	i = 0;
	var _g16 = 0;
	while(_g16 < 8) {
		var i17 = _g16++;
		var v37 = 7944 + i17;
		map.h[7936 + i17] = v37;
	}
	var _g17 = 0;
	while(_g17 < 6) {
		var i18 = _g17++;
		var v38 = 7960 + i18;
		map.h[7952 + i18] = v38;
	}
	var _g18 = 0;
	while(_g18 < 8) {
		var i19 = _g18++;
		var v39 = 7976 + i19;
		map.h[7968 + i19] = v39;
	}
	var _g19 = 0;
	while(_g19 < 8) {
		var i20 = _g19++;
		var v40 = 7992 + i20;
		map.h[7984 + i20] = v40;
	}
	var _g20 = 0;
	while(_g20 < 6) {
		var i21 = _g20++;
		var v41 = 8008 + i21;
		map.h[8000 + i21] = v41;
	}
	map.h[8016] = 933;
	map.h[8017] = 8025;
	map.h[8018] = 933;
	map.h[8019] = 8027;
	map.h[8020] = 933;
	map.h[8021] = 8029;
	map.h[8022] = 933;
	map.h[8023] = 8031;
	var _g21 = 0;
	while(_g21 < 8) {
		var i22 = _g21++;
		var v42 = 8040 + i22;
		map.h[8032 + i22] = v42;
	}
	var _g22 = 0;
	while(_g22 < 2) {
		var i23 = _g22++;
		var v43 = 8122 + i23;
		map.h[8048 + i23] = v43;
	}
	var _g23 = 0;
	while(_g23 < 4) {
		var i24 = _g23++;
		var v44 = 8136 + i24;
		map.h[8050 + i24] = v44;
	}
	var _g24 = 0;
	while(_g24 < 2) {
		var i25 = _g24++;
		var v45 = 8154 + i25;
		map.h[8054 + i25] = v45;
	}
	var _g25 = 0;
	while(_g25 < 2) {
		var i26 = _g25++;
		var v46 = 8184 + i26;
		map.h[8056 + i26] = v46;
	}
	var _g26 = 0;
	while(_g26 < 2) {
		var i27 = _g26++;
		var v47 = 8170 + i27;
		map.h[8058 + i27] = v47;
	}
	var _g27 = 0;
	while(_g27 < 2) {
		var i28 = _g27++;
		var v48 = 8186 + i28;
		map.h[8060 + i28] = v48;
	}
	var _g28 = 0;
	while(_g28 < 8) {
		var i29 = _g28++;
		var v49 = 8072 + i29;
		map.h[8064 + i29] = v49;
	}
	var _g29 = 0;
	while(_g29 < 8) {
		var i30 = _g29++;
		var v50 = 8088 + i30;
		map.h[8080 + i30] = v50;
	}
	var _g30 = 0;
	while(_g30 < 8) {
		var i31 = _g30++;
		var v51 = 8104 + i31;
		map.h[8096 + i31] = v51;
	}
	var _g31 = 0;
	while(_g31 < 3) {
		var i32 = _g31++;
		var v52 = 8120 + i32;
		map.h[8112 + i32] = v52;
	}
	map.h[8115] = 8124;
	map.h[8116] = 902;
	map.h[8118] = 913;
	map.h[8119] = 913;
	map.h[8126] = 921;
	map.h[8130] = 8138;
	map.h[8131] = 8140;
	map.h[8132] = 905;
	map.h[8134] = 919;
	map.h[8135] = 919;
	var _g32 = 0;
	while(_g32 < 2) {
		var i33 = _g32++;
		var v53 = 8152 + i33;
		map.h[8144 + i33] = v53;
	}
	map.h[8146] = 938;
	map.h[8147] = 938;
	map.h[8150] = 921;
	map.h[8151] = 938;
	var _g33 = 0;
	while(_g33 < 2) {
		var i34 = _g33++;
		var v54 = 8168 + i34;
		map.h[8160 + i34] = v54;
	}
	map.h[8162] = 939;
	map.h[8163] = 939;
	map.h[8164] = 929;
	map.h[8165] = 8172;
	map.h[8166] = 933;
	map.h[8167] = 939;
	map.h[8178] = 8186;
	map.h[8179] = 8188;
	map.h[8180] = 911;
	map.h[8182] = 937;
	map.h[8183] = 937;
	map.h[8526] = 8498;
	map.h[8580] = 8579;
	var _g34 = 0;
	while(_g34 < 47) {
		var i35 = _g34++;
		var v55 = 11264 + i35;
		map.h[11312 + i35] = v55;
	}
	map.h[11361] = 11360;
	map.h[11365] = 570;
	map.h[11366] = 574;
	while(i < 6) {
		var v56 = 11367 + i;
		map.h[11368 + i] = v56;
		i += 2;
	}
	i = 0;
	map.h[11379] = 11378;
	map.h[11382] = 11381;
	while(i < 100) {
		var v57 = 11392 + i;
		map.h[11393 + i] = v57;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v58 = 11499 + i;
		map.h[11500 + i] = v58;
		i += 2;
	}
	i = 0;
	map.h[11507] = 11506;
	var _g35 = 0;
	while(_g35 < 38) {
		var i36 = _g35++;
		var v59 = 4256 + i36;
		map.h[11520 + i36] = v59;
	}
	map.h[11559] = 4295;
	map.h[11565] = 4301;
	while(i < 46) {
		var v60 = 42560 + i;
		map.h[42561 + i] = v60;
		i += 2;
	}
	i = 0;
	while(i < 28) {
		var v61 = 42624 + i;
		map.h[42625 + i] = v61;
		i += 2;
	}
	i = 0;
	while(i < 14) {
		var v62 = 42786 + i;
		map.h[42787 + i] = v62;
		i += 2;
	}
	i = 0;
	while(i < 62) {
		var v63 = 42802 + i;
		map.h[42803 + i] = v63;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v64 = 42873 + i;
		map.h[42874 + i] = v64;
		i += 2;
	}
	i = 0;
	while(i < 10) {
		var v65 = 42878 + i;
		map.h[42879 + i] = v65;
		i += 2;
	}
	i = 0;
	map.h[42892] = 42891;
	while(i < 4) {
		var v66 = 42896 + i;
		map.h[42897 + i] = v66;
		i += 2;
	}
	i = 0;
	while(i < 20) {
		var v67 = 42902 + i;
		map.h[42903 + i] = v67;
		i += 2;
	}
	i = 0;
	while(i < 4) {
		var v68 = 42932 + i;
		map.h[42933 + i] = v68;
		i += 2;
	}
	i = 0;
	map.h[43859] = 42931;
	var _g36 = 0;
	while(_g36 < 80) {
		var i37 = _g36++;
		var v69 = 5024 + i37;
		map.h[43888 + i37] = v69;
	}
	var _g37 = 0;
	while(_g37 < 26) {
		var i38 = _g37++;
		var v70 = 65313 + i38;
		map.h[65345 + i38] = v70;
	}
	var _g38 = 0;
	while(_g38 < 40) {
		var i39 = _g38++;
		var v71 = 66560 + i39;
		map.h[66600 + i39] = v71;
	}
	var _g39 = 0;
	while(_g39 < 36) {
		var i40 = _g39++;
		var v72 = 66736 + i40;
		map.h[66776 + i40] = v72;
	}
	var _g40 = 0;
	while(_g40 < 51) {
		var i41 = _g40++;
		var v73 = 68736 + i41;
		map.h[68800 + i41] = v73;
	}
	var _g41 = 0;
	while(_g41 < 32) {
		var i42 = _g41++;
		var v74 = 71840 + i42;
		map.h[71872 + i42] = v74;
	}
	var _g42 = 0;
	while(_g42 < 34) {
		var i43 = _g42++;
		var v75 = 125184 + i43;
		map.h[125218 + i43] = v75;
	}
};
var lime_text_harfbuzz_HB = function() { };
$hxClasses["lime.text.harfbuzz.HB"] = lime_text_harfbuzz_HB;
lime_text_harfbuzz_HB.__name__ = ["lime","text","harfbuzz","HB"];
lime_text_harfbuzz_HB.shape = function(font,buffer,features) {
};
var lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBBlob.HBBlob_Impl_"] = lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$;
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBBlob","HBBlob_Impl_"];
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$._new = function(data,length,memoryMode) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.createSubBlob = function(this1,offset,length) {
	return null;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.makeImmutable = function(this1) {
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_data = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_dataWritable = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBBlob_HBBlob_$Impl_$.get_length = function(this1) {
	return 0;
};
var lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBBuffer.HBBuffer_Impl_"] = lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$;
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBBuffer","HBBuffer_Impl_"];
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$._new = function() {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.add = function(this1,codepoint,cluster) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addCodepoints = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF8 = function(this1,text,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF16 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.addUTF32 = function(this1,text,textLength,itemOffset,itemLength) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.clearContents = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.getGlyphInfo = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.getGlyphPositions = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.guessSegmentProperties = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.normalizeGlyphs = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.preallocate = function(this1,size) {
	return false;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reset = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reverse = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.reverseClusters = function(this1) {
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_allocationSuccessful = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_clusterLevel = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_clusterLevel = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_contentType = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_contentType = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_direction = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_direction = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_flags = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_flags = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_language = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_language = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_length = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_length = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_replacementCodepoint = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_replacementCodepoint = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_script = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_script = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.get_segmentProperties = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$.set_segmentProperties = function(this1,value) {
	return value;
};
var lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFTFont.HBFTFont_Impl_"] = lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$;
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBFTFont","HBFTFont_Impl_"];
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$._new = function(font) {
	var this1;
	if(font.src != null) {
		this1 = null;
	} else {
		this1 = null;
	}
	return this1;
};
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.get_loadFlags = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFTFont_HBFTFont_$Impl_$.set_loadFlags = function(this1,value) {
	return value;
};
var lime_text_harfbuzz__$HBFace_HBFace_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFace.HBFace_Impl_"] = lime_text_harfbuzz__$HBFace_HBFace_$Impl_$;
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBFace","HBFace_Impl_"];
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$._new = function(blob,index) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_glyphCount = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_glyphCount = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_index = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_index = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.get_upem = function(this1) {
	return 0;
};
lime_text_harfbuzz__$HBFace_HBFace_$Impl_$.set_upem = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBFeature = function() {
};
$hxClasses["lime.text.harfbuzz.HBFeature"] = lime_text_harfbuzz_HBFeature;
lime_text_harfbuzz_HBFeature.__name__ = ["lime","text","harfbuzz","HBFeature"];
lime_text_harfbuzz_HBFeature.prototype = {
	__class__: lime_text_harfbuzz_HBFeature
};
var lime_text_harfbuzz__$HBFont_HBFont_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBFont.HBFont_Impl_"] = lime_text_harfbuzz__$HBFont_HBFont_$Impl_$;
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBFont","HBFont_Impl_"];
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$._new = function(face) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.addGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.createSubFont = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphAdvanceForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphKerningForDirection = function(this1,glyph,firstGlyph,secondGlyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.getGlyphOriginForDirection = function(this1,glyph,direction) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.glyphFromString = function(this1,s) {
	return 0;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.glyphToString = function(this1,codepoint) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.makeImmutable = function(this1) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.subtractGlyphOriginForDirection = function(this1,glyph,direction,x,y) {
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_empty = function() {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_face = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_immutable = function(this1) {
	return false;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_parent = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_ppem = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.set_ppem = function(this1,value) {
	return value;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.get_scale = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBFont_HBFont_$Impl_$.set_scale = function(this1,value) {
	return value;
};
var lime_text_harfbuzz_HBGlyphInfo = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphInfo"] = lime_text_harfbuzz_HBGlyphInfo;
lime_text_harfbuzz_HBGlyphInfo.__name__ = ["lime","text","harfbuzz","HBGlyphInfo"];
lime_text_harfbuzz_HBGlyphInfo.prototype = {
	codepoint: null
	,mask: null
	,cluster: null
	,__class__: lime_text_harfbuzz_HBGlyphInfo
};
var lime_text_harfbuzz_HBGlyphPosition = function() {
};
$hxClasses["lime.text.harfbuzz.HBGlyphPosition"] = lime_text_harfbuzz_HBGlyphPosition;
lime_text_harfbuzz_HBGlyphPosition.__name__ = ["lime","text","harfbuzz","HBGlyphPosition"];
lime_text_harfbuzz_HBGlyphPosition.prototype = {
	xAdvance: null
	,xOffset: null
	,yAdvance: null
	,yOffset: null
	,__class__: lime_text_harfbuzz_HBGlyphPosition
};
var lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$ = {};
$hxClasses["lime.text.harfbuzz._HBLanguage.HBLanguage_Impl_"] = lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$;
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.__name__ = ["lime","text","harfbuzz","_HBLanguage","HBLanguage_Impl_"];
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new = function(language) {
	var this1 = null;
	return this1;
};
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.toString = function(this1) {
	return null;
};
lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$.fromString = function(value) {
	return lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new(value);
};
var lime_text_harfbuzz_HBSegmentProperties = function() {
};
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = ["lime","text","harfbuzz","HBSegmentProperties"];
lime_text_harfbuzz_HBSegmentProperties.prototype = {
	__class__: lime_text_harfbuzz_HBSegmentProperties
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435455 - 4;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435455 - 8;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435455 - 2;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435455 - 1;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode = function(scanCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode = function(keyCode) {
	return 0;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268435455 - 768;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268435455 - 8192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435455 - 192;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268435455 - 3072;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268435455 - 4096;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435455 - 3;
	}
	return value;
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_MouseWheelMode = $hxClasses["lime.ui.MouseWheelMode"] = { __ename__ : ["lime","ui","MouseWheelMode"], __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"] };
lime_ui_MouseWheelMode.PIXELS = ["PIXELS",0];
lime_ui_MouseWheelMode.PIXELS.toString = $estr;
lime_ui_MouseWheelMode.PIXELS.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.LINES = ["LINES",1];
lime_ui_MouseWheelMode.LINES.toString = $estr;
lime_ui_MouseWheelMode.LINES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.PAGES = ["PAGES",2];
lime_ui_MouseWheelMode.PAGES.toString = $estr;
lime_ui_MouseWheelMode.PAGES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.UNKNOWN = ["UNKNOWN",3];
lime_ui_MouseWheelMode.UNKNOWN.toString = $estr;
lime_ui_MouseWheelMode.UNKNOWN.__enum__ = lime_ui_MouseWheelMode;
var lime_ui__$ScanCode_ScanCode_$Impl_$ = {};
$hxClasses["lime.ui._ScanCode.ScanCode_Impl_"] = lime_ui__$ScanCode_ScanCode_$Impl_$;
lime_ui__$ScanCode_ScanCode_$Impl_$.__name__ = ["lime","ui","_ScanCode","ScanCode_Impl_"];
lime_ui__$ScanCode_ScanCode_$Impl_$.fromKeyCode = function(keyCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.toScanCode(keyCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.toKeyCode = function(scanCode) {
	return lime_ui__$KeyCode_KeyCode_$Impl_$.fromScanCode(scanCode);
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$ScanCode_ScanCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onMaximize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,context: null
	,display: null
	,element: null
	,hidden: null
	,id: null
	,onActivate: null
	,onClose: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onExpose: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMaximize: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onRender: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,parameters: null
	,scale: null
	,stage: null
	,__attributes: null
	,__backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__hidden: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.__backend.alert(message,title);
	}
	,close: function() {
		this.__backend.close();
	}
	,focus: function() {
		this.__backend.focus();
	}
	,move: function(x,y) {
		this.__backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,readPixels: function(rect) {
		return this.__backend.readPixels(rect);
	}
	,resize: function(width,height) {
		this.__backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.__backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,warpMouse: function(x,y) {
		this.__backend.warpMouse(x,y);
	}
	,get_cursor: function() {
		return this.__backend.getCursor();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_display: function() {
		return this.__backend.getDisplay();
	}
	,get_displayMode: function() {
		return this.__backend.getDisplayMode();
	}
	,set_displayMode: function(value) {
		return this.__backend.setDisplayMode(value);
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.__backend.setBorderless(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_hidden: function() {
		return this.__hidden;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.__backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.__backend.setMinimized(value);
	}
	,get_mouseLock: function() {
		return this.__backend.getMouseLock();
	}
	,set_mouseLock: function(value) {
		this.__backend.setMouseLock(value);
		return value;
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.__backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_textInputEnabled: function() {
		return this.__backend.getTextInputEnabled();
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.__backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 933530;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			var _this = this.image;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = this.font;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = this.audio;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!js_Boot.__instanceof(asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 141, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(bytes,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return lime_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
lime_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load();
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.types;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , haxe_io_Bytes));
			} else {
				var _this4 = this.paths;
				return lime_media_AudioBuffer.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.cachedText;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.cachedText;
				var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id]);
				var _this4 = this.cachedBytes;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,bytes);
				} else {
					_this4.h[id] = bytes;
				}
				return bytes;
			} else {
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null ? _this5.existsReserved(id) : _this5.h.hasOwnProperty(id)) {
					var _this6 = this.classTypes;
					return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id],[]) , haxe_io_Bytes);
				} else {
					var _this7 = this.paths;
					return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(__map_reserved[id] != null ? _this7.getReserved(id) : _this7.h[id]);
				}
			}
		}
	}
	,getFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_text_Font);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]) , lime_graphics_Image);
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.fromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,getPath: function(id) {
		var _this = this.paths;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.paths;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var _this2 = this.pathGroups;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.pathGroups;
				return (__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id])[0];
			} else {
				return null;
			}
		}
	}
	,getText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			if(__map_reserved[id] != null) {
				return _this1.getReserved(id);
			} else {
				return _this1.h[id];
			}
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		var _this = this.classTypes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		switch(requestedType) {
		case "FONT":
			return this.cachedFonts.exists(id);
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.types.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		case "TEXT":
			return this.loadText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this = this.preload;
				if(!(__map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1])) {
					continue;
				}
				var _this1 = this.types;
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + (__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 453, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedAudioBuffers;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.pathGroups;
				if(__map_reserved[id] != null ? _this4.existsReserved(id) : _this4.h.hasOwnProperty(id)) {
					var _this5 = this.pathGroups;
					return lime_media_AudioBuffer.loadFromFiles(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
				} else {
					var _this6 = this.paths;
					return lime_media_AudioBuffer.loadFromFile(__map_reserved[id] != null ? _this6.getReserved(id) : _this6.h[id]);
				}
			}
		}
	}
	,loadBytes: function(id) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedBytes;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadFont: function(id) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedFonts;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				var font = Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]);
				return font.__loadFromName(font.name);
			} else {
				var _this4 = this.paths;
				return lime_text_Font.loadFromName(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadImage: function(id) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedImages;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var _this2 = this.classTypes;
			if(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id)) {
				var _this3 = this.classTypes;
				return lime_app_Future.withValue(Type.createInstance(__map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id],[]));
			} else {
				var _this4 = this.paths;
				return lime_graphics_Image.loadFromFile(__map_reserved[id] != null ? _this4.getReserved(id) : _this4.h[id]);
			}
		}
	}
	,loadText: function(id) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.cachedText;
			return lime_app_Future.withValue(__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]);
		} else {
			var tmp;
			var _this2 = this.cachedBytes;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				var _this3 = this.classTypes;
				if(__map_reserved[id] != null) {
					tmp = _this3.existsReserved(id);
				} else {
					tmp = _this3.h.hasOwnProperty(id);
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var bytes = this.getBytes(id);
				if(bytes == null) {
					return lime_app_Future.withValue(null);
				} else {
					var text = bytes.getString(0,bytes.length);
					var _this4 = this.cachedText;
					if(__map_reserved[id] != null) {
						_this4.setReserved(id,text);
					} else {
						_this4.h[id] = text;
					}
					return lime_app_Future.withValue(text);
				}
			} else {
				var request = new lime_net__$HTTPRequest_$String();
				var _this5 = this.paths;
				return request.load(__map_reserved[id] != null ? _this5.getReserved(id) : _this5.h[id]);
			}
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			var _this = this.types;
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + (__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 699, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var _this1 = this.sizes;
			var size = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			var _this2 = this.bytesLoadedCache;
			if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
				this.bytesLoaded += size;
			} else {
				var _this3 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this3.getReserved(id) : _this3.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			var _this4 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this4.setReserved(id,size);
			} else {
				_this4.h[id] = size;
			}
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize && Object.prototype.hasOwnProperty.call(asset,"size")) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path")));
				var _this = this1;
				if(__map_reserved[id] != null) {
					_this.setReserved(id,value);
				} else {
					_this.h[id] = value;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				var _this1 = this.pathGroups;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,pathGroup);
				} else {
					_this1.h[id] = pathGroup;
				}
			}
			var _this2 = this.sizes;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,size);
			} else {
				_this2.h[id] = size;
			}
			var value1 = asset.type;
			var _this3 = this.types;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,value1);
			} else {
				_this3.h[id] = value1;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				var this2 = this.preload;
				var value2 = Reflect.field(asset,"preload");
				var _this4 = this2;
				if(__map_reserved[id] != null) {
					_this4.setReserved(id,value2);
				} else {
					_this4.h[id] = value2;
				}
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				var _this5 = this.classTypes;
				if(__map_reserved[id] != null) {
					_this5.setReserved(id,classRef);
				} else {
					_this5.h[id] = classRef;
				}
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			var tmp;
			var _this6 = this.preload;
			if(__map_reserved[id] != null ? _this6.existsReserved(id) : _this6.h.hasOwnProperty(id)) {
				var _this7 = this.preload;
				if(__map_reserved[id] != null) {
					tmp = _this7.getReserved(id);
				} else {
					tmp = _this7.h[id];
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this8 = this.sizes;
				this.bytesTotal += __map_reserved[id] != null ? _this8.getReserved(id) : _this8.h[id];
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		var _this = this.cachedAudioBuffers;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,audioBuffer);
		} else {
			_this.h[id] = audioBuffer;
		}
		var _this1 = this.pathGroups;
		if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
			var _this2 = this.pathGroups;
			var pathGroup = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					var _this3 = this.pathGroups;
					if((__map_reserved[otherID1] != null ? _this3.getReserved(otherID1) : _this3.h[otherID1]).indexOf(path) > -1) {
						var _this4 = this.cachedAudioBuffers;
						if(__map_reserved[otherID1] != null) {
							_this4.setReserved(otherID1,audioBuffer);
						} else {
							_this4.h[otherID1] = audioBuffer;
						}
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "AssetLibrary.hx", lineNumber : 872, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "AssetLibrary.hx", lineNumber : 876, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		var _this = this.cachedBytes;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bytes);
		} else {
			_this.h[id] = bytes;
		}
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		var _this = this.cachedFonts;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		var _this = this.cachedImages;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,image);
		} else {
			_this.h[id] = image;
		}
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		var _this = this.cachedText;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,text);
		} else {
			_this.h[id] = text;
		}
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var _this = this.sizes;
			var size = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			var _this1 = this.bytesLoadedCache;
			if(__map_reserved[id] != null ? _this1.existsReserved(id) : _this1.h.hasOwnProperty(id)) {
				var _this2 = this.bytesLoadedCache;
				var cache = __map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			var _this3 = this.bytesLoadedCache;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,bytesLoaded);
			} else {
				_this3.h[id] = bytesLoaded;
			}
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		manifestData.rootPath = this.rootPath;
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_utils_Assets.getPath = function(id) {
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,null)) {
			return symbol_library.getPath(symbol_symbolName);
		} else {
			lime_utils_Log.error("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 269, className : "lime.utils.Assets", methodName : "getPath"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "Assets.hx", lineNumber : 275, className : "lime.utils.Assets", methodName : "getPath"});
	}
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.hasLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.existsReserved(name);
	} else {
		return _this.h.hasOwnProperty(name);
	}
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var _this = lime_utils_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol_symbolName;
	var symbol_libraryName;
	var symbol_library;
	var colonIndex = id.indexOf(":");
	symbol_libraryName = id.substring(0,colonIndex);
	symbol_symbolName = id.substring(colonIndex + 1);
	symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	var _this = lime_utils_Assets.libraryPaths;
	if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
		var _this1 = lime_utils_Assets.libraryPaths;
		if(__map_reserved[id] != null) {
			path = _this1.getReserved(id);
		} else {
			path = _this1.h[id];
		}
		rootPath = lime_utils_Assets.defaultRootPath;
	} else {
		if(StringTools.endsWith(path,".bundle")) {
			path += "/library.json";
		}
		path = lime_utils_Assets.__cacheBreak(path);
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			var _this2 = lime_utils_Assets.libraries;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,library1);
			} else {
				_this2.h[id] = library1;
			}
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	return lime_utils_Assets.loadAsset(id,"TEXT",false);
};
lime_utils_Assets.registerLibrary = function(name,library) {
	var _this = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_utils_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	var _this2 = lime_utils_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_utils_Assets.unloadLibrary = function(name) {
	var _this = lime_utils_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$BytePointer_BytePointer_$Impl_$ = {};
$hxClasses["lime.utils._BytePointer.BytePointer_Impl_"] = lime_utils__$BytePointer_BytePointer_$Impl_$;
lime_utils__$BytePointer_BytePointer_$Impl_$.__name__ = ["lime","utils","_BytePointer","BytePointer_Impl_"];
lime_utils__$BytePointer_BytePointer_$Impl_$._new = function(bytes,offset) {
	if(offset == null) {
		offset = 0;
	}
	var this1 = new lime_utils_BytePointerData(bytes,offset);
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.set = function(this1,bytes,bufferView,buffer,offset) {
	if(buffer != null) {
		bytes = haxe_io_Bytes.ofData(buffer);
	}
	if(bytes != null || bufferView == null) {
		this1.bytes = bytes;
		this1.offset = offset != null ? offset : 0;
	} else {
		this1.bytes = haxe_io_Bytes.ofData(bufferView.buffer);
		this1.offset = offset != null ? bufferView.byteOffset + offset : bufferView.byteOffset;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arrayGet = function(this1,index) {
	if(this1.bytes != null) {
		return this1.bytes.b[index + this1.offset];
	} else {
		return 0;
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.__arraySet = function(this1,index,value) {
	if(this1.bytes == null) {
		this1.bytes.b[index + this1.offset] = value & 255;
	}
	return value;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	if(arrayBufferView == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(arrayBufferView.buffer),arrayBufferView.byteOffset);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(buffer),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return new lime_utils_BytePointerData(null,0);
	} else {
		return new lime_utils_BytePointerData(haxe_io_Bytes.ofData(bytesData),0);
	}
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromFile = function(path) {
	return new lime_utils_BytePointerData(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.fromLimeBytes = function(bytes) {
	return new lime_utils_BytePointerData(bytes,0);
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8Array = function(bytePointer) {
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt8ClampedArray = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint8ClampedArray(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt8Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 8 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int8Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt16Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 16 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int16Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toUInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Uint32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toInt32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Int32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat32Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 32 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Float32Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
lime_utils__$BytePointer_BytePointer_$Impl_$.toFloat64Array = function(bytePointer) {
	if(bytePointer == null || bytePointer.bytes == null) {
		return null;
	}
	var buffer = bytePointer.bytes.b.bufferValue;
	var byteoffset = bytePointer.offset / 64 | 0;
	var this1;
	if(buffer != null) {
		this1 = new Float64Array(buffer,byteoffset);
	} else {
		this1 = null;
	}
	return this1;
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
lime_utils__$Bytes_Bytes_$Impl_$.compress = function(this1,algorithm) {
	switch(algorithm[1]) {
	case 0:
		return lime__$internal_format_Deflate.compress(this1);
	case 1:
		return lime__$internal_format_GZip.compress(this1);
	case 2:
		return lime__$internal_format_LZMA.compress(this1);
	case 3:
		return lime__$internal_format_Zlib.compress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.decompress = function(this1,algorithm) {
	switch(algorithm[1]) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : ["lime","utils","CompressionAlgorithm"], __constructs__ : ["DEFLATE","GZIP","LZMA","ZLIB"] };
lime_utils_CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime_utils_CompressionAlgorithm.DEFLATE.toString = $estr;
lime_utils_CompressionAlgorithm.DEFLATE.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.GZIP = ["GZIP",1];
lime_utils_CompressionAlgorithm.GZIP.toString = $estr;
lime_utils_CompressionAlgorithm.GZIP.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.LZMA = ["LZMA",2];
lime_utils_CompressionAlgorithm.LZMA.toString = $estr;
lime_utils_CompressionAlgorithm.LZMA.__enum__ = lime_utils_CompressionAlgorithm;
lime_utils_CompressionAlgorithm.ZLIB = ["ZLIB",3];
lime_utils_CompressionAlgorithm.ZLIB.toString = $estr;
lime_utils_CompressionAlgorithm.ZLIB.__enum__ = lime_utils_CompressionAlgorithm;
var lime_utils__$DataPointer_DataPointer_$Impl_$ = {};
$hxClasses["lime.utils._DataPointer.DataPointer_Impl_"] = lime_utils__$DataPointer_DataPointer_$Impl_$;
lime_utils__$DataPointer_DataPointer_$Impl_$.__name__ = ["lime","utils","_DataPointer","DataPointer_Impl_"];
lime_utils__$DataPointer_DataPointer_$Impl_$._new = function(data) {
	var this1 = data;
	return this1;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromInt = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFloat = function(value) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,null,value | 0));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesPointer = function(pointer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,pointer.bytes.b.bufferValue,pointer.offset));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBufferView = function(arrayBufferView) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(arrayBufferView));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer = function(buffer) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$._new(new lime_utils_DataPointerObject(null,buffer));
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytes.b.bufferValue);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytesData = function(bytesData) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromArrayBuffer(bytesData);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromLimeBytes = function(bytes) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.fromBytes(bytes);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromCFFIPointer = function(pointer) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferOrBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		if(data.offset == 0 && length == data.buffer.byteLength) {
			return data.buffer;
		} else {
			var buffer = data.buffer;
			var byteoffset = data.offset;
			var this2;
			if(buffer != null) {
				if(length == null) {
					this2 = new Uint8Array(buffer,byteoffset);
				} else {
					this2 = new Uint8Array(buffer,byteoffset,length);
				}
			} else {
				this2 = null;
			}
			return this2;
		}
		break;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toBufferView = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toFloat32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,byteoffset);
			} else {
				this2 = new Float32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Float32Array) {
			return data.bufferView;
		} else {
			if(length > data.bufferView.byteLength) {
				length = data.bufferView.byteLength;
			}
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Float32Array(buffer1,byteoffset1);
				} else {
					this3 = new Float32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Int32Array(buffer,byteoffset);
			} else {
				this2 = new Int32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Int32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Int32Array(buffer1,byteoffset1);
				} else {
					this3 = new Int32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt8Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var this2;
		if(buffer != null) {
			if(length == null) {
				this2 = new Uint8Array(buffer,byteoffset);
			} else {
				this2 = new Uint8Array(buffer,byteoffset,length);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint8Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var this3;
			if(buffer1 != null) {
				if(length == null) {
					this3 = new Uint8Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint8Array(buffer1,byteoffset1,length);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toUInt32Array = function(this1,length) {
	var data = this1;
	if (!data) return null;
	var _g = data.type;
	switch(_g[1]) {
	case 0:
		if(length == null) {
			length = data.buffer.byteLength;
		}
		var buffer = data.buffer;
		var byteoffset = data.offset;
		var len = length / 4 | 0;
		var this2;
		if(buffer != null) {
			if(len == null) {
				this2 = new Uint32Array(buffer,byteoffset);
			} else {
				this2 = new Uint32Array(buffer,byteoffset,len);
			}
		} else {
			this2 = null;
		}
		return this2;
	case 1:
		if(length == null) {
			length = data.bufferView.byteLength;
		}
		if(data.offset == 0 && length == data.bufferView.byteLength && data.bufferView.constructor == Uint32Array) {
			return data.bufferView;
		} else {
			var buffer1 = data.bufferView.buffer;
			var byteoffset1 = data.bufferView.byteOffset + data.offset;
			var len1 = length / 4 | 0;
			var this3;
			if(buffer1 != null) {
				if(len1 == null) {
					this3 = new Uint32Array(buffer1,byteoffset1);
				} else {
					this3 = new Uint32Array(buffer1,byteoffset1,len1);
				}
			} else {
				this3 = null;
			}
			return this3;
		}
		break;
	default:
		return null;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.toValue = function(this1) {
	var data = this1;
	if (!data) return 0;
	if (typeof data === 'number') return data;
	var _g = data.type;
	if(_g[1] == 2) {
		return data.offset;
	} else {
		return 0;
	}
};
lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset = function(data,offset) {
	return null;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equals = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.equalsPointer = function(a,b) {
	return a == b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThan = function(a,b) {
	return a > b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return a >= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThan = function(a,b) {
	return a < b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return a <= b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEquals = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return a != b;
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.plusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,b | 0);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minus = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-b);
};
lime_utils__$DataPointer_DataPointer_$Impl_$.minusPointer = function(a,b) {
	return lime_utils__$DataPointer_DataPointer_$Impl_$.__withOffset(a,-(b | 0));
};
var lime_utils_DataPointerObject = function(bufferView,buffer,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(bufferView != null) {
		this.bufferView = bufferView;
		this.type = lime_utils_DataPointerObjectType.BUFFER_VIEW;
	} else if(buffer != null) {
		this.buffer = buffer;
		this.type = lime_utils_DataPointerObjectType.BUFFER;
	} else {
		this.type = lime_utils_DataPointerObjectType.VALUE;
	}
	this.offset = offset;
};
$hxClasses["lime.utils.DataPointerObject"] = lime_utils_DataPointerObject;
lime_utils_DataPointerObject.__name__ = ["lime","utils","DataPointerObject"];
lime_utils_DataPointerObject.prototype = {
	buffer: null
	,bufferView: null
	,offset: null
	,type: null
	,__class__: lime_utils_DataPointerObject
};
var lime_utils_DataPointerObjectType = $hxClasses["lime.utils.DataPointerObjectType"] = { __ename__ : ["lime","utils","DataPointerObjectType"], __constructs__ : ["BUFFER","BUFFER_VIEW","VALUE"] };
lime_utils_DataPointerObjectType.BUFFER = ["BUFFER",0];
lime_utils_DataPointerObjectType.BUFFER.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.BUFFER_VIEW = ["BUFFER_VIEW",1];
lime_utils_DataPointerObjectType.BUFFER_VIEW.toString = $estr;
lime_utils_DataPointerObjectType.BUFFER_VIEW.__enum__ = lime_utils_DataPointerObjectType;
lime_utils_DataPointerObjectType.VALUE = ["VALUE",2];
lime_utils_DataPointerObjectType.VALUE.toString = $estr;
lime_utils_DataPointerObjectType.VALUE.__enum__ = lime_utils_DataPointerObjectType;
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Float64Array_Float64Array_$Impl_$ = {};
$hxClasses["lime.utils._Float64Array.Float64Array_Impl_"] = lime_utils__$Float64Array_Float64Array_$Impl_$;
lime_utils__$Float64Array_Float64Array_$Impl_$.__name__ = ["lime","utils","_Float64Array","Float64Array_Impl_"];
lime_utils__$Float64Array_Float64Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float64Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float64Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float64Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float64Array_Float64Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float64Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int8Array_Int8Array_$Impl_$ = {};
$hxClasses["lime.utils._Int8Array.Int8Array_Impl_"] = lime_utils__$Int8Array_Int8Array_$Impl_$;
lime_utils__$Int8Array_Int8Array_$Impl_$.__name__ = ["lime","utils","_Int8Array","Int8Array_Impl_"];
lime_utils__$Int8Array_Int8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	return new Int8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int8Array_Int8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) {
		console.debug("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		console.log("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils__$LogLevel_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._LogLevel.LogLevel_Impl_"] = lime_utils__$LogLevel_LogLevel_$Impl_$;
lime_utils__$LogLevel_LogLevel_$Impl_$.__name__ = ["lime","utils","_LogLevel","LogLevel_Impl_"];
lime_utils__$LogLevel_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$LogLevel_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = ["lime","utils","Preloader"];
lime_utils_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,loadedStage: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 150, className : "lime.utils.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library2[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library2[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library3[0].__id__] == null) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.h[library3[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 188, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			var name = _g12[_g3];
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 220, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 224, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 273, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							var _this = _gthis.bytesTotalCache;
							if(!(__map_reserved[name1[0]] != null ? _this.existsReserved(name1[0]) : _this.h.hasOwnProperty(name1[0]))) {
								var _this1 = _gthis.bytesTotalCache;
								if(__map_reserved[name1[0]] != null) {
									_this1.setReserved(name1[0],total);
								} else {
									_this1.h[name1[0]] = total;
								}
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							var _this2 = _gthis.bytesLoadedCache2;
							if(!(__map_reserved[name1[0]] != null ? _this2.existsReserved(name1[0]) : _this2.h.hasOwnProperty(name1[0]))) {
								_gthis.bytesLoaded += loaded;
							} else {
								var _this3 = _gthis.bytesLoadedCache2;
								_gthis.bytesLoaded += loaded - (__map_reserved[name1[0]] != null ? _this3.getReserved(name1[0]) : _this3.h[name1[0]]);
							}
							var _this4 = _gthis.bytesLoadedCache2;
							if(__map_reserved[name1[0]] != null) {
								_this4.setReserved(name1[0],loaded);
							} else {
								_this4.h[name1[0]] = loaded;
							}
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						var _this5 = _gthis.bytesTotalCache;
						if(__map_reserved[name2[0]] != null ? _this5.existsReserved(name2[0]) : _this5.h.hasOwnProperty(name2[0])) {
							var _this6 = _gthis.bytesTotalCache;
							if(__map_reserved[name2[0]] != null) {
								total1 = _this6.getReserved(name2[0]);
							} else {
								total1 = _this6.h[name2[0]];
							}
						}
						var _this7 = _gthis.bytesLoadedCache2;
						if(!(__map_reserved[name2[0]] != null ? _this7.existsReserved(name2[0]) : _this7.h.hasOwnProperty(name2[0]))) {
							_gthis.bytesLoaded += total1;
						} else {
							var _this8 = _gthis.bytesLoadedCache2;
							_gthis.bytesLoaded += total1 - (__map_reserved[name2[0]] != null ? _this8.getReserved(name2[0]) : _this8.h[name2[0]]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 332, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 346, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$ = {};
$hxClasses["lime.utils._UInt8ClampedArray.UInt8ClampedArray_Impl_"] = lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.__name__ = ["lime","utils","_UInt8ClampedArray","UInt8ClampedArray_Impl_"];
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8ClampedArray(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8ClampedArray [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$._clamp = function(_in) {
	var _out = _in | 0;
	if(_out > 255) {
		_out = 255;
	} else {
		_out = _out;
	}
	if(_out < 0) {
		return 0;
	} else {
		return _out;
	}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = ["msignal","Signal0"];
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = ["msignal","Signal2"];
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = ["msignal","Slot"];
msignal_Slot.prototype = {
	listener: null
	,once: null
	,priority: null
	,enabled: null
	,signal: null
	,remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = ["msignal","Slot0"];
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = ["msignal","Slot1"];
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	param: null
	,execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = ["msignal","Slot2"];
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	param1: null
	,param2: null
	,execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.clearInterval = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getDefinitionByName = function(name) {
	return Type.resolveClass(name);
};
openfl_Lib.getQualifiedClassName = function(value) {
	var o = value;
	return Type.getClassName(o == null ? null : js_Boot.getClass(o));
};
openfl_Lib.getQualifiedSuperclassName = function(value) {
	var o = value;
	var ref = Type.getSuperClass(o == null ? null : js_Boot.getClass(o));
	if(ref != null) {
		return Type.getClassName(ref);
	} else {
		return null;
	}
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,window) {
	if(window == null) {
		window = "_blank";
	}
	var uri = request.url;
	if(Type["typeof"](request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,window);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.sendToURL = function(request) {
	var urlLoader = new openfl_net_URLLoader();
	urlLoader.load(request);
};
openfl_Lib.setInterval = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var timer = new haxe_Timer(delay);
	openfl_Lib.__timers.h[id] = timer;
	timer.run = function() {
		closure.apply(closure,args == null ? [] : args);
	};
	return id;
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 282, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_application = function() {
	return openfl__$internal_Lib.application;
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	set_length: null
	,get_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,removeAt: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_BoolVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_BoolVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return false;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FunctionVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FunctionVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(Reflect.compareMethods(this.__array[i],x)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_IntVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_IntVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_IntVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return 0;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_ObjectVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		if(sep == null) {
			sep = ",";
		}
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		var i = from == null || from >= this.__array.length ? this.__array.length - 1 : from;
		while(i >= 0) {
			if(this.__array[i] == x) {
				return i;
			}
			--i;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) {
			return this.__array.pop();
		} else {
			return null;
		}
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,reverse: function() {
		this.__array.reverse();
		return this;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,shift: function() {
		if(!this.fixed) {
			return this.__array.shift();
		} else {
			return null;
		}
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 16777215;
		}
		if(startIndex == null) {
			startIndex = 0;
		}
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,toString: function() {
		if(this.__array != null) {
			return this.__array.toString();
		} else {
			return null;
		}
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
openfl__$internal_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	var _this = openfl__$internal_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null ? _this.existsReserved(api) : _this.h.hasOwnProperty(api))) {
		var _this1 = openfl__$internal_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
var openfl__$internal_formats_agal_AGALConverter = function() { };
$hxClasses["openfl._internal.formats.agal.AGALConverter"] = openfl__$internal_formats_agal_AGALConverter;
openfl__$internal_formats_agal_AGALConverter.__name__ = ["openfl","_internal","formats","agal","AGALConverter"];
openfl__$internal_formats_agal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_formats_agal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_formats_agal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX : openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_formats_agal_RegisterMap();
	var sb_b = "";
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_formats_agal_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "precision highp float;\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl__$internal_formats_agal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.DestRegister"] = openfl__$internal_formats_agal__$AGALConverter_DestRegister;
openfl__$internal_formats_agal__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","DestRegister"];
openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_formats_agal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_formats_agal__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				str = "gl_Position";
			} else {
				str = "gl_FragColor";
			}
		} else {
			str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_DestRegister
};
var openfl__$internal_formats_agal__$AGALConverter_ProgramType = $hxClasses["openfl._internal.formats.agal._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","formats","agal","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_formats_agal__$AGALConverter_ProgramType;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_formats_agal__$AGALConverter_ProgramType;
var openfl__$internal_formats_agal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.formats.agal.RegisterMap"] = openfl__$internal_formats_agal_RegisterMap;
openfl__$internal_formats_agal_RegisterMap.__name__ = ["openfl","_internal","formats","agal","RegisterMap"];
openfl__$internal_formats_agal_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb_b = "";
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			var _g2 = entry.type;
			switch(_g2) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g3 = entry.usage;
			switch(_g3[1]) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 826, className : "openfl._internal.formats.agal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_formats_agal_RegisterMap
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterMapEntry"] = openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry;
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","RegisterMapEntry"];
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","formats","agal","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","SAMPLER_CUBE_ALPHA","VECTOR_4_ARRAY"] };
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA = ["SAMPLER_CUBE_ALPHA",6];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",7];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
var openfl__$internal_formats_agal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SamplerRegister"] = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister;
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","SamplerRegister"];
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,15);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.f = this5.low;
	var b2 = 56;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,15);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.m = this10.low;
	var b4 = 52;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.w = this15.low;
	var b6 = 48;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.s = this20.low;
	var b8 = 44;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,15);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.d = this25.low;
	var b10 = 40;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,15);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.t = this30.low;
	var b12 = 32;
	b12 &= 63;
	var a6;
	if(b12 == 0) {
		var this31 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a6 = this31;
	} else if(b12 < 32) {
		var this32 = new haxe__$Int64__$_$_$Int64(v.high >> b12,v.high << 32 - b12 | v.low >>> b12);
		a6 = this32;
	} else {
		var this33 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b12 - 32);
		a6 = this33;
	}
	var this34 = new haxe__$Int64__$_$_$Int64(0,15);
	var b13 = this34;
	var this35 = new haxe__$Int64__$_$_$Int64(a6.high & b13.high,a6.low & b13.low);
	sr.type = this35.low;
	var b14 = 16;
	b14 &= 63;
	var a7;
	if(b14 == 0) {
		var this36 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = this36;
	} else if(b14 < 32) {
		var this37 = new haxe__$Int64__$_$_$Int64(v.high >> b14,v.high << 32 - b14 | v.low >>> b14);
		a7 = this37;
	} else {
		var this38 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b14 - 32);
		a7 = this38;
	}
	var this39 = new haxe__$Int64__$_$_$Int64(0,255);
	var b15 = this39;
	var this40 = new haxe__$Int64__$_$_$Int64(a7.high & b15.high,a7.low & b15.low);
	sr.b = this40.low;
	var this41 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b16 = this41;
	var this42 = new haxe__$Int64__$_$_$Int64(v.high & b16.high,v.low & b16.low);
	sr.n = this42.low;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		var _g = this.f;
		switch(_g) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl__$internal_renderer_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SamplerRegister
};
var openfl__$internal_formats_agal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SourceRegister"] = openfl__$internal_formats_agal__$AGALConverter_SourceRegister;
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","SourceRegister"];
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,1);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.d = this5.low;
	var b2 = 48;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,3);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.q = this10.low;
	var b4 = 40;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.itype = this15.low;
	var b6 = 32;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.type = this20.low;
	var b8 = 24;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,255);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.s = this25.low;
	var b10 = 16;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,255);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.o = this30.low;
	var this31 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b12 = this31;
	var this32 = new haxe__$Int64__$_$_$Int64(v.high & b12.high,v.low & b12.low);
	sr.n = this32.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SourceRegister
};
var openfl__$internal_formats_atf_ATFReader = function(data,byteArrayOffset) {
	this.version = 0;
	data.position = byteArrayOffset;
	var signature = data.readUTFBytes(3);
	data.position = byteArrayOffset;
	if(signature != "ATF") {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	}
	var length = 0;
	if(data.b[byteArrayOffset + 6] == 255) {
		this.version = data.b[byteArrayOffset + 7];
		data.position = byteArrayOffset + 8;
		length = this.__readUInt32(data);
	} else {
		this.version = 0;
		data.position = byteArrayOffset + 3;
		length = this.__readUInt24(data);
	}
	if(js_Boot.__cast(byteArrayOffset + length , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
	}
	this.data = data;
};
$hxClasses["openfl._internal.formats.atf.ATFReader"] = openfl__$internal_formats_atf_ATFReader;
openfl__$internal_formats_atf_ATFReader.__name__ = ["openfl","_internal","formats","atf","ATFReader"];
openfl__$internal_formats_atf_ATFReader.prototype = {
	atfFormat: null
	,cubeMap: null
	,data: null
	,height: null
	,mipCount: null
	,version: null
	,width: null
	,readHeader: function(__width,__height,cubeMap) {
		var tdata = this.data.readUnsignedByte();
		var type = tdata >> 7;
		if(!cubeMap && type != 0) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map not expected"));
		}
		if(cubeMap && type != 1) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube map expected"));
		}
		this.cubeMap = cubeMap;
		this.atfFormat = tdata & 127;
		if(this.atfFormat != 3 && this.atfFormat != 5) {
			lime_utils_Log.warn("Only ATF block compressed textures without JPEG-XR+LZMA are supported",{ fileName : "ATFReader.hx", lineNumber : 106, className : "openfl._internal.formats.atf.ATFReader", methodName : "readHeader"});
		}
		this.width = 1 << this.data.readUnsignedByte();
		this.height = 1 << this.data.readUnsignedByte();
		if(this.width != __width || this.height != __height) {
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		}
		this.mipCount = this.data.readUnsignedByte();
		return this.atfFormat == 5;
	}
	,readTextures: function(uploadCallback) {
		var gpuFormats = this.version < 3 ? 3 : 4;
		var sideCount = this.cubeMap ? 6 : 1;
		var _g1 = 0;
		var _g = sideCount;
		while(_g1 < _g) {
			var side = _g1++;
			var _g3 = 0;
			var _g2 = this.mipCount;
			while(_g3 < _g2) {
				var level = _g3++;
				var _g5 = 0;
				var _g4 = gpuFormats;
				while(_g5 < _g4) {
					var gpuFormat = _g5++;
					var blockLength = this.version == 0 ? this.__readUInt24(this.data) : this.__readUInt32(this.data);
					if(_$UInt_UInt_$Impl_$.gt(this.data.position + blockLength,openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.data))) {
						throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Block length exceeds ATF file length"));
					}
					if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
						var bytes = new haxe_io_Bytes(new ArrayBuffer(blockLength));
						this.data.readBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes),0,blockLength);
						uploadCallback(side,level,gpuFormat,this.width >> level,this.height >> level,blockLength,bytes);
					}
				}
			}
		}
	}
	,__readUInt24: function(data) {
		var value = data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__readUInt32: function(data) {
		var value = data.readUnsignedByte() << 24;
		value = value | data.readUnsignedByte() << 16;
		value = value | data.readUnsignedByte() << 8;
		value = value | data.readUnsignedByte();
		return value;
	}
	,__class__: openfl__$internal_formats_atf_ATFReader
};
var openfl__$internal_formats_html_HTMLParser = function() { };
$hxClasses["openfl._internal.formats.html.HTMLParser"] = openfl__$internal_formats_html_HTMLParser;
openfl__$internal_formats_html_HTMLParser.__name__ = ["openfl","_internal","formats","html","HTMLParser"];
openfl__$internal_formats_html_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[0].r,"\"");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[1].r,"'");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[2].r,"&");
	value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexHTMLTag.r,"");
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
		value = value.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[3].r,"<");
			segment = segment.replace(openfl__$internal_formats_html_HTMLParser.__regexEntities[4].r,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					haxe_Log.trace("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "HTMLParser.hx", lineNumber : 101, className : "openfl._internal.formats.html.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_formats_html_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_formats_html_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexFace);
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexColor));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexAlign.match(segment1)) {
							var align = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(align);
						}
						break;
					case "textformat":
						if(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g12 = 0;
							while(_g12 < values.length) {
								var stop = values[_g12];
								++_g12;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl__$internal_formats_html_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_formats_swf_FilterType = $hxClasses["openfl._internal.formats.swf.FilterType"] = { __ename__ : ["openfl","_internal","formats","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_formats_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_formats_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.formats.swf.SWFLite"] = openfl__$internal_formats_swf_SWFLite;
openfl__$internal_formats_swf_SWFLite.__name__ = ["openfl","_internal","formats","swf","SWFLite"];
openfl__$internal_formats_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_formats_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_formats_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_formats_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol1;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				return true;
			}
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_formats_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getMovieClip: function(id) {
		return null;
	}
	,getPath: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getPath(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getPath.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,list: function(type) {
		if(this.__proxy != null) {
			return this.__proxy.list(type);
		} else {
			return lime_utils_AssetLibrary.prototype.list.call(this,type);
		}
	}
	,loadAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.loadAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAsset.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_formats_swf_SWFLiteLibrary = function(id,uuid) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.instanceID = uuid != null ? uuid : id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.formats.swf.SWFLiteLibrary"] = openfl__$internal_formats_swf_SWFLiteLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","formats","swf","SWFLiteLibrary"];
openfl__$internal_formats_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,instanceID: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var _this2 = this.alphaCheck;
		if(!(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id))) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						var _this3 = this.cachedImages;
						if(__map_reserved[id] != null) {
							_this3.setReserved(id,image);
						} else {
							_this3.h[id] = image;
						}
						this.cachedImages.remove(bitmapSymbol.alpha);
						var _this4 = this.alphaCheck;
						if(__map_reserved[id] != null) {
							_this4.setReserved(id,true);
						} else {
							_this4.h[id] = true;
						}
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			var key = this.id;
			var _this = this.preload;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,true);
			} else {
				_this.h[key] = true;
			}
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			var key1 = _gthis.id;
			var _this1 = _gthis.cachedText;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,data);
			} else {
				_this1.h[key1] = data;
			}
			_gthis.swf = openfl__$internal_formats_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						var key2 = bitmapSymbol.className;
						var value = bitmapSymbol.path;
						var _this2 = _gthis.imageClassNames;
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,value);
						} else {
							_this2.h[key2] = value;
						}
					}
				}
			}
			var key3 = _gthis.instanceID;
			var value1 = _gthis.swf;
			var _this3 = openfl__$internal_formats_swf_SWFLite.instances;
			if(__map_reserved[key3] != null) {
				_this3.setReserved(key3,value1);
			} else {
				_this3.h[key3] = value1;
			}
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				var _this4 = this.preload;
				if(__map_reserved[id1] != null) {
					_this4.setReserved(id1,true);
				} else {
					_this4.h[id1] = true;
				}
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				var _this5 = this.preload;
				if(__map_reserved[id3] != null) {
					_this5.setReserved(id3,true);
				} else {
					_this5.h[id3] = true;
				}
			}
			var path = null;
			var key4 = this.id;
			var _this6 = this.paths;
			if(__map_reserved[key4] != null ? _this6.existsReserved(key4) : _this6.h.hasOwnProperty(key4)) {
				var key5 = this.id;
				var _this7 = this.paths;
				if(__map_reserved[key5] != null) {
					path = _this7.getReserved(key5);
				} else {
					path = _this7.h[key5];
				}
			} else if(this.rootPath != null && this.rootPath != "") {
				path = this.rootPath + "/" + this.id;
			} else {
				path = this.id;
			}
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		var _this = this.imageClassNames;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.imageClassNames;
			if(__map_reserved[id] != null) {
				id = _this1.getReserved(id);
			} else {
				id = _this1.h[id];
			}
		}
		var tmp;
		if(!this.preloading) {
			var _this2 = this.alphaCheck;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										var _this3 = _gthis.cachedImages;
										if(__map_reserved[id] != null) {
											_this3.setReserved(id,image);
										} else {
											_this3.h[id] = image;
										}
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										var _this4 = _gthis.alphaCheck;
										if(__map_reserved[id] != null) {
											_this4.setReserved(id,true);
										} else {
											_this4.h[id] = true;
										}
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		var tmp;
		var key = this.instanceID;
		var _this = openfl__$internal_formats_swf_SWFLite.instances;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = this.instanceID;
			var _this1 = openfl__$internal_formats_swf_SWFLite.instances;
			tmp = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) == this.swf;
		} else {
			tmp = false;
		}
		if(tmp) {
			openfl__$internal_formats_swf_SWFLite.instances.remove(this.instanceID);
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(js_Boot.__instanceof(symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
		this.bytesTotal = 0;
		var id = this.paths.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var _this = this.sizes;
			this.bytesTotal += __map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1];
		}
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_formats_swf_SWFLiteLibrary
});
var openfl__$internal_formats_swf_ShapeCommand = $hxClasses["openfl._internal.formats.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","formats","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_formats_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_formats_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_formats_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_formats_swf_ShapeCommand;
openfl__$internal_formats_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				this.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				this.beginFill(c1.buffer.i[c1.iPos],c1.buffer.f[c1.fPos]);
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				this.beginGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
				var this4 = data;
				var c3 = this4;
				this.beginShaderFill(c3.buffer.o[c3.oPos]);
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				this.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				this.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				this.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				this.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this9 = data;
				var c8 = this9;
				this.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
				break;
			case 9:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this10 = data;
				var c9 = this10;
				this.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				break;
			case 10:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this11 = data;
				var c10 = this11;
				this.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this12 = data;
				var c11 = this12;
				this.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
				break;
			case 13:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this13 = data;
				var c12 = this13;
				this.endFill();
				break;
			case 14:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this14 = data;
				var c13 = this14;
				this.lineBitmapStyle(c13.buffer.o[c13.oPos],c13.buffer.o[c13.oPos + 1],c13.buffer.b[c13.bPos],c13.buffer.b[c13.bPos + 1]);
				break;
			case 15:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this15 = data;
				var c14 = this15;
				this.lineGradientStyle(c14.buffer.o[c14.oPos],c14.buffer.ii[c14.iiPos],c14.buffer.ff[c14.ffPos],c14.buffer.ii[c14.iiPos + 1],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos]);
				break;
			case 16:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this16 = data;
				var c15 = this16;
				this.lineStyle(c15.buffer.o[c15.oPos],c15.buffer.i[c15.iPos],c15.buffer.f[c15.fPos],c15.buffer.b[c15.bPos],c15.buffer.o[c15.oPos + 1],c15.buffer.o[c15.oPos + 2],c15.buffer.o[c15.oPos + 3],c15.buffer.f[c15.fPos + 1]);
				break;
			case 17:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this17 = data;
				var c16 = this17;
				this.lineTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
				break;
			case 18:
				var _g19 = data.prev;
				switch(_g19[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this18 = data;
				var c17 = this18;
				this.moveTo(c17.buffer.f[c17.fPos],c17.buffer.f[c17.fPos + 1]);
				break;
			case 19:
				var _g20 = data.prev;
				switch(_g20[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
				var this19 = data;
				var c18 = this19;
				this.overrideMatrix(c18.buffer.o[c18.oPos]);
				break;
			case 20:
				var _g21 = data.prev;
				switch(_g21[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
				var this20 = data;
				var c19 = this20;
				this.windingEvenOdd();
				break;
			case 21:
				var _g22 = data.prev;
				switch(_g22[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
				var this21 = data;
				var c20 = this21;
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginShaderFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawQuads: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginShaderFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginShaderFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_BeginShaderFillView_$Impl_$.get_shaderBuffer = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 5];
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawQuadsView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawQuadsView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_rects = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawQuadsView_$Impl_$.get_transforms = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1.buffer.f[this1.fPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1.buffer.f[this1.fPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1.buffer.f[this1.fPos + 4];
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.buffer.b[this1.bPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.buffer.ii[this1.iiPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.buffer.ff[this1.ffPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.buffer.ii[this1.iiPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1.buffer.f[this1.fPos];
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.buffer.o[this1.oPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1.buffer.i[this1.iPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.buffer.b[this1.bPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.buffer.o[this1.oPos + 1];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.buffer.o[this1.oPos + 2];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.buffer.o[this1.oPos + 3];
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1.buffer.f[this1.fPos];
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1.buffer.f[this1.fPos + 1];
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.buffer.o[this1.oPos];
};
var openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingEvenOddView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingEvenOddView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingEvenOddView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.WindingNonZeroView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","WindingNonZeroView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_WindingNonZeroView_$Impl_$._new = function(d) {
	var this1 = d;
	return this1;
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","BEGIN_SHADER_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_QUADS","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL = ["BEGIN_SHADER_FILL",3];
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",5];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",7];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS = ["DRAW_QUADS",8];
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",10];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",12];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",13];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",16];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",17];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",18];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",19];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",20];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",21];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",22];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl._internal.renderer.SamplerState"] = openfl__$internal_renderer_SamplerState;
openfl__$internal_renderer_SamplerState.__name__ = ["openfl","_internal","renderer","SamplerState"];
openfl__$internal_renderer_SamplerState.prototype = {
	centroid: null
	,filter: null
	,ignoreSampler: null
	,lodBias: null
	,mipfilter: null
	,mipmapGenerated: null
	,textureAlpha: null
	,wrap: null
	,clone: function() {
		var copy = new openfl__$internal_renderer_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_renderer_SamplerState
};
var openfl__$internal_renderer_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl._internal.renderer.ShaderBuffer"] = openfl__$internal_renderer_ShaderBuffer;
openfl__$internal_renderer_ShaderBuffer.__name__ = ["openfl","_internal","renderer","ShaderBuffer"];
openfl__$internal_renderer_ShaderBuffer.prototype = {
	inputCount: null
	,inputRefs: null
	,inputFilter: null
	,inputMipFilter: null
	,inputs: null
	,inputWrap: null
	,overrideBoolCount: null
	,overrideBoolNames: null
	,overrideBoolValues: null
	,overrideFloatCount: null
	,overrideFloatNames: null
	,overrideFloatValues: null
	,overrideIntCount: null
	,overrideIntNames: null
	,overrideIntValues: null
	,paramBoolCount: null
	,paramCount: null
	,paramData: null
	,paramDataBuffer: null
	,paramDataLength: null
	,paramFloatCount: null
	,paramIntCount: null
	,paramLengths: null
	,paramPositions: null
	,paramRefs_Bool: null
	,paramRefs_Float: null
	,paramRefs_Int: null
	,paramTypes: null
	,shader: null
	,addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,addIntOverride: function(name,values) {
		this.overrideIntNames[this.overrideIntCount] = name;
		this.overrideIntValues[this.overrideIntCount] = values;
		this.overrideIntCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,update: function(shader) {
		this.inputCount = 0;
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
		this.paramBoolCount = 0;
		this.paramCount = 0;
		this.paramDataLength = 0;
		this.paramFloatCount = 0;
		this.paramIntCount = 0;
		this.shader = null;
		if(shader == null) {
			return;
		}
		shader.__init();
		this.inputCount = shader.__inputBitmapData.length;
		var input;
		var _g1 = 0;
		var _g = this.inputCount;
		while(_g1 < _g) {
			var i = _g1++;
			input = shader.__inputBitmapData[i];
			this.inputs[i] = input.input;
			this.inputFilter[i] = input.filter;
			this.inputMipFilter[i] = input.mipFilter;
			this.inputRefs[i] = input;
			this.inputWrap[i] = input.wrap;
		}
		var boolCount = shader.__paramBool.length;
		var floatCount = shader.__paramFloat.length;
		var intCount = shader.__paramInt.length;
		this.paramCount = boolCount + floatCount + intCount;
		this.paramBoolCount = boolCount;
		this.paramFloatCount = floatCount;
		this.paramIntCount = intCount;
		var paramLength = 0;
		var length = 0;
		var p = 0;
		var param;
		var _g11 = 0;
		var _g2 = boolCount;
		while(_g11 < _g2) {
			var i1 = _g11++;
			param = shader.__paramBool[i1];
			this.paramPositions[p] = this.paramDataLength;
			if(param.value != null) {
				length = param.value.length;
			} else {
				length = 0;
			}
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 0;
			this.paramRefs_Bool[i1] = param;
			++p;
		}
		var param1;
		var _g12 = 0;
		var _g3 = floatCount;
		while(_g12 < _g3) {
			var i2 = _g12++;
			param1 = shader.__paramFloat[i2];
			this.paramPositions[p] = this.paramDataLength;
			if(param1.value != null) {
				length = param1.value.length;
			} else {
				length = 0;
			}
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 1;
			this.paramRefs_Float[i2] = param1;
			++p;
		}
		var param2;
		var _g13 = 0;
		var _g4 = intCount;
		while(_g13 < _g4) {
			var i3 = _g13++;
			param2 = shader.__paramInt[i3];
			this.paramPositions[p] = this.paramDataLength;
			if(param2.value != null) {
				length = param2.value.length;
			} else {
				length = 0;
			}
			this.paramLengths[p] = length;
			this.paramDataLength += length;
			this.paramTypes[p] = 2;
			this.paramRefs_Int[i3] = param2;
			++p;
		}
		if(this.paramDataLength > 0) {
			if(this.paramData == null) {
				var elements = this.paramDataLength;
				var this1;
				if(elements != null) {
					this1 = new Float32Array(elements);
				} else {
					this1 = null;
				}
				this.paramData = this1;
			} else if(this.paramDataLength > this.paramData.length) {
				var elements1 = this.paramDataLength;
				var this2;
				if(elements1 != null) {
					this2 = new Float32Array(elements1);
				} else {
					this2 = null;
				}
				var data = this2;
				data.set(this.paramData);
				this.paramData = data;
			}
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var paramPosition = 0;
		var boolParam;
		var floatParam;
		var intParam;
		var length1;
		var _g14 = 0;
		var _g5 = this.paramCount;
		while(_g14 < _g5) {
			var i4 = _g14++;
			length1 = this.paramLengths[i4];
			if(i4 < boolCount) {
				boolParam = this.paramRefs_Bool[boolIndex];
				++boolIndex;
				var _g31 = 0;
				var _g21 = length1;
				while(_g31 < _g21) {
					var j = _g31++;
					this.paramData[paramPosition] = boolParam.value[j] ? 1 : 0;
					++paramPosition;
				}
			} else if(i4 < boolCount + floatCount) {
				floatParam = this.paramRefs_Float[floatIndex];
				++floatIndex;
				var _g32 = 0;
				var _g22 = length1;
				while(_g32 < _g22) {
					var j1 = _g32++;
					this.paramData[paramPosition] = floatParam.value[j1];
					++paramPosition;
				}
			} else {
				intParam = this.paramRefs_Int[intIndex];
				++intIndex;
				var _g33 = 0;
				var _g23 = length1;
				while(_g33 < _g23) {
					var j2 = _g33++;
					this.paramData[paramPosition] = intParam.value[j2];
					++paramPosition;
				}
			}
		}
		this.shader = shader;
	}
	,__class__: openfl__$internal_renderer_ShaderBuffer
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var cairo = renderer.cairo;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		renderer.applyMatrix(bitmap.__renderTransform,cairo);
		var surface = bitmap.__bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderer.__allowSmoothing && bitmap.smoothing ? 1 : 3);
			cairo.set_source(pattern);
			if(alpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(alpha);
			}
		}
		renderer.__popMaskObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderer) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderer) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderer) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderer,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
	if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		var context = renderer.context;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = alpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		if(!(!displayObject.__renderable)) {
			var alpha1 = renderer.__getAlpha(displayObject.__worldAlpha);
			if(!(alpha1 <= 0)) {
				var graphics = displayObject.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
					var bounds = graphics.__bounds;
					var width = graphics.__width;
					var height = graphics.__height;
					if(graphics.__canvas != null) {
						var context1 = renderer.context;
						var scrollRect = displayObject.__scrollRect;
						if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
							renderer.__setBlendMode(displayObject.__worldBlendMode);
							renderer.__pushMaskObject(displayObject);
							context1.globalAlpha = alpha1;
							renderer.setTransform(graphics.__worldTransform,context1);
							if(renderer.__isDOM) {
								var reverseScale = 1 / renderer.pixelRatio;
								context1.scale(reverseScale,reverseScale);
							}
							context1.drawImage(graphics.__canvas,0,0,width,height);
							renderer.__popMaskObject(displayObject);
						}
					}
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		var px = point.x;
		var py = point.y;
		point.x = px * matrix.a + py * matrix.c + matrix.tx;
		point.y = px * matrix.b + py * matrix.d + matrix.ty;
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		var px1 = point2.x;
		var py1 = point2.y;
		point2.x = px1 * matrix.a + py1 * matrix.c + matrix.tx;
		point2.y = px1 * matrix.b + py1 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		var px2 = point.x;
		var py2 = point.y;
		point.x = px2 * matrix.a + py2 * matrix.c + matrix.tx;
		point.y = px2 * matrix.b + py2 * matrix.d + matrix.ty;
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:case 3:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var _g2 = data.prev;
					switch(_g2[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var _g3 = data.prev;
					switch(_g3[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
					var _g4 = data.prev;
					switch(_g4[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					var _g5 = data.prev;
					switch(_g5[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this4 = data;
					var c3 = this4;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this9 = data;
				var c8 = this9;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this10 = data;
				var c9 = this10;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this11 = data;
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c12 = this14;
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this15 = data;
				var c13 = this15;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c14 = this16;
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 20:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c.buffer.o[c.oPos + 1] != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				if(c1.buffer.f[c1.fPos] < 0.005) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				} else {
					if(c1.buffer.f[c1.fPos] == 1) {
						var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp;
					} else {
						r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
						g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
						b = c1.buffer.i[c1.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 3:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
				var this4 = data;
				var c3 = this4;
				var shaderBuffer = c3.buffer.o[c3.oPos];
				if(shaderBuffer.inputCount > 0) {
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 4:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
				break;
			case 5:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
				break;
			case 6:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				hasPath = true;
				x = c7.buffer.f[c7.fPos];
				y = c7.buffer.f[c7.fPos + 1];
				width = c7.buffer.f[c7.fPos + 2];
				height = c7.buffer.f[c7.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this9 = data;
				var c8 = this9;
				var rects = c8.buffer.o[c8.oPos];
				var indices = c8.buffer.o[c8.oPos + 1];
				var transforms = c8.buffer.o[c8.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var tileRect = openfl_geom_Rectangle.__pool.get();
				var tileTransform = openfl_geom_Matrix.__pool.get();
				var sourceRect = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null ? openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.rect : null;
				var transform = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__renderTransform;
				var alpha = openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha;
				var ri;
				var ti;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				var _g31 = 0;
				var _g21 = length;
				while(_g31 < _g21) {
					var i = _g31++;
					if(hasIndices) {
						ri = indices.get(i) * 4;
					} else {
						ri = i * 4;
					}
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					if(tileRect.width <= 0 || tileRect.height <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					tileTransform.tx += positionX - offsetX;
					tileTransform.ty += positionY - offsetY;
					tileTransform.concat(transform);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
					if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
					} else {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
					}
				}
				openfl_geom_Rectangle.__pool.release(tileRect);
				openfl_geom_Matrix.__pool.release(tileTransform);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				break;
			case 9:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this10 = data;
				var c9 = this10;
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
							canOptimizeMatrix = false;
						} else {
							if(stl == null) {
								stl = openfl_geom_Point.__pool.get();
							}
							if(sbr == null) {
								sbr = openfl_geom_Point.__pool.get();
							}
							stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
							var _this = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px = stl.x;
							var py = stl.y;
							stl.x = px * _this.a + py * _this.c + _this.tx;
							stl.y = px * _this.b + py * _this.d + _this.ty;
							sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
							var _this1 = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix;
							var px1 = sbr.x;
							var py1 = sbr.y;
							sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
							sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c9.buffer.f[c9.fPos + 1];
						sl = c9.buffer.f[c9.fPos];
						sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
						sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
						}
					}
				}
				if(!optimizationUsed) {
					hasPath = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
				}
				break;
			case 10:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this11 = data;
				var c10 = this11;
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
				break;
			case 12:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
				var this12 = data;
				var c11 = this12;
				var v = c11.buffer.o[c11.oPos];
				var ind = c11.buffer.o[c11.oPos + 1];
				var uvt = c11.buffer.o[c11.oPos + 2];
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g32 = 0;
						var _g22 = v.get_length() / 2 | 0;
						while(_g32 < _g22) {
							var i1 = _g32++;
							uvt.push(v.get(i1 * 2) - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
							uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
					}
					var skipT = uvt.get_length() != v.get_length();
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
					} else {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var i2 = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i2 < l) {
					a_ = i2;
					b_ = i2 + 1;
					c_ = i2 + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax) - offsetX;
					y1 = v.get(iay) - offsetY;
					x2 = v.get(ibx) - offsetX;
					y2 = v.get(iby) - offsetY;
					x3 = v.get(icx) - offsetX;
					y3 = v.get(icy) - offsetY;
					var _g23 = c11.buffer.o[c11.oPos + 3];
					switch(_g23) {
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i2 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i2 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						}
						i2 += 3;
						continue;
					}
					uvx1 = uvt.get(iax) * pattern.width;
					uvx2 = uvt.get(ibx) * pattern.width;
					uvx3 = uvt.get(icx) * pattern.width;
					uvy1 = uvt.get(iay) * pattern.height;
					uvy2 = uvt.get(iby) * pattern.height;
					uvy3 = uvt.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i2 += 3;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i2 += 3;
				}
				break;
			case 14:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this13 = data;
				var c12 = this13;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 15:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this14 = data;
				var c13 = this14;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 16:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this15 = data;
				var c14 = this15;
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c14.buffer.o[c14.oPos] == null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
					var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c14.buffer.o[c14.oPos + 3]).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp1;
					var tmp2;
					if(c14.buffer.o[c14.oPos + 2] == null) {
						tmp2 = "round";
					} else {
						var _g24 = c14.buffer.o[c14.oPos + 2];
						if(_g24 == 0) {
							tmp2 = "butt";
						} else {
							tmp2 = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c14.buffer.o[c14.oPos + 2]).toLowerCase();
						}
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp2;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
					if(c14.buffer.f[c14.fPos] == 1) {
						var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp3;
					} else {
						r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
						g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
						b = c14.buffer.i[c14.iPos] & 255;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 17:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this16 = data;
				var c15 = this16;
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
				positionX = c15.buffer.f[c15.fPos];
				positionY = c15.buffer.f[c15.fPos + 1];
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 18:
				var _g18 = data.prev;
				switch(_g18[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this17 = data;
				var c16 = this17;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
				positionX = c16.buffer.f[c16.fPos];
				positionY = c16.buffer.f[c16.fPos + 1];
				if(setStart) {
					closeGap = true;
				}
				startX = c16.buffer.f[c16.fPos];
				startY = c16.buffer.f[c16.fPos + 1];
				setStart = true;
				break;
			case 20:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				var _g19 = data.prev;
				switch(_g19[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			}
			if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:case 1:case 2:case 3:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var _g2 = data.prev;
						switch(_g2[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var _g3 = data.prev;
						switch(_g3[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
						var _g4 = data.prev;
						switch(_g4[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
						var this3 = data;
						var c2 = this3;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						var _g5 = data.prev;
						switch(_g5[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
						var this4 = data;
						var c3 = this4;
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					var _g6 = data.prev;
					switch(_g6[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					var _g7 = data.prev;
					switch(_g7[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
					var this6 = data;
					var c5 = this6;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					var _g8 = data.prev;
					switch(_g8[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
					var this7 = data;
					var c6 = this7;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					var _g9 = data.prev;
					switch(_g9[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
					var this8 = data;
					var c7 = this8;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					var _g10 = data.prev;
					switch(_g10[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
					var this9 = data;
					var c8 = this9;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					var _g11 = data.prev;
					switch(_g11[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
					var this10 = data;
					var c9 = this10;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					var _g12 = data.prev;
					switch(_g12[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
					var this11 = data;
					var c10 = this11;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					var _g13 = data.prev;
					switch(_g13[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this12 = data;
					var c11 = this12;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					var _g14 = data.prev;
					switch(_g14[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
					var this13 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					var _g15 = data.prev;
					switch(_g15[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					var _g16 = data.prev;
					switch(_g16[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
					var this15 = data;
					var c13 = this15;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					var _g17 = data.prev;
					switch(_g17[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
					var this16 = data;
					var c14 = this16;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					var _g18 = data.prev;
					switch(_g18[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
					var this17 = data;
					var c15 = this17;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					var _g19 = data.prev;
					switch(_g19[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this18 = data;
					var c16 = this18;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 20:
					var _g20 = data.prev;
					switch(_g20[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
					var this19 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 21:
					var _g21 = data.prev;
					switch(_g21[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
					var this20 = data;
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					var _g22 = data.prev;
					switch(_g22[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 4:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				break;
			case 10:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable) {
		return;
	}
	var alpha = renderer.__getAlpha(shape.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = alpha;
				renderer.setTransform(graphics.__worldTransform,context);
				if(renderer.__isDOM) {
					var reverseScale = 1 / renderer.pixelRatio;
					context.scale(reverseScale,reverseScale);
				}
				context.drawImage(graphics.__canvas,0,0,width,height);
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer.__worldTransform);
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			if(renderer.__isDOM) {
				var scale = renderer.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform1);
				matrix.scale(scale,scale);
				renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					var color = "#" + StringTools.hex(group.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
					if(applyHack) {
						var font = openfl__$internal_text_TextEngine.getFontInstance(group.format);
						if(group.format.__ascent == null && font == null || font.unitsPerEM == 0) {
							offsetY = group.format.size * 0.185;
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX - bounds.x,group.offsetY + offsetY + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.positions.length <= i1) {
										break;
									}
									advance += group.positions[i1];
								}
								var scrollY1 = 0.0;
								var _g31 = textField.get_scrollV();
								var _g22 = group.lineIndex + 1;
								while(_g31 < _g22) {
									var i2 = _g31++;
									scrollY1 += textEngine.lineHeights.get(i2 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp2 = StringTools.hex(group.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex || group.startIndex > textField.__caretIndex && group.endIndex < textField.__selectionIndex || group.startIndex > textField.__selectionIndex && group.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
								end = textField.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
					if(group.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var x = group.offsetX + scrollX - bounds.x;
						var y = Math.floor(group.offsetY + offsetY + scrollY + group.ascent - bounds.y) + 0.5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i3 = _g12++;
						scrollY2 += textEngine.lineHeights.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp5 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DBitmap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DBitmap"] = openfl__$internal_renderer_context3D_Context3DBitmap;
openfl__$internal_renderer_context3D_Context3DBitmap.__name__ = ["openfl","_internal","renderer","context3D","Context3DBitmap"];
openfl__$internal_renderer_context3D_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl__$internal_renderer_context3D_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl__$internal_renderer_context3D_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl._internal.renderer.context3D.Context3DBuffer"] = openfl__$internal_renderer_context3D_Context3DBuffer;
openfl__$internal_renderer_context3D_Context3DBuffer.__name__ = ["openfl","_internal","renderer","context3D","Context3DBuffer"];
openfl__$internal_renderer_context3D_Context3DBuffer.prototype = {
	dataPerVertex: null
	,elementCount: null
	,elementType: null
	,indexBufferData: null
	,indexBuffers: null
	,indexCount: null
	,vertexBuffer: null
	,vertexBufferData: null
	,vertexCount: null
	,context3D: null
	,drawElements: function(start,length) {
		if(length == null) {
			length = -1;
		}
		if(this.indexCount == 0 || this.vertexCount == 0) {
			return;
		}
		var _g = this.elementType;
		if(_g[1] == 0) {
			if(length == -1) {
				length = this.elementCount * 2;
			}
			if(start < 10922 && length - start < 10922) {
				this.context3D.drawTriangles(this.indexBuffers[0],start * 2,length * 2);
			} else {
				var end = start + length;
				while(start < end) {
					var arrayBufferIndex = Math.floor(start / 10922);
					length = Math.min(end - start,10922) | 0;
					if(length <= 0) {
						break;
					}
					this.context3D.drawTriangles(this.indexBuffers[arrayBufferIndex],(start - arrayBufferIndex * 10922) * 6,length * 2);
					start += length;
				}
			}
		}
	}
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(this.vertexBufferData);
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		var _g = this.elementType;
		switch(_g[1]) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var this2;
			if(vertexLength != null) {
				this2 = new Float32Array(vertexLength);
			} else {
				this2 = null;
			}
			this.vertexBufferData = this2;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl__$internal_renderer_context3D_Context3DBuffer
};
var openfl__$internal_renderer_context3D_Context3DElementType = $hxClasses["openfl._internal.renderer.context3D.Context3DElementType"] = { __ename__ : ["openfl","_internal","renderer","context3D","Context3DElementType"], __constructs__ : ["QUADS","TRIANGLES","TRIANGLE_INDICES"] };
openfl__$internal_renderer_context3D_Context3DElementType.QUADS = ["QUADS",0];
openfl__$internal_renderer_context3D_Context3DElementType.QUADS.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.QUADS.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES = ["TRIANGLES",1];
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES = ["TRIANGLE_INDICES",2];
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
var openfl__$internal_renderer_context3D_Context3DDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DDisplayObject"] = openfl__$internal_renderer_context3D_Context3DDisplayObject;
openfl__$internal_renderer_context3D_Context3DDisplayObject.__name__ = ["openfl","_internal","renderer","context3D","Context3DDisplayObject"];
openfl__$internal_renderer_context3D_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.render(displayObject,renderer);
	}
};
openfl__$internal_renderer_context3D_Context3DDisplayObject.renderMask = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl__$internal_renderer_context3D_Context3DGraphics = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DGraphics"] = openfl__$internal_renderer_context3D_Context3DGraphics;
openfl__$internal_renderer_context3D_Context3DGraphics.__name__ = ["openfl","_internal","renderer","context3D","Context3DGraphics"];
openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var _g2 = data.prev;
			switch(_g2[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			var _g3 = data.prev;
			switch(_g3[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			var _g4 = data.prev;
			switch(_g4[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
			var this2 = data;
			var c1 = this2;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
				bitmap = null;
			} else {
				bitmap = c1.buffer.o[c1.oPos].shader.__bitmap.input;
			}
			break;
		case 8:
			if(bitmap != null) {
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
				var this3 = data;
				var c2 = this3;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl__$internal_renderer_context3D_Context3DBuffer(context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var bitmapWidth;
				var bitmapHeight;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				bitmapWidth = bitmap.width;
				bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g31 = 0;
				var _g21 = length;
				while(_g31 < _g21) {
					var i = _g31++;
					vertexOffset = (quadBufferPosition + i) * stride;
					if(hasIndices) {
						ri = indices.get(i) * 4;
					} else {
						ri = i * 4;
					}
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			var _g6 = data.prev;
			switch(_g6[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
			var this4 = data;
			var c3 = this4;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g32 = 0;
			var _g22 = length1;
			while(_g32 < _g22) {
				var i1 = _g32++;
				offset = vertexOffset1 + i1 * dataPerVertex1;
				if(hasIndices1) {
					vertOffset = indices1.get(i1) * 2;
				} else {
					vertOffset = i1 * 2;
				}
				if(hasIndices1) {
					uvOffset = indices1.get(i1) * uvStride;
				} else {
					uvOffset = i1 * uvStride;
				}
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			var _g7 = data.prev;
			switch(_g7[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer1 = graphics.__vertexBuffer;
		if(buffer1 == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer1 = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer1;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer1.uploadFromTypedArray(graphics.__vertexBufferData);
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer2 = graphics.__vertexBufferUVT;
		if(buffer2 == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer2 = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer2;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer2.uploadFromTypedArray(graphics.__vertexBufferDataUVT);
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible = function(graphics) {
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			var _g2 = data.prev;
			switch(_g2[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			var _g3 = data.prev;
			switch(_g3[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			var _g4 = data.prev;
			switch(_g4[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			var _g8 = data.prev;
			switch(_g8[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			var _g9 = data.prev;
			switch(_g9[1]) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:case 21:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl__$internal_renderer_context3D_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__dirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type[1]) {
				case 0:
					var _g2 = data.prev;
					switch(_g2[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					var _g3 = data.prev;
					switch(_g3[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
					var this2 = data;
					var c1 = this2;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					var _g4 = data.prev;
					switch(_g4[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						var _g5 = data.prev;
						switch(_g5[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
						var this4 = data;
						var c3 = this4;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							if(openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								shader = renderer.__maskShader;
							} else {
								shader = renderer.__initGraphicsShader(null);
							}
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,renderer.__allowSmoothing && smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						var _g6 = data.prev;
						switch(_g6[1]) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:case 21:
							break;
						default:
						}
						data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
						var this5 = data;
						var c4 = this5;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width1 = c4.buffer.f[c4.fPos + 2];
						var height1 = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width1,height1);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData,renderer.__allowSmoothing,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						renderer.__clearShader();
					}
					break;
				case 12:
					var _g7 = data.prev;
					switch(_g7[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
					var this6 = data;
					var c5 = this6;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						if(openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader2 = renderer.__maskShader;
						} else {
							shader2 = renderer.__initGraphicsShader(null);
						}
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,renderer.__allowSmoothing && smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(bufferPosition,length1);
					shaderBufferOffset += length1;
					if(hasUVData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					if(culling != 1) {
						context.setCulling(0);
					}
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					var _g8 = data.prev;
					switch(_g8[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = type;
					break;
				case 18:
					var _g9 = data.prev;
					switch(_g9[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
					var this7 = data;
					var c6 = this7;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				default:
					var _g10 = data.prev;
					switch(_g10[1]) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:case 21:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = true;
	openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = false;
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeIndexBuffer = function(graphics,isQuad,length) {
	if(isQuad) {
		return;
	}
	var buffer = isQuad ? null : graphics.__triangleIndexBufferData;
	var position = 0;
	var newBuffer = null;
	if(buffer == null) {
		var this1;
		if(length != null) {
			this1 = new Uint16Array(length);
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var this2;
		if(length != null) {
			this2 = new Uint16Array(length);
		} else {
			this2 = null;
		}
		newBuffer = this2;
		newBuffer.set(buffer);
		position = buffer.length;
	}
	if(newBuffer != null) {
		if(!isQuad) {
			graphics.__triangleIndexBufferData = newBuffer;
		}
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var this2;
		if(length != null) {
			this2 = new Float32Array(length);
		} else {
			this2 = null;
		}
		newBuffer = this2;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			parameter1.__useArray = false;
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			parameter2.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "Shader.hx", lineNumber : 180, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "Shader.hx", lineNumber : 218, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			parameter.__disableGL(this.__context);
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			parameter1.__disableGL(this.__context);
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			parameter2.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			var _this = this.__context.__programs;
			if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
				var _this1 = this.__context.__programs;
				this.program = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				var value = this.program;
				var _this2 = this.__context.__programs;
				if(__map_reserved[id] != null) {
					_this2.setReserved(id,value);
				} else {
					_this2.h[id] = value;
				}
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(parameter1.__isUniform) {
						parameter1.index = gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(parameter2.__isUniform) {
						parameter2.index = gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			parameter.__updateGL(this.__context);
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			parameter1.__updateGL(this.__context);
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			parameter2.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g1 = 0;
		var _g = shaderBuffer.inputCount;
		while(_g1 < _g) {
			var i = _g1++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g11 = 0;
		var _g2 = shaderBuffer.paramCount;
		while(_g11 < _g2) {
			var i1 = _g11++;
			hasOverride = false;
			if(i1 < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g3 = 0;
				var _g21 = shaderBuffer.overrideBoolCount;
				while(_g3 < _g21) {
					var j = _g3++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++boolIndex;
			} else if(i1 < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g31 = 0;
				var _g22 = shaderBuffer.overrideFloatCount;
				while(_g31 < _g22) {
					var j1 = _g31++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g32 = 0;
				var _g23 = shaderBuffer.overrideIntCount;
				while(_g32 < _g23) {
					var j2 = _g32++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
};
var openfl__$internal_renderer_context3D_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl._internal.renderer.context3D.Context3DMaskShader"] = openfl__$internal_renderer_context3D_Context3DMaskShader;
openfl__$internal_renderer_context3D_Context3DMaskShader.__name__ = ["openfl","_internal","renderer","context3D","Context3DMaskShader"];
openfl__$internal_renderer_context3D_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_context3D_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: openfl__$internal_renderer_context3D_Context3DMaskShader
});
var openfl__$internal_renderer_context3D_Context3DShape = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DShape"] = openfl__$internal_renderer_context3D_Context3DShape;
openfl__$internal_renderer_context3D_Context3DShape.__name__ = ["openfl","_internal","renderer","context3D","Context3DShape"];
openfl__$internal_renderer_context3D_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,renderer.__allowSmoothing);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl__$internal_renderer_context3D_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_context3D_Context3DGraphics.renderMask(graphics,renderer);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,renderer.__allowSmoothing);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl._internal.renderer.context3D.Context3DState"] = openfl__$internal_renderer_context3D_Context3DState;
openfl__$internal_renderer_context3D_Context3DState.__name__ = ["openfl","_internal","renderer","context3D","Context3DState"];
openfl__$internal_renderer_context3D_Context3DState.prototype = {
	backBufferEnableDepthAndStencil: null
	,blendDestinationAlphaFactor: null
	,blendSourceAlphaFactor: null
	,blendDestinationRGBFactor: null
	,blendSourceRGBFactor: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,culling: null
	,depthCompareMode: null
	,depthMask: null
	,program: null
	,renderToTexture: null
	,renderToTextureAntiAlias: null
	,renderToTextureDepthStencil: null
	,renderToTextureSurfaceSelector: null
	,samplerStates: null
	,scissorEnabled: null
	,scissorRectangle: null
	,stencilCompareMode: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilPass: null
	,stencilReadMask: null
	,stencilReferenceValue: null
	,stencilTriangleFace: null
	,stencilWriteMask: null
	,textures: null
	,shader: null
	,__currentGLArrayBuffer: null
	,__currentGLElementArrayBuffer: null
	,__currentGLFramebuffer: null
	,__currentGLTexture2D: null
	,__currentGLTextureCubeMap: null
	,__enableGLBlend: null
	,__enableGLCullFace: null
	,__enableGLDepthTest: null
	,__enableGLScissorTest: null
	,__enableGLStencilTest: null
	,__frontFaceGLCCW: null
	,__glBlendEquation: null
	,__primaryGLFramebuffer: null
	,__rttDepthGLRenderbuffer: null
	,__rttGLFramebuffer: null
	,__rttGLRenderbuffer: null
	,__rttStencilGLRenderbuffer: null
	,__class__: openfl__$internal_renderer_context3D_Context3DState
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderer) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	var graphics = displayObject.__graphics;
	if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__dirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(displayObject.__canvas != graphics.__canvas) {
					if(displayObject.__canvas != null) {
						renderer.element.removeChild(displayObject.__canvas);
					}
					displayObject.__canvas = graphics.__canvas;
					displayObject.__context = graphics.__context;
					renderer.__initializeElement(displayObject,displayObject.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
			}
		}
		if(displayObject.__canvas != null) {
			renderer.__pushMaskObject(displayObject);
			var cacheTransform = displayObject.__renderTransform;
			displayObject.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				displayObject.__renderTransformChanged = true;
			}
			renderer.__updateClip(displayObject);
			renderer.__applyStyle(displayObject,true,true,true);
			displayObject.__renderTransform = cacheTransform;
			renderer.__popMaskObject(displayObject);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderer) {
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		var _this_r = new RegExp("\n","g".split("u").join(""));
		div.innerHTML = textEngine.text.replace(_this_r,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += adjustment | 0;
				var _this_r = new RegExp("\r\n","g".split("u").join(""));
				var tmp = text.replace(_this_r,"<br>");
				textField.__div.innerHTML = tmp;
				var _this_r1 = new RegExp("\n","g".split("u").join(""));
				var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
				textField.__div.innerHTML = tmp1;
				var _this_r2 = new RegExp("\r","g".split("u").join(""));
				var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
				textField.__div.innerHTML = tmp2;
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.get(bitmapID);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			var tmp1 = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.h[record.fontID];
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_symbols_timeline_Frame = function() {
};
$hxClasses["openfl._internal.symbols.timeline.Frame"] = openfl__$internal_symbols_timeline_Frame;
openfl__$internal_symbols_timeline_Frame.__name__ = ["openfl","_internal","symbols","timeline","Frame"];
openfl__$internal_symbols_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_symbols_timeline_Frame
};
var openfl__$internal_symbols_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.symbols.timeline.FrameObject"] = openfl__$internal_symbols_timeline_FrameObject;
openfl__$internal_symbols_timeline_FrameObject.__name__ = ["openfl","_internal","symbols","timeline","FrameObject"];
openfl__$internal_symbols_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_symbols_timeline_FrameObject
};
var openfl__$internal_symbols_timeline_FrameObjectType = $hxClasses["openfl._internal.symbols.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","symbols","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_symbols_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_symbols_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
var openfl__$internal_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["openfl._internal.text.GlyphPosition"] = openfl__$internal_text_GlyphPosition;
openfl__$internal_text_GlyphPosition.__name__ = ["openfl","_internal","text","GlyphPosition"];
openfl__$internal_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: openfl__$internal_text_GlyphPosition
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	var _this = openfl_text_Font.__fontByName;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
			}
		}
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	var font = openfl__$internal_text_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	var tmp;
	if(bold && italic) {
		var _this = openfl_text_Font.__fontByName;
		var key = fontNamePrefix + " Bold Italic";
		if(__map_reserved[key] != null) {
			tmp = _this.existsReserved(key);
		} else {
			tmp = _this.h.hasOwnProperty(key);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else {
		var tmp1;
		if(bold) {
			var _this1 = openfl_text_Font.__fontByName;
			var key1 = fontNamePrefix + " Bold";
			if(__map_reserved[key1] != null) {
				tmp1 = _this1.existsReserved(key1);
			} else {
				tmp1 = _this1.h.hasOwnProperty(key1);
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			fontName = fontNamePrefix + " Bold";
			bold = false;
		} else {
			var tmp2;
			if(italic) {
				var _this2 = openfl_text_Font.__fontByName;
				var key2 = fontNamePrefix + " Italic";
				if(__map_reserved[key2] != null) {
					tmp2 = _this2.existsReserved(key2);
				} else {
					tmp2 = _this2.h.hasOwnProperty(key2);
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				fontName = fontNamePrefix + " Italic";
				italic = false;
			} else {
				if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
					bold = false;
				}
				if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
					italic = false;
				}
			}
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return openfl__$internal_text_TextEngine.findFontVariant(format);
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textBounds: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__restrictRegexp: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__useIntAdvances: null
	,__cairoFont: null
	,__font: null
	,createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.offsetX < x) {
				x = group.offsetX;
			}
			if(group.offsetY < y) {
				y = group.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) {
			return null;
		}
		if(this.lineBreaks.get_length() == 0) {
			return this.text;
		} else {
			return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.text,index > 0 ? this.lineBreaks.get(index - 1) : 0,this.lineBreaks.get(index));
		}
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Math.min(br,lf) | 0;
		}
		if(lf == -1) {
			return Math.min(br,cr) | 0;
		}
		if(br == -1) {
			return Math.min(cr,lf) | 0;
		}
		return Math.min(Math.min(cr,lf),br) | 0;
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var leading;
			var heightValue;
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
		if(this.scrollV > this.maxScrollV) {
			this.scrollV = this.maxScrollV;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		var getPositions = function(text,startIndex,endIndex) {
			var positions1 = [];
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			if(_gthis.__useIntAdvances == null) {
				var getPositions1 = new EReg("Trident/7.0","");
				_gthis.__useIntAdvances = getPositions1.match(window.navigator.userAgent);
			}
			if(_gthis.__useIntAdvances) {
				var previousWidth = 0.0;
				var width;
				var _g1 = startIndex;
				var _g = endIndex;
				while(_g1 < _g) {
					var i = _g1++;
					width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,startIndex,i + 1)).width;
					positions1.push(width - previousWidth);
					previousWidth = width;
				}
			} else {
				var _g11 = startIndex;
				var _g2 = endIndex;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var advance;
					if(i1 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text) - 1) {
						var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text,i1 + 1)).width;
						var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text,i1,2)).width;
						advance = twoWidths - nextWidth;
					} else {
						advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text,i1)).width;
					}
					positions1.push(advance);
				}
			}
			return positions1;
		};
		var getPositionsWidth = function(positions2) {
			var width1 = 0.0;
			var _g3 = 0;
			while(_g3 < positions2.length) {
				var position = positions2[_g3];
				++_g3;
				width1 += position;
			}
			return width1;
		};
		var getTextWidth = function(text1) {
			return openfl__$internal_text_TextEngine.__context.measureText(text1).width;
		};
		var nextLayoutGroup = function(startIndex1,endIndex1) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,startIndex1,endIndex1);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex1;
				layoutGroup.endIndex = endIndex1;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var nextFormatRange = function() {
			var nextFormatRange1 = _gthis.textFormatRanges.get_length() - 1;
			if(rangeIndex < nextFormatRange1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
			}
		};
		var setFormattedPositions = function(startIndex2,endIndex2) {
			if(endIndex2 <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex2,endIndex2);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex2;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
						widthValue += getPositionsWidth(positions);
					}
					if(tempRangeEnd != endIndex2) {
						nextFormatRange();
						tempIndex = tempRangeEnd;
						if(endIndex2 < formatRange.end) {
							tempRangeEnd = endIndex2;
						} else {
							tempRangeEnd = formatRange.end;
						}
						++countRanges;
					} else {
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex3) {
			if(endIndex3 <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex3);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex3);
				layoutGroup.positions = positions;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex3 == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd1 = endIndex3 < formatRange.end ? endIndex3 : formatRange.end;
					if(textIndex != tempRangeEnd1) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd1);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd1);
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd1;
					}
					if(tempRangeEnd1 == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd1 == endIndex3) {
						break;
					}
					nextFormatRange();
					setLineMetrics();
				}
			}
			textIndex = endIndex3;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i2 = _gthis.layoutGroups.get_length();
			while(--i2 > -1) {
				var lg = _gthis.layoutGroups.get(i2);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			lineIndex += 1;
			offsetX = 2;
		};
		var breakLongWords = function(endIndex4) {
			var remainingPositions = positions;
			var i3;
			var j;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempPositions1;
			var tempWidth = getPositionsWidth(remainingPositions);
			while(offsetX + tempWidth > _gthis.width - 2) {
				j = 0;
				i3 = j;
				positionWidth = 0.0;
				while(offsetX + positionWidth < _gthis.width - 2) {
					currentPosition = remainingPositions[i3];
					if(currentPosition == 0.0) {
						++i3;
						++j;
					} else {
						positionWidth += currentPosition;
						++i3;
					}
				}
				if(i3 < 2 && positionWidth > _gthis.width - 4) {
					if(textIndex + i3 - j == endIndex4) {
						break;
					}
				} else {
					while(offsetX + positionWidth > _gthis.width - 2) {
						--i3;
						if(i3 - j > 0) {
							setFormattedPositions(textIndex,textIndex + i3 - j);
							positionWidth = widthValue;
						} else {
							i3 = 1;
							j = 0;
						}
					}
				}
				placeIndex = textIndex + i3 - j;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex4);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex5) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex5);
			}
			placeFormattedText(endIndex5);
		};
		nextFormatRange();
		setLineMetrics();
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			alignBaseline();
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(true) {
				var tmp = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
				if(textIndex >= tmp) {
					break;
				}
				var endIndex6 = -1;
				if(spaceIndex == -1) {
					endIndex6 = breakIndex;
				} else {
					endIndex6 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex6) {
						endIndex6 = breakIndex;
					}
				}
				if(endIndex6 == -1) {
					endIndex6 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
				}
				setFormattedPositions(textIndex,endIndex6);
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex6 == spaceIndex + 1) {
						--endIndex6;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex6 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i4 = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i4);
						if(i4 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i4;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g12 = this.layoutGroups.get_length() - offsetCount;
						var _g4 = this.layoutGroups.get_length();
						while(_g12 < _g4) {
							var i5 = _g12++;
							layoutGroup = this.layoutGroups.get(i5);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex6);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex) {
					if(lineFormat.align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex6;
				} else if(layoutGroup == null || lineFormat.align == 2) {
					placeText(endIndex6);
				} else {
					layoutGroup.endIndex = endIndex6;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					if(endIndex6 == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
					}
					if(breakIndex == endIndex6) {
						++endIndex6;
					}
					offsetX += widthValue;
					textIndex = endIndex6;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					nextFormatRange();
					setLineMetrics();
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				var tmp1;
				if(!(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1))) {
					var tmp2 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
					tmp1 = textIndex > tmp2;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					break;
				}
			}
		} else {
			var tmp3 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
			if(textIndex < tmp3) {
				var tmp4 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
				setFormattedPositions(textIndex,tmp4);
				placeText(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text));
				alignBaseline();
			}
			textIndex += 1;
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.get_length();
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,trimText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(value) > this.maxChars) {
			value = lime_text__$UTF8String_UTF8String_$Impl_$.substr(value,0,this.maxChars);
		}
		return value;
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_restrict: function(value) {
		if(lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.restrict,value)) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.restrict) == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.letterSpacing = 0;
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
	this.__create(this.__direction,this.__script,this.__language);
};
$hxClasses["openfl._internal.text.TextLayout"] = openfl__$internal_text_TextLayout;
openfl__$internal_text_TextLayout.__name__ = ["openfl","_internal","text","TextLayout"];
openfl__$internal_text_TextLayout.prototype = {
	autoHint: null
	,font: null
	,glyphs: null
	,letterSpacing: null
	,positions: null
	,size: null
	,text: null
	,__buffer: null
	,__direction: null
	,__dirty: null
	,__handle: null
	,__language: null
	,__script: null
	,__font: null
	,__hbBuffer: null
	,__hbFont: null
	,__create: function(direction,script,language) {
		if(language.length != 4) {
			return;
		}
		this.__hbBuffer = lime_text_harfbuzz__$HBBuffer_HBBuffer_$Impl_$._new();
		var this1 = this.__hbBuffer;
		switch(direction) {
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		default:
		}
		var this2 = this.__hbBuffer;
		var this3 = this.__hbBuffer;
		var value = lime_text_harfbuzz__$HBLanguage_HBLanguage_$Impl_$._new(language);
	}
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: openfl__$internal_text_TextLayout
};
var openfl__$internal_text__$TextLayout_TextDirection_$Impl_$ = {};
$hxClasses["openfl._internal.text._TextLayout.TextDirection_Impl_"] = openfl__$internal_text__$TextLayout_TextDirection_$Impl_$;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.__name__ = ["openfl","_internal","text","_TextLayout","TextDirection_Impl_"];
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.toHBDirection = function(this1) {
	switch(this1) {
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 6;
	case 7:
		return 7;
	default:
		return 0;
	}
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var openfl__$internal_text__$TextLayout_TextScript_$Impl_$ = {};
$hxClasses["openfl._internal.text._TextLayout.TextScript_Impl_"] = openfl__$internal_text__$TextLayout_TextScript_$Impl_$;
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.__name__ = ["openfl","_internal","text","_TextLayout","TextScript_Impl_"];
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.toHBScript = function(this1) {
	return 1517910393;
};
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_utils_AbstractNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	this.stitch = stitch;
	this.stitch_threshold = stitch_threshold;
	this.octaves = octaves;
	this.channels = channels;
	this.grayscale = grayScale;
	this.calculateOctaves(falloff);
};
$hxClasses["openfl._internal.utils.AbstractNoise"] = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_AbstractNoise.__name__ = ["openfl","_internal","utils","AbstractNoise"];
openfl__$internal_utils_AbstractNoise.prototype = {
	octaves: null
	,stitch: null
	,stitch_threshold: null
	,channels: null
	,grayscale: null
	,octaves_frequencies: null
	,octaves_persistences: null
	,persistence_max: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
	}
	,stitching: function(bitmap,color,px,py,stitch_w,stitch_h,width,height) {
		var r = color >> 16 & 255;
		var g = color >> 8 & 255;
		var b = color & 255;
		if(width - stitch_w < px) {
			var dest = bitmap.getPixel32(width - px,py);
			var dest_r = dest >> 16 & 255;
			var dest_g = dest >> 8 & 255;
			var dest_b = dest & 255;
			var u = (width - px) / stitch_w;
			var uu = u * u;
			r = this.mixI(dest_r,r,u);
			g = this.mixI(dest_g,g,u);
			b = this.mixI(dest_b,b,u);
		}
		if(height - stitch_h < py) {
			var dest1 = bitmap.getPixel32(px,height - py);
			var dest_r1 = dest1 >> 16 & 255;
			var dest_g1 = dest1 >> 8 & 255;
			var dest_b1 = dest1 & 255;
			var u1 = (height - py) / stitch_h;
			var uu1 = u1 * u1;
			r = this.mixI(dest_r1,r,u1);
			g = this.mixI(dest_g1,g,u1);
			b = this.mixI(dest_b1,b,u1);
		}
		return -16777216 | r << 16 | g << 8 | b;
	}
	,color: function(r_noise,g_noise,b_noise) {
		var color_r = 0;
		var color_g = 0;
		var color_b = 0;
		if(null != r_noise) {
			color_r = this.noiseToColor(r_noise);
		}
		if(null != g_noise) {
			color_g = this.noiseToColor(g_noise);
		}
		if(null != b_noise) {
			color_b = this.noiseToColor(b_noise);
		}
		return -16777216 | color_r << 16 | color_g << 8 | color_b;
	}
	,noiseToColor: function(noise) {
		return (noise * this.persistence_max + 1.0) * 128 | 0;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
	}
	,mixI: function(x,y,t) {
		return (1.0 - t) * x + t * y | 0;
	}
	,mix: function(x,y,t) {
		return (1.0 - t) * x + t * y;
	}
	,fastfloor: function(x) {
		if(x > 0) {
			return x | 0;
		} else {
			return x - 1 | 0;
		}
	}
	,dot2d: function(grad,x,y) {
		return grad[0] * x + grad[1] * y;
	}
	,dot: function(grad,x,y,z) {
		return grad[0] * x + grad[1] * y + grad[2] * z;
	}
	,calculateOctaves: function(fPersistence) {
		var fFreq;
		var fPers;
		this.octaves_frequencies = [];
		this.octaves_persistences = [];
		this.persistence_max = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2.0,i);
			fPers = Math.pow(fPersistence,i);
			this.persistence_max += fPers;
			this.octaves_frequencies.push(fFreq);
			this.octaves_persistences.push(fPers);
		}
		this.persistence_max = 1.0 / this.persistence_max;
	}
	,__class__: openfl__$internal_utils_AbstractNoise
};
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold) {
	if(stitch_threshold == null) {
		stitch_threshold = 0.05;
	}
	if(stitch == null) {
		stitch = false;
	}
	openfl__$internal_utils_AbstractNoise.call(this,seed,octaves,channels,grayScale,falloff,stitch,stitch_threshold);
	this.p_perm = [];
	var _g = 0;
	while(_g < 512) {
		var i = _g++;
		this.p_perm[i] = openfl__$internal_utils_PerlinNoise.P[i & 255];
	}
	this.base_factor = 0.03125;
	this.setSeed(seed);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.__super__ = openfl__$internal_utils_AbstractNoise;
openfl__$internal_utils_PerlinNoise.prototype = $extend(openfl__$internal_utils_AbstractNoise.prototype,{
	p_perm: null
	,x_offset: null
	,y_offset: null
	,z_offset: null
	,base_factor: null
	,fill: function(bitmap,_scale_x,_scale_y,_scale_z) {
		var width = bitmap.width;
		var height = bitmap.height;
		var octaves = this.octaves;
		var octaves_frequencies = this.octaves_frequencies;
		var octaves_persistences = this.octaves_persistences;
		var isRed = (1 & this.channels) == 1;
		var isGreen = (2 & this.channels) == 2;
		var isBlue = (4 & this.channels) == 4;
		var channels = 0;
		if(isRed) {
			++channels;
		}
		if(isGreen) {
			++channels;
		}
		if(isBlue) {
			++channels;
		}
		var grayscale = this.grayscale;
		var stitch_w = this.stitch_threshold * width | 0;
		var stitch_h = this.stitch_threshold * height | 0;
		var base_x = _scale_x * this.base_factor + this.x_offset;
		_scale_y = _scale_y * this.base_factor + this.y_offset;
		_scale_z = _scale_z * this.base_factor + this.z_offset;
		var g_offset = 1.0;
		var b_offset = 2.0;
		var _g1 = 0;
		var _g = height;
		while(_g1 < _g) {
			var py = _g1++;
			_scale_x = base_x;
			var _g3 = 0;
			var _g2 = width;
			while(_g3 < _g2) {
				var px = _g3++;
				var color1 = 0.0;
				var color2 = 0.0;
				var color3 = 0.0;
				var _g5 = 0;
				var _g4 = octaves;
				while(_g5 < _g4) {
					var i = _g5++;
					var frequency = octaves_frequencies[i];
					var persistence = octaves_persistences[i];
					color1 += this.noise(_scale_x * frequency,_scale_y * frequency,_scale_z * frequency) * persistence;
					if(!grayscale) {
						if(1 < channels) {
							color2 += this.noise((_scale_x + g_offset) * frequency,(_scale_y + g_offset) * frequency,_scale_z * frequency) * persistence;
						}
						if(2 < channels) {
							color3 += this.noise((_scale_x + b_offset) * frequency,(_scale_y + b_offset) * frequency,_scale_z * frequency) * persistence;
						}
					}
				}
				var color = 0;
				if(grayscale) {
					color = this.color(color1,color1,color1);
				} else if(isRed && isGreen && isBlue) {
					color = this.color(color1,color2,color3);
				} else if(isRed && isGreen) {
					color = this.color(color1,color2,null);
				} else if(isRed && isBlue) {
					color = this.color(color1,null,color2);
				} else if(isGreen && isBlue) {
					color = this.color(null,color1,color2);
				} else if(isRed) {
					color = this.color(color1,null,null);
				} else if(isGreen) {
					color = this.color(null,color1,null);
				} else if(isBlue) {
					color = this.color(null,null,color1);
				}
				if(this.stitch) {
					color = this.stitching(bitmap,color,px,py,stitch_w,stitch_h,width,height);
				}
				bitmap.setPixel32(px,py,color);
				_scale_x += this.base_factor;
			}
			_scale_y += this.base_factor;
		}
	}
	,noise: function(x,y,z) {
		var xf = x - x % 1;
		var yf = y - y % 1;
		var zf = z - z % 1;
		x -= xf;
		y -= yf;
		z -= zf;
		var X = (xf | 0) & 255;
		var Y = (yf | 0) & 255;
		var Z = (zf | 0) & 255;
		var u = this.fade(x);
		var v = this.fade(y);
		var w = this.fade(z);
		var A = this.p_perm[X] + Y;
		var AA = this.p_perm[A] + Z;
		var AB = this.p_perm[A + 1] + Z;
		var B = this.p_perm[X + 1] + Y;
		var BA = this.p_perm[B] + Z;
		var BB = this.p_perm[B + 1] + Z;
		var x1 = x - 1;
		var y1 = y - 1;
		var z1 = z - 1;
		var hash = this.p_perm[BB + 1] & 15;
		var g1 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z1 : hash < 4 ? -y1 : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AB + 1] & 15;
		var g2 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z1 : hash < 4 ? -y1 : hash == 14 ? -x : -z1);
		hash = this.p_perm[BA + 1] & 15;
		var g3 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z1 : hash < 4 ? -y : hash == 14 ? -x1 : -z1);
		hash = this.p_perm[AA + 1] & 15;
		var g4 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z1 : hash < 4 ? -y : hash == 14 ? -x : -z1);
		hash = this.p_perm[BB] & 15;
		var g5 = ((hash & 1) == 0 ? hash < 8 ? x1 : y1 : hash < 8 ? -x1 : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x1 : z : hash < 4 ? -y1 : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AB] & 15;
		var g6 = ((hash & 1) == 0 ? hash < 8 ? x : y1 : hash < 8 ? -x : -y1) + ((hash & 2) == 0 ? hash < 4 ? y1 : hash == 12 ? x : z : hash < 4 ? -y1 : hash == 14 ? -x : -z);
		hash = this.p_perm[BA] & 15;
		var g7 = ((hash & 1) == 0 ? hash < 8 ? x1 : y : hash < 8 ? -x1 : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x1 : z : hash < 4 ? -y : hash == 14 ? -x1 : -z);
		hash = this.p_perm[AA] & 15;
		var g8 = ((hash & 1) == 0 ? hash < 8 ? x : y : hash < 8 ? -x : -y) + ((hash & 2) == 0 ? hash < 4 ? y : hash == 12 ? x : z : hash < 4 ? -y : hash == 14 ? -x : -z);
		g2 += u * (g1 - g2);
		g4 += u * (g3 - g4);
		g6 += u * (g5 - g6);
		g8 += u * (g7 - g8);
		g4 += v * (g2 - g4);
		g8 += v * (g6 - g8);
		return g8 + w * (g4 - g8);
	}
	,setSeed: function(seed) {
		seed = seed * 16807.0 % 2147483647 | 0;
		this.x_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.y_offset = seed;
		seed = seed * 16807.0 % 2147483647 | 0;
		this.z_offset = seed;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
});
var openfl__$internal_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.utils.TouchData"] = openfl__$internal_utils_TouchData;
openfl__$internal_utils_TouchData.__name__ = ["openfl","_internal","utils","TouchData"];
openfl__$internal_utils_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_utils_TouchData
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.h[$window.id] = $window;
		var f = $bind(this,this.__onWindowClose);
		var a1 = $window;
		var tmp = function() {
			f(a1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
		renderer.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			var bitmap = this.__cacheBitmap;
			if(!(!bitmap.__renderable)) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable)) {
					var alpha1 = renderer.__getAlpha(this.__worldAlpha);
					if(!(alpha1 <= 0)) {
						if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
							renderer.__setBlendMode(this.__worldBlendMode);
							renderer.__pushMaskObject(this);
							var context1 = renderer.context;
							renderer.setTransform(this.__renderTransform,context1);
							var color = this.opaqueBackground;
							context1.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context1.fillRect(0,0,this.get_width(),this.get_height());
							renderer.__popMaskObject(this);
						}
						if(this.__graphics != null) {
							if(!(!this.__renderable)) {
								var alpha2 = renderer.__getAlpha(this.__worldAlpha);
								if(!(alpha2 <= 0)) {
									var graphics = this.__graphics;
									if(graphics != null) {
										openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
										var bounds = graphics.__bounds;
										var width = graphics.__width;
										var height = graphics.__height;
										if(graphics.__canvas != null) {
											var context2 = renderer.context;
											var scrollRect1 = this.__scrollRect;
											if(width > 0 && height > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
												renderer.__setBlendMode(this.__worldBlendMode);
												renderer.__pushMaskObject(this);
												context2.globalAlpha = alpha2;
												renderer.setTransform(graphics.__worldTransform,context2);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context2.scale(reverseScale,reverseScale);
												}
												context2.drawImage(graphics.__canvas,0,0,width,height);
												renderer.__popMaskObject(this);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(!(!this.__renderable)) {
				var alpha3 = renderer.__getAlpha(this.__worldAlpha);
				if(alpha3 > 0 && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
					var context3 = renderer.context;
					renderer.__setBlendMode(this.__worldBlendMode);
					renderer.__pushMaskObject(this,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__bitmapData.image);
					context3.globalAlpha = alpha3;
					var scrollRect2 = this.__scrollRect;
					renderer.setTransform(this.__renderTransform,context3);
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context3.imageSmoothingEnabled = false;
					}
					if(scrollRect2 == null) {
						context3.drawImage(this.__bitmapData.image.get_src(),0,0,this.__bitmapData.image.width,this.__bitmapData.image.height);
					} else {
						context3.drawImage(this.__bitmapData.image.get_src(),scrollRect2.x,scrollRect2.y,scrollRect2.width,scrollRect2.height);
					}
					if(!renderer.__allowSmoothing || !this.smoothing) {
						context3.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(this,false);
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		renderer.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			var tmp = this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0;
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
				if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas != graphics.__canvas) {
					if(graphics.__canvas != null) {
						if(this.__canvas != graphics.__canvas) {
							if(this.__canvas != null) {
								renderer.element.removeChild(this.__canvas);
							}
							this.__canvas = graphics.__canvas;
							this.__context = graphics.__context;
							renderer.__initializeElement(this,this.__canvas);
						}
					} else {
						openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
					}
				}
				if(this.__canvas != null) {
					renderer.__pushMaskObject(this);
					var cacheTransform = this.__renderTransform;
					this.__renderTransform = graphics.__worldTransform;
					if(graphics.__transformDirty) {
						graphics.__transformDirty = false;
						this.__renderTransformChanged = true;
					}
					renderer.__updateClip(this);
					renderer.__applyStyle(this,true,true,true);
					this.__renderTransform = cacheTransform;
					renderer.__popMaskObject(this);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(this,renderer);
			}
			if(this.stage != null && this.__worldVisible && this.__renderable && this.__bitmapData != null && this.__bitmapData.__isValid && this.__bitmapData.readable) {
				renderer.__pushMaskObject(this);
				if(this.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderer);
				}
				renderer.__popMaskObject(this);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color = this.opaqueBackground;
						context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_context3D_Context3DBitmap.renderMask(this,renderer);
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__bitmapData == null || this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderer,this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion);
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.height) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleY(value / this.__bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.width) {
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
				this.set_scaleX(value / this.__bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = ["openfl","display","DisplayObjectRenderer"];
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__allowSmoothing: null
	,__blendMode: null
	,__cleared: null
	,__context: null
	,__overrideBlendMode: null
	,__roundPixels: null
	,__stage: null
	,__tempColorTransform: null
	,__transparent: null
	,__type: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__getColorTransform: function(value) {
		if(this.__worldColorTransform != null) {
			this.__tempColorTransform.__copyFrom(this.__worldColorTransform);
			this.__tempColorTransform.__combine(value);
			return this.__tempColorTransform;
		} else {
			return value;
		}
	}
	,__popMask: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__popMaskRect: function() {
	}
	,__pushMask: function(mask) {
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskRect: function(rect,transform) {
	}
	,__render: function(object) {
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = ["openfl","display","CairoRenderer"];
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	cairo: null
	,__matrix: null
	,__matrix3: null
	,applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		mask.__renderCairoMask(this);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		object.__renderCairo(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.cairo.setOperator(12);
			break;
		case 2:
			this.cairo.setOperator(17);
			break;
		case 3:
			this.cairo.setOperator(23);
			break;
		case 5:
			this.cairo.setOperator(21);
			break;
		case 7:
			this.cairo.setOperator(2);
			break;
		case 8:
			this.cairo.setOperator(18);
			break;
		case 9:
			this.cairo.setOperator(14);
			break;
		case 11:
			this.cairo.setOperator(16);
			break;
		case 12:
			this.cairo.setOperator(15);
			break;
		default:
			this.cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = ["openfl","display","CanvasRenderer"];
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	context: null
	,pixelRatio: null
	,__isDOM: null
	,__tempMatrix: null
	,applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		mask.__renderCanvasMask(this);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		object.__renderCanvas(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.context.globalCompositeOperation = "screen";
			break;
		default:
			this.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = ["openfl","display","DOMRenderer"];
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	element: null
	,pixelRatio: null
	,__canvasRenderer: null
	,__clipRects: null
	,__currentClipRect: null
	,__numClipRects: null
	,__transformOriginProperty: null
	,__transformProperty: null
	,__vendorPrefix: null
	,__z: null
	,applyStyle: function(parent,childElement) {
		if(parent != null && childElement != null) {
			if(parent.__style == null || childElement.parentElement != this.element) {
				this.__initializeElement(parent,childElement);
			}
			parent.__style = childElement.style;
			this.__updateClip(parent);
			this.__applyStyle(parent,true,true,true);
		}
	}
	,clearStyle: function(childElement) {
		if(childElement != null && childElement.parentElement == this.element) {
			this.element.removeChild(childElement);
		}
	}
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			style.setProperty(this.__transformProperty,this.__roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		object.__renderDOM(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\n\t\tif (color.a == 0.0) {\n\t\t\t\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t} else if (openfl_HasColorTransform) {\n\t\t\t\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\t\t\t\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\t\t\t\n\t\t\tif (color.a > 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tif (openfl_HasColorTransform) {\n\t\t\t\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t\t\n\t\t}\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = ["openfl","display","DisplayObjectShader"];
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_display_DisplayObjectShader
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl__$internal_renderer_ShaderBuffer();
	});
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__quadBuffer: null
	,__renderTransform: null
	,__shaderBufferPool: null
	,__strokePadding: null
	,__transformDirty: null
	,__triangleIndexBuffer: null
	,__triangleIndexBufferCount: null
	,__triangleIndexBufferData: null
	,__usedShaderBuffers: null
	,__vertexBuffer: null
	,__vertexBufferCount: null
	,__vertexBufferCountUVT: null
	,__vertexBufferData: null
	,__vertexBufferDataUVT: null
	,__vertexBufferUVT: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g1 = 0;
			var _g = colors.length;
			while(_g1 < _g) {
				var i = _g1++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g11 = 0;
			var _g2 = colors.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				ratios.push(Math.ceil(i1 / colors.length * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g3 = 0;
		while(_g3 < alphas.length) {
			var alpha = alphas[_g3];
			++_g3;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,beginShaderFill: function(shader,matrix) {
		if(shader != null) {
			var shaderBuffer = this.__shaderBufferPool.get();
			this.__usedShaderBuffers.add(shaderBuffer);
			shaderBuffer.update(shader);
			this.__commands.beginShaderFill(shaderBuffer);
		}
	}
	,clear: function() {
		var _g_head = this.__usedShaderBuffers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var shaderBuffer = val;
			this.__shaderBufferPool.release(shaderBuffer);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var shaderFill;
		var stroke;
		var path;
		var trianglePath;
		var quadPath;
		var _g = 0;
		while(_g < graphicsData.get_length()) {
			var graphics = graphicsData.get(_g);
			++_g;
			var _g1 = graphics.__graphicsDataType;
			switch(_g1) {
			case openfl_display_GraphicsDataType.STROKE:
				stroke = graphics;
				if(stroke.fill != null) {
					var thickness = stroke.thickness;
					if(isNaN(thickness)) {
						thickness = null;
					}
					var _g11 = stroke.fill.__graphicsFillType;
					switch(_g11) {
					case openfl_display_GraphicsFillType.SOLID_FILL:
						fill = stroke.fill;
						this.lineStyle(thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						break;
					case openfl_display_GraphicsFillType.GRADIENT_FILL:
						gradientFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
						break;
					case openfl_display_GraphicsFillType.BITMAP_FILL:
						bitmapFill = stroke.fill;
						this.lineStyle(thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
						break;
					default:
					}
				} else {
					this.lineStyle();
				}
				break;
			case openfl_display_GraphicsDataType.SOLID:
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
				break;
			case openfl_display_GraphicsDataType.GRADIENT:
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
				break;
			case openfl_display_GraphicsDataType.PATH:
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
				break;
			case openfl_display_GraphicsDataType.BITMAP:
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
				break;
			case openfl_display_GraphicsDataType.END:
				this.endFill();
				break;
			case openfl_display_GraphicsDataType.QUAD_PATH:
				quadPath = graphics;
				this.drawQuads(quadPath.rects,quadPath.indices,quadPath.transforms);
				break;
			case openfl_display_GraphicsDataType.TRIANGLE_PATH:
				trianglePath = graphics;
				this.drawTriangles(trianglePath.vertices,trianglePath.indices,trianglePath.uvtData,trianglePath.culling);
				break;
			case openfl_display_GraphicsDataType.SHADER:
				shaderFill = graphics;
				this.beginShaderFill(shaderFill.shader,shaderFill.matrix);
				break;
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = 0;
		}
		var dataIndex = 0;
		if(winding == 1) {
			this.__commands.windingNonZero();
		}
		var _g = 0;
		try {
			while(_g < commands.get_length()) {
				var command = commands.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 3:
					this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 4:
					this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 5:
					this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					break;
				case 6:
					this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawQuads: function(rects,indices,transforms) {
		if(rects == null) {
			return;
		}
		var hasIndices = indices != null;
		var transformABCD = false;
		var transformXY = false;
		var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
		if(length == 0) {
			return;
		}
		if(transforms != null) {
			if(transforms.get_length() >= length * 6) {
				transformABCD = true;
				transformXY = true;
			} else if(transforms.get_length() >= length * 4) {
				transformABCD = true;
			} else if(transforms.get_length() >= length * 2) {
				transformXY = true;
			}
		}
		var tileRect = openfl_geom_Rectangle.__pool.get();
		var tileTransform = openfl_geom_Matrix.__pool.get();
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var ri;
		var ti;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			if(hasIndices) {
				ri = indices.get(i) * 4;
			} else {
				ri = i * 4;
			}
			if(ri < 0) {
				continue;
			}
			tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
			if(tileRect.width <= 0 || tileRect.height <= 0) {
				continue;
			}
			if(transformABCD && transformXY) {
				ti = i * 6;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
			} else if(transformABCD) {
				ti = i * 4;
				tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
			} else if(transformXY) {
				ti = i * 2;
				tileTransform.tx = transforms.get(ti);
				tileTransform.ty = transforms.get(ti + 1);
			} else {
				tileTransform.tx = tileRect.x;
				tileTransform.ty = tileRect.y;
			}
			tileRect.__transform(tileRect,tileTransform);
			if(minX > tileRect.x) {
				minX = tileRect.x;
			}
			if(minY > tileRect.y) {
				minY = tileRect.y;
			}
			if(maxX < tileRect.get_right()) {
				maxX = tileRect.get_right();
			}
			if(maxY < tileRect.get_bottom()) {
				maxY = tileRect.get_bottom();
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawQuads(rects,indices,transforms);
		this.set___dirty(true);
		this.__visible = true;
		openfl_geom_Rectangle.__pool.release(tileRect);
		openfl_geom_Matrix.__pool.release(tileTransform);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		var xw = x + width;
		var yh = y + height;
		var minSize = width < height ? width * 2 : height * 2;
		if(topLeftRadius < minSize) {
			topLeftRadius = topLeftRadius;
		} else {
			topLeftRadius = minSize;
		}
		if(topRightRadius < minSize) {
			topRightRadius = topRightRadius;
		} else {
			topRightRadius = minSize;
		}
		if(bottomLeftRadius < minSize) {
			bottomLeftRadius = bottomLeftRadius;
		} else {
			bottomLeftRadius = minSize;
		}
		if(bottomRightRadius < minSize) {
			bottomRightRadius = bottomRightRadius;
		} else {
			bottomRightRadius = minSize;
		}
		var anchor = 1 - Math.sin(45 * (Math.PI / 180));
		var control = 1 - Math.tan(22.5 * (Math.PI / 180));
		var a = bottomRightRadius * anchor;
		var s = bottomRightRadius * control;
		this.moveTo(xw,yh - bottomRightRadius);
		this.curveTo(xw,yh - s,xw - a,yh - a);
		this.curveTo(xw - s,yh,xw - bottomRightRadius,yh);
		a = bottomLeftRadius * anchor;
		s = bottomLeftRadius * control;
		this.lineTo(x + bottomLeftRadius,yh);
		this.curveTo(x + s,yh,x + a,yh - a);
		this.curveTo(x,yh - s,x,yh - bottomLeftRadius);
		a = topLeftRadius * anchor;
		s = topLeftRadius * control;
		this.lineTo(x,y + topLeftRadius);
		this.curveTo(x,y + s,x + a,y + a);
		this.curveTo(x + s,y,x + topLeftRadius,y);
		a = topRightRadius * anchor;
		s = topRightRadius * control;
		this.lineTo(xw - topRightRadius,y);
		this.curveTo(xw - s,y,xw - a,y + a);
		this.curveTo(xw,y + s,xw,y + topRightRadius);
		this.lineTo(xw,yh - bottomRightRadius);
		this.set___dirty(true);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		if(vertices == null || vertices.get_length() == 0) {
			return;
		}
		var vertLength = vertices.get_length() / 2 | 0;
		if(indices == null) {
			if(vertLength % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g1 = 0;
			var _g = vertLength;
			while(_g1 < _g) {
				var i = _g1++;
				indices.push(i);
			}
		}
		if(culling == null) {
			culling = 1;
		}
		var x;
		var y;
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		var _g2 = vertLength;
		while(_g11 < _g2) {
			var i1 = _g11++;
			x = vertices.get(i1 * 2);
			y = vertices.get(i1 * 2 + 1);
			if(minX > x) {
				minX = x;
			}
			if(minY > y) {
				minY = y;
			}
			if(maxX < x) {
				maxX = x;
			}
			if(maxY < y) {
				maxY = y;
			}
		}
		this.__inflateBounds(minX,minY);
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) {
			recurse = true;
		}
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path = null;
		var stroke;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 4:case 5:case 6:case 7:case 9:case 10:case 17:case 18:
				if(path == null) {
					path = new openfl_display_GraphicsPath();
				}
				break;
			default:
				if(path != null) {
					graphicsData.push(path);
					path = null;
				}
			}
			switch(type[1]) {
			case 0:
				var _g2 = data.prev;
				switch(_g2[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
				var this1 = data;
				var c = this1;
				graphicsData.push(new openfl_display_GraphicsBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]));
				break;
			case 1:
				var _g3 = data.prev;
				switch(_g3[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
				var this2 = data;
				var c1 = this2;
				graphicsData.push(new openfl_display_GraphicsSolidFill(c1.buffer.i[c1.iPos],1));
				break;
			case 2:
				var _g4 = data.prev;
				switch(_g4[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
				var this3 = data;
				var c2 = this3;
				graphicsData.push(new openfl_display_GraphicsGradientFill(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]));
				break;
			case 3:
				break;
			case 4:
				var _g5 = data.prev;
				switch(_g5[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
				var this4 = data;
				var c3 = this4;
				path.cubicCurveTo(c3.buffer.f[c3.fPos],c3.buffer.f[c3.fPos + 1],c3.buffer.f[c3.fPos + 2],c3.buffer.f[c3.fPos + 3],c3.buffer.f[c3.fPos + 4],c3.buffer.f[c3.fPos + 5]);
				break;
			case 5:
				var _g6 = data.prev;
				switch(_g6[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
				var this5 = data;
				var c4 = this5;
				path.curveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				break;
			case 6:
				var _g7 = data.prev;
				switch(_g7[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
				var this6 = data;
				var c5 = this6;
				path.__drawCircle(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2]);
				break;
			case 7:
				var _g8 = data.prev;
				switch(_g8[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
				var this7 = data;
				var c6 = this7;
				path.__drawEllipse(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 3]);
				break;
			case 9:
				var _g9 = data.prev;
				switch(_g9[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
				var this8 = data;
				var c7 = this8;
				path.__drawRect(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 10:
				var _g10 = data.prev;
				switch(_g10[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
				var this9 = data;
				var c8 = this9;
				path.__drawRoundRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3],c8.buffer.f[c8.fPos + 4],c8.buffer.o[c8.oPos] != null ? c8.buffer.o[c8.oPos] : c8.buffer.f[c8.fPos + 4]);
				break;
			case 13:
				var _g11 = data.prev;
				switch(_g11[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
				var this10 = data;
				graphicsData.push(new openfl_display_GraphicsEndFill());
				break;
			case 14:
				var _g12 = data.prev;
				switch(_g12[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
				var this11 = data;
				var c9 = this11;
				path = null;
				break;
			case 15:
				var _g13 = data.prev;
				switch(_g13[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
				var this12 = data;
				var c10 = this12;
				break;
			case 16:
				var _g14 = data.prev;
				switch(_g14[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
				var this13 = data;
				var c11 = this13;
				stroke = new openfl_display_GraphicsStroke(c11.buffer.o[c11.oPos],c11.buffer.b[c11.bPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos + 1]);
				stroke.fill = new openfl_display_GraphicsSolidFill(c11.buffer.i[c11.iPos],c11.buffer.f[c11.fPos]);
				graphicsData.push(stroke);
				break;
			case 17:
				var _g15 = data.prev;
				switch(_g15[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
				var this14 = data;
				var c12 = this14;
				path.lineTo(c12.buffer.f[c12.fPos],c12.buffer.f[c12.fPos + 1]);
				break;
			case 18:
				var _g16 = data.prev;
				switch(_g16[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
				var this15 = data;
				var c13 = this15;
				path.moveTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			default:
				var _g17 = data.prev;
				switch(_g17[1]) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:case 21:
					break;
				default:
				}
				data.prev = type;
			}
		}
		if(path != null) {
			graphicsData.push(path);
		}
	}
	,__update: function(displayMatrix) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		if(displayMatrix != null) {
			if(displayMatrix.b == 0) {
				scaleX *= displayMatrix.a;
			} else {
				scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
			}
			if(displayMatrix.c == 0) {
				scaleY *= displayMatrix.d;
			} else {
				scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		this.__renderTransform.ty = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (ty - _this1.ty) + _this1.b * (_this1.tx - tx));
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = 0;
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(6);
		this.data.push(controlX1);
		this.data.push(controlY1);
		this.data.push(controlX2);
		this.data.push(controlY2);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(3);
		this.data.push(controlX);
		this.data.push(controlY);
		this.data.push(anchorX);
		this.data.push(anchorY);
	}
	,lineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,moveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,wideLineTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
	,wideMoveTo: function(x,y) {
		if(this.commands == null) {
			this.commands = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
		}
		if(this.data == null) {
			this.data = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		}
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
	,__drawCircle: function(x,y,radius) {
		this.__drawRoundRect(x - radius,y - radius,radius * 2,radius * 2,radius * 2,radius * 2);
	}
	,__drawEllipse: function(x,y,width,height) {
		this.__drawRoundRect(x,y,width,height,width,height);
	}
	,__drawRect: function(x,y,width,height) {
		this.moveTo(x,y);
		this.lineTo(x + width,y);
		this.lineTo(x + width,y + height);
		this.lineTo(x,y + height);
		this.lineTo(x,y);
	}
	,__drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		ellipseWidth *= 0.5;
		ellipseHeight *= 0.5;
		if(ellipseWidth > width / 2) {
			ellipseWidth = width / 2;
		}
		if(ellipseHeight > height / 2) {
			ellipseHeight = height / 2;
		}
		var xe = x + width;
		var ye = y + height;
		var cx1 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.SIN45;
		var cx2 = -ellipseWidth + ellipseWidth * openfl_display_GraphicsPath.TAN22;
		var cy1 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.SIN45;
		var cy2 = -ellipseHeight + ellipseHeight * openfl_display_GraphicsPath.TAN22;
		this.moveTo(xe,ye - ellipseHeight);
		this.curveTo(xe,ye + cy2,xe + cx1,ye + cy1);
		this.curveTo(xe + cx2,ye,xe - ellipseWidth,ye);
		this.lineTo(x + ellipseWidth,ye);
		this.curveTo(x - cx2,ye,x - cx1,ye + cy1);
		this.curveTo(x,ye + cy2,x,ye - ellipseHeight);
		this.lineTo(x,y + ellipseHeight);
		this.curveTo(x,y - cy2,x - cx1,y - cy1);
		this.curveTo(x - cx2,y,x + ellipseWidth,y);
		this.lineTo(xe - ellipseWidth,y);
		this.curveTo(xe + cx2,y,xe + cx1,y - cy1);
		this.curveTo(xe,y - cy2,xe,y + ellipseHeight);
		this.lineTo(xe,ye - ellipseHeight);
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsQuadPath = function(rects,indices,transforms) {
	this.rects = rects;
	this.indices = indices;
	this.transforms = transforms;
	this.__graphicsDataType = openfl_display_GraphicsDataType.QUAD_PATH;
};
$hxClasses["openfl.display.GraphicsQuadPath"] = openfl_display_GraphicsQuadPath;
openfl_display_GraphicsQuadPath.__name__ = ["openfl","display","GraphicsQuadPath"];
openfl_display_GraphicsQuadPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsQuadPath.prototype = {
	indices: null
	,rects: null
	,transforms: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsQuadPath
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\t\t\n\t\tif (color.a == 0.0) {\n\t\t\t\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t} else if (openfl_HasColorTransform) {\n\t\t\t\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\t\t\t\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\t\t\t\n\t\t\tif (color.a > 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tif (openfl_HasColorTransform) {\n\t\t\t\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t\t\n\t\t}\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = ["openfl","display","GraphicsShader"];
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var openfl_display_GraphicsShaderFill = function(shader,matrix) {
	this.shader = shader;
	this.matrix = matrix;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SHADER;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SHADER_FILL;
};
$hxClasses["openfl.display.GraphicsShaderFill"] = openfl_display_GraphicsShaderFill;
openfl_display_GraphicsShaderFill.__name__ = ["openfl","display","GraphicsShaderFill"];
openfl_display_GraphicsShaderFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsShaderFill.prototype = {
	shader: null
	,matrix: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsShaderFill
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(joints == null) {
		joints = 2;
	}
	if(caps == null) {
		caps = 0;
	}
	if(scaleMode == null) {
		scaleMode = 2;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = NaN;
	}
	this.caps = caps;
	this.fill = fill;
	this.joints = joints;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsTrianglePath = function(vertices,indices,uvtData,culling) {
	if(culling == null) {
		culling = 1;
	}
	this.vertices = vertices;
	this.indices = indices;
	this.uvtData = uvtData;
	this.culling = culling;
	this.__graphicsDataType = openfl_display_GraphicsDataType.TRIANGLE_PATH;
};
$hxClasses["openfl.display.GraphicsTrianglePath"] = openfl_display_GraphicsTrianglePath;
openfl_display_GraphicsTrianglePath.__name__ = ["openfl","display","GraphicsTrianglePath"];
openfl_display_GraphicsTrianglePath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsTrianglePath.prototype = {
	culling: null
	,indices: null
	,uvtData: null
	,vertices: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsTrianglePath
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END","QUAD_PATH","TRIANGLE_PATH","SHADER"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.QUAD_PATH = ["QUAD_PATH",6];
openfl_display_GraphicsDataType.QUAD_PATH.toString = $estr;
openfl_display_GraphicsDataType.QUAD_PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.TRIANGLE_PATH = ["TRIANGLE_PATH",7];
openfl_display_GraphicsDataType.TRIANGLE_PATH.toString = $estr;
openfl_display_GraphicsDataType.TRIANGLE_PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SHADER = ["SHADER",8];
openfl_display_GraphicsDataType.SHADER.toString = $estr;
openfl_display_GraphicsDataType.SHADER.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL","SHADER_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.SHADER_FILL = ["SHADER_FILL",4];
openfl_display_GraphicsFillType.SHADER_FILL.toString = $estr;
openfl_display_GraphicsFillType.SHADER_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__library: null
	,__path: null
	,__unloaded: null
	,close: function() {
		openfl__$internal_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 210, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		this.contentLoaderInfo.loaderURL = openfl_Lib.get_current().get_loaderInfo().url;
		this.contentLoaderInfo.url = request.url;
		this.__unloaded = false;
		if(request.contentType == null || request.contentType == "") {
			var extension = "";
			this.__path = request.url;
			var queryIndex = this.__path.indexOf("?");
			if(queryIndex > -1) {
				this.__path = this.__path.substring(0,queryIndex);
			}
			while(StringTools.endsWith(this.__path,"/")) this.__path = this.__path.substring(0,this.__path.length - 1);
			if(StringTools.endsWith(this.__path,".bundle")) {
				this.__path += "/library.json";
				if(queryIndex > -1) {
					request.url = this.__path + request.url.substring(queryIndex);
				} else {
					request.url = this.__path;
				}
			}
			var extIndex = this.__path.lastIndexOf(".");
			if(extIndex > -1) {
				extension = this.__path.substring(extIndex + 1);
			}
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "js":
				tmp = "application/javascript";
				break;
			case "json":
				tmp = "application/json";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		if(this.contentLoaderInfo.contentType.indexOf("image/") > -1 && request.method == "GET" && (request.requestHeaders == null || request.requestHeaders.length == 0) && request.userAgent == null) {
			openfl_display_BitmapData.loadFromFile(request.url).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError)).onProgress($bind(this,this.BitmapData_onProgress));
			return;
		}
		var loader = new openfl_net_URLLoader();
		loader.dataFormat = 0;
		if(this.contentLoaderInfo.contentType.indexOf("/json") > -1 || this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			loader.dataFormat = 1;
		}
		loader.addEventListener("complete",$bind(this,this.loader_onComplete));
		loader.addEventListener("ioError",$bind(this,this.loader_onError));
		loader.addEventListener("progress",$bind(this,this.loader_onProgress));
		loader.load(request);
	}
	,loadBytes: function(buffer,context) {
		openfl_display_BitmapData.loadFromBytes(buffer).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
	}
	,unload: function() {
		if(!this.__unloaded) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			if(this.__library != null) {
				openfl_utils_Assets.unloadLibrary(this.contentLoaderInfo.url);
				this.__library = null;
			}
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			this.__unloaded = true;
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("unload"));
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		if(this.content != null) {
			this.content.__stopAllMovieClips();
		}
		var _g1 = 0;
		var _g = this.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			this.getChildAt(i).__stopAllMovieClips();
		}
		this.unload();
		var gc1 = gc;
	}
	,__dispatchError: function(text) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.text = text;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(error) {
		this.__dispatchError(Std.string(error));
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.content = new openfl_display_Bitmap(bitmapData);
		this.contentLoaderInfo.content = this.content;
		var tmp = this.content.get_width() | 0;
		this.contentLoaderInfo.width = tmp;
		var tmp1 = this.content.get_height() | 0;
		this.contentLoaderInfo.height = tmp1;
		this.addChild(this.content);
		this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
	}
	,BitmapData_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onComplete: function(event) {
		var _gthis = this;
		var loader = event.target;
		if(this.contentLoaderInfo.contentType != null && this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var manifest = lime_utils_AssetManifest.parse(loader.data,haxe_io_Path.directory(this.__path));
			if(manifest == null) {
				this.__dispatchError("Cannot parse asset manifest");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				this.__dispatchError("Cannot open library");
				return;
			}
			if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
				library.load().onComplete(function(_) {
					_gthis.__library = library;
					openfl_utils_Assets.registerLibrary(_gthis.contentLoaderInfo.url,_gthis.__library);
					if(manifest.name != null && !openfl_utils_Assets.hasLibrary(manifest.name)) {
						openfl_utils_Assets.registerLibrary(manifest.name,_gthis.__library);
					}
					_gthis.content = _gthis.__library.getMovieClip("");
					_gthis.contentLoaderInfo.content = _gthis.content;
					_gthis.addChild(_gthis.content);
					_gthis.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
				}).onError(function(e) {
					_gthis.__dispatchError(e);
				});
			}
		} else if(this.contentLoaderInfo.contentType != null && (this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1)) {
			this.content = new openfl_display_Sprite();
			this.contentLoaderInfo.content = this.content;
			this.addChild(this.content);
			eval("(function () {" + Std.string(loader.data) + "})()");
			this.contentLoaderInfo.dispatchEvent(new openfl_events_Event("complete"));
		} else {
			this.contentLoaderInfo.bytes = loader.data;
			openfl_display_BitmapData.loadFromBytes(loader.data).onComplete($bind(this,this.BitmapData_onLoad)).onError($bind(this,this.BitmapData_onError));
		}
	}
	,loader_onError: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,loader_onProgress: function(event) {
		event.target = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__instanceFields = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__hasDown: null
	,__hasOver: null
	,__hasUp: null
	,__instanceFields: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__mouseIsDown: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(index < 0) {
			return;
		}
		var frame = index + 1;
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[frame] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(frame);
		}
	}
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,nextFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame + 1);
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = 1000 / this.__swf.frameRate | 0;
		this.__timeElapsed = 0;
	}
	,prevFrame: function() {
		this.stop();
		this.__goto(this.__currentFrame - 1);
	}
	,stop: function() {
		this.__playing = false;
	}
	,__enterFrame: function(deltaTime) {
		this.__updateFrameScript(deltaTime);
		this.__updateSymbol(this.__currentFrame);
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__updateFrameScript: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
	}
	,__updateSymbol: function(targetFrame) {
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = targetFrame;
			while(_g1 < _g) {
				var i = _g1++;
				frame = i + 1;
				frameData = this.__symbol.frames[i];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					var _g4 = frameObject.type;
					switch(_g4[1]) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null) {
							currentInstancesByFrameObjectID.h[frameObject.id] = instance;
							this.__updateDisplayObject(instance.displayObject,frameObject,true);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.h[frameObject.id];
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					currentInstances.push(instance2);
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g5 = currentInstances.length;
			while(_g11 < _g5) {
				var i1 = _g11++;
				existingChild = this.__children[i1];
				instance = currentInstances[i1];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i1);
				} else {
					child = this.__children[i1];
				}
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child1;
			var i2 = currentInstances.length;
			var length = this.__children.length;
			while(i2 < length) {
				child1 = this.__children[i2];
				var _g6 = 0;
				var _g12 = this.__activeInstances;
				while(_g6 < _g12.length) {
					var instance3 = _g12[_g6];
					++_g6;
					if(instance3.displayObject == child1) {
						if(js_Boot.__instanceof(child1,openfl_display_MovieClip)) {
							var movie = child1;
							movie.gotoAndPlay(1);
						}
						this.removeChild(child1);
						--i2;
						--length;
					}
				}
				++i2;
			}
			this.__lastFrameUpdate = this.__currentFrame;
			this.__updateInstanceFields();
		}
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__updateSymbol(frame);
				var script = this.__frameScripts.h[frame];
				script();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				return false;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.h[frame] = frameData.script;
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								haxe_Log.trace("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString(),{ fileName : "MovieClip.hx", lineNumber : 717, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
							}
						};
					})(script);
					this.__frameScripts.h[frame] = wrapper;
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 733, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 737, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g2 = this.__totalFrames;
		while(_g11 < _g2) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g3 = frameData1.objects;
			while(_g21 < _g3.length) {
				var frameObject = _g3[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_symbols_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.h.hasOwnProperty(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.h[frameObject.symbol];
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								if(this.stage != null) {
									displayObject.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
								}
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.h[frameObject.id] = instance;
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		this.__instanceFields = Type.getInstanceFields(js_Boot.getClass(this));
		this.__updateInstanceFields();
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		this.__timeElapsed += deltaTime;
		nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) {
			return;
		}
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__currentFrame = frame;
		this.__enterFrame(0);
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw new js__$Boot_HaxeError("Invalid type for frame " + Type.getClassName(frame));
		}
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateDisplayObject: function(displayObject,frameObject,reset) {
		if(reset == null) {
			reset = false;
		}
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		} else if(reset && !displayObject.get_transform().get_colorTransform().__isDefault(true)) {
			displayObject.get_transform().set_colorTransform(new openfl_geom_ColorTransform());
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
		var tmp = frameObject.cacheAsBitmap != null;
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,__updateInstanceFields: function() {
		var _g = 0;
		var _g1 = this.__instanceFields;
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.__children;
			while(_g2 < _g3.length) {
				var child = _g3[_g2];
				++_g2;
				if(child.get_name() == field) {
					this[field] = child;
					break;
				}
			}
		}
	}
	,__onMouseDown: function(event) {
		if(this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp),true);
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(event.target == this && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.__currentLabels;
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					var _g2 = frameLabel.get_name();
					switch(_g2) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_isPlaying: function() {
		return this.__playing;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl__$internal_renderer_context3D_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = ["openfl","display","OpenGLRenderer"];
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	gl: null
	,__context3D: null
	,__clipRects: null
	,__currentDisplayShader: null
	,__currentGraphicsShader: null
	,__currentRenderTarget: null
	,__currentShader: null
	,__currentShaderBuffer: null
	,__defaultDisplayShader: null
	,__defaultGraphicsShader: null
	,__defaultRenderTarget: null
	,__defaultShader: null
	,__displayHeight: null
	,__displayWidth: null
	,__flipped: null
	,__gl: null
	,__height: null
	,__maskShader: null
	,__matrix: null
	,__maskObjects: null
	,__numClipRects: null
	,__offsetX: null
	,__offsetY: null
	,__projection: null
	,__projectionFlipped: null
	,__scrollRectMasks: null
	,__softwareRenderer: null
	,__stencilReference: null
	,__tempRect: null
	,__updatedStencil: null
	,__upscaled: null
	,__values: null
	,__width: null
	,applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addFloatOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault(true);
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addBoolOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,getMatrix: function(transform) {
		if(this.gl != null) {
			var values = this.__getMatrix(transform,1);
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,i,values[i]);
			}
			return this.__matrix;
		} else {
			lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.__matrix);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,0,transform.a);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,1,transform.b);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,4,transform.c);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,5,transform.d);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,12,transform.tx);
			lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,13,transform.ty);
			return this.__matrix;
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,useAlphaArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.__useArray = true;
			}
		}
	}
	,useColorTransformArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.__useArray = true;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.__useArray = true;
			}
		}
	}
	,__cleanup: function() {
		if(this.__stencilReference > 0) {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__numClipRects = 0;
			this.__scissorRect();
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.__matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.__values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.__matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			mask.__renderGLMask(this);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		mask.__renderGLMask(this);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			object.__renderGL(this);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			object.__renderGL(this);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		} else {
			tmp = 0;
		}
		this.__offsetX = tmp;
		var tmp1;
		if(this.__defaultRenderTarget == null) {
			var _this1 = this.__worldTransform;
			tmp1 = Math.round(0 * _this1.b + 0 * _this1.d + _this1.ty);
		} else {
			tmp1 = 0;
		}
		this.__offsetY = tmp1;
		var tmp2;
		if(this.__defaultRenderTarget == null) {
			var _this2 = this.__worldTransform;
			tmp2 = Math.round(w * _this2.a + 0 * _this2.c + _this2.tx - this.__offsetX);
		} else {
			tmp2 = w;
		}
		this.__displayWidth = tmp2;
		var tmp3;
		if(this.__defaultRenderTarget == null) {
			var _this3 = this.__worldTransform;
			tmp3 = Math.round(0 * _this3.b + h * _this3.d + _this3.ty - this.__offsetY);
		} else {
			tmp3 = h;
		}
		this.__displayHeight = tmp3;
		lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.__projection,0,this.__displayWidth + this.__offsetX * 2,0,this.__displayHeight + this.__offsetY * 2,-1000,1000);
		lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.__projectionFlipped,0,this.__displayWidth + this.__offsetX * 2,this.__displayHeight + this.__offsetY * 2,0,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.prototype = {
	onComplete: null
	,complete: null
	,display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.__height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.__width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display__$ShaderData_ShaderData_$Impl_$ = {};
$hxClasses["openfl.display._ShaderData.ShaderData_Impl_"] = openfl_display__$ShaderData_ShaderData_$Impl_$;
openfl_display__$ShaderData_ShaderData_$Impl_$.__name__ = ["openfl","display","_ShaderData","ShaderData_Impl_"];
openfl_display__$ShaderData_ShaderData_$Impl_$._new = function(byteArray) {
	var this1 = { };
	return this1;
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,filter: null
	,height: null
	,index: null
	,input: null
	,mipFilter: null
	,name: null
	,width: null
	,wrap: null
	,__isUniform: null
	,__disableGL: function(context,id) {
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__arrayLength: null
	,__internal: null
	,__isBool: null
	,__isFloat: null
	,__isInt: null
	,__isUniform: null
	,__length: null
	,__uniformMatrix: null
	,__useArray: null
	,__disableGL: function(context) {
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g1 = 0;
			var _g = this.__arrayLength;
			while(_g1 < _g) {
				var i = _g1++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				var _g = this.type;
				switch(_g) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						this.__uniformMatrix[i] = floatValue[i];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g2 = 0;
					while(_g2 < 9) {
						var i1 = _g2++;
						this.__uniformMatrix[i1] = floatValue[i1];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g3 = 0;
					while(_g3 < 16) {
						var i2 = _g3++;
						this.__uniformMatrix[i2] = floatValue[i2];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				var _g4 = this.type;
				switch(_g4) {
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 12:
					var _g5 = 0;
					while(_g5 < 4) {
						var i3 = _g5++;
						this.__uniformMatrix[i3] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g6 = 0;
					while(_g6 < 9) {
						var i4 = _g6++;
						this.__uniformMatrix[i4] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g7 = 0;
					while(_g7 < 16) {
						var i5 = _g7++;
						this.__uniformMatrix[i5] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g11 = 0;
			var _g8 = this.__arrayLength;
			while(_g11 < _g8) {
				var i6 = _g11++;
				gl.disableVertexAttribArray(this.index + i6);
			}
			if(value != null) {
				var _g9 = this.type;
				switch(_g9) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					var _g10 = 0;
					while(_g10 < 2) {
						var i7 = _g10++;
						gl.vertexAttrib2f(this.index + i7,floatValue[i7 * 2],floatValue[i7 * 2 + 1]);
					}
					break;
				case 16:
					var _g12 = 0;
					while(_g12 < 3) {
						var i8 = _g12++;
						gl.vertexAttrib3f(this.index + i8,floatValue[i8 * 3],floatValue[i8 * 3 + 1],floatValue[i8 * 3 + 2]);
					}
					break;
				case 20:
					var _g13 = 0;
					while(_g13 < 4) {
						var i9 = _g13++;
						gl.vertexAttrib4f(this.index + i9,floatValue[i9 * 4],floatValue[i9 * 4 + 1],floatValue[i9 * 4 + 2],floatValue[i9 * 4 + 3]);
					}
					break;
				default:
				}
			} else {
				var _g14 = this.type;
				switch(_g14) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					var _g15 = 0;
					while(_g15 < 2) {
						var i10 = _g15++;
						gl.vertexAttrib2f(this.index + i10,0,0);
					}
					break;
				case 16:
					var _g16 = 0;
					while(_g16 < 3) {
						var i11 = _g16++;
						gl.vertexAttrib3f(this.index + i11,0,0,0);
					}
					break;
				case 20:
					var _g17 = 0;
					while(_g17 < 4) {
						var i12 = _g17++;
						gl.vertexAttrib4f(this.index + i12,0,0,0,0);
					}
					break;
				default:
				}
			}
		} else {
			var _g18 = 0;
			var _g19 = this.__arrayLength;
			while(_g18 < _g19) {
				var i13 = _g18++;
				gl.enableVertexAttribArray(this.index + i13);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				var _g = this.type;
				switch(_g) {
				case 1:case 9:
					gl.uniform2i(this.index,buffer[position] | 0,buffer[position + 1] | 0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0,buffer[position + 3] | 0);
					break;
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,buffer[position] | 0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0);
					break;
				case 12:
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						this.__uniformMatrix[i] = buffer[position + i];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g2 = 0;
					while(_g2 < 9) {
						var i1 = _g2++;
						this.__uniformMatrix[i1] = buffer[position + i1];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g3 = 0;
					while(_g3 < 16) {
						var i2 = _g3++;
						this.__uniformMatrix[i2] = buffer[position + i2];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__internal && (length == 0 || length == this.__length)) {
			var _g11 = 0;
			var _g4 = this.__arrayLength;
			while(_g11 < _g4) {
				var i3 = _g11++;
				gl.disableVertexAttribArray(this.index + i3);
			}
			if(length > 0) {
				var _g5 = this.type;
				switch(_g5) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 12:
					var _g6 = 0;
					while(_g6 < 2) {
						var i4 = _g6++;
						gl.vertexAttrib2f(this.index + i4,buffer[position + i4 * 2],buffer[position + i4 * 2 + 1]);
					}
					break;
				case 16:
					var _g7 = 0;
					while(_g7 < 3) {
						var i5 = _g7++;
						gl.vertexAttrib3f(this.index + i5,buffer[position + i5 * 3],buffer[position + i5 * 3 + 1],buffer[position + i5 * 3 + 2]);
					}
					break;
				case 20:
					var _g8 = 0;
					while(_g8 < 4) {
						var i6 = _g8++;
						gl.vertexAttrib4f(this.index + i6,buffer[position + i6 * 4],buffer[position + i6 * 4 + 1],buffer[position + i6 * 4 + 2],buffer[position + i6 * 4 + 3]);
					}
					break;
				default:
				}
			} else {
				var _g9 = this.type;
				switch(_g9) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					var _g10 = 0;
					while(_g10 < 2) {
						var i7 = _g10++;
						gl.vertexAttrib2f(this.index + i7,0,0);
					}
					break;
				case 16:
					var _g12 = 0;
					while(_g12 < 3) {
						var i8 = _g12++;
						gl.vertexAttrib3f(this.index + i8,0,0,0);
					}
					break;
				case 20:
					var _g13 = 0;
					while(_g13 < 4) {
						var i9 = _g13++;
						gl.vertexAttrib4f(this.index + i9,0,0,0,0);
					}
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g14 = 0;
			var _g15 = this.__arrayLength;
			while(_g14 < _g15) {
				var i10 = _g14++;
				gl.enableVertexAttribArray(this.index + i10);
			}
			if(length > 0) {
				var _g16 = 0;
				var _g17 = this.__arrayLength;
				while(_g16 < _g17) {
					var i11 = _g16++;
					gl.vertexAttribPointer(this.index + i11,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i11 * this.__arrayLength) * 4);
				}
			}
		}
	}
	,set_name: function(value) {
		this.__internal = StringTools.startsWith(value,"openfl_");
		return this.name = value;
	}
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fast";
	case 1:
		return "full";
	default:
		return null;
	}
};
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent && this.enabled) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				if(!(!interactiveOnly)) {
					hitTest = this.mouseEnabled;
				} else {
					hitTest = true;
				}
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCairo: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCairo(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCairoMask: function(renderer) {
		this.__currentState.__renderCairoMask(renderer);
	}
	,__renderCanvas: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCanvas(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		this.__currentState.__renderCanvasMask(renderer);
	}
	,__renderDOM: function(renderer) {
		renderer.__pushMaskObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.get_length()) {
			var previousState = _g1.get(_g);
			++_g;
			previousState.__renderDOM(renderer);
		}
		this.__previousStates.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderer);
		}
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGL: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderGL(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderer);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) {
			this.__soundTransform = new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					this.__previousStates.splice(index,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		if(this.enabled) {
			this.set___currentState(this.get_downState());
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled && this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent && this.enabled) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled) {
			if(this.get_overState() != null) {
				this.set___currentState(this.get_overState());
			} else {
				this.set___currentState(this.get_upState());
			}
		}
	}
	,__class__: openfl_display_SimpleButton
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__currentTabOrderIndex = 0;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__displayRect = new openfl_geom_Rectangle();
	this.__renderDirty = true;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.stage3Ds.push(new openfl_display_Stage3D(this));
	}
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	this.application = window.application;
	this.window = window;
	this.set_color(color);
	this.__contentsScaleFactor = window.__scale;
	this.__wasFullscreen = window.__fullscreen;
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,context3D: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__currentTabOrderIndex: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayRect: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__forceRender: null
	,__fullscreen: null
	,__fullScreenSourceRect: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__pendingMouseEvent: null
	,__pendingMouseX: null
	,__pendingMouseY: null
	,__primaryTouch: null
	,__quality: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__scaleMode: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,invalidate: function() {
		this.__invalidated = true;
		this.__renderDirty = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = x * window.__scale | 0;
		this.__pendingMouseY = y * window.__scale | 0;
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			window.onMouseUp.cancel();
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0,deltaMode);
		} else {
			this.__onMouseWheel(deltaX | 0,deltaY | 0,deltaMode);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			window.onTextInput.cancel();
		}
	}
	,onTouchCancel: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.context != null) {
			this.__createRenderer();
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowExpose: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__broadcastEvent(new openfl_events_Event("activate"));
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__wasFullscreen && !window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,render: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var _g = 0;
				var _g1 = this.stage3Ds;
				while(_g < _g1.get_length()) {
					var stage3D = _g1.get(_g);
					++_g;
					this.context3D.__renderStage3D(stage3D);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				this.window.onRender.cancel();
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					this.window.onRender.cancel();
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowDeactivate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onDeactivate.add(tmp2);
		var f3 = $bind(this,this.onWindowDropFile);
		var a13 = window;
		var tmp3 = function(a2) {
			f3(a13,a2);
		};
		window.onDropFile.add(tmp3);
		var f4 = $bind(this,this.onWindowEnter);
		var a14 = window;
		var tmp4 = function() {
			f4(a14);
		};
		window.onEnter.add(tmp4);
		var f5 = $bind(this,this.onWindowExpose);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onExpose.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32,a4) {
			f17(a117,a25,a32,a4);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		window.onRender.add($bind(this,this.render));
		window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a41) {
			f21(a121,a27,a34,a41);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		this.onWindowCreate(window);
	}
	,__broadcastEvent: function(event) {
		var key = event.type;
		var _this = openfl_display_DisplayObject.__broadcastEvents;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = event.type;
			var _this1 = openfl_display_DisplayObject.__broadcastEvents;
			var dispatchers = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var pixelRatio = 1;
		if(this.window.__scale > 1) {
			if(!this.window.devicePixelRatio) {
				pixelRatio = 1;
			} else {
				pixelRatio = true;
			}
		}
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		var _g = this.window.context.type;
		switch(_g) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			(js_Boot.__cast(this.__renderer , openfl_display_CanvasRenderer)).pixelRatio = pixelRatio;
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			(js_Boot.__cast(this.__renderer , openfl_display_DOMRenderer)).pixelRatio = pixelRatio;
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(windowWidth,windowHeight);
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g1 = 0;
				var _g = length - 1;
				while(_g1 < _g) {
					var i = _g1++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i1 = length - 2;
					while(i1 >= 0) {
						stack[i1].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i1;
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
		}
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 13;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			} else if(type == "keyDown" && keyCode1 == 9) {
				var tabStack = [];
				this.__tabTest(tabStack);
				var nextIndex = -1;
				var nextObject = null;
				var nextOffset = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier) ? -1 : 1;
				if(tabStack.length > 1) {
					haxe_ds_ArraySort.sort(tabStack,function(a,b) {
						return a.get_tabIndex() - b.get_tabIndex();
					});
					if(tabStack[tabStack.length - 1].get_tabIndex() == -1) {
						if(this.get_focus() != null) {
							nextIndex = 0;
						} else {
							nextIndex = this.__currentTabOrderIndex;
						}
					} else {
						var i = 0;
						while(i < tabStack.length) {
							if(tabStack[i].get_tabIndex() > -1) {
								if(i > 0) {
									tabStack.splice(0,i);
								}
								break;
							}
							++i;
						}
						if(this.get_focus() != null) {
							var index = tabStack.indexOf(this.get_focus());
							if(index < 0) {
								nextIndex = 0;
							} else {
								nextIndex = index + nextOffset;
							}
						} else {
							nextIndex = this.__currentTabOrderIndex;
						}
					}
				} else if(tabStack.length == 1) {
					nextObject = tabStack[0];
					if(this.get_focus() == nextObject) {
						nextObject = null;
					}
				}
				if(tabStack.length == 1 || tabStack.length == 0 && this.get_focus() != null) {
					nextIndex = 0;
				} else if(tabStack.length > 1) {
					if(nextIndex < 0) {
						nextIndex += tabStack.length;
					}
					nextIndex %= tabStack.length;
					nextObject = tabStack[nextIndex];
					if(nextObject == this.get_focus()) {
						nextIndex += nextOffset;
						if(nextIndex < 0) {
							nextIndex += tabStack.length;
						}
						nextIndex %= tabStack.length;
						nextObject = tabStack[nextIndex];
					}
				}
				var focusEvent = null;
				if(this.get_focus() != null) {
					focusEvent = new openfl_events_FocusEvent("keyFocusChange",true,true,nextObject,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),0);
					stack = [];
					this.get_focus().__getInteractive(stack);
					stack.reverse();
					this.__dispatchStack(focusEvent,stack);
				}
				if(focusEvent == null || !focusEvent.isDefaultPrevented()) {
					this.__currentTabOrderIndex = nextIndex;
					if(nextObject != null) {
						this.set_focus(nextObject);
					}
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				if(this.get_focus() != null) {
					var focusEvent = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
					this.__dispatchStack(focusEvent,stack);
					if(!focusEvent.isDefaultPrevented()) {
						this.set_focus(target);
					}
				} else {
					this.set_focus(target);
				}
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseDownLeft == target) {
					clickType = "click";
				} else {
					this.__mouseDownLeft.dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						this.window.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(target2,event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					this.__dispatchTarget(target3,event);
				}
				if(target3.hasEventListener("rollOut") || target3.hasEventListener("rollOver")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl__$internal_utils_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target1,touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(target2,touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_utils_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__addWindow));
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.get_fullScreenSourceRect() != null && this.window.__fullscreen) {
			this.stageWidth = this.get_fullScreenSourceRect().width | 0;
			this.stageHeight = this.get_fullScreenSourceRect().height | 0;
			var displayScaleX = windowWidth / this.stageWidth;
			var displayScaleY = windowHeight / this.stageHeight;
			this.__displayMatrix.translate(-this.get_fullScreenSourceRect().x,-this.get_fullScreenSourceRect().y);
			this.__displayMatrix.scale(displayScaleX,displayScaleY);
			this.__displayRect.setTo(this.get_fullScreenSourceRect().get_left(),this.get_fullScreenSourceRect().get_right(),this.get_fullScreenSourceRect().get_top(),this.get_fullScreenSourceRect().get_bottom());
		} else {
			if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
				this.stageWidth = windowWidth;
				this.stageHeight = windowHeight;
			} else {
				this.stageWidth = this.__logicalWidth;
				this.stageHeight = this.__logicalHeight;
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var targetScale = Math.min(scaleX,scaleY);
				var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
				var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
				this.__displayMatrix.scale(targetScale,targetScale);
				this.__displayMatrix.translate(offsetX,offsetY);
			}
			this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(windowWidth,windowHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__renderDirty = true;
			this.__setTransformDirty();
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__unregisterLimeModule: function(application) {
		application.onCreateWindow.remove($bind(this,this.__addWindow));
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_contentsScaleFactor: function() {
		return this.__contentsScaleFactor;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.__backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.window != null) {
			return this.window.__backend.setFrameRate(value);
		}
		return value;
	}
	,get_fullScreenHeight: function() {
		var tmp = this.window.__scale;
		return Math.ceil(this.window.get_display().currentMode.height * tmp);
	}
	,get_fullScreenSourceRect: function() {
		if(this.__fullScreenSourceRect == null) {
			return null;
		} else {
			return this.__fullScreenSourceRect.clone();
		}
	}
	,set_fullScreenSourceRect: function(value) {
		if(value == null) {
			if(this.__fullScreenSourceRect != null) {
				this.__fullScreenSourceRect = null;
				this.__resize();
			}
		} else if(!value.equals(this.__fullScreenSourceRect)) {
			this.__fullScreenSourceRect = value.clone();
			this.__resize();
		}
		return value;
	}
	,get_fullScreenWidth: function() {
		var tmp = this.window.__scale;
		return Math.ceil(this.window.get_display().currentMode.width * tmp);
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__quality = value;
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
		}
		return value;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,get_scaleMode: function() {
		return this.__scaleMode;
	}
	,set_scaleMode: function(value) {
		return this.__scaleMode = value;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,get_tabEnabled: function() {
		return false;
	}
	,set_tabEnabled: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,get_tabIndex: function() {
		return -1;
	}
	,set_tabIndex: function(value) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__contextRequested: null
	,__height: null
	,__indexBuffer: null
	,__projectionTransform: null
	,__renderTransform: null
	,__stage: null
	,__vertexBuffer: null
	,__width: null
	,__x: null
	,__y: null
	,__canvas: null
	,__renderContext: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) {
			profile = 0;
		}
		if(context3DRenderMode == null) {
			context3DRenderMode = 0;
		}
		if(this.context3D != null) {
			haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
		} else if(!this.__contextRequested) {
			this.__contextRequested = true;
			haxe_Timer.delay($bind(this,this.__createContext),1);
		}
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function() {
		var stage = this.__stage;
		var renderer = stage.__renderer;
		if(renderer.__type == "cairo" || renderer.__type == "canvas") {
			this.__dispatchError();
			return;
		}
		if(renderer.__type == "opengl") {
			this.context3D = stage.context3D;
			this.__dispatchCreate();
		} else if(renderer.__type == "dom") {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var attributes = renderer.__context.attributes;
			var transparentBackground = Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(attributes,"colorDepth") ? attributes.colorDepth : 32;
			var options = { alpha : transparentBackground || colorDepth > 16, antialias : Object.prototype.hasOwnProperty.call(attributes,"antialiasing") && attributes.antialiasing > 0, depth : true, premultipliedAlpha : true, stencil : true, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options);
			if(this.__webgl != null) {
				this.__dispatchError();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			var tmp = this.__projectionTransform;
			var a = [2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			tmp.copyRawDataFrom(vector);
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(this.__x == value) {
			return value;
		}
		this.__x = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(this.__y == value) {
			return value;
		}
		this.__y = value;
		this.__renderTransform.identity();
		this.__renderTransform.appendTranslation(this.__x,this.__y,0);
		this.__renderTransform.append(this.__projectionTransform);
		return value;
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Object.prototype.hasOwnProperty.call(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && !attributes.resizable) {
		this.stage.__setLogicalSize(attributes.width,attributes.height);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.totalGPUMemory = 0;
	this.profile = 3;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl__$internal_renderer_context3D_Context3DState();
	}
	this.__state = new openfl__$internal_renderer_context3D_Context3DState();
	var this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var this2 = new Float32Array(512);
	this.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) {
		this3 = new Float32Array(array);
	} else {
		this3 = null;
	}
	this.__positionScale = this3;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS == -1) {
		openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS;
	this.maxBackBufferHeight = openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS;
	if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = 0;
			openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0;
		}
	}
	if(openfl_display3D_Context3D.GL_DEPTH_STENCIL == -1) {
		openfl_display3D_Context3D.GL_DEPTH_STENCIL = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var this4;
	if(elements != null) {
		this4 = new Uint16Array(elements);
	} else {
		this4 = null;
	}
	var data = this4;
	var index = 0;
	var vertex = 0;
	var _g1 = 0;
	var _g = this.__quadIndexBufferElements;
	while(_g1 < _g) {
		var i = _g1++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,gl: null
	,__backBufferAntiAlias: null
	,__backBufferTexture: null
	,__backBufferWantsBestResolution: null
	,__backBufferWantsBestResolutionOnBrowserZoom: null
	,__context: null
	,__contextState: null
	,__renderStage3DProgram: null
	,__enableErrorChecking: null
	,__fragmentConstants: null
	,__frontBufferTexture: null
	,__positionScale: null
	,__present: null
	,__programs: null
	,__quadIndexBuffer: null
	,__quadIndexBufferCount: null
	,__quadIndexBufferElements: null
	,__stage: null
	,__stage3D: null
	,__state: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var vertexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,null,null,[width,height,0,1,1,0,height,0,0,1,width,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function(recreate) {
		if(recreate == null) {
			recreate = true;
		}
	}
	,drawToBitmapData: function(destination,srcRect,destPoint) {
		if(destination == null) {
			return;
		}
		var sourceRect = srcRect != null ? srcRect.__toLimeRectangle() : new lime_math_Rectangle(0,0,this.backBufferWidth,this.backBufferHeight);
		var destVector = destPoint != null ? destPoint.__toLimeVector2() : new lime_math_Vector2();
		if(this.__stage.context3D == this) {
			if(this.__stage.window != null) {
				if(this.__stage3D != null) {
					var xa = -this.__stage3D.get_x() | 0;
					var ya = -this.__stage3D.get_y() | 0;
					destVector.x = xa;
					destVector.y = ya;
				}
				var image = this.__stage.window.readPixels();
				destination.image.copyPixels(image,sourceRect,destVector);
			}
		} else if(this.__backBufferTexture != null) {
			var cacheRenderToTexture = this.__state.renderToTexture;
			this.setRenderToBackBuffer();
			this.__flushGLFramebuffer();
			this.__flushGLViewport();
			var elements = this.backBufferWidth * this.backBufferHeight * 4;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			var data = this1;
			var this2 = this.gl;
			var width = this.backBufferWidth;
			var height = this.backBufferHeight;
			var format = this.__backBufferTexture.__format;
			var type = this.gl.UNSIGNED_BYTE;
			this2.readPixels(0,0,width,height,format,type,data);
			var image1 = new lime_graphics_Image(new lime_graphics_ImageBuffer(data,this.backBufferWidth,this.backBufferHeight,32,2));
			destination.image.copyPixels(image1,sourceRect,destVector);
			if(cacheRenderToTexture != null) {
				this.setRenderToTexture(cacheRenderToTexture,this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
			}
		}
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,indexBuffer.__elementType,firstIndex);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null) {
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
	}
	,setBlendFactorsSeparate: function(sourceRGBFactor,destinationRGBFactor,sourceAlphaFactor,destinationAlphaFactor) {
		this.__state.blendSourceRGBFactor = sourceRGBFactor;
		this.__state.blendDestinationRGBFactor = destinationRGBFactor;
		this.__state.blendSourceAlphaFactor = sourceAlphaFactor;
		this.__state.blendDestinationAlphaFactor = destinationAlphaFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g1 = 0;
			var _g = program.__samplerStates.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0 || this.__state.program == null) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2) - byteArrayOffset;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
			var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
			var floatData = len == null ? new Float32Array(bytes.b.bufferValue,0) : new Float32Array(bytes.b.bufferValue,0,len);
			var outOffset = firstRegister * 4;
			var inOffset = _$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4) | 0;
			var _g1 = 0;
			var _g = numRegisters * 4;
			while(_g1 < _g) {
				var i = _g1++;
				dest[outOffset + i] = floatData[inOffset + i];
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var this1 = new Float32Array(16);
			var data = this1;
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				data[i] = matrix.rawData.get(i);
			}
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i1 = firstRegister * 4;
			if(transposedMatrix) {
				dest[i1++] = source.get(0);
				dest[i1++] = source.get(4);
				dest[i1++] = source.get(8);
				dest[i1++] = source.get(12);
				dest[i1++] = source.get(1);
				dest[i1++] = source.get(5);
				dest[i1++] = source.get(9);
				dest[i1++] = source.get(13);
				dest[i1++] = source.get(2);
				dest[i1++] = source.get(6);
				dest[i1++] = source.get(10);
				dest[i1++] = source.get(14);
				dest[i1++] = source.get(3);
				dest[i1++] = source.get(7);
				dest[i1++] = source.get(11);
				dest[i1++] = source.get(15);
			} else {
				dest[i1++] = source.get(0);
				dest[i1++] = source.get(1);
				dest[i1++] = source.get(2);
				dest[i1++] = source.get(3);
				dest[i1++] = source.get(4);
				dest[i1++] = source.get(5);
				dest[i1++] = source.get(6);
				dest[i1++] = source.get(7);
				dest[i1++] = source.get(8);
				dest[i1++] = source.get(9);
				dest[i1++] = source.get(10);
				dest[i1++] = source.get(11);
				dest[i1++] = source.get(12);
				dest[i1++] = source.get(13);
				dest[i1++] = source.get(14);
				dest[i1++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = -1;
		}
		if(numRegisters == 0) {
			return;
		}
		if(!(this.__state.program != null && this.__state.program.__format == 1)) {
			if(numRegisters == -1) {
				numRegisters = data.get_length() >> 2;
			}
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = data;
			var sourceIndex = 0;
			var destIndex = firstRegister * 4;
			var _g1 = 0;
			var _g = numRegisters;
			while(_g1 < _g) {
				var i = _g1++;
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
				dest[destIndex++] = source.get(sourceIndex++);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,numRegisters);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl__$internal_renderer_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationRGBFactor != this.__state.blendDestinationRGBFactor || this.__contextState.blendSourceRGBFactor != this.__state.blendSourceRGBFactor || this.__contextState.blendDestinationAlphaFactor != this.__state.blendDestinationAlphaFactor || this.__contextState.blendSourceAlphaFactor != this.__state.blendSourceAlphaFactor) {
			this.__setGLBlend(true);
			if(this.__state.blendDestinationRGBFactor == this.__state.blendDestinationAlphaFactor && this.__state.blendSourceRGBFactor == this.__state.blendSourceAlphaFactor) {
				this.gl.blendFunc(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor));
			} else {
				this.gl.blendFuncSeparate(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor),this.__getGLBlend(this.__state.blendSourceAlphaFactor),this.__getGLBlend(this.__state.blendDestinationAlphaFactor));
			}
			this.__contextState.blendDestinationRGBFactor = this.__state.blendDestinationRGBFactor;
			this.__contextState.blendSourceRGBFactor = this.__state.blendSourceRGBFactor;
			this.__contextState.blendDestinationAlphaFactor = this.__state.blendDestinationAlphaFactor;
			this.__contextState.blendSourceAlphaFactor = this.__state.blendSourceAlphaFactor;
		}
	}
	,__flushGLColor: function() {
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				var _g = this.__state.culling;
				switch(_g) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			var _g = this.__state.depthCompareMode;
			switch(_g) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Context3D backbuffer has not been configured"));
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = this.__state.scissorRectangle.x | 0;
			var scissorY = this.__state.scissorRectangle.y | 0;
			var scissorWidth = this.__state.scissorRectangle.width | 0;
			var scissorHeight = this.__state.scissorRectangle.height | 0;
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = this.__stage.window.__height * this.__stage.window.__scale | 0;
				scissorY = contextHeight - (this.__state.scissorRectangle.height | 0) - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(this.__getGLTriangleFace(this.__state.stencilTriangleFace),this.__getGLStencilAction(this.__state.stencilFail),this.__getGLStencilAction(this.__state.stencilDepthFail),this.__getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(this.__getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g1 = 0;
		var _g = this.__state.textures.length;
		while(_g1 < _g) {
			var i = _g1++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl__$internal_renderer_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var x = this.__stage3D == null ? 0 : this.__stage3D.get_x() | 0;
				var y = this.__stage.window.__height * this.__stage.window.__scale - this.backBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()) | 0;
				this.gl.viewport(x,y,this.backBufferWidth,this.backBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(js_Boot.__instanceof(this.__state.renderToTexture,openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(js_Boot.__instanceof(this.__state.renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(js_Boot.__instanceof(this.__state.renderToTexture,openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__getGLBlend: function(blendFactor) {
		switch(blendFactor) {
		case 0:
			return this.gl.DST_ALPHA;
		case 1:
			return this.gl.DST_COLOR;
		case 2:
			return this.gl.ONE;
		case 3:
			return this.gl.ONE_MINUS_DST_ALPHA;
		case 4:
			return this.gl.ONE_MINUS_DST_COLOR;
		case 5:
			return this.gl.ONE_MINUS_SRC_ALPHA;
		case 6:
			return this.gl.ONE_MINUS_SRC_COLOR;
		case 7:
			return this.gl.SRC_ALPHA;
		case 8:
			return this.gl.SRC_COLOR;
		case 9:
			return this.gl.ZERO;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__getGLCompareMode: function(mode) {
		switch(mode) {
		case 0:
			return this.gl.ALWAYS;
		case 1:
			return this.gl.EQUAL;
		case 2:
			return this.gl.GREATER;
		case 3:
			return this.gl.GEQUAL;
		case 4:
			return this.gl.LESS;
		case 5:
			return this.gl.LEQUAL;
		case 6:
			return this.gl.NEVER;
		case 7:
			return this.gl.NOTEQUAL;
		default:
			return this.gl.EQUAL;
		}
	}
	,__getGLStencilAction: function(action) {
		switch(action) {
		case 0:
			return this.gl.DECR;
		case 1:
			return this.gl.DECR_WRAP;
		case 2:
			return this.gl.INCR;
		case 3:
			return this.gl.INCR_WRAP;
		case 4:
			return this.gl.INVERT;
		case 5:
			return this.gl.KEEP;
		case 6:
			return this.gl.REPLACE;
		case 7:
			return this.gl.ZERO;
		default:
			return this.gl.KEEP;
		}
	}
	,__getGLTriangleFace: function(face) {
		switch(face) {
		case 0:
			return this.gl.BACK;
		case 1:
			return this.gl.FRONT;
		case 2:
			return this.gl.FRONT_AND_BACK;
		case 3:
			return this.gl.NONE;
		default:
			return this.gl.FRONT_AND_BACK;
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,get_enableErrorChecking: function() {
		return this.__enableErrorChecking;
	}
	,set_enableErrorChecking: function(value) {
		return this.__enableErrorChecking = value;
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	case "standardExtended":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	case 5:
		return "standardExtended";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramFormat.Context3DProgramFormat_Impl_"] = openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$;
openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramFormat","Context3DProgramFormat_Impl_"];
openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "agal":
		return 0;
	case "glsl":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "agal";
	case 1:
		return "glsl";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_v":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_v":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_v";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_v";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__elementType = gl.UNSIGNED_SHORT;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__tempUInt16Array: null
	,__usage: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(count == null) {
				this1 = new Uint16Array(buffer,offset);
			} else {
				this1 = new Uint16Array(buffer,offset,count);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g1 = startOffset;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new List();
		this.__agalSamplerUniforms = new List();
		this.__agalAlphaSamplerUniforms = new List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__agalAlphaSamplerEnabled: null
	,__agalAlphaSamplerUniforms: null
	,__agalFragmentUniformMap: null
	,__agalPositionScale: null
	,__agalSamplerUniforms: null
	,__agalSamplerUsageMask: null
	,__agalUniforms: null
	,__agalVertexUniformMap: null
	,__context: null
	,__format: null
	,__glFragmentShader: null
	,__glFragmentSource: null
	,__glProgram: null
	,__glslAttribNames: null
	,__glslAttribTypes: null
	,__glslSamplerNames: null
	,__glslUniformNames: null
	,__glslUniformTypes: null
	,__glVertexShader: null
	,__glVertexSource: null
	,__samplerStates: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,getAttributeIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"va")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g1 = 0;
			var _g = this.__glslAttribNames.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__glslAttribNames[i] == name) {
					return i;
				}
			}
			return -1;
		}
	}
	,getConstantIndex: function(name) {
		if(this.__format == 0) {
			if(StringTools.startsWith(name,"vc")) {
				return Std.parseInt(name.substring(2));
			} else if(StringTools.startsWith(name,"fc")) {
				return Std.parseInt(name.substring(2));
			} else {
				return -1;
			}
		} else {
			var _g1 = 0;
			var _g = this.__glslUniformNames.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__glslUniformNames[i] == name) {
					return i;
				}
			}
			return -1;
		}
	}
	,upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "Program3D.hx", lineNumber : 176, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "Program3D.hx", lineNumber : 177, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,uploadSources: function(vertexSource,fragmentSource) {
		if(this.__format != 1) {
			return;
		}
		var prefix = "#ifdef GL_ES\n\t\t\t#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\tprecision highp float;\n\t\t\t#else\n\t\t\tprecision mediump float;\n\t\t\t#endif\n\t\t\t#endif\n\t\t\t";
		var vertex = prefix + vertexSource;
		var fragment = prefix + fragmentSource;
		if(vertex == this.__glVertexSource && fragment == this.__glFragmentSource) {
			return;
		}
		this.__processGLSLData(vertexSource,"attribute");
		this.__processGLSLData(vertexSource,"uniform");
		this.__processGLSLData(fragmentSource,"uniform");
		this.__deleteShaders();
		this.__uploadFromGLSL(vertex,fragment);
		var samplerNames = this.__glslSamplerNames;
		var attribNames = this.__glslAttribNames;
		var attribTypes = this.__glslAttribTypes;
		var uniformNames = this.__glslUniformNames;
		var uniformTypes = this.__glslUniformTypes;
		this.__glslSamplerNames = [];
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslUniformNames = [];
		var gl = this.__context.gl;
		var index;
		var _g = 0;
		while(_g < samplerNames.length) {
			var name = samplerNames[_g];
			++_g;
			index = gl.getUniformLocation(this.__glProgram,name);
			this.__glslSamplerNames[index] = name;
		}
		var _g1 = 0;
		var _g2 = attribNames.length;
		while(_g1 < _g2) {
			var i = _g1++;
			index = gl.getAttribLocation(this.__glProgram,attribNames[i]);
			this.__glslAttribNames[index] = attribNames[i];
			this.__glslAttribTypes[index] = attribTypes[i];
		}
		var _g11 = 0;
		var _g3 = uniformNames.length;
		while(_g11 < _g3) {
			var i1 = _g11++;
			index = gl.getUniformLocation(this.__glProgram,uniformNames[i1]);
			this.__glslAttribNames[index] = uniformNames[i1];
			this.__glslAttribTypes[index] = uniformTypes[i1];
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g1 = 0;
		var _g = numActive;
		while(_g1 < _g) {
			var i = _g1++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			var _g2 = uniform.type;
			switch(_g2) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g4 = 0;
				var _g3 = uniform.regCount;
				while(_g4 < _g3) {
					var reg = _g4++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 361, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var _g_head = this.__agalSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
			var _g_head1 = this.__agalAlphaSamplerUniforms.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var sampler1 = val1;
				if(sampler1.regCount == 1) {
					gl.uniform1i(sampler1.location,sampler1.regIndex);
				} else {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates[sampler];
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__processGLSLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			if(StringTools.startsWith(type,"sampler")) {
				this.__glslSamplerNames.push(name);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				if(storageType == "uniform") {
					this.__glslUniformNames.push(name);
					this.__glslUniformTypes.push(parameterType);
				} else {
					this.__glslAttribNames.push(name);
					this.__glslAttribTypes.push(parameterType);
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			gl.uniform4fv(location,positionScale);
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates[sampler] = state;
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "Program3D.hx", lineNumber : 692, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message1 = "Error compiling fragment shader";
			message1 += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message1 += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message1,{ fileName : "Program3D.hx", lineNumber : 705, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g1 = 0;
			var _g11 = this.__glslAttribNames;
			while(_g1 < _g11.length) {
				var name1 = _g11[_g1];
				++_g1;
				if(name1.indexOf("Position") > -1 && StringTools.startsWith(name1,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name1);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message2 = "Unable to initialize the shader program";
			message2 += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message2,{ fileName : "Program3D.hx", lineNumber : 751, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,context: null
	,regDataPointer: null
	,flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		var _g = this.type;
		switch(_g) {
		case 35664:
			lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv(gl,this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 3);
			gl.uniform3fv(location,data);
			break;
		case 35666:
			var location1 = this.location;
			var data1 = this.regData.subarray(index,index + this.regCount * 4);
			gl.uniform4fv(location1,data1);
			break;
		case 35674:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			var location2 = this.location;
			var data2 = this.regData.subarray(index,index + this.regCount * 4);
			gl.uniform4fv(location2,data2);
		}
	}
	,__getUniformRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		var gl = this.__context.gl;
		gl.deleteBuffer(this.__id);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			if(length == null) {
				this1 = new Float32Array(buffer,offset);
			} else {
				this1 = new Float32Array(buffer,offset,length);
			}
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g1 = start;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempFloat32Array);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[0] = v;
			var v1 = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[0] = v1;
		}
		if(etc1Extension != null) {
			var v2 = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[2] = v2;
			var v3 = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[2] = v3;
		}
		if(pvrtcExtension != null) {
			var v4 = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[1] = v4;
			var v5 = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[1] = v5;
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__glDepthRenderbuffer: null
	,__glFramebuffer: null
	,__glStencilRenderbuffer: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		var gl = this.__context.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
		}
		gl.deleteTexture(this.__textureID);
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "TextureBase.hx", lineNumber : 176, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.GL_DEPTH_STENCIL != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.GL_DEPTH_STENCIL,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code1 = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code1 != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code1 + " width:" + this.__width + " height:" + this.__height,{ fileName : "TextureBase.hx", lineNumber : 218, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) {
			return null;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(image,false);
		var gl = this.__context.gl;
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			var wrapModeS = 0;
			var wrapModeT = 0;
			var _g = state.wrap;
			switch(_g) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
			}
			var magFilter = 0;
			var minFilter = 0;
			var _g1 = state.filter;
			if(_g1 == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			var _g2 = state.mipfilter;
			switch(_g2) {
			case 0:
				if(state.filter == 5) {
					minFilter = gl.NEAREST_MIPMAP_LINEAR;
				} else {
					minFilter = gl.LINEAR_MIPMAP_LINEAR;
				}
				break;
			case 1:
				if(state.filter == 5) {
					minFilter = gl.NEAREST_MIPMAP_NEAREST;
				} else {
					minFilter = gl.LINEAR_MIPMAP_NEAREST;
				}
				break;
			case 2:
				if(state.filter == 5) {
					minFilter = gl.NEAREST;
				} else {
					minFilter = gl.LINEAR;
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__framebufferSurface: null
	,__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var size1 = this.__size >> miplevel;
			if(size1 == 0) {
				return;
			}
			var target = this.__sideToTarget(side);
			this.__context.__bindGLTextureCubeMap(this.__textureID);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,target,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTextureCubeMap(null);
			this.__uploadedSides |= 1 << side;
			return;
		}
		this.uploadFromTypedArray(image.get_data(),side,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,side,miplevel);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,byteArrayOffset);
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,side,miplevel);
	}
	,uploadFromTypedArray: function(data,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var size = this.__size >> miplevel;
		if(size == 0) {
			return;
		}
		var target = this.__sideToTarget(side);
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,target,miplevel,this.__internalFormat,size,size,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTextureCubeMap(null);
		this.__uploadedSides |= 1 << side;
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "CubeTexture.hx", lineNumber : 165, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__sideToTarget: function(side) {
		var gl = this.__context.gl;
		switch(side) {
		case 0:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
		case 1:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
		case 2:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
		case 3:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
		case 4:
			return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
		case 5:
			return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_formats_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__size,this.__size,true);
		var gl = this.__context.gl;
		this.__context.__bindGLTextureCubeMap(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(side,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			var target = _gthis.__sideToTarget(side);
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var _gthis1 = _gthis.__internalFormat;
				var buffer = bytes.b.buffer;
				var this1;
				if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,0);
					} else {
						this1 = new Uint8Array(buffer,0,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,target,level,_gthis1,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_CubeTexture(_gthis.__context,_gthis.__size,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTextureCubeMap(alphaTexture.__textureID);
				var alphaTexture1 = alphaTexture.__internalFormat;
				var buffer1 = bytes.b.buffer;
				var this2;
				if(buffer1 != null) {
					if(size == null) {
						this2 = new Uint8Array(buffer1,size);
					} else {
						this2 = new Uint8Array(buffer1,size,size);
					}
				} else {
					this2 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,target,level,alphaTexture1,width,height,0,this2);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var _gthis2 = _gthis.__internalFormat;
				var buffer2 = bytes.b.buffer;
				var this3;
				if(buffer2 != null) {
					if(blockLength == null) {
						this3 = new Uint8Array(buffer2,0);
					} else {
						this3 = new Uint8Array(buffer2,0,blockLength);
					}
				} else {
					this3 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,target,level,_gthis2,width,height,0,this3);
			}
		});
		if(!hasTexture) {
			var _g = 0;
			while(_g < 6) {
				var side1 = _g++;
				var elements = this.__size * this.__size * 4;
				var this4;
				if(elements != null) {
					this4 = new Uint8Array(elements);
				} else {
					this4 = null;
				}
				var data1 = this4;
				var tmp = this.__sideToTarget(side1);
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,tmp,0,this.__internalFormat,this.__size,this.__size,0,this.__format,gl.UNSIGNED_BYTE,data1);
			}
		}
		this.__context.__bindGLTextureCubeMap(null);
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) {
			return;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,byteArrayOffset);
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1);
	}
	,uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
		var _gthis = this;
		if(!async) {
			this.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
		} else {
			haxe_Timer.delay(function() {
				_gthis.__uploadCompressedTextureFromByteArray(data,byteArrayOffset);
				_gthis.dispatchEvent(new openfl_events_Event("textureReady"));
			},1);
		}
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) {
			generateMipmap = false;
		}
		if(miplevel == null) {
			miplevel = 0;
		}
		if(source == null) {
			return;
		}
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = this.__getImage(source);
		if(image == null) {
			return;
		}
		if(miplevel == 0 && image.buffer != null && image.buffer.data == null && image.buffer.get_src() != null) {
			var gl = this.__context.gl;
			var width1 = this.__width >> miplevel;
			var height1 = this.__height >> miplevel;
			if(width1 == 0 && height1 == 0) {
				return;
			}
			if(width1 == 0) {
				width1 = 1;
			}
			if(height1 == 0) {
				height1 = 1;
			}
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,this.__format,gl.UNSIGNED_BYTE,image.buffer.get_src());
			this.__context.__bindGLTexture2D(null);
			return;
		}
		this.uploadFromTypedArray(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b,miplevel);
			return;
		}
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,byteArrayOffset);
		} else {
			this1 = null;
		}
		this.uploadFromTypedArray(this1,miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(width == 0 && height == 0) {
			return;
		}
		if(width == 0) {
			width = 1;
		}
		if(height == 0) {
			height = 1;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadCompressedTextureFromByteArray: function(data,byteArrayOffset) {
		var _gthis = this;
		var reader = new openfl__$internal_formats_atf_ATFReader(data,byteArrayOffset);
		var alpha = reader.readHeader(this.__width,this.__height,false);
		var context = this.__context;
		var gl = context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		var hasTexture = false;
		reader.readTextures(function(target,level,gpuFormat,width,height,blockLength,bytes) {
			var format = alpha ? openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[gpuFormat] : openfl_display3D_textures_TextureBase.__compressedFormats.h[gpuFormat];
			if(format == 0) {
				return;
			}
			hasTexture = true;
			_gthis.__format = format;
			_gthis.__internalFormat = format;
			if(alpha && gpuFormat == 2) {
				var size = blockLength / 2 | 0;
				var _gthis1 = _gthis.__textureTarget;
				var _gthis2 = _gthis.__internalFormat;
				var buffer = bytes.b.buffer;
				var this1;
				if(buffer != null) {
					if(size == null) {
						this1 = new Uint8Array(buffer,0);
					} else {
						this1 = new Uint8Array(buffer,0,size);
					}
				} else {
					this1 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,_gthis1,level,_gthis2,width,height,0,this1);
				var alphaTexture = new openfl_display3D_textures_Texture(_gthis.__context,_gthis.__width,_gthis.__height,3,_gthis.__optimizeForRenderToTexture,_gthis.__streamingLevels);
				alphaTexture.__format = format;
				alphaTexture.__internalFormat = format;
				_gthis.__context.__bindGLTexture2D(alphaTexture.__textureID);
				var alphaTexture1 = alphaTexture.__textureTarget;
				var alphaTexture2 = alphaTexture.__internalFormat;
				var buffer1 = bytes.b.buffer;
				var this2;
				if(buffer1 != null) {
					if(size == null) {
						this2 = new Uint8Array(buffer1,size);
					} else {
						this2 = new Uint8Array(buffer1,size,size);
					}
				} else {
					this2 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,alphaTexture1,level,alphaTexture2,width,height,0,this2);
				_gthis.__alphaTexture = alphaTexture;
			} else {
				var _gthis3 = _gthis.__textureTarget;
				var _gthis4 = _gthis.__internalFormat;
				var buffer2 = bytes.b.buffer;
				var this3;
				if(buffer2 != null) {
					if(blockLength == null) {
						this3 = new Uint8Array(buffer2,0);
					} else {
						this3 = new Uint8Array(buffer2,0,blockLength);
					}
				} else {
					this3 = null;
				}
				lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.compressedTexImage2D(gl,_gthis3,level,_gthis4,width,height,0,this3);
			}
		});
		if(!hasTexture) {
			var elements = this.__width * this.__height * 4;
			var this4;
			if(elements != null) {
				this4 = new Uint8Array(elements);
			} else {
				this4 = null;
			}
			var data1 = this4;
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data1);
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _gthis = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) {
			haxe_Timer.delay(function() {
				_gthis.__textureReady();
			},0);
		} else {
			this.__netStream.__video.addEventListener("canplay",function(_) {
				_gthis.__textureReady();
			},false);
		}
	}
	,__getTexture: function() {
		if((!this.__netStream.__video.paused || this.__netStream.get___seeking()) && this.__netStream.__video.readyState > 0) {
			this.__netStream.set___seeking(false);
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,this.cancelable,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = ["openfl","events","RenderEvent"];
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	allowSmoothing: null
	,objectColorTransform: null
	,objectMatrix: null
	,renderer: null
	,clone: function() {
		var event = new openfl_events_RenderEvent(this.type,this.bubbles,this.cancelable,this.objectMatrix.clone(),this.objectColorTransform.__clone(),this.allowSmoothing);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("RenderEvent",["type","bubbles","cancelable"]);
	}
	,__class__: openfl_events_RenderEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__shaderBlendMode: null
	,__smooth: null
	,__topExtension: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters.BitmapFilterShader"] = openfl_filters_BitmapFilterShader;
openfl_filters_BitmapFilterShader.__name__ = ["openfl","filters","BitmapFilterShader"];
openfl_filters_BitmapFilterShader.__super__ = openfl_display_Shader;
openfl_filters_BitmapFilterShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_filters_BitmapFilterShader
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__update: function() {
		this.uTextureSize.value = [this.__texture.input.width,this.__texture.input.height];
		openfl_filters_BitmapFilterShader.prototype.__update.call(this);
	}
	,uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.__blurX,this.__blurY,this.__quality);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = 0;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = this.get_blurY() * scale1;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\tuniform sampler2D openfl_Texture;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a, color.a);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.uOffsets.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	init: function(matrix) {
		var multipliers = this.uMultipliers.value;
		var offsets = this.uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 1;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.__matrix);
	}
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)) | 0;
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)) | 0;
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderer,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.get_matrix());
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.__distance,this.__angle,this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout,this.__hideObject);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var point = new openfl_geom_Point(destPoint.x + this.__offsetX,destPoint.y + this.__offsetY);
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),point.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_angle: function() {
		return this.__angle;
	}
	,set_angle: function(value) {
		if(value != this.__angle) {
			this.__angle = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_distance: function() {
		return this.__distance;
	}
	,set_distance: function(value) {
		if(value != this.__distance) {
			this.__distance = value;
			this.__renderDirty = true;
			this.__updateSize();
		}
		return value;
	}
	,get_hideObject: function() {
		return this.__hideObject;
	}
	,set_hideObject: function(value) {
		if(value != this.__hideObject) {
			this.__renderDirty = true;
			this.__preserveObject = !value;
		}
		return this.__hideObject = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_DropShadowFilter
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t\tvec2 r = uRadius / openfl_TextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.uColor.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	uRadius: null
	,uColor: null
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.__color,this.__alpha,this.__blurX,this.__blurY,this.__strength,this.__quality,this.__inner,this.__knockout);
	}
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = 0;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = this.get_blurY() * scale1;
		}
		openfl_filters_GlowFilter.__glowShader.uColor.value[0] = (this.get_color() >> 16 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[1] = (this.get_color() >> 8 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[2] = (this.get_color() & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[3] = this.get_alpha() * (this.__strength / this.__numShaderPasses);
		return openfl_filters_GlowFilter.__glowShader;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__renderDirty = true;
		}
		return this.__alpha = value;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		if(value != this.__color) {
			this.__renderDirty = true;
		}
		return this.__color = value;
	}
	,get_inner: function() {
		return this.__inner;
	}
	,set_inner: function(value) {
		if(value != this.__inner) {
			this.__renderDirty = true;
		}
		return this.__inner = value;
	}
	,get_knockout: function() {
		return this.__knockout;
	}
	,set_knockout: function(value) {
		if(value != this.__knockout) {
			this.__renderDirty = true;
		}
		return this.__knockout = value;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,get_strength: function() {
		return this.__strength;
	}
	,set_strength: function(value) {
		if(value != this.__strength) {
			this.__renderDirty = true;
		}
		return this.__strength = value;
	}
	,__class__: openfl_filters_GlowFilter
});
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value,false)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			return new openfl_geom_Matrix3D(vector);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		this.__setTransform(value.rawData.get(0),value.rawData.get(1),value.rawData.get(5),value.rawData.get(6),value.rawData.get(12),value.rawData.get(13));
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		var tmp;
		if(defaultLibrary != null) {
			var key = this.url;
			var _this = defaultLibrary.cachedAudioBuffers;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var key1 = this.url;
			var _this1 = defaultLibrary.cachedAudioBuffers;
			this.AudioBuffer_onURLLoad(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) > bytesLength) {
			var this1 = new openfl_utils_ByteArrayData(bytesLength);
			var copy = this1;
			copy.writeBytes(bytes,0,bytesLength);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = format == "float" ? 32 : 16;
		audioBuffer.channels = stereo ? 2 : 1;
		var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(bytes);
		var this1;
		if(buffer != null) {
			this1 = new Uint8Array(buffer,0);
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "NetConnection.Connect.Success"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__closed: null
	,__connection: null
	,__timer: null
	,__seeking: null
	,__video: null
	,close: function() {
		if(this.__video == null) {
			return;
		}
		this.__closed = true;
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,dispose: function() {
		this.close();
		this.__video = null;
	}
	,pause: function() {
		if(this.__video != null) {
			this.__video.pause();
		}
	}
	,play: function(url,_,_1,_2,_3,_4) {
		if(this.__video == null) {
			return;
		}
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _gthis = this;
		if(this.__video == null) {
			return;
		}
		if(this.__timer == null) {
			this.__timer = new haxe_Timer(1);
		}
		this.__timer.run = function() {
			if(_gthis.__video.paused) {
				_gthis.__playStatus("NetStream.Play.pause");
			} else {
				_gthis.__playStatus("NetStream.Play.playing");
			}
			_gthis.__timer.stop();
		};
	}
	,resume: function() {
		if(this.__video != null) {
			this.__video.play();
		}
	}
	,seek: function(time) {
		if(this.__video == null) {
			return;
		}
		if(time < 0) {
			time = 0;
		} else if(time > this.__video.duration) {
			time = this.__video.duration;
		}
		this.set___seeking(true);
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.SeekStart.Notify"}));
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video == null) {
			return;
		}
		if(this.__video.paused) {
			this.__video.play();
		} else {
			this.__video.pause();
		}
	}
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Complete"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Seek.Complete"}));
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		if(this.__video != null) {
			return this.__video.playbackRate;
		} else {
			return 1;
		}
	}
	,set_speed: function(value) {
		if(this.__video != null) {
			return this.__video.playbackRate = value;
		} else {
			return value;
		}
	}
	,get___seeking: function() {
		if(!this.__seeking) {
			return this.__video.seeking;
		} else {
			return true;
		}
	}
	,set___seeking: function(value) {
		return this.__seeking = value;
	}
	,__class__: openfl_net_NetStream
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) {
			this.__httpRequest.cancel();
		}
	}
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				var event1 = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(Type["typeof"](request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var _this = this.__httpRequest.formData;
					var value = Reflect.field(request.data,field);
					if(__map_reserved[field] != null) {
						_this.setReserved(field,value);
					} else {
						_this.h[field] = value;
					}
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net__$URLVariables_URLVariables_$Impl_$ = {};
$hxClasses["openfl.net._URLVariables.URLVariables_Impl_"] = openfl_net__$URLVariables_URLVariables_$Impl_$;
openfl_net__$URLVariables_URLVariables_$Impl_$.__name__ = ["openfl","net","_URLVariables","URLVariables_Impl_"];
openfl_net__$URLVariables_URLVariables_$Impl_$._new = function(source) {
	var this1 = { };
	if(source != null) {
		openfl_net__$URLVariables_URLVariables_$Impl_$.decode(this1,source);
	}
	return this1;
};
openfl_net__$URLVariables_URLVariables_$Impl_$.decode = function(this1,source) {
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		Reflect.deleteField(this1,f);
	}
	var fields1 = source.split(";").join("&").split("&");
	var _g1 = 0;
	while(_g1 < fields1.length) {
		var f1 = fields1[_g1];
		++_g1;
		var eq = f1.indexOf("=");
		if(eq > 0) {
			var s = HxOverrides.substr(f1,0,eq);
			var field = decodeURIComponent(s.split("+").join(" "));
			var s1 = HxOverrides.substr(f1,eq + 1,null);
			this1[field] = decodeURIComponent(s1.split("+").join(" "));
		} else if(eq != 0) {
			this1[decodeURIComponent(f1.split("+").join(" "))] = "";
		}
	}
};
openfl_net__$URLVariables_URLVariables_$Impl_$.toString = function(this1) {
	var result = [];
	var fields = Reflect.fields(this1);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		var tmp = encodeURIComponent(f) + "=";
		var s = Reflect.field(this1,f);
		result.push(tmp + encodeURIComponent(s));
	}
	return result.join("&");
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 172, className : "openfl.system.System", methodName : "pause"});
};
openfl_system_System.resume = function() {
	openfl__$internal_Lib.notImplemented({ fileName : "System.hx", lineNumber : 189, className : "openfl.system.System", methodName : "resume"});
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	var o = font;
	if((o == null ? null : js_Boot.getClass(o)) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		var k = instance.name;
		var _this = openfl_text_Font.__fontByName;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,instance);
		} else {
			_this.h[k] = instance;
		}
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
});
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__domRender: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__htmlText: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__rawHtmlText: null
	,__forceCachedBitmapUpdate: null
	,appendText: function(text) {
		if(text == null || text == "") {
			return;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.plus(this.__text,text));
		this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		this.__updateScrollH();
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.positions.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.positions[i1];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i1;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
			return -1;
		}
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index < charIndex) {
				startIndex = index + 1;
			} else if(index >= charIndex) {
				break;
			}
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__textEngine.text,startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
			return -1;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		if(charIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text()) - startIndex + 1;
		}
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var format = null;
		if(beginIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text()) || beginIndex < -1 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text()) || endIndex < -1) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds"));
		}
		if(beginIndex == -1) {
			beginIndex = 0;
		}
		if(endIndex == -1) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
		}
		if(beginIndex >= endIndex) {
			return new openfl_text_TextFormat();
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end > beginIndex || group.start < endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		if(format == null) {
			format = new openfl_text_TextFormat();
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var max = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
		var range;
		if(beginIndex < 0) {
			beginIndex = 0;
		}
		if(endIndex < 0) {
			endIndex = 0;
		}
		if(endIndex == 0) {
			if(beginIndex == 0) {
				endIndex = max;
			} else {
				endIndex = beginIndex + 1;
			}
		}
		if(endIndex < beginIndex) {
			return;
		}
		if(beginIndex == 0 && endIndex >= max) {
			this.__textFormat.__merge(format);
			var _g1 = 0;
			var _g = this.__textEngine.textFormatRanges.get_length();
			while(_g1 < _g) {
				var i = _g1++;
				range = this.__textEngine.textFormatRanges.get(i);
				range.format.__merge(this.__textFormat);
			}
		} else {
			var index = this.__textEngine.textFormatRanges.get_length();
			var searchIndex;
			while(index > 0) {
				--index;
				range = this.__textEngine.textFormatRanges.get(index);
				if(range.start == beginIndex && range.end == endIndex) {
					range.format = this.__textFormat.clone();
					range.format.__merge(format);
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
					return;
				}
				if(range.start >= beginIndex && range.end <= endIndex) {
					searchIndex = this.__textEngine.textFormatRanges.indexOf(range,0);
					if(searchIndex > -1) {
						this.__textEngine.textFormatRanges.splice(searchIndex,1);
					}
				}
			}
			var prevRange = null;
			var nextRange = null;
			if(beginIndex > 0) {
				var _g11 = 0;
				var _g2 = this.__textEngine.textFormatRanges.get_length();
				while(_g11 < _g2) {
					var i1 = _g11++;
					range = this.__textEngine.textFormatRanges.get(i1);
					if(range.end >= beginIndex) {
						prevRange = range;
						break;
					}
				}
			}
			if(endIndex < max) {
				var ni = this.__textEngine.textFormatRanges.get_length();
				while(--ni >= 0) {
					range = this.__textEngine.textFormatRanges.get(ni);
					if(range.start <= endIndex) {
						nextRange = range;
						break;
					}
				}
			}
			if(nextRange == prevRange) {
				nextRange = new openfl__$internal_text_TextFormatRange(nextRange.format.clone(),nextRange.start,nextRange.end);
				this.__textEngine.textFormatRanges.push(nextRange);
			}
			if(prevRange != null) {
				prevRange.end = beginIndex;
			}
			if(nextRange != null) {
				nextRange.start = endIndex;
			}
			var textFormat = this.__textFormat.clone();
			textFormat.__merge(format);
			this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(textFormat,beginIndex,endIndex));
			this.__textEngine.textFormatRanges.sort(function(a,b) {
				if(a.start < b.start || a.end < b.end) {
					return -1;
				} else if(a.start > b.start || a.end > b.end) {
					return 1;
				}
				return 0;
			});
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.__backend.setTextInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.name == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha_r = new RegExp("[^a-zA-Z]+","g".split("u").join(""));
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if(HxOverrides.substr(font2.name.replace(alpha_r,""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font2.name;
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else {
			var key = format.font;
			var _this = openfl_text_TextField.__missingFontWarning;
			if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
				var k = format.font;
				var _this1 = openfl_text_TextField.__missingFontWarning;
				if(__map_reserved[k] != null) {
					_this1.setReserved(k,true);
				} else {
					_this1.h[k] = true;
				}
				lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1668, className : "openfl.text.TextField", methodName : "__fromSymbol"});
			}
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getAdvance: function(position) {
		return position;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		matrix.tx += this.__offsetX;
		matrix.ty += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return false;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) {
						var i = _g3++;
						x += group.positions[i];
					}
					var lastPosition = group.positions[charIndex - group.startIndex];
					rect.setTo(x,group.offsetY,lastPosition,group.ascent + group.descent);
					return true;
				} catch( e ) {
					haxe_CallStack.lastException = e;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				var _g31 = 0;
				var _g21 = this.get_scrollV() - 1;
				while(_g31 < _g21) {
					var i1 = _g31++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.get(i1);
			if(i1 < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__renderTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(renderer.__isDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__renderedOnCanvasWhileOnDOM = true;
			if(this.get_type() == 1) {
				this.replaceText(0,lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text),this.__text);
			}
			if(this.__isHTML) {
				this.__updateText(openfl__$internal_formats_html_HTMLParser.parse(this.__text,this.__textFormat,this.__textEngine.textFormatRanges));
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				var bitmap = this.__cacheBitmap;
				if(!(!bitmap.__renderable)) {
					var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
					if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
						var context = renderer.context;
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap,false);
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
						context.globalAlpha = alpha;
						var scrollRect = bitmap.__scrollRect;
						renderer.setTransform(bitmap.__renderTransform,context);
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = false;
						}
						if(scrollRect == null) {
							context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
						} else {
							context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						}
						if(!renderer.__allowSmoothing || !bitmap.smoothing) {
							context.imageSmoothingEnabled = true;
						}
						renderer.__popMaskObject(bitmap,false);
					}
				}
			} else {
				var transform = this.__worldTransform;
				var textEngine = this.__textEngine;
				var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
				var graphics = this.__graphics;
				if(this.__dirty) {
					this.__updateLayout();
					if(graphics.__bounds == null) {
						graphics.__bounds = new openfl_geom_Rectangle();
					}
					graphics.__bounds.copyFrom(bounds);
				}
				graphics.__update(renderer.__worldTransform);
				if(this.__dirty || graphics.__dirty) {
					var width = graphics.__width;
					var height = graphics.__height;
					if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
						this.__graphics.__canvas = null;
						this.__graphics.__context = null;
						this.__graphics.__bitmap = null;
						this.__graphics.set___dirty(false);
						this.__dirty = false;
					} else {
						if(this.__graphics.__canvas == null) {
							this.__graphics.__canvas = window.document.createElement("canvas");
							this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
						var transform1 = graphics.__renderTransform;
						if(renderer.__isDOM) {
							var scale = renderer.pixelRatio;
							graphics.__canvas.width = width * scale | 0;
							graphics.__canvas.height = height * scale | 0;
							graphics.__canvas.style.width = width + "px";
							graphics.__canvas.style.height = height + "px";
							var matrix = openfl_geom_Matrix.__pool.get();
							matrix.copyFrom(transform1);
							matrix.scale(scale,scale);
							renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
							openfl_geom_Matrix.__pool.release(matrix);
						} else {
							graphics.__canvas.width = width;
							graphics.__canvas.height = height;
							openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
						}
						if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
							openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
						}
						if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
						}
						if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
							var text = textEngine.text;
							if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
								graphics.__context.imageSmoothingEnabled = false;
							} else {
								graphics.__context.imageSmoothingEnabled = true;
							}
							if(textEngine.border || textEngine.background) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
								if(textEngine.background) {
									var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
									openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
								}
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								}
							}
							openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
							openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
							var scrollX = -this.get_scrollH();
							var scrollY = 0.0;
							var _g1 = 0;
							var _g = this.get_scrollV() - 1;
							while(_g1 < _g) {
								var i = _g1++;
								scrollY -= textEngine.lineHeights.get(i);
							}
							var advance;
							var offsetY = 0.0;
							var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
							var _g2 = 0;
							var _g11 = textEngine.layoutGroups;
							while(_g2 < _g11.get_length()) {
								var group = _g11.get(_g2);
								++_g2;
								if(group.lineIndex < this.get_scrollV() - 1) {
									continue;
								}
								if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
									break;
								}
								var color = "#" + StringTools.hex(group.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
								if(applyHack) {
									var font = openfl__$internal_text_TextEngine.getFontInstance(group.format);
									if(group.format.__ascent == null && font == null || font.unitsPerEM == 0) {
										offsetY = group.format.size * 0.185;
									}
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX - bounds.x,group.offsetY + offsetY + scrollY - bounds.y);
								if(this.__caretIndex > -1 && textEngine.selectable) {
									if(this.__selectionIndex == this.__caretIndex) {
										if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
											advance = 0.0;
											var _g3 = 0;
											var _g21 = this.__caretIndex - group.startIndex;
											while(_g3 < _g21) {
												var i1 = _g3++;
												if(group.positions.length <= i1) {
													break;
												}
												advance += group.positions[i1];
											}
											var scrollY1 = 0.0;
											var _g31 = this.get_scrollV();
											var _g22 = group.lineIndex + 1;
											while(_g31 < _g22) {
												var i2 = _g31++;
												scrollY1 += textEngine.lineHeights.get(i2 - 1);
											}
											openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
											var tmp2 = StringTools.hex(group.format.color & 16777215,6);
											openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
											openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
											openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
											openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1 - bounds.y);
											openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
											openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
										}
									} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
										var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
										var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
										if(group.startIndex > selectionStart) {
											selectionStart = group.startIndex;
										}
										if(group.endIndex < selectionEnd) {
											selectionEnd = group.endIndex;
										}
										var start;
										var end;
										start = this.getCharBoundaries(selectionStart);
										if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
											end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
											end.x += end.width + 2;
										} else {
											end = this.getCharBoundaries(selectionEnd);
										}
										if(start != null && end != null) {
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
											openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
										}
									}
								}
								if(group.format.underline) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									var x = group.offsetX + scrollX - bounds.x;
									var y = Math.floor(group.offsetY + offsetY + scrollY + group.ascent - bounds.y) + 0.5;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							}
						} else {
							if(textEngine.border || textEngine.background) {
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
								} else {
									openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
								}
								if(textEngine.background) {
									var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
									openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
								}
								if(textEngine.border) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
									var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								}
							}
							if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
								var scrollX1 = -this.get_scrollH();
								var scrollY2 = 0.0;
								var _g12 = 0;
								var _g4 = this.get_scrollV() - 1;
								while(_g12 < _g4) {
									var i3 = _g12++;
									scrollY2 += textEngine.lineHeights.get(i3);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp5 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						}
						graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
						graphics.__visible = true;
						this.__dirty = false;
						graphics.set___dirty(false);
					}
				}
				var smoothingEnabled = false;
				if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
					smoothingEnabled = renderer.context.imageSmoothingEnabled;
					if(smoothingEnabled) {
						renderer.context.imageSmoothingEnabled = false;
					}
				}
				if(!(this.opaqueBackground == null && this.__graphics == null)) {
					if(!(!this.__renderable)) {
						var alpha1 = renderer.__getAlpha(this.__worldAlpha);
						if(!(alpha1 <= 0)) {
							if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
								renderer.__setBlendMode(this.__worldBlendMode);
								renderer.__pushMaskObject(this);
								var context1 = renderer.context;
								renderer.setTransform(this.__renderTransform,context1);
								var color1 = this.opaqueBackground;
								context1.fillStyle = "rgb(" + (color1 >>> 16 & 255) + "," + (color1 >>> 8 & 255) + "," + (color1 & 255) + ")";
								context1.fillRect(0,0,this.get_width(),this.get_height());
								renderer.__popMaskObject(this);
							}
							if(this.__graphics != null) {
								if(!(!this.__renderable)) {
									var alpha2 = renderer.__getAlpha(this.__worldAlpha);
									if(!(alpha2 <= 0)) {
										var graphics1 = this.__graphics;
										if(graphics1 != null) {
											openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics1,renderer);
											var bounds1 = graphics1.__bounds;
											var width1 = graphics1.__width;
											var height1 = graphics1.__height;
											if(graphics1.__canvas != null) {
												var context2 = renderer.context;
												var scrollRect1 = this.__scrollRect;
												if(width1 > 0 && height1 > 0 && (scrollRect1 == null || scrollRect1.width > 0 && scrollRect1.height > 0)) {
													renderer.__setBlendMode(this.__worldBlendMode);
													renderer.__pushMaskObject(this);
													context2.globalAlpha = alpha2;
													renderer.setTransform(graphics1.__worldTransform,context2);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context2.scale(reverseScale,reverseScale);
													}
													context2.drawImage(graphics1.__canvas,0,0,width1,height1);
													renderer.__popMaskObject(this);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = true;
				}
			}
		}
	}
	,__renderDOM: function(renderer) {
		this.__domRender = true;
		this.__updateCacheBitmap(renderer,this.__forceCachedBitmapUpdate);
		this.__forceCachedBitmapUpdate = false;
		this.__domRender = false;
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			var bitmap = this.__cacheBitmap;
			if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				renderer.__pushMaskObject(bitmap);
				if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
					openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
				} else {
					openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
				}
				renderer.__popMaskObject(bitmap);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
			}
		} else {
			if(this.__renderedOnCanvasWhileOnDOM) {
				this.__renderedOnCanvasWhileOnDOM = false;
				if(this.__isHTML && this.__rawHtmlText != null) {
					this.__updateText(this.__rawHtmlText);
					this.__dirty = true;
					this.__layoutDirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
			var textField = this;
			var textEngine = textField.__textEngine;
			if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
				if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
					if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
						if(textField.__div == null) {
							textField.__div = window.document.createElement("div");
							renderer.__initializeElement(textField,textField.__div);
							textField.__style.setProperty("outline","none",null);
							textField.__div.addEventListener("input",function(event) {
								event.preventDefault();
								if(textField.get_htmlText() != textField.__div.innerHTML) {
									textField.set_htmlText(textField.__div.innerHTML);
									var textField1 = textField.__displayAsPassword;
									textField.__dirty = false;
								}
							},true);
						}
						if(!textEngine.wordWrap) {
							textField.__style.setProperty("white-space","nowrap",null);
						} else {
							textField.__style.setProperty("word-wrap","break-word",null);
						}
						textField.__style.setProperty("overflow","hidden",null);
						if(textEngine.selectable) {
							textField.__style.setProperty("cursor","text",null);
							textField.__style.setProperty("-webkit-user-select","text",null);
							textField.__style.setProperty("-moz-user-select","text",null);
							textField.__style.setProperty("-ms-user-select","text",null);
							textField.__style.setProperty("-o-user-select","text",null);
						} else {
							textField.__style.setProperty("cursor","inherit",null);
						}
						textField.__div.contentEditable = textEngine.type == 1;
						var style = textField.__style;
						if(textEngine.background) {
							style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
						} else {
							style.removeProperty("background-color");
						}
						var w = textEngine.width;
						var h = textEngine.height;
						var scale = 1;
						var unscaledSize = textField.__textFormat.size;
						var scaledSize = unscaledSize;
						var t = textField.__renderTransform;
						if(t.a != 1.0 || t.d != 1.0) {
							if(t.a == t.d) {
								scale = t.a;
								t.a = t.d = 1.0;
							} else if(t.a > t.d) {
								scale = t.a;
								t.d /= t.a;
								t.a = 1.0;
							} else {
								scale = t.d;
								t.a /= t.d;
								t.d = 1.0;
							}
							scaledSize *= scale;
							w = Math.ceil(w * scale);
							h = Math.ceil(h * scale);
						}
						textField.__textFormat.size = scaledSize;
						var text = textEngine.text;
						var adjustment = 0;
						if(!textField.__isHTML) {
							text = StringTools.htmlEscape(text);
						} else {
							var matchText = text;
							while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
								var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
								var style1 = "";
								if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
									style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
									style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
								}
								if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
									var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									var size;
									adjustment = parseFloat(sizeAttr) * scale;
									if(firstChar == 43 || firstChar == 45) {
										size = scaledSize + adjustment;
									} else {
										size = adjustment;
									}
									style1 += "font-size:" + size + "px;";
								}
								text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
								matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
							}
							text = text.replace(openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.r,"</span>");
						}
						text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
						var unscaledLeading = textField.__textFormat.leading;
						textField.__textFormat.leading += adjustment | 0;
						var _this_r = new RegExp("\r\n","g".split("u").join(""));
						var tmp = text.replace(_this_r,"<br>");
						textField.__div.innerHTML = tmp;
						var _this_r1 = new RegExp("\n","g".split("u").join(""));
						var tmp1 = textField.__div.innerHTML.replace(_this_r1,"<br>");
						textField.__div.innerHTML = tmp1;
						var _this_r2 = new RegExp("\r","g".split("u").join(""));
						var tmp2 = textField.__div.innerHTML.replace(_this_r2,"<br>");
						textField.__div.innerHTML = tmp2;
						style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
						textField.__textFormat.size = unscaledSize;
						textField.__textFormat.leading = unscaledLeading;
						style.setProperty("top","3px",null);
						if(textEngine.border) {
							style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
							textField.__renderTransform.translate(-1,-1);
							textField.__renderTransformChanged = true;
							textField.__transformDirty = true;
						} else if(style.border != "") {
							style.removeProperty("border");
							textField.__renderTransformChanged = true;
						}
						style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
						style.setProperty("width",w + "px",null);
						style.setProperty("height",h + "px",null);
						var _g = textField.__textFormat.align;
						switch(_g) {
						case 0:
							style.setProperty("text-align","center",null);
							break;
						case 4:
							style.setProperty("text-align","right",null);
							break;
						default:
							style.setProperty("text-align","left",null);
						}
						textField.__dirty = false;
					} else if(textField.__div != null) {
						renderer.element.removeChild(textField.__div);
						textField.__div = null;
					}
				}
				if(textField.__div != null) {
					var old = renderer.__roundPixels;
					renderer.__roundPixels = true;
					renderer.__updateClip(textField);
					renderer.__applyStyle(textField,true,true,true);
					renderer.__roundPixels = old;
				}
			} else {
				openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMTextField.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			var renderer1 = renderer.__softwareRenderer;
			var transform = this.__worldTransform;
			var textEngine = this.__textEngine;
			var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
			var graphics = this.__graphics;
			if(this.__dirty) {
				this.__updateLayout();
				if(graphics.__bounds == null) {
					graphics.__bounds = new openfl_geom_Rectangle();
				}
				graphics.__bounds.copyFrom(bounds);
			}
			graphics.__update(renderer1.__worldTransform);
			if(this.__dirty || graphics.__dirty) {
				var width = graphics.__width;
				var height = graphics.__height;
				if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
					this.__graphics.__canvas = null;
					this.__graphics.__context = null;
					this.__graphics.__bitmap = null;
					this.__graphics.set___dirty(false);
					this.__dirty = false;
				} else {
					if(this.__graphics.__canvas == null) {
						this.__graphics.__canvas = window.document.createElement("canvas");
						this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
					var transform1 = graphics.__renderTransform;
					if(renderer1.__isDOM) {
						var scale = renderer1.pixelRatio;
						graphics.__canvas.width = width * scale | 0;
						graphics.__canvas.height = height * scale | 0;
						graphics.__canvas.style.width = width + "px";
						graphics.__canvas.style.height = height + "px";
						var matrix = openfl_geom_Matrix.__pool.get();
						matrix.copyFrom(transform1);
						matrix.scale(scale,scale);
						renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
						openfl_geom_Matrix.__pool.release(matrix);
					} else {
						graphics.__canvas.width = width;
						graphics.__canvas.height = height;
						openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
					}
					if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
						openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
					}
					if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
					}
					if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
						var text = textEngine.text;
						if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
							graphics.__context.imageSmoothingEnabled = false;
						} else {
							graphics.__context.imageSmoothingEnabled = true;
						}
						if(textEngine.border || textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
						openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
						var scrollX = -this.get_scrollH();
						var scrollY = 0.0;
						var _g1 = 0;
						var _g = this.get_scrollV() - 1;
						while(_g1 < _g) {
							var i = _g1++;
							scrollY -= textEngine.lineHeights.get(i);
						}
						var advance;
						var offsetY = 0.0;
						var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
						var _g2 = 0;
						var _g11 = textEngine.layoutGroups;
						while(_g2 < _g11.get_length()) {
							var group = _g11.get(_g2);
							++_g2;
							if(group.lineIndex < this.get_scrollV() - 1) {
								continue;
							}
							if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
								break;
							}
							var color = "#" + StringTools.hex(group.format.color & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
							if(applyHack) {
								var font = openfl__$internal_text_TextEngine.getFontInstance(group.format);
								if(group.format.__ascent == null && font == null || font.unitsPerEM == 0) {
									offsetY = group.format.size * 0.185;
								}
							}
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX - bounds.x,group.offsetY + offsetY + scrollY - bounds.y);
							if(this.__caretIndex > -1 && textEngine.selectable) {
								if(this.__selectionIndex == this.__caretIndex) {
									if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
										advance = 0.0;
										var _g3 = 0;
										var _g21 = this.__caretIndex - group.startIndex;
										while(_g3 < _g21) {
											var i1 = _g3++;
											if(group.positions.length <= i1) {
												break;
											}
											advance += group.positions[i1];
										}
										var scrollY1 = 0.0;
										var _g31 = this.get_scrollV();
										var _g22 = group.lineIndex + 1;
										while(_g31 < _g22) {
											var i2 = _g31++;
											scrollY1 += textEngine.lineHeights.get(i2 - 1);
										}
										openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
										var tmp2 = StringTools.hex(group.format.color & 16777215,6);
										openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
										openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
										openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
										openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1 - bounds.y);
										openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
										openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
									}
								} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
									var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
									var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
									if(group.startIndex > selectionStart) {
										selectionStart = group.startIndex;
									}
									if(group.endIndex < selectionEnd) {
										selectionEnd = group.endIndex;
									}
									var start;
									var end;
									start = this.getCharBoundaries(selectionStart);
									if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
										end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
										end.x += end.width + 2;
									} else {
										end = this.getCharBoundaries(selectionEnd);
									}
									if(start != null && end != null) {
										openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
										openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
										openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
										openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
									}
								}
							}
							if(group.format.underline) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								var x = group.offsetX + scrollX - bounds.x;
								var y = Math.floor(group.offsetY + offsetY + scrollY + group.ascent - bounds.y) + 0.5;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						}
					} else {
						if(textEngine.border || textEngine.background) {
							if(textEngine.border) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							} else {
								openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
							}
							if(textEngine.background) {
								var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
								var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
							}
						}
						if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
							var scrollX1 = -this.get_scrollH();
							var scrollY2 = 0.0;
							var _g12 = 0;
							var _g4 = this.get_scrollV() - 1;
							while(_g12 < _g4) {
								var i3 = _g12++;
								scrollY2 += textEngine.lineHeights.get(i3);
							}
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							var tmp5 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
							openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
						}
					}
					graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
					graphics.__visible = true;
					this.__dirty = false;
					graphics.set___dirty(false);
				}
			}
			if(!(this.opaqueBackground == null && this.__graphics == null)) {
				if(!(!this.__renderable || this.__worldAlpha <= 0)) {
					if(this.opaqueBackground != null && !this.__isCacheBitmapRender && this.get_width() > 0 && this.get_height() > 0) {
						renderer.__setBlendMode(this.__worldBlendMode);
						renderer.__pushMaskObject(this);
						var context = renderer.__context3D;
						var rect = openfl_geom_Rectangle.__pool.get();
						rect.setTo(0,0,this.get_width(),this.get_height());
						renderer.__pushMaskRect(rect,this.__renderTransform);
						var color1 = this.opaqueBackground;
						context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,1,0,0,1);
						renderer.__popMaskRect();
						renderer.__popMaskObject(this);
						openfl_geom_Rectangle.__pool.release(rect);
					}
					if(this.__graphics != null) {
						openfl__$internal_renderer_context3D_Context3DShape.render(this,renderer);
					}
				}
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		var renderer1 = renderer.__softwareRenderer;
		var transform = this.__worldTransform;
		var textEngine = this.__textEngine;
		var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
		var graphics = this.__graphics;
		if(this.__dirty) {
			this.__updateLayout();
			if(graphics.__bounds == null) {
				graphics.__bounds = new openfl_geom_Rectangle();
			}
			graphics.__bounds.copyFrom(bounds);
		}
		graphics.__update(renderer1.__worldTransform);
		if(this.__dirty || graphics.__dirty) {
			var width = graphics.__width;
			var height = graphics.__height;
			if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.__bitmap = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				if(this.__graphics.__canvas == null) {
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				var transform1 = graphics.__renderTransform;
				if(renderer1.__isDOM) {
					var scale = renderer1.pixelRatio;
					graphics.__canvas.width = width * scale | 0;
					graphics.__canvas.height = height * scale | 0;
					graphics.__canvas.style.width = width + "px";
					graphics.__canvas.style.height = height + "px";
					var matrix = openfl_geom_Matrix.__pool.get();
					matrix.copyFrom(transform1);
					matrix.scale(scale,scale);
					renderer1.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
					openfl_geom_Matrix.__pool.release(matrix);
				} else {
					graphics.__canvas.width = width;
					graphics.__canvas.height = height;
					openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
					openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
				}
				if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
				}
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
						graphics.__context.imageSmoothingEnabled = false;
					} else {
						graphics.__context.imageSmoothingEnabled = true;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g1 = 0;
					var _g = this.get_scrollV() - 1;
					while(_g1 < _g) {
						var i = _g1++;
						scrollY -= textEngine.lineHeights.get(i);
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g2 = 0;
					var _g11 = textEngine.layoutGroups;
					while(_g2 < _g11.get_length()) {
						var group = _g11.get(_g2);
						++_g2;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						var color = "#" + StringTools.hex(group.format.color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = color;
						if(applyHack) {
							var font = openfl__$internal_text_TextEngine.getFontInstance(group.format);
							if(group.format.__ascent == null && font == null || font.unitsPerEM == 0) {
								offsetY = group.format.size * 0.185;
							}
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX - bounds.x,group.offsetY + offsetY + scrollY - bounds.y);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g3 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g3 < _g21) {
										var i1 = _g3++;
										if(group.positions.length <= i1) {
											break;
										}
										advance += group.positions[i1];
									}
									var scrollY1 = 0.0;
									var _g31 = this.get_scrollV();
									var _g22 = group.lineIndex + 1;
									while(_g31 < _g22) {
										var i2 = _g31++;
										scrollY1 += textEngine.lineHeights.get(i2 - 1);
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
									var tmp2 = StringTools.hex(group.format.color & 16777215,6);
									openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp2;
									openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
									openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - this.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1 - bounds.y);
									openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
									openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex || group.startIndex > this.__caretIndex && group.endIndex < this.__selectionIndex || group.startIndex > this.__selectionIndex && group.endIndex < this.__caretIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
									end = this.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
						if(group.format.underline) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = color;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var x = group.offsetX + scrollX - bounds.x;
							var y = Math.floor(group.offsetY + offsetY + scrollY + group.ascent - bounds.y) + 0.5;
							openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
							openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
						}
					}
				} else {
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp3 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp4 = StringTools.hex(textEngine.borderColor & 16777215,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					if(this.__caretIndex > -1 && textEngine.selectable && this.__showCursor) {
						var scrollX1 = -this.get_scrollH();
						var scrollY2 = 0.0;
						var _g12 = 0;
						var _g4 = this.get_scrollV() - 1;
						while(_g12 < _g4) {
							var i3 = _g12++;
							scrollY2 += textEngine.lineHeights.get(i3);
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						var tmp5 = StringTools.hex(this.get_defaultTextFormat().color & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(this.get_defaultTextFormat()) - 1);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				graphics.__visible = true;
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderer);
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
		this.__updateScrollH();
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					this.__textEngine.textFormatRanges.splice(i,1);
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		} else {
			return false;
		}
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null && !this.__domRender) {
			return false;
		}
		if(openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,renderer,force || this.__dirty)) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g2 = this;
						_g2.set_x(_g2.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				if(this.__caretIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
					this.set_scrollH(Math.ceil(offsetX));
				} else {
					var caret = openfl_geom_Rectangle.__pool.get();
					this.__getCharBoundaries(this.__caretIndex,caret);
					if(caret.x < this.get_scrollH()) {
						this.set_scrollH(Math.floor(caret.x - 2));
					} else if(caret.x > this.get_scrollH() + this.__textEngine.width) {
						this.set_scrollH(Math.ceil(caret.x - this.__textEngine.width - 2));
					}
					openfl_geom_Rectangle.__pool.release(caret);
				}
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl__$internal_formats_html_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.get_length() > 1) {
				this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
			}
			var range = this.__textEngine.textFormatRanges.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.sharpness = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
				} else {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var px = this.get_x();
			var py = this.get_y();
			var norm = _this.a * _this.d - _this.b * _this.c;
			var px1 = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - py) + _this.d * (px - _this.tx));
			var _this1 = this.__worldTransform;
			var px2 = this.get_x();
			var py1 = this.get_y();
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var py2 = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (py1 - _this1.ty) + _this1.b * (_this1.tx - px2));
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !js_Boot.__instanceof(event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			if(this.stage != null) {
				this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			}
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
					this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
					this.__selectionIndex = 0;
				}
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				this.__caretBeginningOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				this.__caretEndOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
					this.__caretEndOfLine();
					if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretNextCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextCharacter();
					} else {
						this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
					this.__caretBeginningOfLine();
					if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretPreviousCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousCharacter();
					} else {
						this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretNextLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextLine();
					} else {
						var lineIndex = this.getLineIndexOfChar(Math.max(this.__caretIndex,this.__selectionIndex) | 0);
						this.__caretNextLine(lineIndex,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretPreviousLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousLine();
					} else {
						var lineIndex1 = this.getLineIndexOfChar(Math.min(this.__caretIndex,this.__selectionIndex) | 0);
						this.__caretPreviousLine(lineIndex1,Math.min(this.__caretIndex,this.__selectionIndex) | 0);
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices1 = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices1[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 13;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	openfl_ui_Mouse.__hidden = true;
	var _g = 0;
	var _g1 = lime_app_Application.current.__windows;
	while(_g < _g1.length) {
		var $window = _g1[_g];
		++_g;
		$window.set_cursor(null);
	}
};
openfl_ui_Mouse.show = function() {
	openfl_ui_Mouse.__hidden = false;
	var cacheCursor = openfl_ui_Mouse.__cursor;
	openfl_ui_Mouse.__cursor = null;
	openfl_ui_Mouse.set_cursor(cacheCursor);
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	if(value == null) {
		value = "auto";
	}
	var setCursor = null;
	switch(value) {
	case "arrow":
		setCursor = lime_ui_MouseCursor.ARROW;
		break;
	case "button":
		setCursor = lime_ui_MouseCursor.POINTER;
		break;
	case "crosshair":
		setCursor = lime_ui_MouseCursor.CROSSHAIR;
		break;
	case "custom":
		setCursor = lime_ui_MouseCursor.CUSTOM;
		break;
	case "hand":
		setCursor = lime_ui_MouseCursor.MOVE;
		break;
	case "ibeam":
		setCursor = lime_ui_MouseCursor.TEXT;
		break;
	case "resize_nesw":
		setCursor = lime_ui_MouseCursor.RESIZE_NESW;
		break;
	case "resize_ns":
		setCursor = lime_ui_MouseCursor.RESIZE_NS;
		break;
	case "resize_nwse":
		setCursor = lime_ui_MouseCursor.RESIZE_NWSE;
		break;
	case "resize_we":
		setCursor = lime_ui_MouseCursor.RESIZE_WE;
		break;
	case "wait":
		setCursor = lime_ui_MouseCursor.WAIT;
		break;
	case "waitarrow":
		setCursor = lime_ui_MouseCursor.WAIT_ARROW;
		break;
	default:
	}
	if(setCursor != null && !openfl_ui_Mouse.__hidden) {
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.set_cursor(setCursor);
		}
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui__$MouseCursor_MouseCursor_$Impl_$ = {};
$hxClasses["openfl.ui._MouseCursor.MouseCursor_Impl_"] = openfl_ui__$MouseCursor_MouseCursor_$Impl_$;
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__name__ = ["openfl","ui","_MouseCursor","MouseCursor_Impl_"];
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.fromLimeCursor = function(cursor) {
	switch(cursor[1]) {
	case 0:
		return "arrow";
	case 1:
		return "crosshair";
	case 2:
		return "auto";
	case 3:
		return "hand";
	case 4:
		return "button";
	case 5:
		return "resize_nesw";
	case 6:
		return "resize_ns";
	case 7:
		return "resize_nwse";
	case 8:
		return "resize_we";
	case 9:
		return "ibeam";
	case 10:
		return "wait";
	case 11:
		return "waitarrow";
	case 12:
		return "custom";
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	var _this = this1;
	if(__map_reserved["mov"] != null) {
		_this.setReserved("mov",v);
	} else {
		_this.h["mov"] = v;
	}
	var this2 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v1 = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	var _this1 = this2;
	if(__map_reserved["add"] != null) {
		_this1.setReserved("add",v1);
	} else {
		_this1.h["add"] = v1;
	}
	var this3 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v2 = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	var _this2 = this3;
	if(__map_reserved["sub"] != null) {
		_this2.setReserved("sub",v2);
	} else {
		_this2.h["sub"] = v2;
	}
	var this4 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v3 = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	var _this3 = this4;
	if(__map_reserved["mul"] != null) {
		_this3.setReserved("mul",v3);
	} else {
		_this3.h["mul"] = v3;
	}
	var this5 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v4 = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	var _this4 = this5;
	if(__map_reserved["div"] != null) {
		_this4.setReserved("div",v4);
	} else {
		_this4.h["div"] = v4;
	}
	var this6 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v5 = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	var _this5 = this6;
	if(__map_reserved["rcp"] != null) {
		_this5.setReserved("rcp",v5);
	} else {
		_this5.h["rcp"] = v5;
	}
	var this7 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v6 = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	var _this6 = this7;
	if(__map_reserved["min"] != null) {
		_this6.setReserved("min",v6);
	} else {
		_this6.h["min"] = v6;
	}
	var this8 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v7 = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	var _this7 = this8;
	if(__map_reserved["max"] != null) {
		_this7.setReserved("max",v7);
	} else {
		_this7.h["max"] = v7;
	}
	var this9 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v8 = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	var _this8 = this9;
	if(__map_reserved["frc"] != null) {
		_this8.setReserved("frc",v8);
	} else {
		_this8.h["frc"] = v8;
	}
	var this10 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v9 = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	var _this9 = this10;
	if(__map_reserved["sqt"] != null) {
		_this9.setReserved("sqt",v9);
	} else {
		_this9.h["sqt"] = v9;
	}
	var this11 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v10 = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	var _this10 = this11;
	if(__map_reserved["rsq"] != null) {
		_this10.setReserved("rsq",v10);
	} else {
		_this10.h["rsq"] = v10;
	}
	var this12 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v11 = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	var _this11 = this12;
	if(__map_reserved["pow"] != null) {
		_this11.setReserved("pow",v11);
	} else {
		_this11.h["pow"] = v11;
	}
	var this13 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v12 = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	var _this12 = this13;
	if(__map_reserved["log"] != null) {
		_this12.setReserved("log",v12);
	} else {
		_this12.h["log"] = v12;
	}
	var this14 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v13 = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	var _this13 = this14;
	if(__map_reserved["exp"] != null) {
		_this13.setReserved("exp",v13);
	} else {
		_this13.h["exp"] = v13;
	}
	var this15 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v14 = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	var _this14 = this15;
	if(__map_reserved["nrm"] != null) {
		_this14.setReserved("nrm",v14);
	} else {
		_this14.h["nrm"] = v14;
	}
	var this16 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v15 = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	var _this15 = this16;
	if(__map_reserved["sin"] != null) {
		_this15.setReserved("sin",v15);
	} else {
		_this15.h["sin"] = v15;
	}
	var this17 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v16 = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	var _this16 = this17;
	if(__map_reserved["cos"] != null) {
		_this16.setReserved("cos",v16);
	} else {
		_this16.h["cos"] = v16;
	}
	var this18 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v17 = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	var _this17 = this18;
	if(__map_reserved["crs"] != null) {
		_this17.setReserved("crs",v17);
	} else {
		_this17.h["crs"] = v17;
	}
	var this19 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v18 = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	var _this18 = this19;
	if(__map_reserved["dp3"] != null) {
		_this18.setReserved("dp3",v18);
	} else {
		_this18.h["dp3"] = v18;
	}
	var this20 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v19 = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	var _this19 = this20;
	if(__map_reserved["dp4"] != null) {
		_this19.setReserved("dp4",v19);
	} else {
		_this19.h["dp4"] = v19;
	}
	var this21 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v20 = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	var _this20 = this21;
	if(__map_reserved["abs"] != null) {
		_this20.setReserved("abs",v20);
	} else {
		_this20.h["abs"] = v20;
	}
	var this22 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v21 = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	var _this21 = this22;
	if(__map_reserved["neg"] != null) {
		_this21.setReserved("neg",v21);
	} else {
		_this21.h["neg"] = v21;
	}
	var this23 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v22 = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	var _this22 = this23;
	if(__map_reserved["sat"] != null) {
		_this22.setReserved("sat",v22);
	} else {
		_this22.h["sat"] = v22;
	}
	var this24 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v23 = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	var _this23 = this24;
	if(__map_reserved["m33"] != null) {
		_this23.setReserved("m33",v23);
	} else {
		_this23.h["m33"] = v23;
	}
	var this25 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v24 = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	var _this24 = this25;
	if(__map_reserved["m44"] != null) {
		_this24.setReserved("m44",v24);
	} else {
		_this24.h["m44"] = v24;
	}
	var this26 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v25 = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	var _this25 = this26;
	if(__map_reserved["m34"] != null) {
		_this25.setReserved("m34",v25);
	} else {
		_this25.h["m34"] = v25;
	}
	var this27 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v26 = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	var _this26 = this27;
	if(__map_reserved["ddx"] != null) {
		_this26.setReserved("ddx",v26);
	} else {
		_this26.h["ddx"] = v26;
	}
	var this28 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v27 = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	var _this27 = this28;
	if(__map_reserved["ddy"] != null) {
		_this27.setReserved("ddy",v27);
	} else {
		_this27.h["ddy"] = v27;
	}
	var this29 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v28 = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	var _this28 = this29;
	if(__map_reserved["ife"] != null) {
		_this28.setReserved("ife",v28);
	} else {
		_this28.h["ife"] = v28;
	}
	var this30 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v29 = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	var _this29 = this30;
	if(__map_reserved["ine"] != null) {
		_this29.setReserved("ine",v29);
	} else {
		_this29.h["ine"] = v29;
	}
	var this31 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v30 = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	var _this30 = this31;
	if(__map_reserved["ifg"] != null) {
		_this30.setReserved("ifg",v30);
	} else {
		_this30.h["ifg"] = v30;
	}
	var this32 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v31 = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	var _this31 = this32;
	if(__map_reserved["ifl"] != null) {
		_this31.setReserved("ifl",v31);
	} else {
		_this31.h["ifl"] = v31;
	}
	var this33 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v32 = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	var _this32 = this33;
	if(__map_reserved["els"] != null) {
		_this32.setReserved("els",v32);
	} else {
		_this32.h["els"] = v32;
	}
	var this34 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v33 = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	var _this33 = this34;
	if(__map_reserved["eif"] != null) {
		_this33.setReserved("eif",v33);
	} else {
		_this33.h["eif"] = v33;
	}
	var this35 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v34 = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	var _this34 = this35;
	if(__map_reserved["kil"] != null) {
		_this34.setReserved("kil",v34);
	} else {
		_this34.h["kil"] = v34;
	}
	var this36 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v35 = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	var _this35 = this36;
	if(__map_reserved["tex"] != null) {
		_this35.setReserved("tex",v35);
	} else {
		_this35.h["tex"] = v35;
	}
	var this37 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v36 = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	var _this36 = this37;
	if(__map_reserved["sge"] != null) {
		_this36.setReserved("sge",v36);
	} else {
		_this36.h["sge"] = v36;
	}
	var this38 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v37 = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	var _this37 = this38;
	if(__map_reserved["slt"] != null) {
		_this37.setReserved("slt",v37);
	} else {
		_this37.h["slt"] = v37;
	}
	var this39 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v38 = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	var _this38 = this39;
	if(__map_reserved["sgn"] != null) {
		_this38.setReserved("sgn",v38);
	} else {
		_this38.h["sgn"] = v38;
	}
	var this40 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v39 = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	var _this39 = this40;
	if(__map_reserved["seq"] != null) {
		_this39.setReserved("seq",v39);
	} else {
		_this39.h["seq"] = v39;
	}
	var this41 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v40 = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	var _this40 = this41;
	if(__map_reserved["sne"] != null) {
		_this40.setReserved("sne",v40);
	} else {
		_this40.h["sne"] = v40;
	}
	var this42 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v41 = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	var _this41 = this42;
	if(__map_reserved["rgba"] != null) {
		_this41.setReserved("rgba",v41);
	} else {
		_this41.h["rgba"] = v41;
	}
	var this43 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v42 = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	var _this42 = this43;
	if(__map_reserved["compressed"] != null) {
		_this42.setReserved("compressed",v42);
	} else {
		_this42.h["compressed"] = v42;
	}
	var this44 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v43 = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	var _this43 = this44;
	if(__map_reserved["compressedalpha"] != null) {
		_this43.setReserved("compressedalpha",v43);
	} else {
		_this43.h["compressedalpha"] = v43;
	}
	var this45 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v44 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	var _this44 = this45;
	if(__map_reserved["dxt1"] != null) {
		_this44.setReserved("dxt1",v44);
	} else {
		_this44.h["dxt1"] = v44;
	}
	var this46 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v45 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	var _this45 = this46;
	if(__map_reserved["dxt5"] != null) {
		_this45.setReserved("dxt5",v45);
	} else {
		_this45.h["dxt5"] = v45;
	}
	var this47 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v46 = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	var _this46 = this47;
	if(__map_reserved["video"] != null) {
		_this46.setReserved("video",v46);
	} else {
		_this46.h["video"] = v46;
	}
	var this48 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v47 = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	var _this47 = this48;
	if(__map_reserved["2d"] != null) {
		_this47.setReserved("2d",v47);
	} else {
		_this47.h["2d"] = v47;
	}
	var this49 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v48 = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	var _this48 = this49;
	if(__map_reserved["3d"] != null) {
		_this48.setReserved("3d",v48);
	} else {
		_this48.h["3d"] = v48;
	}
	var this50 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v49 = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	var _this49 = this50;
	if(__map_reserved["cube"] != null) {
		_this49.setReserved("cube",v49);
	} else {
		_this49.h["cube"] = v49;
	}
	var this51 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v50 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	var _this50 = this51;
	if(__map_reserved["mipnearest"] != null) {
		_this50.setReserved("mipnearest",v50);
	} else {
		_this50.h["mipnearest"] = v50;
	}
	var this52 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v51 = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	var _this51 = this52;
	if(__map_reserved["miplinear"] != null) {
		_this51.setReserved("miplinear",v51);
	} else {
		_this51.h["miplinear"] = v51;
	}
	var this53 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v52 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	var _this52 = this53;
	if(__map_reserved["mipnone"] != null) {
		_this52.setReserved("mipnone",v52);
	} else {
		_this52.h["mipnone"] = v52;
	}
	var this54 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v53 = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	var _this53 = this54;
	if(__map_reserved["nomip"] != null) {
		_this53.setReserved("nomip",v53);
	} else {
		_this53.h["nomip"] = v53;
	}
	var this55 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v54 = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	var _this54 = this55;
	if(__map_reserved["nearest"] != null) {
		_this54.setReserved("nearest",v54);
	} else {
		_this54.h["nearest"] = v54;
	}
	var this56 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v55 = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	var _this55 = this56;
	if(__map_reserved["linear"] != null) {
		_this55.setReserved("linear",v55);
	} else {
		_this55.h["linear"] = v55;
	}
	var this57 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v56 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	var _this56 = this57;
	if(__map_reserved["anisotropic2x"] != null) {
		_this56.setReserved("anisotropic2x",v56);
	} else {
		_this56.h["anisotropic2x"] = v56;
	}
	var this58 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v57 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	var _this57 = this58;
	if(__map_reserved["anisotropic4x"] != null) {
		_this57.setReserved("anisotropic4x",v57);
	} else {
		_this57.h["anisotropic4x"] = v57;
	}
	var this59 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v58 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	var _this58 = this59;
	if(__map_reserved["anisotropic8x"] != null) {
		_this58.setReserved("anisotropic8x",v58);
	} else {
		_this58.h["anisotropic8x"] = v58;
	}
	var this60 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v59 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	var _this59 = this60;
	if(__map_reserved["anisotropic16x"] != null) {
		_this59.setReserved("anisotropic16x",v59);
	} else {
		_this59.h["anisotropic16x"] = v59;
	}
	var this61 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v60 = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	var _this60 = this61;
	if(__map_reserved["centroid"] != null) {
		_this60.setReserved("centroid",v60);
	} else {
		_this60.h["centroid"] = v60;
	}
	var this62 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v61 = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	var _this61 = this62;
	if(__map_reserved["single"] != null) {
		_this61.setReserved("single",v61);
	} else {
		_this61.h["single"] = v61;
	}
	var this63 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v62 = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	var _this62 = this63;
	if(__map_reserved["ignoresampler"] != null) {
		_this62.setReserved("ignoresampler",v62);
	} else {
		_this62.h["ignoresampler"] = v62;
	}
	var this64 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v63 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	var _this63 = this64;
	if(__map_reserved["repeat"] != null) {
		_this63.setReserved("repeat",v63);
	} else {
		_this63.h["repeat"] = v63;
	}
	var this65 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v64 = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	var _this64 = this65;
	if(__map_reserved["wrap"] != null) {
		_this64.setReserved("wrap",v64);
	} else {
		_this64.h["wrap"] = v64;
	}
	var this66 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v65 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	var _this65 = this66;
	if(__map_reserved["clamp"] != null) {
		_this65.setReserved("clamp",v65);
	} else {
		_this65.h["clamp"] = v65;
	}
	var this67 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v66 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	var _this66 = this67;
	if(__map_reserved["clamp_u_repeat_v"] != null) {
		_this66.setReserved("clamp_u_repeat_v",v66);
	} else {
		_this66.h["clamp_u_repeat_v"] = v66;
	}
	var this68 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v67 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	var _this67 = this68;
	if(__map_reserved["repeat_u_clamp_v"] != null) {
		_this67.setReserved("repeat_u_clamp_v",v67);
	} else {
		_this67.h["repeat_u_clamp_v"] = v67;
	}
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble2: function(context3D,version,vertexSource,fragmentSource) {
		var agalVertex = this.assemble("vertex",vertexSource,version);
		var agalFragment = this.assemble("fragment",fragmentSource,version);
		var program = context3D.createProgram();
		program.upload(agalVertex,agalFragment);
		return program;
	}
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nest = 0;
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				var _this = openfl_utils_AGALMiniAssembler.OPMAP;
				if(__map_reserved[opCode] != null) {
					opFound = _this.getReserved(opCode);
				} else {
					opFound = _this.h[opCode];
				}
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 284, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				haxe_Log.trace(opFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 296, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 304, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				haxe_Log.trace("emit opcode=" + Std.string(opFound),{ fileName : "AGALMiniAssembler.hx", lineNumber : 338, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g1 = 0;
			var _g = regLength;
			while(_g1 < _g) {
				var j = _g1++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						haxe_Log.trace("IS REL",{ fileName : "AGALMiniAssembler.hx", lineNumber : 377, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var _this1 = openfl_utils_AGALMiniAssembler.REGMAP;
				var key = res[0];
				var regFound = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
				if(this.debugEnabled) {
					haxe_Log.trace(regFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 399, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				var pos = regs[j].indexOf(regFound.name) + regFound.name.length;
				regs[j] = HxOverrides.substr(regs[j],pos,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(_$UInt_UInt_$Impl_$.gt(regidx,regFound.range)) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + Std.string(_$UInt_UInt_$Impl_$.toFloat(regFound.range + 1)) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(_$UInt_UInt_$Impl_$.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else if(isDest) {
					regmask = 15;
				} else {
					regmask = 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var _this2 = openfl_utils_AGALMiniAssembler.REGMAP;
					var key1 = relname[0];
					var regFoundRel = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(_$UInt_UInt_$Impl_$.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						haxe_Log.trace("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(relsel)) + "==" + selmatch[0] + " idx=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + " offset=" + reloffset,{ fileName : "AGALMiniAssembler.hx", lineNumber : 574, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					haxe_Log.trace("  emit argcode=" + Std.string(regFound) + "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + "][" + regmask + "]",{ fileName : "AGALMiniAssembler.hx", lineNumber : 582, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						haxe_Log.trace("  emit sampler",{ fileName : "AGALMiniAssembler.hx", lineNumber : 599, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g3 = 0;
					var _g2 = optsLength;
					while(_g3 < _g2) {
						var k1 = _g3++;
						if(this.verbose) {
							haxe_Log.trace("    opt: " + opts[k1],{ fileName : "AGALMiniAssembler.hx", lineNumber : 611, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var _this3 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
						var key2 = opts[k1];
						var optfound = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								haxe_Log.trace("    bias: " + bias,{ fileName : "AGALMiniAssembler.hx", lineNumber : 625, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						haxe_Log.trace("    bits: " + (samplerbits - 5),{ fileName : "AGALMiniAssembler.hx", lineNumber : 650, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(this.agalcode,0);
			haxe_Log.trace(this.error,{ fileName : "AGALMiniAssembler.hx", lineNumber : 703, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.agalcode);
			var _g11 = 0;
			var _g4 = agalLength;
			while(_g11 < _g4) {
				var index = _g11++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			haxe_Log.trace(dbgLine,{ fileName : "AGALMiniAssembler.hx", lineNumber : 739, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			haxe_Log.trace("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "AGALMiniAssembler.hx", lineNumber : 745, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		var _this = this1;
		if(__map_reserved["va"] != null) {
			_this.setReserved("va",v);
		} else {
			_this.h["va"] = v;
		}
		var this2 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v1 = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		var _this1 = this2;
		if(__map_reserved["vc"] != null) {
			_this1.setReserved("vc",v1);
		} else {
			_this1.h["vc"] = v1;
		}
		var this3 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v2 = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		var _this2 = this3;
		if(__map_reserved["vt"] != null) {
			_this2.setReserved("vt",v2);
		} else {
			_this2.h["vt"] = v2;
		}
		var this4 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v3 = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		var _this3 = this4;
		if(__map_reserved["vo"] != null) {
			_this3.setReserved("vo",v3);
		} else {
			_this3.h["vo"] = v3;
		}
		var this5 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v4 = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		var _this4 = this5;
		if(__map_reserved["vi"] != null) {
			_this4.setReserved("vi",v4);
		} else {
			_this4.h["vi"] = v4;
		}
		var this6 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v5 = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		var _this5 = this6;
		if(__map_reserved["fc"] != null) {
			_this5.setReserved("fc",v5);
		} else {
			_this5.h["fc"] = v5;
		}
		var this7 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v6 = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		var _this6 = this7;
		if(__map_reserved["ft"] != null) {
			_this6.setReserved("ft",v6);
		} else {
			_this6.h["ft"] = v6;
		}
		var this8 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v7 = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		var _this7 = this8;
		if(__map_reserved["fs"] != null) {
			_this7.setReserved("fs",v7);
		} else {
			_this7.h["fs"] = v7;
		}
		var this9 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v8 = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		var _this8 = this9;
		if(__map_reserved["fo"] != null) {
			_this8.setReserved("fo",v8);
		} else {
			_this8.h["fo"] = v8;
		}
		var this10 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v9 = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		var _this9 = this10;
		if(__map_reserved["fd"] != null) {
			_this9.setReserved("fd",v9);
		} else {
			_this9.h["fd"] = v9;
		}
		var this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v10 = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		var _this10 = this11;
		if(__map_reserved["iid"] != null) {
			_this10.setReserved("iid",v10);
		} else {
			_this10.h["iid"] = v10;
		}
		var this12 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v11 = __map_reserved["vo"] != null ? _this11.getReserved("vo") : _this11.h["vo"];
		var _this12 = this12;
		if(__map_reserved["op"] != null) {
			_this12.setReserved("op",v11);
		} else {
			_this12.h["op"] = v11;
		}
		var this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v12 = __map_reserved["vi"] != null ? _this13.getReserved("vi") : _this13.h["vi"];
		var _this14 = this13;
		if(__map_reserved["i"] != null) {
			_this14.setReserved("i",v12);
		} else {
			_this14.h["i"] = v12;
		}
		var this14 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v13 = __map_reserved["vi"] != null ? _this15.getReserved("vi") : _this15.h["vi"];
		var _this16 = this14;
		if(__map_reserved["v"] != null) {
			_this16.setReserved("v",v13);
		} else {
			_this16.h["v"] = v13;
		}
		var this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v14 = __map_reserved["fo"] != null ? _this17.getReserved("fo") : _this17.h["fo"];
		var _this18 = this15;
		if(__map_reserved["oc"] != null) {
			_this18.setReserved("oc",v14);
		} else {
			_this18.h["oc"] = v14;
		}
		var this16 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this19 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v15 = __map_reserved["fd"] != null ? _this19.getReserved("fd") : _this19.h["fd"];
		var _this20 = this16;
		if(__map_reserved["od"] != null) {
			_this20.setReserved("od",v15);
		} else {
			_this20.h["od"] = v15;
		}
		var this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var _this21 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v16 = __map_reserved["vi"] != null ? _this21.getReserved("vi") : _this21.h["vi"];
		var _this22 = this17;
		if(__map_reserved["fi"] != null) {
			_this22.setReserved("fi",v16);
		} else {
			_this22.h["fi"] = v16;
		}
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = ["openfl","utils","_AGALMiniAssembler","OpCode"];
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = ["openfl","utils","_AGALMiniAssembler","Register"];
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.emitCode)) + ", range=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.range)) + ", flags=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flags)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = ["openfl","utils","_AGALMiniAssembler","Sampler"];
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,toString: function() {
		return "[Sampler name=\"" + this.name + "\", flag=\"" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flag)) + "\", mask=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.mask)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	set_enabled: null
	,get_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_utils_IAssetCache
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.removeBitmapData(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.removeFont(key3);
				}
			}
			var keys2 = this.sound.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.removeSound(key5);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_utils_AssetCache
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_utils_Assets.onChange.has(openfl_utils_Assets.LimeAssets_onChange)) {
		lime_utils_Assets.onChange.add(openfl_utils_Assets.LimeAssets_onChange);
	}
	openfl_utils_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_utils_Assets.dispatchEvent = function(event) {
	return openfl_utils_Assets.dispatcher.dispatchEvent(event);
};
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_utils_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				if(library.isLocal(symbolName,"MOVIE_CLIP")) {
					return library.getMovieClip(symbolName);
				} else {
					lime_utils_Log.error("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 231, className : "openfl.utils.Assets", methodName : "getMovieClip"});
					return null;
				}
			}
		}
		lime_utils_Log.error("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	} else {
		lime_utils_Log.error("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 244, className : "openfl.utils.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_utils_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return openfl_utils_Assets.getSound(id,useCache);
};
openfl_utils_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound1);
		}
		return sound1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.hasEventListener = function(type) {
	return openfl_utils_Assets.dispatcher.hasEventListener(type);
};
openfl_utils_Assets.hasLibrary = function(name) {
	return lime_utils_Assets.hasLibrary(name);
};
openfl_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_utils_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_utils_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_utils_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_utils_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_utils_Assets.loadBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadBytes = function(id) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		var tmp = openfl_utils_Assets.cache.getFont(id);
		promise.complete(tmp);
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadLibrary = function(name) {
	return lime_utils_Assets.loadLibrary(name).then(function(library) {
		var _library = null;
		if(library != null) {
			if(js_Boot.__instanceof(library,openfl_utils_AssetLibrary)) {
				_library = library;
			} else {
				_library = new openfl_utils_AssetLibrary();
				_library.__proxy = library;
				lime_utils_Assets.registerLibrary(name,_library);
			}
		}
		return lime_app_Future.withValue(_library);
	});
};
openfl_utils_Assets.loadMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var future = new lime_app_Future(function() {
		return openfl_utils_Assets.getMusic(id,useCache);
	});
	return future;
};
openfl_utils_Assets.loadMovieClip = function(id) {
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var limeLibrary = openfl_utils_Assets.getLibrary(libraryName);
	if(limeLibrary != null) {
		if(js_Boot.__instanceof(limeLibrary,openfl_utils_AssetLibrary)) {
			var library = limeLibrary;
			if(library.exists(symbolName,"MOVIE_CLIP")) {
				promise.completeWith(library.loadMovieClip(symbolName));
				return promise.future;
			}
		}
		promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_utils_Assets.loadText = function(id) {
	var future = lime_utils_Assets.loadText(id);
	return future;
};
openfl_utils_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_utils_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_utils_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_utils_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_utils_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_utils_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_utils_Assets.LimeAssets_onChange = function() {
	openfl_utils_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_utils_ByteArrayData(length);
	return this1;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes(bytes).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(limeBytes) {
		var byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(limeBytes);
		return lime_app_Future.withValue(byteArray);
	});
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytePointer = function(byteArray) {
	lime_utils__$BytePointer_BytePointer_$Impl_$.set(openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer,byteArray,null,null,byteArray.position);
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	set_endian: null
	,get_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	set_endian: null
	,get_endian: null
	,get_bytesAvailable: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.compress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.compress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.compress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.length - this.position;
		}
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.__endian == 1) {
			if(this.position + 8 > this.length) {
				throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			}
			this.position += 8;
			return this.getDouble(this.position - 8);
		} else {
			var ch1 = this.readInt();
			var ch2 = this.readInt();
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,readFloat: function() {
		if(this.__endian == 1) {
			if(this.position + 4 > this.length) {
				throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			}
			this.position += 4;
			return this.getFloat(this.position - 4);
		} else {
			return haxe_io_FPHelper.i32ToFloat(this.readInt());
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readObject: function() {
		var _g = this.objectEncoding;
		switch(_g) {
		case 10:
			var data = this.readUTF();
			return haxe_Unserializer.run(data);
		case 12:
			var data1 = this.readUTF();
			return JSON.parse(data1);
		default:
			return null;
		}
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) {
			value = ch2 << 8 | ch1;
		} else {
			value = ch1 << 8 | ch2;
		}
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) {
			algorithm = 2;
		}
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var limeBytes = this;
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.decompress(limeBytes,lime_utils_CompressionAlgorithm.DEFLATE);
			break;
		case 1:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.decompress(limeBytes,lime_utils_CompressionAlgorithm.LZMA);
			break;
		default:
			bytes = lime_utils__$Bytes_Bytes_$Impl_$.decompress(limeBytes,lime_utils_CompressionAlgorithm.ZLIB);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
		}
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		if(this.__endian == 1) {
			this.__resize(this.position + 4);
			this.setFloat(this.position,value);
			this.position += 4;
		} else {
			var $int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt($int);
		}
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeObject: function(object) {
		var _g = this.objectEncoding;
		switch(_g) {
		case 10:
			var value = haxe_Serializer.run(object);
			this.writeUTF(value);
			break;
		case 12:
			var value1 = JSON.stringify(object);
			this.writeUTF(value1);
			break;
		default:
			return;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromLimeEndian = function(value) {
	switch(value[1]) {
	case 0:
		return 1;
	case 1:
		return 0;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toLimeEndian = function(value) {
	switch(value) {
	case 0:
		return lime_system_Endian.BIG_ENDIAN;
	case 1:
		return lime_system_Endian.LITTLE_ENDIAN;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var o = this1;
	var c = o == null ? null : js_Boot.getClass(o);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.__repeatCount = repeatCount;
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,running: null
	,__delay: null
	,__repeatCount: null
	,__timer: null
	,__timerID: null
	,reset: function() {
		if(this.running) {
			this.stop();
		}
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,get_repeatCount: function() {
		return this.__repeatCount;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) {
			this.stop();
		}
		return this.__repeatCount = v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.__repeatCount > 0 && this.currentCount >= this.__repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
msignal_SlotList.NIL = new msignal_SlotList(null,null);
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Float64Array = $global.Float64Array || ($global.Float32Array ? "notsupported" : null) || js_html_compat_Float64Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(511);
lime_math__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = typeof(window) != "undefined" ? window.document.createElement("canvas") : null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = typeof(window) != "undefined" ? openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
haxe_ds_ObjectMap.count = 0;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
Xml.Element = 0;
Xml.PCData = 1;
Xml.Document = 6;
away3d_Away3D.WEBSITE_URL = "http://www.away3d.com";
away3d_Away3D.MAJOR_VERSION = 4;
away3d_Away3D.MINOR_VERSION = 1;
away3d_Away3D.REVISION = 6;
away3d_library_assets_NamedAssetBase.DEFAULT_NAMESPACE = "default";
away3d_animators_ParticleAnimationSet.POST_PRIORITY = 9;
away3d_animators_ParticleAnimationSet.COLOR_PRIORITY = 18;
away3d_animators_data_ParticlePropertiesMode.GLOBAL = 0;
away3d_animators_data_ParticlePropertiesMode.LOCAL_STATIC = 1;
away3d_animators_data_ParticlePropertiesMode.LOCAL_DYNAMIC = 2;
away3d_animators_nodes_ParticleNodeBase.GLOBAL = "Global";
away3d_animators_nodes_ParticleNodeBase.LOCAL_STATIC = "LocalStatic";
away3d_animators_nodes_ParticleNodeBase.LOCAL_DYNAMIC = "LocalDynamic";
away3d_animators_nodes_ParticleNodeBase.MODES = [away3d_animators_nodes_ParticleNodeBase.GLOBAL,away3d_animators_nodes_ParticleNodeBase.LOCAL_STATIC,away3d_animators_nodes_ParticleNodeBase.LOCAL_DYNAMIC];
away3d_animators_nodes_ParticleBillboardNode.MATRIX_INDEX = 0;
away3d_animators_nodes_ParticleColorNode.START_MULTIPLIER_INDEX = 0;
away3d_animators_nodes_ParticleColorNode.DELTA_MULTIPLIER_INDEX = 1;
away3d_animators_nodes_ParticleColorNode.START_OFFSET_INDEX = 2;
away3d_animators_nodes_ParticleColorNode.DELTA_OFFSET_INDEX = 3;
away3d_animators_nodes_ParticleColorNode.CYCLE_INDEX = 4;
away3d_animators_nodes_ParticleColorNode.COLOR_START_COLORTRANSFORM = "ColorStartColorTransform";
away3d_animators_nodes_ParticleColorNode.COLOR_END_COLORTRANSFORM = "ColorEndColorTransform";
away3d_animators_nodes_ParticleInitialColorNode.MULTIPLIER_INDEX = 0;
away3d_animators_nodes_ParticleInitialColorNode.OFFSET_INDEX = 1;
away3d_animators_nodes_ParticleInitialColorNode.COLOR_INITIAL_COLORTRANSFORM = "ColorInitialColorTransform";
away3d_animators_nodes_ParticlePositionNode.POSITION_INDEX = 0;
away3d_animators_nodes_ParticlePositionNode.POSITION_VECTOR3D = "PositionVector3D";
away3d_animators_nodes_ParticleScaleNode.SCALE_INDEX = 0;
away3d_animators_nodes_ParticleScaleNode.SCALE_VECTOR3D = "ScaleVector3D";
away3d_animators_nodes_ParticleTimeNode.TIME_STREAM_INDEX = 0;
away3d_animators_nodes_ParticleTimeNode.TIME_CONSTANT_INDEX = 1;
away3d_animators_nodes_ParticleVelocityNode.VELOCITY_INDEX = 0;
away3d_animators_nodes_ParticleVelocityNode.VELOCITY_VECTOR3D = "VelocityVector3D";
away3d_cameras_lenses_CoordinateSystem.LEFT_HANDED = 0;
away3d_cameras_lenses_CoordinateSystem.RIGHT_HANDED = 1;
away3d_core_managers_AGALProgram3DCache._currentId = 0;
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
away3d_events_MouseEvent3D.MOUSE_OVER = "mouseOver3d";
away3d_events_MouseEvent3D.MOUSE_OUT = "mouseOut3d";
away3d_events_MouseEvent3D.MOUSE_UP = "mouseUp3d";
away3d_events_MouseEvent3D.MOUSE_DOWN = "mouseDown3d";
away3d_events_MouseEvent3D.MOUSE_MOVE = "mouseMove3d";
away3d_events_MouseEvent3D.CLICK = "click3d";
away3d_events_MouseEvent3D.DOUBLE_CLICK = "doubleClick3d";
away3d_events_MouseEvent3D.MOUSE_WHEEL = "mouseWheel3d";
away3d_core_managers_Mouse3DManager._viewCount = 0;
away3d_core_managers_Mouse3DManager._queuedEvents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
away3d_core_managers_Mouse3DManager._mouseUp = new away3d_events_MouseEvent3D("mouseUp3d");
away3d_core_managers_Mouse3DManager._mouseClick = new away3d_events_MouseEvent3D("click3d");
away3d_core_managers_Mouse3DManager._mouseOut = new away3d_events_MouseEvent3D("mouseOut3d");
away3d_core_managers_Mouse3DManager._mouseDown = new away3d_events_MouseEvent3D("mouseDown3d");
away3d_core_managers_Mouse3DManager._mouseMove = new away3d_events_MouseEvent3D("mouseMove3d");
away3d_core_managers_Mouse3DManager._mouseOver = new away3d_events_MouseEvent3D("mouseOver3d");
away3d_core_managers_Mouse3DManager._mouseWheel = new away3d_events_MouseEvent3D("mouseWheel3d");
away3d_core_managers_Mouse3DManager._mouseDoubleClick = new away3d_events_MouseEvent3D("doubleClick3d");
away3d_core_managers_Mouse3DManager._previousCollidingView = -1;
away3d_core_managers_Mouse3DManager._collidingView = -1;
away3d_core_managers_Stage3DManager._numStageProxies = 0;
lime_math_Matrix3.__identity = new lime_math_Matrix3();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
openfl_geom_ColorTransform.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_ColorTransform();
},function(ct) {
	ct.__identity();
});
away3d_core_managers_Stage3DProxy._frameEventDriver = new openfl_display_Shape();
away3d_core_managers_Stage3DProxy._vbUploadCount = 0;
away3d_core_managers_Stage3DProxy._ibUploadCount = 0;
away3d_core_managers_Stage3DProxy._bmpUploadCount = 0;
away3d_core_managers_Stage3DProxy._atfUploadCount = 0;
away3d_core_managers_Touch3DManager._queuedEvents = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
away3d_core_math_MathConsts.RADIANS_TO_DEGREES = 180 / Math.PI;
away3d_core_math_MathConsts.DEGREES_TO_RADIANS = Math.PI / 180;
away3d_core_math_Matrix3DUtils.RAW_DATA_CONTAINER = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,16);
away3d_core_math_Matrix3DUtils.CALCULATION_MATRIX = new openfl_geom_Matrix3D();
away3d_core_math_Matrix3DUtils.CALCULATION_VECTOR3D = new openfl_geom_Vector3D();
away3d_core_math_Matrix3DUtils.CALCULATION_DECOMPOSE = (function($this) {
	var $r;
	var a = [new openfl_geom_Vector3D(),new openfl_geom_Vector3D(),new openfl_geom_Vector3D()];
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
away3d_core_math_Plane3D.ALIGN_ANY = 0;
away3d_core_math_Plane3D.ALIGN_XY_AXIS = 1;
away3d_core_math_Plane3D.ALIGN_YZ_AXIS = 2;
away3d_core_math_Plane3D.ALIGN_XZ_AXIS = 3;
away3d_core_math_PlaneClassification.BACK = 0;
away3d_core_math_PlaneClassification.FRONT = 1;
away3d_core_math_PlaneClassification.IN = 0;
away3d_core_math_PlaneClassification.OUT = 1;
away3d_core_math_PlaneClassification.INTERSECT = 2;
away3d_core_pick_RaycastPicker.tempRayPosition = new openfl_geom_Vector3D();
away3d_core_pick_RaycastPicker.tempRayDirection = new openfl_geom_Vector3D();
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
away3d_core_pick_ShaderPicker.MOUSE_SCISSOR_RECT = new openfl_geom_Rectangle(0,0,1,1);
away3d_core_pick_PickingType.SHADER = new away3d_core_pick_ShaderPicker();
away3d_core_pick_PickingType.RAYCAST_FIRST_ENCOUNTERED = new away3d_core_pick_RaycastPicker(false);
away3d_core_pick_PickingType.RAYCAST_BEST_HIT = new away3d_core_pick_RaycastPicker(true);
away3d_core_render_DefaultRenderer.RTT_PASSES = 1;
away3d_core_render_DefaultRenderer.SCREEN_PASSES = 2;
away3d_core_render_DefaultRenderer.ALL_PASSES = 3;
away3d_core_traverse_PartitionTraverser._collectionMark = 0;
away3d_debug_Debug.active = false;
away3d_debug_Debug.warningsAsErrors = false;
away3d_entities_SegmentSet.LIMIT = 196605;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
away3d_events_AnimatorEvent.START = "start";
away3d_events_AnimatorEvent.STOP = "stop";
away3d_events_AnimatorEvent.CYCLE_COMPLETE = "cycle_complete";
away3d_events_Asset3DEvent.ASSET_COMPLETE = "assetComplete";
away3d_events_Asset3DEvent.ENTITY_COMPLETE = "entityComplete";
away3d_events_Asset3DEvent.SKYBOX_COMPLETE = "skyboxComplete";
away3d_events_Asset3DEvent.CAMERA_COMPLETE = "cameraComplete";
away3d_events_Asset3DEvent.MESH_COMPLETE = "meshComplete";
away3d_events_Asset3DEvent.GEOMETRY_COMPLETE = "geometryComplete";
away3d_events_Asset3DEvent.SKELETON_COMPLETE = "skeletonComplete";
away3d_events_Asset3DEvent.SKELETON_POSE_COMPLETE = "skeletonPoseComplete";
away3d_events_Asset3DEvent.CONTAINER_COMPLETE = "containerComplete";
away3d_events_Asset3DEvent.TEXTURE_COMPLETE = "textureComplete";
away3d_events_Asset3DEvent.TEXTURE_PROJECTOR_COMPLETE = "textureProjectorComplete";
away3d_events_Asset3DEvent.MATERIAL_COMPLETE = "materialComplete";
away3d_events_Asset3DEvent.ANIMATOR_COMPLETE = "animatorComplete";
away3d_events_Asset3DEvent.ANIMATION_SET_COMPLETE = "animationSetComplete";
away3d_events_Asset3DEvent.ANIMATION_STATE_COMPLETE = "animationStateComplete";
away3d_events_Asset3DEvent.ANIMATION_NODE_COMPLETE = "animationNodeComplete";
away3d_events_Asset3DEvent.STATE_TRANSITION_COMPLETE = "stateTransitionComplete";
away3d_events_Asset3DEvent.SEGMENT_SET_COMPLETE = "segmentSetComplete";
away3d_events_Asset3DEvent.LIGHT_COMPLETE = "lightComplete";
away3d_events_Asset3DEvent.LIGHTPICKER_COMPLETE = "lightPickerComplete";
away3d_events_Asset3DEvent.EFFECTMETHOD_COMPLETE = "effectMethodComplete";
away3d_events_Asset3DEvent.SHADOWMAPMETHOD_COMPLETE = "shadowMapMethodComplete";
away3d_events_Asset3DEvent.ASSET_RENAME = "assetRename";
away3d_events_Asset3DEvent.ASSET_CONFLICT_RESOLVED = "assetConflictResolved";
away3d_events_Asset3DEvent.TEXTURE_SIZE_ERROR = "textureSizeError";
away3d_events_CameraEvent.LENS_CHANGED = "lensChanged";
away3d_events_GeometryEvent.SUB_GEOMETRY_ADDED = "SubGeometryAdded";
away3d_events_GeometryEvent.SUB_GEOMETRY_REMOVED = "SubGeometryRemoved";
away3d_events_GeometryEvent.BOUNDS_INVALID = "BoundsInvalid";
away3d_events_LensEvent.MATRIX_CHANGED = "matrixChanged";
away3d_events_LightEvent.CASTS_SHADOW_CHANGE = "castsShadowChange";
away3d_events_Object3DEvent.VISIBLITY_UPDATED = "visiblityUpdated";
away3d_events_Object3DEvent.SCENETRANSFORM_CHANGED = "scenetransformChanged";
away3d_events_Object3DEvent.SCENE_CHANGED = "sceneChanged";
away3d_events_Object3DEvent.POSITION_CHANGED = "positionChanged";
away3d_events_Object3DEvent.ROTATION_CHANGED = "rotationChanged";
away3d_events_Object3DEvent.SCALE_CHANGED = "scaleChanged";
away3d_events_Scene3DEvent.ADDED_TO_SCENE = "addedToScene";
away3d_events_Scene3DEvent.REMOVED_FROM_SCENE = "removedFromScene";
away3d_events_Scene3DEvent.PARTITION_CHANGED = "partitionChanged";
away3d_events_ShadingMethodEvent.SHADER_INVALIDATED = "ShaderInvalidated";
away3d_events_Stage3DEvent.CONTEXT3D_CREATED = "Context3DCreated";
away3d_events_Stage3DEvent.CONTEXT3D_DISPOSED = "Context3DDisposed";
away3d_events_Stage3DEvent.CONTEXT3D_RECREATED = "Context3DRecreated";
away3d_events_Stage3DEvent.VIEWPORT_UPDATED = "ViewportUpdated";
away3d_events_TouchEvent3D.TOUCH_END = "touchEnd3d";
away3d_events_TouchEvent3D.TOUCH_BEGIN = "touchBegin3d";
away3d_events_TouchEvent3D.TOUCH_MOVE = "touchMove3d";
away3d_events_TouchEvent3D.TOUCH_OUT = "touchOut3d";
away3d_events_TouchEvent3D.TOUCH_OVER = "touchOver3d";
away3d_extrusions_LatheExtrude.EPS = .0001;
away3d_extrusions_LatheExtrude.LIMIT = 196605;
away3d_extrusions_LatheExtrude.MAXRAD = 1.2;
away3d_extrusions_LatheExtrude.X_AXIS = "x";
away3d_extrusions_LatheExtrude.Y_AXIS = "y";
away3d_extrusions_LatheExtrude.Z_AXIS = "z";
away3d_library_assets_Asset3DType.ENTITY = "entity";
away3d_library_assets_Asset3DType.SKYBOX = "skybox";
away3d_library_assets_Asset3DType.CAMERA = "camera";
away3d_library_assets_Asset3DType.SEGMENT_SET = "segmentSet";
away3d_library_assets_Asset3DType.MESH = "mesh";
away3d_library_assets_Asset3DType.GEOMETRY = "geometry";
away3d_library_assets_Asset3DType.SKELETON = "skeleton";
away3d_library_assets_Asset3DType.SKELETON_POSE = "skeletonPose";
away3d_library_assets_Asset3DType.CONTAINER = "container";
away3d_library_assets_Asset3DType.TEXTURE = "texture";
away3d_library_assets_Asset3DType.TEXTURE_PROJECTOR = "textureProjector";
away3d_library_assets_Asset3DType.MATERIAL = "material";
away3d_library_assets_Asset3DType.ANIMATION_SET = "animationSet";
away3d_library_assets_Asset3DType.ANIMATION_STATE = "animationState";
away3d_library_assets_Asset3DType.ANIMATION_NODE = "animationNode";
away3d_library_assets_Asset3DType.ANIMATOR = "animator";
away3d_library_assets_Asset3DType.STATE_TRANSITION = "stateTransition";
away3d_library_assets_Asset3DType.LIGHT = "light";
away3d_library_assets_Asset3DType.LIGHT_PICKER = "lightPicker";
away3d_library_assets_Asset3DType.SHADOW_MAP_METHOD = "shadowMapMethod";
away3d_library_assets_Asset3DType.EFFECTS_METHOD = "effectsMethod";
away3d_materials_MaterialBase.MATERIAL_ID_COUNT = 0;
away3d_materials_LightSources.LIGHTS = 1;
away3d_materials_LightSources.PROBES = 2;
away3d_materials_LightSources.ALL = 3;
away3d_materials_compilation_RegisterPool._regPool = new haxe_ds_StringMap();
away3d_materials_compilation_RegisterPool._regCompsPool = new haxe_ds_StringMap();
away3d_materials_compilation_ShaderRegisterElement.COMPONENTS = ["x","y","z","w"];
away3d_materials_methods_RimLightMethod.ADD = "add";
away3d_materials_methods_RimLightMethod.MULTIPLY = "multiply";
away3d_materials_methods_RimLightMethod.MIX = "mix";
away3d_materials_passes_MaterialPassBase._previousUsedStreams = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0];
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
away3d_materials_passes_MaterialPassBase._previousUsedTexs = (function($this) {
	var $r;
	var a = [0,0,0,0,0,0,0,0];
	var vector = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
away3d_materials_passes_SegmentPass.ONE_VECTOR = (function($this) {
	var $r;
	var a = [1.0,1.0,1.0,1.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
away3d_materials_passes_SegmentPass.FRONT_VECTOR = (function($this) {
	var $r;
	var a = [0.0,0.0,-1.0,0.0];
	var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	{
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
	}
	$r = vector;
	return $r;
}(this));
away3d_materials_utils_MipmapGenerator._matrix = new openfl_geom_Matrix();
away3d_materials_utils_MipmapGenerator._rect = new openfl_geom_Rectangle();
away3d_primitives_LineSegment.TYPE = "line";
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.NONE = 0;
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.ANISOTROPIC2X = 1;
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.ANISOTROPIC4X = 2;
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.ANISOTROPIC8X = 3;
away3d_textures__$Anisotropy_Anisotropy_$Impl_$.ANISOTROPIC16X = 4;
away3d_textures_BitmapTexture._mipMaps = [];
away3d_textures_BitmapTexture._mipMapUses = [];
away3d_tools_helpers_MeshHelper.LIMIT = 196605;
away3d_tools_helpers_ParticleGeometryHelper.MAX_VERTEX = 65535;
away3d_tools_utils_Bounds._defaultPosition = new openfl_geom_Vector3D(0.0,0.0,0.0);
away3d_tools_utils_GeomUtil.LIMIT_VERTS = 196605;
away3d_tools_utils_GeomUtil.LIMIT_INDICES = 983025;
away3d_tools_utils_TextureUtils.MAX_SIZE = 4096;
com_watabou_geom_Color.BLACK = 0;
com_watabou_geom_Color.WHITE = 16777215;
com_watabou_geom_Color.GREY = 8421504;
com_watabou_geom_Color.RED = 16711680;
com_watabou_geom_Color.GREEN = 65280;
com_watabou_geom_Color.BLUE = 255;
com_watabou_geom_Color.YELLOW = 16776960;
com_watabou_geom_Color.CYAN = 65535;
com_watabou_geom_Color.MAGENTA = 16711935;
com_watabou_geom__$Polygon_Polygon_$Impl_$.DELTA = 0.000001;
com_watabou_geom_polygons_PolyCut.DELTA = 0.000001;
com_watabou_utils_Random.g = 48271.0;
com_watabou_utils_Random.n = 2147483647;
com_watabou_utils_Random.seed = 1;
com_watabou_utils_Random.saved = -1;
com_watabou_utils_Updater._tick = new msignal_Signal1();
com_watabou_utils_Updater.lastTime = 0;
com_watabou_utils_Updater.timeScale = 1.0;
com_watabou_wintermansion_elements3d_Banner.ARGENT = 15658734;
com_watabou_wintermansion_elements3d_Banner.OR = 16763938;
com_watabou_wintermansion_elements3d_Banner.GULES = 13378065;
com_watabou_wintermansion_elements3d_Banner.SABLE = 2236962;
com_watabou_wintermansion_elements3d_Banner.AZURE = 2245836;
com_watabou_wintermansion_elements3d_Banner.VERT = 2263074;
com_watabou_wintermansion_elements3d_Banner.PURPURE = 8921804;
com_watabou_wintermansion_elements3d_Banner.PALETTE = [15658734,16763938,13378065,2236962,2245836,2263074,8921804];
com_watabou_wintermansion_elements3d_Banner.SEGMENT = 0.4;
com_watabou_wintermansion_elements3d_Banner.TXT_SIZE = 512;
com_watabou_wintermansion_elements3d_Banner.flags = [];
com_watabou_wintermansion_elements3d_Banner.patterns = [com_watabou_wintermansion_elements3d_Banner.solid,com_watabou_wintermansion_elements3d_Banner.horSplit,com_watabou_wintermansion_elements3d_Banner.verSplit,com_watabou_wintermansion_elements3d_Banner.checkers,com_watabou_wintermansion_elements3d_Banner.stripes];
com_watabou_wintermansion_elements3d_Banner.shapes = [com_watabou_wintermansion_elements3d_Banner.burgee,com_watabou_wintermansion_elements3d_Banner.swallowtail,com_watabou_wintermansion_elements3d_Banner.pennant,com_watabou_wintermansion_elements3d_Banner.spearhead];
com_watabou_wintermansion_elements3d_Icicles.TXT_SIZE = 1024;
com_watabou_wintermansion_elements3d_LampPost.height = 1.0;
com_watabou_wintermansion_elements3d__$Roof_Roofer.SCALE = 15;
com_watabou_wintermansion_elements3d_RoundWindow.m = new openfl_geom_Matrix3D();
com_watabou_wintermansion_elements3d_SkyDome.RADIUS = 400;
com_watabou_wintermansion_elements3d_SkyDome.HEIGHT = 640;
com_watabou_wintermansion_elements3d_SkyDome.TX_HEIGHT = 4;
com_watabou_wintermansion_elements3d_Smoke.CLOUD_SIZE = 0.2;
com_watabou_wintermansion_elements3d_Smoke.RISE_SPEED = 0.3;
com_watabou_wintermansion_elements3d_Smoke.ALPHA_1 = new openfl_geom_ColorTransform();
com_watabou_wintermansion_elements3d_Smoke.ALPHA_0 = new openfl_geom_ColorTransform(1,1,1,0);
com_watabou_wintermansion_elements3d_Style.LAMPS = "lamps";
com_watabou_wintermansion_elements3d_Style.SNOW = "snow";
com_watabou_wintermansion_elements3d_Style.RAIN = "rain";
com_watabou_wintermansion_elements3d_Style.STARS = "stars";
com_watabou_wintermansion_elements3d_Style.CLOUDS = "clouds";
com_watabou_wintermansion_elements3d_Style.WREATHS = "wreaths";
com_watabou_wintermansion_elements3d_Style.ICICLES = "icicles";
com_watabou_wintermansion_elements3d_Style.FLAGS = "flags";
com_watabou_wintermansion_elements3d_Style.England = { skyColor0 : 12898525, skyColor1 : 13424861, groundColor : 8945766, wallsColor : 12303274, baseColor : 12303274, roofColor : 5661811, woodColor : 7827301, brightness : 1, ambience : 0.8, sunPos : 40, air : 0.7, floorHeight : 1.0, baseSize : 0.1, baseHeight : 0.3, pitch : 0.9, ridge : 0.05, rakes : 0.06, eaves : 0.06, thickness : 0.1, concave : 0.1, winWidth : 0.2, winHeight : 0.4, winFCols : 2, winFRows : 3, features : ["flags","rain"], flag : 800};
com_watabou_wintermansion_elements3d_Style.Italy = { skyColor0 : 13166847, skyColor1 : 14286840, groundColor : 16768426, wallsColor : 13413775, baseColor : 13413775, roofColor : 6702651, woodColor : 6702651, brightness : 2, ambience : 0.4, sunPos : 70, air : 0.2, floorHeight : 1.2, baseSize : 0.06, baseHeight : 0.06, pitch : 0.3, rakes : 0.1, eaves : 0.1, thickness : 0.05, concave : 0.0, shutters : true, winWidth : 0.2, winHeight : 0.4, winFCols : 2, winFRows : 3, flag : 594};
com_watabou_wintermansion_elements3d_Style.Germany = { skyColor0 : 4227312, skyColor1 : 8965375, groundColor : 4486963, wallsColor : 14077120, baseColor : 7829360, roofColor : 10049868, woodColor : 6312000, brightness : 1.5, ambience : 0.5, sunPos : 60, air : 0.15, floorHeight : 0.9, baseSize : 0.1, baseHeight : 0.4, pitch : 0.8, rakes : 0.3, eaves : 0.1, thickness : 0.1, concave : 0.2, shutters : true, winWidth : 0.2, winHeight : 0.35, winFCols : 2, winFRows : 3, flag : 275, features : ["clouds"]};
com_watabou_wintermansion_elements3d_Style.Russia = { skyColor0 : 10790826, skyColor1 : 10528170, groundColor : 16777215, wallsColor : 6710886, baseColor : 6710886, roofColor : 16777215, woodColor : 5591120, brightness : 1.0, ambience : 0.7, sunColor : 16777198, sunPos : 50, air : 0.6, floorHeight : 0.9, baseSize : 0.0, baseHeight : 0.1, cylindrical : true, pitch : 0.5, rakes : 0.05, eaves : 0.05, thickness : 0.2, concave : 1.0, winWidth : 0.25, winHeight : 0.35, winFCols : 2, winFRows : 2, features : ["snow","icicles"], flag : 36};
com_watabou_wintermansion_elements3d_Style.Night = { skyColor0 : 525344, skyColor1 : 0, groundColor : 4475989, wallsColor : 10070715, baseColor : 8952234, roofColor : 6710903, woodColor : 7039854, lightColor : 16768392, brightness : 1, ambience : 0.3, sunPos : 40, lights : 0.5, air : 0.6, floorHeight : 1.1, baseSize : 0.1, baseHeight : 0.3, pitch : 0.5, ridge : 0.1, rakes : 0.1, eaves : 0.1, thickness : 0.1, concave : 0.1, shutters : true, winWidth : 0.2, winHeight : 0.35, winFCols : 3, winFRows : 3, features : ["lamps","stars"]};
com_watabou_wintermansion_elements3d_Style.Hogmanay = { skyColor0 : 16770768, skyColor1 : 16769232, groundColor : 15658751, wallsColor : 10065032, baseColor : 15658751, roofColor : 15658751, woodColor : 6710886, lightColor : 16768409, brightness : 1.2, ambience : 0.6, sunColor : 16777198, sunPos : 50, lights : 0.7, air : 0.7, floorHeight : 0.9, baseSize : 0.1, baseHeight : 0.3, cylindrical : true, pitch : 0.7, rakes : 0.1, eaves : 0.1, thickness : 0.3, concave : 1.0, winWidth : 0.3, winHeight : 0.3, winFCols : 3, winFRows : 3, features : ["snow","icicles","wreaths","lamps"]};
com_watabou_wintermansion_elements3d_Style.WildWest = { skyColor0 : 11546661, skyColor1 : 14124070, groundColor : 13406034, wallsColor : 10060349, baseColor : 10060349, roofColor : 6707743, woodColor : 6707743, lightColor : 15910985, brightness : 1, ambience : 0.5, sunPos : 30, sunColor : 16770406, lights : 0.4, air : 0.5, floorHeight : 0.7, baseSize : 0.1, baseHeight : 0.2, pitch : 0.3, ridge : 0.04, rakes : 0.1, eaves : 0.1, thickness : 0.05, concave : 1.0, cylindrical : true, winWidth : 0.3, winHeight : 0.3, winFCols : 3, winFRows : 3, shutters : true, features : ["clouds"]};
com_watabou_wintermansion_elements3d_Style.current = com_watabou_wintermansion_elements3d_Style.England;
openfl_display_BitmapData.__vertexBufferStride = 14;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
com_watabou_wintermansion_elements3d_SunDisk.SIZE = 256;
com_watabou_wintermansion_elements3d_SunDisk.bmp = new openfl_display_BitmapData(256,256);
com_watabou_wintermansion_elements3d_View.UNIT = 1.0;
com_watabou_wintermansion_elements3d_View.opWeather = true;
com_watabou_wintermansion_elements3d_View.opDecoration = true;
com_watabou_wintermansion_elements3d_Window.m = new openfl_geom_Matrix3D();
com_watabou_wintermansion_elements3d_weather_Clouds.CLOUD_SIZE = 0.1;
com_watabou_wintermansion_elements3d_weather_Clouds.TX_SIZE = 64;
com_watabou_wintermansion_elements3d_weather_Rainfall.DROP_RADIUS = 0.005;
com_watabou_wintermansion_elements3d_weather_Rainfall.DROP_HEIGHT = 1.0;
com_watabou_wintermansion_elements3d_weather_Rainfall.DROP_SPEED = 10;
com_watabou_wintermansion_elements3d_weather_Snowfall.FLAKE_SIZE = 0.05;
com_watabou_wintermansion_elements3d_weather_Snowfall.FALL_SPEED = 1.0;
com_watabou_wintermansion_elements3d_weather_Stars.STAR_SIZE = 0.3;
com_watabou_wintermansion_elements3d_weather_Stars.TX_SIZE = 64;
com_watabou_wintermansion_scenes_PlanScene.STROKE = 0.01;
com_watabou_wintermansion_scenes_PlanScene.WALL = 0.1;
com_watabou_wintermansion_scenes_PlanScene.DOOR = 0.04;
com_watabou_wintermansion_scenes_PlanScene.SIDE_WALL = 0.2;
com_watabou_wintermansion_scenes_PlanScene.PAPER = 15063747;
com_watabou_wintermansion_scenes_PlanScene.LIGHT = 12563363;
com_watabou_wintermansion_scenes_PlanScene.DARK = 10063747;
com_watabou_wintermansion_scenes_PlanScene.BLACK = 2499101;
com_watabou_wintermansion_scenes_PlanScene.FORMAT = new openfl_text_TextFormat("_serif",12,2499101);
com_watabou_wintermansion_scenes_ViewScene.viewMode = 2;
com_watabou_wintermansion_svg_SvgPlan.PAPER = 16777215;
com_watabou_wintermansion_svg_SvgPlan.LIGHT = 13421772;
com_watabou_wintermansion_svg_SvgPlan.DARK = 8947848;
com_watabou_wintermansion_svg_SvgPlan.BLACK = 0;
com_watabou_wintermansion_svg_SvgPlan.STROKE = 0.01;
com_watabou_wintermansion_svg_SvgPlan.WALL = 0.1;
com_watabou_wintermansion_svg_SvgPlan.DOOR = 0.04;
com_watabou_wintermansion_svg_SvgPlan.SIDE_WALL = 0.2;
com_watabou_wintermansion_svg_SvgPlan.SCALE = 100;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Float64Array.BYTES_PER_ELEMENT = 8;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_unifill_Unicode.minCodePoint = 0;
lime__$internal_unifill_Unicode.maxCodePoint = 1114111;
lime__$internal_unifill_Unicode.minHighSurrogate = 55296;
lime__$internal_unifill_Unicode.maxHighSurrogate = 56319;
lime__$internal_unifill_Unicode.minLowSurrogate = 56320;
lime__$internal_unifill_Unicode.maxLowSurrogate = 57343;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.EXTENSIONS = 7939;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
lime_graphics_opengl_GL.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_graphics_opengl_GL.READ_BUFFER = 3074;
lime_graphics_opengl_GL.UNPACK_ROW_LENGTH = 3314;
lime_graphics_opengl_GL.UNPACK_SKIP_ROWS = 3315;
lime_graphics_opengl_GL.UNPACK_SKIP_PIXELS = 3316;
lime_graphics_opengl_GL.PACK_ROW_LENGTH = 3330;
lime_graphics_opengl_GL.PACK_SKIP_ROWS = 3331;
lime_graphics_opengl_GL.PACK_SKIP_PIXELS = 3332;
lime_graphics_opengl_GL.TEXTURE_BINDING_3D = 32874;
lime_graphics_opengl_GL.UNPACK_SKIP_IMAGES = 32877;
lime_graphics_opengl_GL.UNPACK_IMAGE_HEIGHT = 32878;
lime_graphics_opengl_GL.MAX_3D_TEXTURE_SIZE = 32883;
lime_graphics_opengl_GL.MAX_ELEMENTS_VERTICES = 33000;
lime_graphics_opengl_GL.MAX_ELEMENTS_INDICES = 33001;
lime_graphics_opengl_GL.MAX_TEXTURE_LOD_BIAS = 34045;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
lime_graphics_opengl_GL.MAX_ARRAY_TEXTURE_LAYERS = 35071;
lime_graphics_opengl_GL.MIN_PROGRAM_TEXEL_OFFSET = 35076;
lime_graphics_opengl_GL.MAX_PROGRAM_TEXEL_OFFSET = 35077;
lime_graphics_opengl_GL.MAX_VARYING_COMPONENTS = 35659;
lime_graphics_opengl_GL.FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
lime_graphics_opengl_GL.RASTERIZER_DISCARD = 35977;
lime_graphics_opengl_GL.VERTEX_ARRAY_BINDING = 34229;
lime_graphics_opengl_GL.MAX_VERTEX_OUTPUT_COMPONENTS = 37154;
lime_graphics_opengl_GL.MAX_FRAGMENT_INPUT_COMPONENTS = 37157;
lime_graphics_opengl_GL.MAX_SERVER_WAIT_TIMEOUT = 37137;
lime_graphics_opengl_GL.MAX_ELEMENT_INDEX = 36203;
lime_graphics_opengl_GL.RED = 6403;
lime_graphics_opengl_GL.RGB8 = 32849;
lime_graphics_opengl_GL.RGBA8 = 32856;
lime_graphics_opengl_GL.RGB10_A2 = 32857;
lime_graphics_opengl_GL.TEXTURE_3D = 32879;
lime_graphics_opengl_GL.TEXTURE_WRAP_R = 32882;
lime_graphics_opengl_GL.TEXTURE_MIN_LOD = 33082;
lime_graphics_opengl_GL.TEXTURE_MAX_LOD = 33083;
lime_graphics_opengl_GL.TEXTURE_BASE_LEVEL = 33084;
lime_graphics_opengl_GL.TEXTURE_MAX_LEVEL = 33085;
lime_graphics_opengl_GL.TEXTURE_COMPARE_MODE = 34892;
lime_graphics_opengl_GL.TEXTURE_COMPARE_FUNC = 34893;
lime_graphics_opengl_GL.SRGB = 35904;
lime_graphics_opengl_GL.SRGB8 = 35905;
lime_graphics_opengl_GL.SRGB8_ALPHA8 = 35907;
lime_graphics_opengl_GL.COMPARE_REF_TO_TEXTURE = 34894;
lime_graphics_opengl_GL.RGBA32F = 34836;
lime_graphics_opengl_GL.RGB32F = 34837;
lime_graphics_opengl_GL.RGBA16F = 34842;
lime_graphics_opengl_GL.RGB16F = 34843;
lime_graphics_opengl_GL.TEXTURE_2D_ARRAY = 35866;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D_ARRAY = 35869;
lime_graphics_opengl_GL.R11F_G11F_B10F = 35898;
lime_graphics_opengl_GL.RGB9_E5 = 35901;
lime_graphics_opengl_GL.RGBA32UI = 36208;
lime_graphics_opengl_GL.RGB32UI = 36209;
lime_graphics_opengl_GL.RGBA16UI = 36214;
lime_graphics_opengl_GL.RGB16UI = 36215;
lime_graphics_opengl_GL.RGBA8UI = 36220;
lime_graphics_opengl_GL.RGB8UI = 36221;
lime_graphics_opengl_GL.RGBA32I = 36226;
lime_graphics_opengl_GL.RGB32I = 36227;
lime_graphics_opengl_GL.RGBA16I = 36232;
lime_graphics_opengl_GL.RGB16I = 36233;
lime_graphics_opengl_GL.RGBA8I = 36238;
lime_graphics_opengl_GL.RGB8I = 36239;
lime_graphics_opengl_GL.RED_INTEGER = 36244;
lime_graphics_opengl_GL.RGB_INTEGER = 36248;
lime_graphics_opengl_GL.RGBA_INTEGER = 36249;
lime_graphics_opengl_GL.R8 = 33321;
lime_graphics_opengl_GL.RG8 = 33323;
lime_graphics_opengl_GL.R16F = 33325;
lime_graphics_opengl_GL.R32F = 33326;
lime_graphics_opengl_GL.RG16F = 33327;
lime_graphics_opengl_GL.RG32F = 33328;
lime_graphics_opengl_GL.R8I = 33329;
lime_graphics_opengl_GL.R8UI = 33330;
lime_graphics_opengl_GL.R16I = 33331;
lime_graphics_opengl_GL.R16UI = 33332;
lime_graphics_opengl_GL.R32I = 33333;
lime_graphics_opengl_GL.R32UI = 33334;
lime_graphics_opengl_GL.RG8I = 33335;
lime_graphics_opengl_GL.RG8UI = 33336;
lime_graphics_opengl_GL.RG16I = 33337;
lime_graphics_opengl_GL.RG16UI = 33338;
lime_graphics_opengl_GL.RG32I = 33339;
lime_graphics_opengl_GL.RG32UI = 33340;
lime_graphics_opengl_GL.R8_SNORM = 36756;
lime_graphics_opengl_GL.RG8_SNORM = 36757;
lime_graphics_opengl_GL.RGB8_SNORM = 36758;
lime_graphics_opengl_GL.RGBA8_SNORM = 36759;
lime_graphics_opengl_GL.RGB10_A2UI = 36975;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_FORMAT = 37167;
lime_graphics_opengl_GL.TEXTURE_IMMUTABLE_LEVELS = 33503;
lime_graphics_opengl_GL.UNSIGNED_INT_2_10_10_10_REV = 33640;
lime_graphics_opengl_GL.UNSIGNED_INT_10F_11F_11F_REV = 35899;
lime_graphics_opengl_GL.UNSIGNED_INT_5_9_9_9_REV = 35902;
lime_graphics_opengl_GL.FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
lime_graphics_opengl_GL.UNSIGNED_INT_24_8 = 34042;
lime_graphics_opengl_GL.HALF_FLOAT = 5131;
lime_graphics_opengl_GL.RG = 33319;
lime_graphics_opengl_GL.RG_INTEGER = 33320;
lime_graphics_opengl_GL.INT_2_10_10_10_REV = 36255;
lime_graphics_opengl_GL.CURRENT_QUERY = 34917;
lime_graphics_opengl_GL.QUERY_RESULT = 34918;
lime_graphics_opengl_GL.QUERY_RESULT_AVAILABLE = 34919;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED = 35887;
lime_graphics_opengl_GL.ANY_SAMPLES_PASSED_CONSERVATIVE = 36202;
lime_graphics_opengl_GL.MAX_DRAW_BUFFERS = 34852;
lime_graphics_opengl_GL.DRAW_BUFFER0 = 34853;
lime_graphics_opengl_GL.DRAW_BUFFER1 = 34854;
lime_graphics_opengl_GL.DRAW_BUFFER2 = 34855;
lime_graphics_opengl_GL.DRAW_BUFFER3 = 34856;
lime_graphics_opengl_GL.DRAW_BUFFER4 = 34857;
lime_graphics_opengl_GL.DRAW_BUFFER5 = 34858;
lime_graphics_opengl_GL.DRAW_BUFFER6 = 34859;
lime_graphics_opengl_GL.DRAW_BUFFER7 = 34860;
lime_graphics_opengl_GL.DRAW_BUFFER8 = 34861;
lime_graphics_opengl_GL.DRAW_BUFFER9 = 34862;
lime_graphics_opengl_GL.DRAW_BUFFER10 = 34863;
lime_graphics_opengl_GL.DRAW_BUFFER11 = 34864;
lime_graphics_opengl_GL.DRAW_BUFFER12 = 34865;
lime_graphics_opengl_GL.DRAW_BUFFER13 = 34866;
lime_graphics_opengl_GL.DRAW_BUFFER14 = 34867;
lime_graphics_opengl_GL.DRAW_BUFFER15 = 34868;
lime_graphics_opengl_GL.MAX_COLOR_ATTACHMENTS = 36063;
lime_graphics_opengl_GL.COLOR_ATTACHMENT1 = 36065;
lime_graphics_opengl_GL.COLOR_ATTACHMENT2 = 36066;
lime_graphics_opengl_GL.COLOR_ATTACHMENT3 = 36067;
lime_graphics_opengl_GL.COLOR_ATTACHMENT4 = 36068;
lime_graphics_opengl_GL.COLOR_ATTACHMENT5 = 36069;
lime_graphics_opengl_GL.COLOR_ATTACHMENT6 = 36070;
lime_graphics_opengl_GL.COLOR_ATTACHMENT7 = 36071;
lime_graphics_opengl_GL.COLOR_ATTACHMENT8 = 36072;
lime_graphics_opengl_GL.COLOR_ATTACHMENT9 = 36073;
lime_graphics_opengl_GL.COLOR_ATTACHMENT10 = 36074;
lime_graphics_opengl_GL.COLOR_ATTACHMENT11 = 36075;
lime_graphics_opengl_GL.COLOR_ATTACHMENT12 = 36076;
lime_graphics_opengl_GL.COLOR_ATTACHMENT13 = 36077;
lime_graphics_opengl_GL.COLOR_ATTACHMENT14 = 36078;
lime_graphics_opengl_GL.COLOR_ATTACHMENT15 = 36079;
lime_graphics_opengl_GL.SAMPLER_3D = 35679;
lime_graphics_opengl_GL.SAMPLER_2D_SHADOW = 35682;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY = 36289;
lime_graphics_opengl_GL.SAMPLER_2D_ARRAY_SHADOW = 36292;
lime_graphics_opengl_GL.SAMPLER_CUBE_SHADOW = 36293;
lime_graphics_opengl_GL.INT_SAMPLER_2D = 36298;
lime_graphics_opengl_GL.INT_SAMPLER_3D = 36299;
lime_graphics_opengl_GL.INT_SAMPLER_CUBE = 36300;
lime_graphics_opengl_GL.INT_SAMPLER_2D_ARRAY = 36303;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D = 36306;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_3D = 36307;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_CUBE = 36308;
lime_graphics_opengl_GL.UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311;
lime_graphics_opengl_GL.MAX_SAMPLES = 36183;
lime_graphics_opengl_GL.SAMPLER_BINDING = 35097;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER = 35051;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER = 35052;
lime_graphics_opengl_GL.PIXEL_PACK_BUFFER_BINDING = 35053;
lime_graphics_opengl_GL.PIXEL_UNPACK_BUFFER_BINDING = 35055;
lime_graphics_opengl_GL.COPY_READ_BUFFER = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER = 36663;
lime_graphics_opengl_GL.COPY_READ_BUFFER_BINDING = 36662;
lime_graphics_opengl_GL.COPY_WRITE_BUFFER_BINDING = 36663;
lime_graphics_opengl_GL.FLOAT_MAT2x3 = 35685;
lime_graphics_opengl_GL.FLOAT_MAT2x4 = 35686;
lime_graphics_opengl_GL.FLOAT_MAT3x2 = 35687;
lime_graphics_opengl_GL.FLOAT_MAT3x4 = 35688;
lime_graphics_opengl_GL.FLOAT_MAT4x2 = 35689;
lime_graphics_opengl_GL.FLOAT_MAT4x3 = 35690;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC2 = 36294;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC3 = 36295;
lime_graphics_opengl_GL.UNSIGNED_INT_VEC4 = 36296;
lime_graphics_opengl_GL.UNSIGNED_NORMALIZED = 35863;
lime_graphics_opengl_GL.SIGNED_NORMALIZED = 36764;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_INTEGER = 35069;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_DIVISOR = 35070;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_MODE = 35967;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_VARYINGS = 35971;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_START = 35972;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978;
lime_graphics_opengl_GL.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979;
lime_graphics_opengl_GL.INTERLEAVED_ATTRIBS = 35980;
lime_graphics_opengl_GL.SEPARATE_ATTRIBS = 35981;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER = 35982;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK = 36386;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_PAUSED = 36387;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_ACTIVE = 36388;
lime_graphics_opengl_GL.TRANSFORM_FEEDBACK_BINDING = 36389;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
lime_graphics_opengl_GL.FRAMEBUFFER_DEFAULT = 33304;
lime_graphics_opengl_GL.DEPTH24_STENCIL8 = 35056;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.READ_FRAMEBUFFER = 36008;
lime_graphics_opengl_GL.DRAW_FRAMEBUFFER = 36009;
lime_graphics_opengl_GL.READ_FRAMEBUFFER_BINDING = 36010;
lime_graphics_opengl_GL.RENDERBUFFER_SAMPLES = 36011;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
lime_graphics_opengl_GL.UNIFORM_BUFFER = 35345;
lime_graphics_opengl_GL.UNIFORM_BUFFER_BINDING = 35368;
lime_graphics_opengl_GL.UNIFORM_BUFFER_START = 35369;
lime_graphics_opengl_GL.UNIFORM_BUFFER_SIZE = 35370;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_BLOCKS = 35371;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
lime_graphics_opengl_GL.MAX_COMBINED_UNIFORM_BLOCKS = 35374;
lime_graphics_opengl_GL.MAX_UNIFORM_BUFFER_BINDINGS = 35375;
lime_graphics_opengl_GL.MAX_UNIFORM_BLOCK_SIZE = 35376;
lime_graphics_opengl_GL.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
lime_graphics_opengl_GL.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
lime_graphics_opengl_GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
lime_graphics_opengl_GL.ACTIVE_UNIFORM_BLOCKS = 35382;
lime_graphics_opengl_GL.UNIFORM_TYPE = 35383;
lime_graphics_opengl_GL.UNIFORM_SIZE = 35384;
lime_graphics_opengl_GL.UNIFORM_BLOCK_INDEX = 35386;
lime_graphics_opengl_GL.UNIFORM_OFFSET = 35387;
lime_graphics_opengl_GL.UNIFORM_ARRAY_STRIDE = 35388;
lime_graphics_opengl_GL.UNIFORM_MATRIX_STRIDE = 35389;
lime_graphics_opengl_GL.UNIFORM_IS_ROW_MAJOR = 35390;
lime_graphics_opengl_GL.UNIFORM_BLOCK_BINDING = 35391;
lime_graphics_opengl_GL.UNIFORM_BLOCK_DATA_SIZE = 35392;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
lime_graphics_opengl_GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
lime_graphics_opengl_GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
lime_graphics_opengl_GL.OBJECT_TYPE = 37138;
lime_graphics_opengl_GL.SYNC_CONDITION = 37139;
lime_graphics_opengl_GL.SYNC_STATUS = 37140;
lime_graphics_opengl_GL.SYNC_FLAGS = 37141;
lime_graphics_opengl_GL.SYNC_FENCE = 37142;
lime_graphics_opengl_GL.SYNC_GPU_COMMANDS_COMPLETE = 37143;
lime_graphics_opengl_GL.UNSIGNALED = 37144;
lime_graphics_opengl_GL.SIGNALED = 37145;
lime_graphics_opengl_GL.ALREADY_SIGNALED = 37146;
lime_graphics_opengl_GL.TIMEOUT_EXPIRED = 37147;
lime_graphics_opengl_GL.CONDITION_SATISFIED = 37148;
lime_graphics_opengl_GL.WAIT_FAILED = 37149;
lime_graphics_opengl_GL.SYNC_FLUSH_COMMANDS_BIT = 1;
lime_graphics_opengl_GL.COLOR = 6144;
lime_graphics_opengl_GL.DEPTH = 6145;
lime_graphics_opengl_GL.STENCIL = 6146;
lime_graphics_opengl_GL.MIN = 32775;
lime_graphics_opengl_GL.MAX = 32776;
lime_graphics_opengl_GL.DEPTH_COMPONENT24 = 33190;
lime_graphics_opengl_GL.STREAM_READ = 35041;
lime_graphics_opengl_GL.STREAM_COPY = 35042;
lime_graphics_opengl_GL.STATIC_READ = 35045;
lime_graphics_opengl_GL.STATIC_COPY = 35046;
lime_graphics_opengl_GL.DYNAMIC_READ = 35049;
lime_graphics_opengl_GL.DYNAMIC_COPY = 35050;
lime_graphics_opengl_GL.DEPTH_COMPONENT32F = 36012;
lime_graphics_opengl_GL.DEPTH32F_STENCIL8 = 36013;
lime_graphics_opengl_GL.INVALID_INDEX = -1;
lime_graphics_opengl_GL.TIMEOUT_IGNORED = -1;
lime_graphics_opengl_GL.MAX_CLIENT_WAIT_TIMEOUT_WEBGL = 37447;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_media_openal_AL.NONE = 0;
lime_media_openal_AL.FALSE = 0;
lime_media_openal_AL.TRUE = 1;
lime_media_openal_AL.SOURCE_RELATIVE = 514;
lime_media_openal_AL.CONE_INNER_ANGLE = 4097;
lime_media_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_media_openal_AL.PITCH = 4099;
lime_media_openal_AL.POSITION = 4100;
lime_media_openal_AL.DIRECTION = 4101;
lime_media_openal_AL.VELOCITY = 4102;
lime_media_openal_AL.LOOPING = 4103;
lime_media_openal_AL.BUFFER = 4105;
lime_media_openal_AL.GAIN = 4106;
lime_media_openal_AL.MIN_GAIN = 4109;
lime_media_openal_AL.MAX_GAIN = 4110;
lime_media_openal_AL.ORIENTATION = 4111;
lime_media_openal_AL.SOURCE_STATE = 4112;
lime_media_openal_AL.INITIAL = 4113;
lime_media_openal_AL.PLAYING = 4114;
lime_media_openal_AL.PAUSED = 4115;
lime_media_openal_AL.STOPPED = 4116;
lime_media_openal_AL.BUFFERS_QUEUED = 4117;
lime_media_openal_AL.BUFFERS_PROCESSED = 4118;
lime_media_openal_AL.REFERENCE_DISTANCE = 4128;
lime_media_openal_AL.ROLLOFF_FACTOR = 4129;
lime_media_openal_AL.CONE_OUTER_GAIN = 4130;
lime_media_openal_AL.MAX_DISTANCE = 4131;
lime_media_openal_AL.SEC_OFFSET = 4132;
lime_media_openal_AL.SAMPLE_OFFSET = 4133;
lime_media_openal_AL.BYTE_OFFSET = 4134;
lime_media_openal_AL.SOURCE_TYPE = 4135;
lime_media_openal_AL.STATIC = 4136;
lime_media_openal_AL.STREAMING = 4137;
lime_media_openal_AL.UNDETERMINED = 4144;
lime_media_openal_AL.FORMAT_MONO8 = 4352;
lime_media_openal_AL.FORMAT_MONO16 = 4353;
lime_media_openal_AL.FORMAT_STEREO8 = 4354;
lime_media_openal_AL.FORMAT_STEREO16 = 4355;
lime_media_openal_AL.FREQUENCY = 8193;
lime_media_openal_AL.BITS = 8194;
lime_media_openal_AL.CHANNELS = 8195;
lime_media_openal_AL.SIZE = 8196;
lime_media_openal_AL.NO_ERROR = 0;
lime_media_openal_AL.INVALID_NAME = 40961;
lime_media_openal_AL.INVALID_ENUM = 40962;
lime_media_openal_AL.INVALID_VALUE = 40963;
lime_media_openal_AL.INVALID_OPERATION = 40964;
lime_media_openal_AL.OUT_OF_MEMORY = 40965;
lime_media_openal_AL.VENDOR = 45057;
lime_media_openal_AL.VERSION = 45058;
lime_media_openal_AL.RENDERER = 45059;
lime_media_openal_AL.EXTENSIONS = 45060;
lime_media_openal_AL.DOPPLER_FACTOR = 49152;
lime_media_openal_AL.SPEED_OF_SOUND = 49155;
lime_media_openal_AL.DOPPLER_VELOCITY = 49153;
lime_media_openal_AL.DISTANCE_MODEL = 53248;
lime_media_openal_AL.INVERSE_DISTANCE = 53249;
lime_media_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_media_openal_AL.LINEAR_DISTANCE = 53251;
lime_media_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_media_openal_AL.EXPONENT_DISTANCE = 53253;
lime_media_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_media_openal_AL.METERS_PER_UNIT = 131076;
lime_media_openal_AL.DIRECT_FILTER = 131077;
lime_media_openal_AL.AUXILIARY_SEND_FILTER = 131078;
lime_media_openal_AL.AIR_ABSORPTION_FACTOR = 131079;
lime_media_openal_AL.ROOM_ROLLOFF_FACTOR = 131080;
lime_media_openal_AL.CONE_OUTER_GAINHF = 131081;
lime_media_openal_AL.DIRECT_FILTER_GAINHF_AUTO = 131082;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAIN_AUTO = 131083;
lime_media_openal_AL.AUXILIARY_SEND_FILTER_GAINHF_AUTO = 131084;
lime_media_openal_AL.REVERB_DENSITY = 1;
lime_media_openal_AL.REVERB_DIFFUSION = 2;
lime_media_openal_AL.REVERB_GAIN = 3;
lime_media_openal_AL.REVERB_GAINHF = 4;
lime_media_openal_AL.REVERB_DECAY_TIME = 5;
lime_media_openal_AL.REVERB_DECAY_HFRATIO = 6;
lime_media_openal_AL.REVERB_REFLECTIONS_GAIN = 7;
lime_media_openal_AL.REVERB_REFLECTIONS_DELAY = 8;
lime_media_openal_AL.REVERB_LATE_REVERB_GAIN = 9;
lime_media_openal_AL.REVERB_LATE_REVERB_DELAY = 10;
lime_media_openal_AL.REVERB_AIR_ABSORPTION_GAINHF = 11;
lime_media_openal_AL.REVERB_ROOM_ROLLOFF_FACTOR = 12;
lime_media_openal_AL.REVERB_DECAY_HFLIMIT = 13;
lime_media_openal_AL.EAXREVERB_DENSITY = 1;
lime_media_openal_AL.EAXREVERB_DIFFUSION = 2;
lime_media_openal_AL.EAXREVERB_GAIN = 3;
lime_media_openal_AL.EAXREVERB_GAINHF = 4;
lime_media_openal_AL.EAXREVERB_GAINLF = 5;
lime_media_openal_AL.EAXREVERB_DECAY_TIME = 6;
lime_media_openal_AL.EAXREVERB_DECAY_HFRATIO = 7;
lime_media_openal_AL.EAXREVERB_DECAY_LFRATIO = 8;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_GAIN = 9;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_DELAY = 10;
lime_media_openal_AL.EAXREVERB_REFLECTIONS_PAN = 11;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_GAIN = 12;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_DELAY = 13;
lime_media_openal_AL.EAXREVERB_LATE_REVERB_PAN = 14;
lime_media_openal_AL.EAXREVERB_ECHO_TIME = 15;
lime_media_openal_AL.EAXREVERB_ECHO_DEPTH = 16;
lime_media_openal_AL.EAXREVERB_MODULATION_TIME = 17;
lime_media_openal_AL.EAXREVERB_MODULATION_DEPTH = 18;
lime_media_openal_AL.EAXREVERB_AIR_ABSORPTION_GAINHF = 19;
lime_media_openal_AL.EAXREVERB_HFREFERENCE = 20;
lime_media_openal_AL.EAXREVERB_LFREFERENCE = 21;
lime_media_openal_AL.EAXREVERB_ROOM_ROLLOFF_FACTOR = 22;
lime_media_openal_AL.EAXREVERB_DECAY_HFLIMIT = 23;
lime_media_openal_AL.CHORUS_WAVEFORM = 1;
lime_media_openal_AL.CHORUS_PHASE = 2;
lime_media_openal_AL.CHORUS_RATE = 3;
lime_media_openal_AL.CHORUS_DEPTH = 4;
lime_media_openal_AL.CHORUS_FEEDBACK = 5;
lime_media_openal_AL.CHORUS_DELAY = 6;
lime_media_openal_AL.DISTORTION_EDGE = 1;
lime_media_openal_AL.DISTORTION_GAIN = 2;
lime_media_openal_AL.DISTORTION_LOWPASS_CUTOFF = 3;
lime_media_openal_AL.DISTORTION_EQCENTER = 4;
lime_media_openal_AL.DISTORTION_EQBANDWIDTH = 5;
lime_media_openal_AL.ECHO_DELAY = 1;
lime_media_openal_AL.ECHO_LRDELAY = 2;
lime_media_openal_AL.ECHO_DAMPING = 3;
lime_media_openal_AL.ECHO_FEEDBACK = 4;
lime_media_openal_AL.ECHO_SPREAD = 5;
lime_media_openal_AL.FLANGER_WAVEFORM = 1;
lime_media_openal_AL.FLANGER_PHASE = 2;
lime_media_openal_AL.FLANGER_RATE = 3;
lime_media_openal_AL.FLANGER_DEPTH = 4;
lime_media_openal_AL.FLANGER_FEEDBACK = 5;
lime_media_openal_AL.FLANGER_DELAY = 6;
lime_media_openal_AL.FREQUENCY_SHIFTER_FREQUENCY = 1;
lime_media_openal_AL.FREQUENCY_SHIFTER_LEFT_DIRECTION = 2;
lime_media_openal_AL.FREQUENCY_SHIFTER_RIGHT_DIRECTION = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA = 1;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEA_COARSE_TUNING = 2;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB = 3;
lime_media_openal_AL.VOCAL_MORPHER_PHONEMEB_COARSE_TUNING = 4;
lime_media_openal_AL.VOCAL_MORPHER_WAVEFORM = 5;
lime_media_openal_AL.VOCAL_MORPHER_RATE = 6;
lime_media_openal_AL.PITCH_SHIFTER_COARSE_TUNE = 1;
lime_media_openal_AL.PITCH_SHIFTER_FINE_TUNE = 2;
lime_media_openal_AL.RING_MODULATOR_FREQUENCY = 1;
lime_media_openal_AL.RING_MODULATOR_HIGHPASS_CUTOFF = 2;
lime_media_openal_AL.RING_MODULATOR_WAVEFORM = 3;
lime_media_openal_AL.AUTOWAH_ATTACK_TIME = 1;
lime_media_openal_AL.AUTOWAH_RELEASE_TIME = 2;
lime_media_openal_AL.AUTOWAH_RESONANCE = 3;
lime_media_openal_AL.AUTOWAH_PEAK_GAIN = 4;
lime_media_openal_AL.COMPRESSOR_ONOFF = 1;
lime_media_openal_AL.EQUALIZER_LOW_GAIN = 1;
lime_media_openal_AL.EQUALIZER_LOW_CUTOFF = 2;
lime_media_openal_AL.EQUALIZER_MID1_GAIN = 3;
lime_media_openal_AL.EQUALIZER_MID1_CENTER = 4;
lime_media_openal_AL.EQUALIZER_MID1_WIDTH = 5;
lime_media_openal_AL.EQUALIZER_MID2_GAIN = 6;
lime_media_openal_AL.EQUALIZER_MID2_CENTER = 7;
lime_media_openal_AL.EQUALIZER_MID2_WIDTH = 8;
lime_media_openal_AL.EQUALIZER_HIGH_GAIN = 9;
lime_media_openal_AL.EQUALIZER_HIGH_CUTOFF = 10;
lime_media_openal_AL.EFFECT_FIRST_PARAMETER = 0;
lime_media_openal_AL.EFFECT_LAST_PARAMETER = 32768;
lime_media_openal_AL.EFFECT_TYPE = 32769;
lime_media_openal_AL.EFFECT_NULL = 0;
lime_media_openal_AL.EFFECT_EAXREVERB = 32768;
lime_media_openal_AL.EFFECT_REVERB = 1;
lime_media_openal_AL.EFFECT_CHORUS = 2;
lime_media_openal_AL.EFFECT_DISTORTION = 3;
lime_media_openal_AL.EFFECT_ECHO = 4;
lime_media_openal_AL.EFFECT_FLANGER = 5;
lime_media_openal_AL.EFFECT_FREQUENCY_SHIFTER = 6;
lime_media_openal_AL.EFFECT_VOCAL_MORPHER = 7;
lime_media_openal_AL.EFFECT_PITCH_SHIFTER = 8;
lime_media_openal_AL.EFFECT_RING_MODULATOR = 9;
lime_media_openal_AL.FFECT_AUTOWAH = 10;
lime_media_openal_AL.EFFECT_COMPRESSOR = 11;
lime_media_openal_AL.EFFECT_EQUALIZER = 12;
lime_media_openal_AL.EFFECTSLOT_EFFECT = 1;
lime_media_openal_AL.EFFECTSLOT_GAIN = 2;
lime_media_openal_AL.EFFECTSLOT_AUXILIARY_SEND_AUTO = 3;
lime_media_openal_AL.LOWPASS_GAIN = 1;
lime_media_openal_AL.LOWPASS_GAINHF = 2;
lime_media_openal_AL.HIGHPASS_GAIN = 1;
lime_media_openal_AL.HIGHPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAIN = 1;
lime_media_openal_AL.BANDPASS_GAINLF = 2;
lime_media_openal_AL.BANDPASS_GAINHF = 3;
lime_media_openal_AL.FILTER_FIRST_PARAMETER = 0;
lime_media_openal_AL.FILTER_LAST_PARAMETER = 32768;
lime_media_openal_AL.FILTER_TYPE = 32769;
lime_media_openal_AL.FILTER_NULL = 0;
lime_media_openal_AL.FILTER_LOWPASS = 1;
lime_media_openal_AL.FILTER_HIGHPASS = 2;
lime_media_openal_AL.FILTER_BANDPASS = 3;
lime_media_openal_ALC.FALSE = 0;
lime_media_openal_ALC.TRUE = 1;
lime_media_openal_ALC.FREQUENCY = 4103;
lime_media_openal_ALC.REFRESH = 4104;
lime_media_openal_ALC.SYNC = 4105;
lime_media_openal_ALC.MONO_SOURCES = 4112;
lime_media_openal_ALC.STEREO_SOURCES = 4113;
lime_media_openal_ALC.NO_ERROR = 0;
lime_media_openal_ALC.INVALID_DEVICE = 40961;
lime_media_openal_ALC.INVALID_CONTEXT = 40962;
lime_media_openal_ALC.INVALID_ENUM = 40963;
lime_media_openal_ALC.INVALID_VALUE = 40964;
lime_media_openal_ALC.OUT_OF_MEMORY = 40965;
lime_media_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_media_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_media_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_media_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_media_openal_ALC.EXTENSIONS = 4102;
lime_media_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_media_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_media_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_JNI.alreadyCreated = new haxe_ds_StringMap();
lime_system_JNI.initialized = false;
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_system_System.__directories = new haxe_ds_IntMap();
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNKNOWN = 0;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSPACE = 42;
lime_ui__$ScanCode_ScanCode_$Impl_$.TAB = 43;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN = 40;
lime_ui__$ScanCode_ScanCode_$Impl_$.ESCAPE = 41;
lime_ui__$ScanCode_ScanCode_$Impl_$.SPACE = 44;
lime_ui__$ScanCode_ScanCode_$Impl_$.SINGLE_QUOTE = 52;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMMA = 54;
lime_ui__$ScanCode_ScanCode_$Impl_$.MINUS = 45;
lime_ui__$ScanCode_ScanCode_$Impl_$.PERIOD = 55;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLASH = 56;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_0 = 39;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_1 = 30;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_2 = 31;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_3 = 32;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_4 = 33;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_5 = 34;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_6 = 35;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_7 = 36;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_8 = 37;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMBER_9 = 38;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEMICOLON = 51;
lime_ui__$ScanCode_ScanCode_$Impl_$.EQUALS = 46;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_BRACKET = 47;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKSLASH = 49;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_BRACKET = 48;
lime_ui__$ScanCode_ScanCode_$Impl_$.GRAVE = 53;
lime_ui__$ScanCode_ScanCode_$Impl_$.A = 4;
lime_ui__$ScanCode_ScanCode_$Impl_$.B = 5;
lime_ui__$ScanCode_ScanCode_$Impl_$.C = 6;
lime_ui__$ScanCode_ScanCode_$Impl_$.D = 7;
lime_ui__$ScanCode_ScanCode_$Impl_$.E = 8;
lime_ui__$ScanCode_ScanCode_$Impl_$.F = 9;
lime_ui__$ScanCode_ScanCode_$Impl_$.G = 10;
lime_ui__$ScanCode_ScanCode_$Impl_$.H = 11;
lime_ui__$ScanCode_ScanCode_$Impl_$.I = 12;
lime_ui__$ScanCode_ScanCode_$Impl_$.J = 13;
lime_ui__$ScanCode_ScanCode_$Impl_$.K = 14;
lime_ui__$ScanCode_ScanCode_$Impl_$.L = 15;
lime_ui__$ScanCode_ScanCode_$Impl_$.M = 16;
lime_ui__$ScanCode_ScanCode_$Impl_$.N = 17;
lime_ui__$ScanCode_ScanCode_$Impl_$.O = 18;
lime_ui__$ScanCode_ScanCode_$Impl_$.P = 19;
lime_ui__$ScanCode_ScanCode_$Impl_$.Q = 20;
lime_ui__$ScanCode_ScanCode_$Impl_$.R = 21;
lime_ui__$ScanCode_ScanCode_$Impl_$.S = 22;
lime_ui__$ScanCode_ScanCode_$Impl_$.T = 23;
lime_ui__$ScanCode_ScanCode_$Impl_$.U = 24;
lime_ui__$ScanCode_ScanCode_$Impl_$.V = 25;
lime_ui__$ScanCode_ScanCode_$Impl_$.W = 26;
lime_ui__$ScanCode_ScanCode_$Impl_$.X = 27;
lime_ui__$ScanCode_ScanCode_$Impl_$.Y = 28;
lime_ui__$ScanCode_ScanCode_$Impl_$.Z = 29;
lime_ui__$ScanCode_ScanCode_$Impl_$.DELETE = 76;
lime_ui__$ScanCode_ScanCode_$Impl_$.CAPS_LOCK = 57;
lime_ui__$ScanCode_ScanCode_$Impl_$.F1 = 58;
lime_ui__$ScanCode_ScanCode_$Impl_$.F2 = 59;
lime_ui__$ScanCode_ScanCode_$Impl_$.F3 = 60;
lime_ui__$ScanCode_ScanCode_$Impl_$.F4 = 61;
lime_ui__$ScanCode_ScanCode_$Impl_$.F5 = 62;
lime_ui__$ScanCode_ScanCode_$Impl_$.F6 = 63;
lime_ui__$ScanCode_ScanCode_$Impl_$.F7 = 64;
lime_ui__$ScanCode_ScanCode_$Impl_$.F8 = 65;
lime_ui__$ScanCode_ScanCode_$Impl_$.F9 = 66;
lime_ui__$ScanCode_ScanCode_$Impl_$.F10 = 67;
lime_ui__$ScanCode_ScanCode_$Impl_$.F11 = 68;
lime_ui__$ScanCode_ScanCode_$Impl_$.F12 = 69;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRINT_SCREEN = 70;
lime_ui__$ScanCode_ScanCode_$Impl_$.SCROLL_LOCK = 71;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAUSE = 72;
lime_ui__$ScanCode_ScanCode_$Impl_$.INSERT = 73;
lime_ui__$ScanCode_ScanCode_$Impl_$.HOME = 74;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_UP = 75;
lime_ui__$ScanCode_ScanCode_$Impl_$.END = 77;
lime_ui__$ScanCode_ScanCode_$Impl_$.PAGE_DOWN = 78;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT = 79;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT = 80;
lime_ui__$ScanCode_ScanCode_$Impl_$.DOWN = 81;
lime_ui__$ScanCode_ScanCode_$Impl_$.UP = 82;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUM_LOCK = 83;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DIVIDE = 84;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MULTIPLY = 85;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MINUS = 86;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS = 87;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_ENTER = 88;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_1 = 89;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_2 = 90;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_3 = 91;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_4 = 92;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_5 = 93;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_6 = 94;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_7 = 95;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_8 = 96;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_9 = 97;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_0 = 98;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERIOD = 99;
lime_ui__$ScanCode_ScanCode_$Impl_$.APPLICATION = 101;
lime_ui__$ScanCode_ScanCode_$Impl_$.POWER = 102;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EQUALS = 103;
lime_ui__$ScanCode_ScanCode_$Impl_$.F13 = 104;
lime_ui__$ScanCode_ScanCode_$Impl_$.F14 = 105;
lime_ui__$ScanCode_ScanCode_$Impl_$.F15 = 106;
lime_ui__$ScanCode_ScanCode_$Impl_$.F16 = 107;
lime_ui__$ScanCode_ScanCode_$Impl_$.F17 = 108;
lime_ui__$ScanCode_ScanCode_$Impl_$.F18 = 109;
lime_ui__$ScanCode_ScanCode_$Impl_$.F19 = 110;
lime_ui__$ScanCode_ScanCode_$Impl_$.F20 = 111;
lime_ui__$ScanCode_ScanCode_$Impl_$.F21 = 112;
lime_ui__$ScanCode_ScanCode_$Impl_$.F22 = 113;
lime_ui__$ScanCode_ScanCode_$Impl_$.F23 = 114;
lime_ui__$ScanCode_ScanCode_$Impl_$.F24 = 115;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXECUTE = 116;
lime_ui__$ScanCode_ScanCode_$Impl_$.HELP = 117;
lime_ui__$ScanCode_ScanCode_$Impl_$.MENU = 118;
lime_ui__$ScanCode_ScanCode_$Impl_$.SELECT = 119;
lime_ui__$ScanCode_ScanCode_$Impl_$.STOP = 120;
lime_ui__$ScanCode_ScanCode_$Impl_$.AGAIN = 121;
lime_ui__$ScanCode_ScanCode_$Impl_$.UNDO = 122;
lime_ui__$ScanCode_ScanCode_$Impl_$.CUT = 123;
lime_ui__$ScanCode_ScanCode_$Impl_$.COPY = 124;
lime_ui__$ScanCode_ScanCode_$Impl_$.PASTE = 125;
lime_ui__$ScanCode_ScanCode_$Impl_$.FIND = 126;
lime_ui__$ScanCode_ScanCode_$Impl_$.MUTE = 127;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_UP = 128;
lime_ui__$ScanCode_ScanCode_$Impl_$.VOLUME_DOWN = 129;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COMMA = 133;
lime_ui__$ScanCode_ScanCode_$Impl_$.ALT_ERASE = 153;
lime_ui__$ScanCode_ScanCode_$Impl_$.SYSTEM_REQUEST = 154;
lime_ui__$ScanCode_ScanCode_$Impl_$.CANCEL = 155;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR = 156;
lime_ui__$ScanCode_ScanCode_$Impl_$.PRIOR = 157;
lime_ui__$ScanCode_ScanCode_$Impl_$.RETURN2 = 158;
lime_ui__$ScanCode_ScanCode_$Impl_$.SEPARATOR = 159;
lime_ui__$ScanCode_ScanCode_$Impl_$.OUT = 160;
lime_ui__$ScanCode_ScanCode_$Impl_$.OPER = 161;
lime_ui__$ScanCode_ScanCode_$Impl_$.CLEAR_AGAIN = 162;
lime_ui__$ScanCode_ScanCode_$Impl_$.CRSEL = 163;
lime_ui__$ScanCode_ScanCode_$Impl_$.EXSEL = 164;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_00 = 176;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_000 = 177;
lime_ui__$ScanCode_ScanCode_$Impl_$.THOUSAND_SEPARATOR = 178;
lime_ui__$ScanCode_ScanCode_$Impl_$.DECIMAL_SEPARATOR = 179;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_UNIT = 180;
lime_ui__$ScanCode_ScanCode_$Impl_$.CURRENCY_SUBUNIT = 181;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 182;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 183;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LEFT_BRACE = 184;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_RIGHT_BRACE = 185;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_TAB = 186;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BACKSPACE = 187;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_A = 188;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_B = 189;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_C = 190;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_D = 191;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_E = 192;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_F = 193;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_XOR = 194;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_POWER = 195;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PERCENT = 196;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_LESS_THAN = 197;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_GREATER_THAN = 198;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AMPERSAND = 199;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 200;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_VERTICAL_BAR = 201;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 202;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_COLON = 203;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HASH = 204;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_SPACE = 205;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_AT = 206;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_EXCLAMATION = 207;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_STORE = 208;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_RECALL = 209;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_CLEAR = 210;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_ADD = 211;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 212;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 213;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_MEM_DIVIDE = 214;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_PLUS_MINUS = 215;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR = 216;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 217;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_BINARY = 218;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_OCTAL = 219;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_DECIMAL = 220;
lime_ui__$ScanCode_ScanCode_$Impl_$.NUMPAD_HEXADECIMAL = 221;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_CTRL = 224;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_SHIFT = 225;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_ALT = 226;
lime_ui__$ScanCode_ScanCode_$Impl_$.LEFT_META = 227;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_CTRL = 228;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_SHIFT = 229;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_ALT = 230;
lime_ui__$ScanCode_ScanCode_$Impl_$.RIGHT_META = 231;
lime_ui__$ScanCode_ScanCode_$Impl_$.MODE = 257;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_NEXT = 258;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PREVIOUS = 259;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_STOP = 260;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_PLAY = 261;
lime_ui__$ScanCode_ScanCode_$Impl_$.AUDIO_MUTE = 262;
lime_ui__$ScanCode_ScanCode_$Impl_$.MEDIA_SELECT = 263;
lime_ui__$ScanCode_ScanCode_$Impl_$.WWW = 264;
lime_ui__$ScanCode_ScanCode_$Impl_$.MAIL = 265;
lime_ui__$ScanCode_ScanCode_$Impl_$.CALCULATOR = 266;
lime_ui__$ScanCode_ScanCode_$Impl_$.COMPUTER = 267;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_SEARCH = 268;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_HOME = 269;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BACK = 270;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_FORWARD = 271;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_STOP = 272;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_REFRESH = 273;
lime_ui__$ScanCode_ScanCode_$Impl_$.APP_CONTROL_BOOKMARKS = 274;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_DOWN = 275;
lime_ui__$ScanCode_ScanCode_$Impl_$.BRIGHTNESS_UP = 276;
lime_ui__$ScanCode_ScanCode_$Impl_$.DISPLAY_SWITCH = 277;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_TOGGLE = 278;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_DOWN = 279;
lime_ui__$ScanCode_ScanCode_$Impl_$.BACKLIGHT_UP = 280;
lime_ui__$ScanCode_ScanCode_$Impl_$.EJECT = 281;
lime_ui__$ScanCode_ScanCode_$Impl_$.SLEEP = 282;
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Float64Array_Float64Array_$Impl_$.BYTES_PER_ELEMENT = 8;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int8Array_Int8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils_Log.throwErrors = true;
lime_utils__$LogLevel_LogLevel_$Impl_$.NONE = 0;
lime_utils__$LogLevel_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$LogLevel_LogLevel_$Impl_$.WARN = 2;
lime_utils__$LogLevel_LogLevel_$Impl_$.INFO = 3;
lime_utils__$LogLevel_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$LogLevel_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
lime_utils__$UInt8ClampedArray_UInt8ClampedArray_$Impl_$.BYTES_PER_ELEMENT = 1;
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl__$internal_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_formats_agal_AGALConverter.limitedProfile = true;
openfl__$internal_formats_html_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_formats_html_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_formats_html_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_formats_html_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_INDEX_BUFFER_LENGTH = 65535;
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_QUADS_PER_INDEX_BUFFER = 10922;
openfl__$internal_renderer_context3D_Context3DBuffer.MAX_QUAD_INDEX_BUFFER_LENGTH = 65532;
openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(0,0,0,1,0,0,0,0);
openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_text_TextLayout.FT_LOAD_DEFAULT = 0;
openfl__$internal_text_TextLayout.FT_LOAD_NO_SCALE = 1;
openfl__$internal_text_TextLayout.FT_LOAD_NO_HINTING = 2;
openfl__$internal_text_TextLayout.FT_LOAD_RENDER = 4;
openfl__$internal_text_TextLayout.FT_LOAD_NO_BITMAP = 8;
openfl__$internal_text_TextLayout.FT_LOAD_VERTICAL_LAYOUT = 16;
openfl__$internal_text_TextLayout.FT_LOAD_FORCE_AUTOHINT = 32;
openfl__$internal_text_TextLayout.FT_LOAD_CROP_BITMAP = 64;
openfl__$internal_text_TextLayout.FT_LOAD_PEDANTIC = 128;
openfl__$internal_text_TextLayout.FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 256;
openfl__$internal_text_TextLayout.FT_LOAD_NO_RECURSE = 512;
openfl__$internal_text_TextLayout.FT_LOAD_IGNORE_TRANSFORM = 1024;
openfl__$internal_text_TextLayout.FT_LOAD_MONOCHROME = 2048;
openfl__$internal_text_TextLayout.FT_LOAD_LINEAR_DESIGN = 4096;
openfl__$internal_text_TextLayout.FT_LOAD_NO_AUTOHINT = 8192;
openfl__$internal_text_TextLayout.FT_LOAD_COLOR = 16384;
openfl__$internal_text_TextLayout.FT_LOAD_COMPUTE_METRICS = 32768;
openfl__$internal_text_TextLayout.FT_LOAD_BITMAP_METRICS_ONLY = 65536;
openfl__$internal_text_TextLayout.FT_LOAD_TARGET_NORMAL = 0;
openfl__$internal_text_TextLayout.FT_LOAD_TARGET_LIGHT = 0;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.INVALID = 0;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
openfl__$internal_text__$TextLayout_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.COMMON = "Zyyy";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.INHERITED = "Zinh";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.UNKNOWN = "Zzzz";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.ARABIC = "Arab";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.ARMENIAN = "Armn";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BENGALI = "Beng";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CYRILLIC = "Cyrl";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.DEVANAGARI = "Deva";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GEORGIAN = "Geor";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GREEK = "Grek";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GUJARATI = "Gujr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GURMUKHI = "Guru";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.HANGUL = "Hang";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.HAN = "Hani";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.HEBREW = "Hebr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.HIRAGANA = "Hira";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KANNADA = "Knda";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KATAKANA = "Kana";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LAO = "Laoo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LATIN = "Latn";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MALAYALAM = "Mlym";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.ORIYA = "Orya";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAMIL = "Taml";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TELUGA = "Telu";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.THAI = "Thai";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TIBETAN = "Tibt";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BOPOMOFO = "Bopo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BRAILLE = "Brai";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CHEROKEE = "Cher";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.ETHIOPIC = "Ethi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KHMER = "Khmr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MONGOLIAN = "Mong";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MYANMAR = "Mymr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OGHAM = "Ogam";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.RUNIC = "Runr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SINHALA = "Sinh";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SYRIAC = "Syrc";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.THAANA = "Thaa";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.YI = "Yiii";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.DESERET = "Dsrt";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GOTHIC = "Goth";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_ITALIC = "Ital";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BUHID = "Buhd";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.HANUNOO = "Hano";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAGALOG = "Tglg";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAGBANWA = "Tagb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CYPRIOT = "Cprt";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LIMBU = "Limb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LINEAR_B = "Linb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OSMANYA = "Osma";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SHAVIAN = "Shaw";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAI_LE = "Tale";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.UGARITIC = "Ugar";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BUGINESE = "Bugi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.COPTIC = "Copt";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GLAGOLITIC = "Glag";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KHAROSHTHI = "Khar";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TIFINAGH = "Tfng";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BALINESE = "Bali";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CUNEIFORM = "Xsux";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.NKO = "Nkoo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PHAGS_PA = "Phag";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PHOENICIAN = "Phnx";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CARIAN = "Cari";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CHAM = "Cham";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KAYAH_LI = "Kali";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LEPCHA = "Lepc";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LYCIAN = "Lyci";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LYDIAN = "Lydi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OL_CHIKI = "Olck";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.REJANG = "Rjng";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SAURASHTRA = "Saur";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SUNDANESE = "Sund";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.VAI = "Vaii";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.AVESTAN = "Avst";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BAMUM = "Bamu";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.JAVANESE = "Java";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KAITHI = "Kthi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LISU = "Lisu";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SAMARITAN = "Samr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAI_THAM = "Lana";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAI_VIET = "Tavt";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BATAK = "Batk";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BRAHMI = "Brah";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MANDAIC = "Mand";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CHAKMA = "Cakm";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MIAO = "Plrd";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SHARADA = "Shrd";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TAKRI = "Takr";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.BASSA_VAH = "Bass";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.DUPLOYAN = "Dupl";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.ELBASAN = "Elba";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.GRANTHA = "Gran";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KHOJKI = "Khoj";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.KHUDAWADI = "Sind";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.LINEAR_A = "Lina";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MAHAJANI = "Mahj";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MANICHAEAN = "Mani";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MODI = "Modi";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.MRO = "Mroo";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.NABATAEAN = "Nbat";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.OLD_PERMIC = "Perm";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PALMYRENE = "Palm";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.SIDDHAM = "Sidd";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.TIRHUTA = "Tirh";
openfl__$internal_text__$TextLayout_TextScript_$Impl_$.WARANG_CITI = "Wara";
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl__$internal_utils_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl__$internal_utils_TouchData();
},function(data) {
	data.reset();
});
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_GraphicsPath.SIN45 = 0.70710678118654752440084436210485;
openfl_display_GraphicsPath.TAN22 = 0.4142135623730950488016887242097;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = typeof(window) != "undefined" ? window.document.URL : "";
openfl_display_MovieClip.__useParentFPS = false;
openfl_display_OpenGLRenderer.__alphaValue = [1.];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__defaultColorMultipliersValue = [1,1,1,1.];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__emptyAlphaValue = [1.];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0.];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.GL_DEPTH_STENCIL = -1;
openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = -1;
openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS = -1;
openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = -1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_EXTENDED = 5;
openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$.AGAL = 0;
openfl_display3D__$Context3DProgramFormat_Context3DProgramFormat_$Impl_$.GLSL = 1;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_RenderEvent.CLEAR_DOM = "clearDOM";
openfl_events_RenderEvent.RENDER_CAIRO = "renderCairo";
openfl_events_RenderEvent.RENDER_CANVAS = "renderCanvas";
openfl_events_RenderEvent.RENDER_DOM = "renderDOM";
openfl_events_RenderEvent.RENDER_OPENGL = "renderOpenGL";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "NetConnection.Connect.Success";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.ARROW = "arrow";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.AUTO = "auto";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.BUTTON = "button";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.HAND = "hand";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.IBEAM = "ibeam";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CROSSHAIR = "crosshair";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__CUSTOM = "custom";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__MOVE = "move";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NESW = "resize_nesw";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NS = "resize_ns";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_NWSE = "resize_nwse";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__RESIZE_WE = "resize_we";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT = "wait";
openfl_ui__$MouseCursor_MouseCursor_$Impl_$.__WAIT_ARROW = "waitarrow";
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.MAX_NESTING = 4;
openfl_utils_AGALMiniAssembler.MAX_OPCODES = 4096;
openfl_utils_AGALMiniAssembler.FRAGMENT = "fragment";
openfl_utils_AGALMiniAssembler.VERTEX = "vertex";
openfl_utils_AGALMiniAssembler.SAMPLER_TYPE_SHIFT = 8;
openfl_utils_AGALMiniAssembler.SAMPLER_DIM_SHIFT = 12;
openfl_utils_AGALMiniAssembler.SAMPLER_SPECIAL_SHIFT = 16;
openfl_utils_AGALMiniAssembler.SAMPLER_REPEAT_SHIFT = 20;
openfl_utils_AGALMiniAssembler.SAMPLER_MIPMAP_SHIFT = 24;
openfl_utils_AGALMiniAssembler.SAMPLER_FILTER_SHIFT = 28;
openfl_utils_AGALMiniAssembler.REG_WRITE = 1;
openfl_utils_AGALMiniAssembler.REG_READ = 2;
openfl_utils_AGALMiniAssembler.REG_FRAG = 32;
openfl_utils_AGALMiniAssembler.REG_VERT = 64;
openfl_utils_AGALMiniAssembler.OP_SCALAR = 1;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_TEX = 8;
openfl_utils_AGALMiniAssembler.OP_SPECIAL_MATRIX = 16;
openfl_utils_AGALMiniAssembler.OP_FRAG_ONLY = 32;
openfl_utils_AGALMiniAssembler.OP_VERT_ONLY = 64;
openfl_utils_AGALMiniAssembler.OP_NO_DEST = 128;
openfl_utils_AGALMiniAssembler.OP_VERSION2 = 256;
openfl_utils_AGALMiniAssembler.OP_INCNEST = 512;
openfl_utils_AGALMiniAssembler.OP_DECNEST = 1024;
openfl_utils_AGALMiniAssembler.MOV = "mov";
openfl_utils_AGALMiniAssembler.ADD = "add";
openfl_utils_AGALMiniAssembler.SUB = "sub";
openfl_utils_AGALMiniAssembler.MUL = "mul";
openfl_utils_AGALMiniAssembler.DIV = "div";
openfl_utils_AGALMiniAssembler.RCP = "rcp";
openfl_utils_AGALMiniAssembler.MIN = "min";
openfl_utils_AGALMiniAssembler.MAX = "max";
openfl_utils_AGALMiniAssembler.FRC = "frc";
openfl_utils_AGALMiniAssembler.SQT = "sqt";
openfl_utils_AGALMiniAssembler.RSQ = "rsq";
openfl_utils_AGALMiniAssembler.POW = "pow";
openfl_utils_AGALMiniAssembler.LOG = "log";
openfl_utils_AGALMiniAssembler.EXP = "exp";
openfl_utils_AGALMiniAssembler.NRM = "nrm";
openfl_utils_AGALMiniAssembler.SIN = "sin";
openfl_utils_AGALMiniAssembler.COS = "cos";
openfl_utils_AGALMiniAssembler.CRS = "crs";
openfl_utils_AGALMiniAssembler.DP3 = "dp3";
openfl_utils_AGALMiniAssembler.DP4 = "dp4";
openfl_utils_AGALMiniAssembler.ABS = "abs";
openfl_utils_AGALMiniAssembler.NEG = "neg";
openfl_utils_AGALMiniAssembler.SAT = "sat";
openfl_utils_AGALMiniAssembler.M33 = "m33";
openfl_utils_AGALMiniAssembler.M44 = "m44";
openfl_utils_AGALMiniAssembler.M34 = "m34";
openfl_utils_AGALMiniAssembler.DDX = "ddx";
openfl_utils_AGALMiniAssembler.DDY = "ddy";
openfl_utils_AGALMiniAssembler.IFE = "ife";
openfl_utils_AGALMiniAssembler.INE = "ine";
openfl_utils_AGALMiniAssembler.IFG = "ifg";
openfl_utils_AGALMiniAssembler.IFL = "ifl";
openfl_utils_AGALMiniAssembler.IEG = "ieg";
openfl_utils_AGALMiniAssembler.IEL = "iel";
openfl_utils_AGALMiniAssembler.ELS = "els";
openfl_utils_AGALMiniAssembler.EIF = "eif";
openfl_utils_AGALMiniAssembler.TED = "ted";
openfl_utils_AGALMiniAssembler.KIL = "kil";
openfl_utils_AGALMiniAssembler.TEX = "tex";
openfl_utils_AGALMiniAssembler.SGE = "sge";
openfl_utils_AGALMiniAssembler.SLT = "slt";
openfl_utils_AGALMiniAssembler.SGN = "sgn";
openfl_utils_AGALMiniAssembler.SEQ = "seq";
openfl_utils_AGALMiniAssembler.SNE = "sne";
openfl_utils_AGALMiniAssembler.VA = "va";
openfl_utils_AGALMiniAssembler.VC = "vc";
openfl_utils_AGALMiniAssembler.VT = "vt";
openfl_utils_AGALMiniAssembler.VO = "vo";
openfl_utils_AGALMiniAssembler.VI = "vi";
openfl_utils_AGALMiniAssembler.FC = "fc";
openfl_utils_AGALMiniAssembler.FT = "ft";
openfl_utils_AGALMiniAssembler.FS = "fs";
openfl_utils_AGALMiniAssembler.FO = "fo";
openfl_utils_AGALMiniAssembler.FD = "fd";
openfl_utils_AGALMiniAssembler.IID = "iid";
openfl_utils_AGALMiniAssembler.D2 = "2d";
openfl_utils_AGALMiniAssembler.D3 = "3d";
openfl_utils_AGALMiniAssembler.CUBE = "cube";
openfl_utils_AGALMiniAssembler.MIPNEAREST = "mipnearest";
openfl_utils_AGALMiniAssembler.MIPLINEAR = "miplinear";
openfl_utils_AGALMiniAssembler.MIPNONE = "mipnone";
openfl_utils_AGALMiniAssembler.NOMIP = "nomip";
openfl_utils_AGALMiniAssembler.NEAREST = "nearest";
openfl_utils_AGALMiniAssembler.LINEAR = "linear";
openfl_utils_AGALMiniAssembler.ANISOTROPIC2X = "anisotropic2x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC4X = "anisotropic4x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC8X = "anisotropic8x";
openfl_utils_AGALMiniAssembler.ANISOTROPIC16X = "anisotropic16x";
openfl_utils_AGALMiniAssembler.CENTROID = "centroid";
openfl_utils_AGALMiniAssembler.SINGLE = "single";
openfl_utils_AGALMiniAssembler.IGNORESAMPLER = "ignoresampler";
openfl_utils_AGALMiniAssembler.REPEAT = "repeat";
openfl_utils_AGALMiniAssembler.WRAP = "wrap";
openfl_utils_AGALMiniAssembler.CLAMP = "clamp";
openfl_utils_AGALMiniAssembler.REPEAT_U_CLAMP_V = "repeat_u_clamp_v";
openfl_utils_AGALMiniAssembler.CLAMP_U_REPEAT_V = "clamp_u_repeat_v";
openfl_utils_AGALMiniAssembler.RGBA = "rgba";
openfl_utils_AGALMiniAssembler.COMPRESSED = "compressed";
openfl_utils_AGALMiniAssembler.COMPRESSEDALPHA = "compressedalpha";
openfl_utils_AGALMiniAssembler.DXT1 = "dxt1";
openfl_utils_AGALMiniAssembler.DXT5 = "dxt5";
openfl_utils_AGALMiniAssembler.VIDEO = "video";
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = 10;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__bytePointer = (function($this) {
	var $r;
	var this1 = new lime_utils_BytePointerData(null,0);
	$r = this1;
	return $r;
}(this));
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
